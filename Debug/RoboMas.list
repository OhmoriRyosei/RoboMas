
RoboMas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800d9b8  0800d9b8  0001d9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da68  0800da68  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800da68  0800da68  0001da68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da70  0800da70  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da70  0800da70  0001da70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da74  0800da74  0001da74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800da78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000160  0800dbd8  00020160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000200  0800dc78  00020200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009688  200002a0  0800dd18  000202a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20009928  0800dd18  00029928  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002a21f  00000000  00000000  00020311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006110  00000000  00000000  0004a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000020f8  00000000  00000000  00050640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001955  00000000  00000000  00052738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e5f0  00000000  00000000  0005408d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000290c2  00000000  00000000  0008267d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001132c9  00000000  00000000  000ab73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008c28  00000000  00000000  001bea08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005e  00000000  00000000  001c7630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002a0 	.word	0x200002a0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d9a0 	.word	0x0800d9a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002a4 	.word	0x200002a4
 800023c:	0800d9a0 	.word	0x0800d9a0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <MX_CAN1_Init+0x64>)
 8000542:	4a18      	ldr	r2, [pc, #96]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000544:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000546:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <MX_CAN1_Init+0x64>)
 8000548:	2206      	movs	r2, #6
 800054a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800054c:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_CAN1_Init+0x64>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <MX_CAN1_Init+0x64>)
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_CAN1_Init+0x64>)
 800055a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800055e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_CAN1_Init+0x64>)
 8000562:	2200      	movs	r2, #0
 8000564:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_CAN1_Init+0x64>)
 8000568:	2200      	movs	r2, #0
 800056a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_CAN1_Init+0x64>)
 800056e:	2200      	movs	r2, #0
 8000570:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <MX_CAN1_Init+0x64>)
 8000574:	2200      	movs	r2, #0
 8000576:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_CAN1_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <MX_CAN1_Init+0x64>)
 8000580:	2200      	movs	r2, #0
 8000582:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <MX_CAN1_Init+0x64>)
 8000586:	2201      	movs	r2, #1
 8000588:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_CAN1_Init+0x64>)
 800058c:	f000 fdb4 	bl	80010f8 <HAL_CAN_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000596:	f000 fae9 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200002bc 	.word	0x200002bc
 80005a4:	40006400 	.word	0x40006400

080005a8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a23      	ldr	r2, [pc, #140]	; (8000654 <HAL_CAN_MspInit+0xac>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d13f      	bne.n	800064a <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <HAL_CAN_MspInit+0xb0>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	4a22      	ldr	r2, [pc, #136]	; (8000658 <HAL_CAN_MspInit+0xb0>)
 80005d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d4:	6413      	str	r3, [r2, #64]	; 0x40
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <HAL_CAN_MspInit+0xb0>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <HAL_CAN_MspInit+0xb0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <HAL_CAN_MspInit+0xb0>)
 80005e8:	f043 0308 	orr.w	r3, r3, #8
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <HAL_CAN_MspInit+0xb0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0308 	and.w	r3, r3, #8
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005fa:	2303      	movs	r3, #3
 80005fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	2302      	movs	r3, #2
 8000600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000606:	2303      	movs	r3, #3
 8000608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800060a:	2309      	movs	r3, #9
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <HAL_CAN_MspInit+0xb4>)
 8000616:	f002 f827 	bl	8002668 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2105      	movs	r1, #5
 800061e:	2013      	movs	r0, #19
 8000620:	f001 f956 	bl	80018d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000624:	2013      	movs	r0, #19
 8000626:	f001 f96f 	bl	8001908 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2105      	movs	r1, #5
 800062e:	2014      	movs	r0, #20
 8000630:	f001 f94e 	bl	80018d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000634:	2014      	movs	r0, #20
 8000636:	f001 f967 	bl	8001908 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2105      	movs	r1, #5
 800063e:	2015      	movs	r0, #21
 8000640:	f001 f946 	bl	80018d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000644:	2015      	movs	r0, #21
 8000646:	f001 f95f 	bl	8001908 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800064a:	bf00      	nop
 800064c:	3728      	adds	r7, #40	; 0x28
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40006400 	.word	0x40006400
 8000658:	40023800 	.word	0x40023800
 800065c:	40020c00 	.word	0x40020c00

08000660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_DMA_Init+0x48>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <MX_DMA_Init+0x48>)
 800066c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_DMA_Init+0x48>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2105      	movs	r1, #5
 8000682:	200c      	movs	r0, #12
 8000684:	f001 f924 	bl	80018d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000688:	200c      	movs	r0, #12
 800068a:	f001 f93d 	bl	8001908 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2105      	movs	r1, #5
 8000692:	200e      	movs	r0, #14
 8000694:	f001 f91c 	bl	80018d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000698:	200e      	movs	r0, #14
 800069a:	f001 f935 	bl	8001908 <HAL_NVIC_EnableIRQ>

}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800

080006ac <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_ETH_Init+0x84>)
 80006b2:	4a20      	ldr	r2, [pc, #128]	; (8000734 <MX_ETH_Init+0x88>)
 80006b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_ETH_Init+0x8c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_ETH_Init+0x8c>)
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_ETH_Init+0x8c>)
 80006c4:	22e1      	movs	r2, #225	; 0xe1
 80006c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_ETH_Init+0x8c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_ETH_Init+0x8c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_ETH_Init+0x8c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_ETH_Init+0x84>)
 80006dc:	4a16      	ldr	r2, [pc, #88]	; (8000738 <MX_ETH_Init+0x8c>)
 80006de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_ETH_Init+0x84>)
 80006e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_ETH_Init+0x84>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	; (800073c <MX_ETH_Init+0x90>)
 80006ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_ETH_Init+0x84>)
 80006f0:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_ETH_Init+0x94>)
 80006f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_ETH_Init+0x84>)
 80006f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <MX_ETH_Init+0x84>)
 80006fe:	f001 fc8d 	bl	800201c <HAL_ETH_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 fa30 	bl	8000b6c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800070c:	2238      	movs	r2, #56	; 0x38
 800070e:	2100      	movs	r1, #0
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <MX_ETH_Init+0x98>)
 8000712:	f00d f8a7 	bl	800d864 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_ETH_Init+0x98>)
 8000718:	2221      	movs	r2, #33	; 0x21
 800071a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_ETH_Init+0x98>)
 800071e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000722:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_ETH_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000031c 	.word	0x2000031c
 8000734:	40028000 	.word	0x40028000
 8000738:	200003cc 	.word	0x200003cc
 800073c:	20000200 	.word	0x20000200
 8000740:	20000160 	.word	0x20000160
 8000744:	200002e4 	.word	0x200002e4

08000748 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	; 0x38
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a4e      	ldr	r2, [pc, #312]	; (80008a0 <HAL_ETH_MspInit+0x158>)
 8000766:	4293      	cmp	r3, r2
 8000768:	f040 8096 	bne.w	8000898 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800076c:	4b4d      	ldr	r3, [pc, #308]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	4a4c      	ldr	r2, [pc, #304]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 8000772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000776:	6313      	str	r3, [r2, #48]	; 0x30
 8000778:	4b4a      	ldr	r3, [pc, #296]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	4a46      	ldr	r2, [pc, #280]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 800078a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800078e:	6313      	str	r3, [r2, #48]	; 0x30
 8000790:	4b44      	ldr	r3, [pc, #272]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000798:	61fb      	str	r3, [r7, #28]
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	4b41      	ldr	r3, [pc, #260]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	4a40      	ldr	r2, [pc, #256]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 80007a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80007a6:	6313      	str	r3, [r2, #48]	; 0x30
 80007a8:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b4:	4b3b      	ldr	r3, [pc, #236]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	4a3a      	ldr	r2, [pc, #232]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	6313      	str	r3, [r2, #48]	; 0x30
 80007c0:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b35      	ldr	r3, [pc, #212]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	4a34      	ldr	r2, [pc, #208]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 80007d2:	f043 0301 	orr.w	r3, r3, #1
 80007d6:	6313      	str	r3, [r2, #48]	; 0x30
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e4:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a2e      	ldr	r2, [pc, #184]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
 80007f0:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000800:	4a28      	ldr	r2, [pc, #160]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 8000802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000806:	6313      	str	r3, [r2, #48]	; 0x30
 8000808:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <HAL_ETH_MspInit+0x15c>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000814:	2332      	movs	r3, #50	; 0x32
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000824:	230b      	movs	r3, #11
 8000826:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082c:	4619      	mov	r1, r3
 800082e:	481e      	ldr	r0, [pc, #120]	; (80008a8 <HAL_ETH_MspInit+0x160>)
 8000830:	f001 ff1a 	bl	8002668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000834:	2386      	movs	r3, #134	; 0x86
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000844:	230b      	movs	r3, #11
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	4619      	mov	r1, r3
 800084e:	4817      	ldr	r0, [pc, #92]	; (80008ac <HAL_ETH_MspInit+0x164>)
 8000850:	f001 ff0a 	bl	8002668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000866:	230b      	movs	r3, #11
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	4619      	mov	r1, r3
 8000870:	480f      	ldr	r0, [pc, #60]	; (80008b0 <HAL_ETH_MspInit+0x168>)
 8000872:	f001 fef9 	bl	8002668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000876:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000888:	230b      	movs	r3, #11
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	4808      	ldr	r0, [pc, #32]	; (80008b4 <HAL_ETH_MspInit+0x16c>)
 8000894:	f001 fee8 	bl	8002668 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000898:	bf00      	nop
 800089a:	3738      	adds	r7, #56	; 0x38
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40028000 	.word	0x40028000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40020400 	.word	0x40020400
 80008b4:	40021800 	.word	0x40021800

080008b8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <MX_FREERTOS_Init+0x18>)
 80008be:	2100      	movs	r1, #0
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_FREERTOS_Init+0x1c>)
 80008c2:	f009 fc45 	bl	800a150 <osThreadNew>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <MX_FREERTOS_Init+0x20>)
 80008ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	0800da24 	.word	0x0800da24
 80008d4:	080008dd 	.word	0x080008dd
 80008d8:	200003d4 	.word	0x200003d4

080008dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80008e4:	f00c f992 	bl	800cc0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f009 fcd7 	bl	800a29c <osDelay>
 80008ee:	e7fb      	b.n	80008e8 <StartDefaultTask+0xc>

080008f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b47      	ldr	r3, [pc, #284]	; (8000a24 <MX_GPIO_Init+0x134>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a46      	ldr	r2, [pc, #280]	; (8000a24 <MX_GPIO_Init+0x134>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b44      	ldr	r3, [pc, #272]	; (8000a24 <MX_GPIO_Init+0x134>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	4b41      	ldr	r3, [pc, #260]	; (8000a24 <MX_GPIO_Init+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a40      	ldr	r2, [pc, #256]	; (8000a24 <MX_GPIO_Init+0x134>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b3e      	ldr	r3, [pc, #248]	; (8000a24 <MX_GPIO_Init+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b3b      	ldr	r3, [pc, #236]	; (8000a24 <MX_GPIO_Init+0x134>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a3a      	ldr	r2, [pc, #232]	; (8000a24 <MX_GPIO_Init+0x134>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b38      	ldr	r3, [pc, #224]	; (8000a24 <MX_GPIO_Init+0x134>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <MX_GPIO_Init+0x134>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a34      	ldr	r2, [pc, #208]	; (8000a24 <MX_GPIO_Init+0x134>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <MX_GPIO_Init+0x134>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <MX_GPIO_Init+0x134>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a2e      	ldr	r2, [pc, #184]	; (8000a24 <MX_GPIO_Init+0x134>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <MX_GPIO_Init+0x134>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097e:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <MX_GPIO_Init+0x134>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <MX_GPIO_Init+0x134>)
 8000984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_GPIO_Init+0x134>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f244 0181 	movw	r1, #16513	; 0x4081
 800099c:	4822      	ldr	r0, [pc, #136]	; (8000a28 <MX_GPIO_Init+0x138>)
 800099e:	f002 f80f 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	4821      	ldr	r0, [pc, #132]	; (8000a2c <MX_GPIO_Init+0x13c>)
 80009a8:	f002 f80a 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	481b      	ldr	r0, [pc, #108]	; (8000a30 <MX_GPIO_Init+0x140>)
 80009c4:	f001 fe50 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009c8:	f244 0381 	movw	r3, #16513	; 0x4081
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4811      	ldr	r0, [pc, #68]	; (8000a28 <MX_GPIO_Init+0x138>)
 80009e2:	f001 fe41 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009e6:	2340      	movs	r3, #64	; 0x40
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <MX_GPIO_Init+0x13c>)
 80009fe:	f001 fe33 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_GPIO_Init+0x13c>)
 8000a16:	f001 fe27 	bl	8002668 <HAL_GPIO_Init>

}
 8000a1a:	bf00      	nop
 8000a1c:	3730      	adds	r7, #48	; 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	40021800 	.word	0x40021800
 8000a30:	40020800 	.word	0x40020800

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a38:	f000 fb0d 	bl	8001056 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3c:	f000 f812 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a40:	f7ff ff56 	bl	80008f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a44:	f7ff fe0c 	bl	8000660 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a48:	f000 f9dc 	bl	8000e04 <MX_USART3_UART_Init>
  MX_ETH_Init();
 8000a4c:	f7ff fe2e 	bl	80006ac <MX_ETH_Init>
  MX_CAN1_Init();
 8000a50:	f7ff fd74 	bl	800053c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a54:	f009 fb12 	bl	800a07c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a58:	f7ff ff2e 	bl	80008b8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a5c:	f009 fb42 	bl	800a0e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <main+0x2c>
	...

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b094      	sub	sp, #80	; 0x50
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	2234      	movs	r2, #52	; 0x34
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f00c fef6 	bl	800d864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a88:	f003 fa6c 	bl	8003f64 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <SystemClock_Config+0xdc>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <SystemClock_Config+0xdc>)
 8000a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a96:	6413      	str	r3, [r2, #64]	; 0x40
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <SystemClock_Config+0xdc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <SystemClock_Config+0xe0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aac:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <SystemClock_Config+0xe0>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <SystemClock_Config+0xe0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aca:	2302      	movs	r3, #2
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ace:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ad8:	2360      	movs	r3, #96	; 0x60
 8000ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 fa99 	bl	8004024 <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000af8:	f000 f838 	bl	8000b6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000afc:	f003 fa42 	bl	8003f84 <HAL_PWREx_EnableOverDrive>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b06:	f000 f831 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	2103      	movs	r1, #3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 fd2a 	bl	8004580 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b32:	f000 f81b 	bl	8000b6c <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5a:	f000 fa89 	bl	8001070 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40010000 	.word	0x40010000

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <Error_Handler+0x8>
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	f06f 0001 	mvn.w	r0, #1
 8000bb6:	f000 fe8b 	bl	80018d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	; 0x30
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <HAL_InitTick+0xcc>)
 8000bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bdc:	4a2d      	ldr	r2, [pc, #180]	; (8000c94 <HAL_InitTick+0xcc>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6453      	str	r3, [r2, #68]	; 0x44
 8000be4:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <HAL_InitTick+0xcc>)
 8000be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf0:	f107 020c 	add.w	r2, r7, #12
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f003 fee6 	bl	80049cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c00:	f003 fed0 	bl	80049a4 <HAL_RCC_GetPCLK2Freq>
 8000c04:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <HAL_InitTick+0xd0>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9b      	lsrs	r3, r3, #18
 8000c10:	3b01      	subs	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <HAL_InitTick+0xd4>)
 8000c16:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <HAL_InitTick+0xd8>)
 8000c18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <HAL_InitTick+0xd4>)
 8000c1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c22:	4a1e      	ldr	r2, [pc, #120]	; (8000c9c <HAL_InitTick+0xd4>)
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <HAL_InitTick+0xd4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <HAL_InitTick+0xd4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_InitTick+0xd4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c3a:	4818      	ldr	r0, [pc, #96]	; (8000c9c <HAL_InitTick+0xd4>)
 8000c3c:	f004 fb20 	bl	8005280 <HAL_TIM_Base_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d11b      	bne.n	8000c86 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c4e:	4813      	ldr	r0, [pc, #76]	; (8000c9c <HAL_InitTick+0xd4>)
 8000c50:	f004 fb78 	bl	8005344 <HAL_TIM_Base_Start_IT>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d111      	bne.n	8000c86 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c62:	2019      	movs	r0, #25
 8000c64:	f000 fe50 	bl	8001908 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b0f      	cmp	r3, #15
 8000c6c:	d808      	bhi.n	8000c80 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	2019      	movs	r0, #25
 8000c74:	f000 fe2c 	bl	80018d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_InitTick+0xdc>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e002      	b.n	8000c86 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	431bde83 	.word	0x431bde83
 8000c9c:	20003314 	.word	0x20003314
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <DMA1_Stream1_IRQHandler+0x10>)
 8000cda:	f000 ff63 	bl	8001ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200033ec 	.word	0x200033ec

08000ce8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <DMA1_Stream3_IRQHandler+0x10>)
 8000cee:	f000 ff59 	bl	8001ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000344c 	.word	0x2000344c

08000cfc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <CAN1_TX_IRQHandler+0x10>)
 8000d02:	f000 faf4 	bl	80012ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200002bc 	.word	0x200002bc

08000d10 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <CAN1_RX0_IRQHandler+0x10>)
 8000d16:	f000 faea 	bl	80012ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200002bc 	.word	0x200002bc

08000d24 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <CAN1_RX1_IRQHandler+0x10>)
 8000d2a:	f000 fae0 	bl	80012ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200002bc 	.word	0x200002bc

08000d38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d3e:	f004 fb79 	bl	8005434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20003314 	.word	0x20003314

08000d4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <USART3_IRQHandler+0x10>)
 8000d52:	f004 fdc3 	bl	80058dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20003364 	.word	0x20003364

08000d60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <OTG_FS_IRQHandler+0x10>)
 8000d66:	f001 ff8a 	bl	8002c7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200092d8 	.word	0x200092d8

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f00c fd76 	bl	800d894 <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20080000 	.word	0x20080000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	20003360 	.word	0x20003360
 8000ddc:	20009928 	.word	0x20009928

08000de0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e0a:	4a15      	ldr	r2, [pc, #84]	; (8000e60 <MX_USART3_UART_Init+0x5c>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e48:	f004 fcfa 	bl	8005840 <HAL_UART_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e52:	f7ff fe8b 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20003364 	.word	0x20003364
 8000e60:	40004800 	.word	0x40004800

08000e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0ae      	sub	sp, #184	; 0xb8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2290      	movs	r2, #144	; 0x90
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f00c fced 	bl	800d864 <memset>
  if(uartHandle->Instance==USART3)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a56      	ldr	r2, [pc, #344]	; (8000fe8 <HAL_UART_MspInit+0x184>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	f040 80a4 	bne.w	8000fde <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 fdc3 	bl	8004a30 <HAL_RCCEx_PeriphCLKConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000eb0:	f7ff fe5c 	bl	8000b6c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb4:	4b4d      	ldr	r3, [pc, #308]	; (8000fec <HAL_UART_MspInit+0x188>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a4c      	ldr	r2, [pc, #304]	; (8000fec <HAL_UART_MspInit+0x188>)
 8000eba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b4a      	ldr	r3, [pc, #296]	; (8000fec <HAL_UART_MspInit+0x188>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ecc:	4b47      	ldr	r3, [pc, #284]	; (8000fec <HAL_UART_MspInit+0x188>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a46      	ldr	r2, [pc, #280]	; (8000fec <HAL_UART_MspInit+0x188>)
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed8:	4b44      	ldr	r3, [pc, #272]	; (8000fec <HAL_UART_MspInit+0x188>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ee4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000efe:	2307      	movs	r3, #7
 8000f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4839      	ldr	r0, [pc, #228]	; (8000ff0 <HAL_UART_MspInit+0x18c>)
 8000f0c:	f001 fbac 	bl	8002668 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000f10:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <HAL_UART_MspInit+0x190>)
 8000f12:	4a39      	ldr	r2, [pc, #228]	; (8000ff8 <HAL_UART_MspInit+0x194>)
 8000f14:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000f16:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <HAL_UART_MspInit+0x190>)
 8000f18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f1c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1e:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <HAL_UART_MspInit+0x190>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f24:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <HAL_UART_MspInit+0x190>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2a:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <HAL_UART_MspInit+0x190>)
 8000f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f30:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <HAL_UART_MspInit+0x190>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <HAL_UART_MspInit+0x190>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <HAL_UART_MspInit+0x190>)
 8000f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f44:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <HAL_UART_MspInit+0x190>)
 8000f48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f4c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f4e:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <HAL_UART_MspInit+0x190>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f54:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <HAL_UART_MspInit+0x190>)
 8000f56:	f000 fce5 	bl	8001924 <HAL_DMA_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8000f60:	f7ff fe04 	bl	8000b6c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <HAL_UART_MspInit+0x190>)
 8000f68:	675a      	str	r2, [r3, #116]	; 0x74
 8000f6a:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <HAL_UART_MspInit+0x190>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <HAL_UART_MspInit+0x198>)
 8000f72:	4a23      	ldr	r2, [pc, #140]	; (8001000 <HAL_UART_MspInit+0x19c>)
 8000f74:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000f76:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <HAL_UART_MspInit+0x198>)
 8000f78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f7c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <HAL_UART_MspInit+0x198>)
 8000f80:	2240      	movs	r2, #64	; 0x40
 8000f82:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_UART_MspInit+0x198>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <HAL_UART_MspInit+0x198>)
 8000f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f90:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <HAL_UART_MspInit+0x198>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_UART_MspInit+0x198>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_UART_MspInit+0x198>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_UART_MspInit+0x198>)
 8000fa6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000faa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_UART_MspInit+0x198>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000fb2:	4812      	ldr	r0, [pc, #72]	; (8000ffc <HAL_UART_MspInit+0x198>)
 8000fb4:	f000 fcb6 	bl	8001924 <HAL_DMA_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8000fbe:	f7ff fdd5 	bl	8000b6c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <HAL_UART_MspInit+0x198>)
 8000fc6:	671a      	str	r2, [r3, #112]	; 0x70
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <HAL_UART_MspInit+0x198>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	2027      	movs	r0, #39	; 0x27
 8000fd4:	f000 fc7c 	bl	80018d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fd8:	2027      	movs	r0, #39	; 0x27
 8000fda:	f000 fc95 	bl	8001908 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	37b8      	adds	r7, #184	; 0xb8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020c00 	.word	0x40020c00
 8000ff4:	200033ec 	.word	0x200033ec
 8000ff8:	40026028 	.word	0x40026028
 8000ffc:	2000344c 	.word	0x2000344c
 8001000:	40026058 	.word	0x40026058

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800103c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800100a:	490e      	ldr	r1, [pc, #56]	; (8001044 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001020:	4c0b      	ldr	r4, [pc, #44]	; (8001050 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800102e:	f7ff fed7 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001032:	f00c fc35 	bl	800d8a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fcfd 	bl	8000a34 <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001048:	0800da78 	.word	0x0800da78
  ldr r2, =_sbss
 800104c:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8001050:	20009928 	.word	0x20009928

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>

08001056 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105a:	2003      	movs	r0, #3
 800105c:	f000 fc2d 	bl	80018ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001060:	200f      	movs	r0, #15
 8001062:	f7ff fdb1 	bl	8000bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001066:	f7ff fd87 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008
 8001094:	200034ac 	.word	0x200034ac

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200034ac 	.word	0x200034ac

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ffee 	bl	8001098 <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_Delay+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d6:	bf00      	nop
 80010d8:	f7ff ffde 	bl	8001098 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000008 	.word	0x20000008

080010f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e0ed      	b.n	80012e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fa46 	bl	80005a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0201 	orr.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800112c:	f7ff ffb4 	bl	8001098 <HAL_GetTick>
 8001130:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001132:	e012      	b.n	800115a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001134:	f7ff ffb0 	bl	8001098 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b0a      	cmp	r3, #10
 8001140:	d90b      	bls.n	800115a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2205      	movs	r2, #5
 8001152:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e0c5      	b.n	80012e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0e5      	beq.n	8001134 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0202 	bic.w	r2, r2, #2
 8001176:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001178:	f7ff ff8e 	bl	8001098 <HAL_GetTick>
 800117c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800117e:	e012      	b.n	80011a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001180:	f7ff ff8a 	bl	8001098 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b0a      	cmp	r3, #10
 800118c:	d90b      	bls.n	80011a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2205      	movs	r2, #5
 800119e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e09f      	b.n	80012e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1e5      	bne.n	8001180 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7e1b      	ldrb	r3, [r3, #24]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d108      	bne.n	80011ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e007      	b.n	80011de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7e5b      	ldrb	r3, [r3, #25]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d108      	bne.n	80011f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e007      	b.n	8001208 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001206:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7e9b      	ldrb	r3, [r3, #26]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d108      	bne.n	8001222 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0220 	orr.w	r2, r2, #32
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e007      	b.n	8001232 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0220 	bic.w	r2, r2, #32
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7edb      	ldrb	r3, [r3, #27]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d108      	bne.n	800124c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0210 	bic.w	r2, r2, #16
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e007      	b.n	800125c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0210 	orr.w	r2, r2, #16
 800125a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7f1b      	ldrb	r3, [r3, #28]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d108      	bne.n	8001276 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0208 	orr.w	r2, r2, #8
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e007      	b.n	8001286 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0208 	bic.w	r2, r2, #8
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7f5b      	ldrb	r3, [r3, #29]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d108      	bne.n	80012a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 0204 	orr.w	r2, r2, #4
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e007      	b.n	80012b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0204 	bic.w	r2, r2, #4
 80012ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	ea42 0103 	orr.w	r1, r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b08a      	sub	sp, #40	; 0x28
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d07c      	beq.n	800142e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d023      	beq.n	8001386 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2201      	movs	r2, #1
 8001344:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 f983 	bl	800165c <HAL_CAN_TxMailbox0CompleteCallback>
 8001356:	e016      	b.n	8001386 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
 800136a:	e00c      	b.n	8001386 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
 800137e:	e002      	b.n	8001386 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f989 	bl	8001698 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d024      	beq.n	80013da <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001398:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f963 	bl	8001670 <HAL_CAN_TxMailbox1CompleteCallback>
 80013aa:	e016      	b.n	80013da <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
 80013be:	e00c      	b.n	80013da <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
 80013d2:	e002      	b.n	80013da <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f969 	bl	80016ac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d024      	beq.n	800142e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f943 	bl	8001684 <HAL_CAN_TxMailbox2CompleteCallback>
 80013fe:	e016      	b.n	800142e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d004      	beq.n	8001414 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
 8001412:	e00c      	b.n	800142e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
 8001426:	e002      	b.n	800142e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f949 	bl	80016c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00c      	beq.n	8001452 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2b00      	cmp	r3, #0
 8001440:	d007      	beq.n	8001452 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001448:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2210      	movs	r2, #16
 8001450:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00b      	beq.n	8001474 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2208      	movs	r2, #8
 800146c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f93a 	bl	80016e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d009      	beq.n	8001492 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f921 	bl	80016d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001492:	6a3b      	ldr	r3, [r7, #32]
 8001494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00c      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2210      	movs	r2, #16
 80014b4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	f003 0320 	and.w	r3, r3, #32
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00b      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2208      	movs	r2, #8
 80014d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f91c 	bl	8001710 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d009      	beq.n	80014f6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f903 	bl	80016fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00b      	beq.n	8001518 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2210      	movs	r2, #16
 8001510:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f906 	bl	8001724 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00b      	beq.n	800153a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2208      	movs	r2, #8
 8001532:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f8ff 	bl	8001738 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d07b      	beq.n	800163c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	d072      	beq.n	8001634 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d043      	beq.n	8001634 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d03e      	beq.n	8001634 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015bc:	2b60      	cmp	r3, #96	; 0x60
 80015be:	d02b      	beq.n	8001618 <HAL_CAN_IRQHandler+0x32a>
 80015c0:	2b60      	cmp	r3, #96	; 0x60
 80015c2:	d82e      	bhi.n	8001622 <HAL_CAN_IRQHandler+0x334>
 80015c4:	2b50      	cmp	r3, #80	; 0x50
 80015c6:	d022      	beq.n	800160e <HAL_CAN_IRQHandler+0x320>
 80015c8:	2b50      	cmp	r3, #80	; 0x50
 80015ca:	d82a      	bhi.n	8001622 <HAL_CAN_IRQHandler+0x334>
 80015cc:	2b40      	cmp	r3, #64	; 0x40
 80015ce:	d019      	beq.n	8001604 <HAL_CAN_IRQHandler+0x316>
 80015d0:	2b40      	cmp	r3, #64	; 0x40
 80015d2:	d826      	bhi.n	8001622 <HAL_CAN_IRQHandler+0x334>
 80015d4:	2b30      	cmp	r3, #48	; 0x30
 80015d6:	d010      	beq.n	80015fa <HAL_CAN_IRQHandler+0x30c>
 80015d8:	2b30      	cmp	r3, #48	; 0x30
 80015da:	d822      	bhi.n	8001622 <HAL_CAN_IRQHandler+0x334>
 80015dc:	2b10      	cmp	r3, #16
 80015de:	d002      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x2f8>
 80015e0:	2b20      	cmp	r3, #32
 80015e2:	d005      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015e4:	e01d      	b.n	8001622 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	f043 0308 	orr.w	r3, r3, #8
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ee:	e019      	b.n	8001624 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015f8:	e014      	b.n	8001624 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	f043 0320 	orr.w	r3, r3, #32
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001602:	e00f      	b.n	8001624 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800160c:	e00a      	b.n	8001624 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001616:	e005      	b.n	8001624 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001620:	e000      	b.n	8001624 <HAL_CAN_IRQHandler+0x336>
            break;
 8001622:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699a      	ldr	r2, [r3, #24]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001632:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2204      	movs	r2, #4
 800163a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f87c 	bl	800174c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	4313      	orrs	r3, r2
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	05fa0000 	.word	0x05fa0000

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	; (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ff4c 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e2:	f7ff ff61 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 80018e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	6978      	ldr	r0, [r7, #20]
 80018ee:	f7ff ffb1 	bl	8001854 <NVIC_EncodePriority>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff80 	bl	8001800 <__NVIC_SetPriority>
}
 8001900:	bf00      	nop
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff54 	bl	80017c4 <__NVIC_EnableIRQ>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff fbb2 	bl	8001098 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e099      	b.n	8001a74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2202      	movs	r2, #2
 8001944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001960:	e00f      	b.n	8001982 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001962:	f7ff fb99 	bl	8001098 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b05      	cmp	r3, #5
 800196e:	d908      	bls.n	8001982 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2220      	movs	r2, #32
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2203      	movs	r2, #3
 800197a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e078      	b.n	8001a74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e8      	bne.n	8001962 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	4b38      	ldr	r3, [pc, #224]	; (8001a7c <HAL_DMA_Init+0x158>)
 800199c:	4013      	ands	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d107      	bne.n	80019ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	4313      	orrs	r3, r2
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f023 0307 	bic.w	r3, r3, #7
 8001a02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d117      	bne.n	8001a46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00e      	beq.n	8001a46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 fa7b 	bl	8001f24 <DMA_CheckFifoParam>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2240      	movs	r2, #64	; 0x40
 8001a38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a42:	2301      	movs	r3, #1
 8001a44:	e016      	b.n	8001a74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fa32 	bl	8001eb8 <DMA_CalcBaseAndBitshift>
 8001a54:	4603      	mov	r3, r0
 8001a56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5c:	223f      	movs	r2, #63	; 0x3f
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	e010803f 	.word	0xe010803f

08001a80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a8e:	f7ff fb03 	bl	8001098 <HAL_GetTick>
 8001a92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d008      	beq.n	8001ab2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2280      	movs	r2, #128	; 0x80
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e052      	b.n	8001b58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0216 	bic.w	r2, r2, #22
 8001ac0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d103      	bne.n	8001ae2 <HAL_DMA_Abort+0x62>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0208 	bic.w	r2, r2, #8
 8001af0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b02:	e013      	b.n	8001b2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b04:	f7ff fac8 	bl	8001098 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	d90c      	bls.n	8001b2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2220      	movs	r2, #32
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e015      	b.n	8001b58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1e4      	bne.n	8001b04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3e:	223f      	movs	r2, #63	; 0x3f
 8001b40:	409a      	lsls	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d004      	beq.n	8001b7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2280      	movs	r2, #128	; 0x80
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00c      	b.n	8001b98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2205      	movs	r2, #5
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001bb0:	4b8e      	ldr	r3, [pc, #568]	; (8001dec <HAL_DMA_IRQHandler+0x248>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a8e      	ldr	r2, [pc, #568]	; (8001df0 <HAL_DMA_IRQHandler+0x24c>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0a9b      	lsrs	r3, r3, #10
 8001bbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bce:	2208      	movs	r2, #8
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d01a      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0204 	bic.w	r2, r2, #4
 8001bf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c14:	2201      	movs	r2, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d012      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c32:	2201      	movs	r2, #1
 8001c34:	409a      	lsls	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	f043 0202 	orr.w	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d012      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	2204      	movs	r2, #4
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	f043 0204 	orr.w	r2, r3, #4
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	2210      	movs	r2, #16
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d043      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d03c      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d018      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d108      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d024      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
 8001cd2:	e01f      	b.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01b      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
 8001ce4:	e016      	b.n	8001d14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d107      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0208 	bic.w	r2, r2, #8
 8001d02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	2220      	movs	r2, #32
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 808f 	beq.w	8001e44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8087 	beq.w	8001e44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d136      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0216 	bic.w	r2, r2, #22
 8001d5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x1da>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0208 	bic.w	r2, r2, #8
 8001d8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d92:	223f      	movs	r2, #63	; 0x3f
 8001d94:	409a      	lsls	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d07e      	beq.n	8001eb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	4798      	blx	r3
        }
        return;
 8001dba:	e079      	b.n	8001eb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01d      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10d      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d031      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
 8001de8:	e02c      	b.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000
 8001df0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d023      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	e01e      	b.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10f      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0210 	bic.w	r2, r2, #16
 8001e22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d032      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2205      	movs	r2, #5
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d307      	bcc.n	8001e8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f2      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x2cc>
 8001e8a:	e000      	b.n	8001e8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	4798      	blx	r3
 8001eae:	e000      	b.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001eb0:	bf00      	nop
    }
  }
}
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3b10      	subs	r3, #16
 8001ec8:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <DMA_CalcBaseAndBitshift+0x60>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <DMA_CalcBaseAndBitshift+0x64>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d908      	bls.n	8001ef8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <DMA_CalcBaseAndBitshift+0x68>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	1d1a      	adds	r2, r3, #4
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	659a      	str	r2, [r3, #88]	; 0x58
 8001ef6:	e006      	b.n	8001f06 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <DMA_CalcBaseAndBitshift+0x68>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	aaaaaaab 	.word	0xaaaaaaab
 8001f1c:	0800da60 	.word	0x0800da60
 8001f20:	fffffc00 	.word	0xfffffc00

08001f24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d11f      	bne.n	8001f7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d856      	bhi.n	8001ff2 <DMA_CheckFifoParam+0xce>
 8001f44:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <DMA_CheckFifoParam+0x28>)
 8001f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4a:	bf00      	nop
 8001f4c:	08001f5d 	.word	0x08001f5d
 8001f50:	08001f6f 	.word	0x08001f6f
 8001f54:	08001f5d 	.word	0x08001f5d
 8001f58:	08001ff3 	.word	0x08001ff3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d046      	beq.n	8001ff6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f6c:	e043      	b.n	8001ff6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f76:	d140      	bne.n	8001ffa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f7c:	e03d      	b.n	8001ffa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f86:	d121      	bne.n	8001fcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d837      	bhi.n	8001ffe <DMA_CheckFifoParam+0xda>
 8001f8e:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <DMA_CheckFifoParam+0x70>)
 8001f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fab 	.word	0x08001fab
 8001f9c:	08001fa5 	.word	0x08001fa5
 8001fa0:	08001fbd 	.word	0x08001fbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa8:	e030      	b.n	800200c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d025      	beq.n	8002002 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fba:	e022      	b.n	8002002 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fc4:	d11f      	bne.n	8002006 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fca:	e01c      	b.n	8002006 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d903      	bls.n	8001fda <DMA_CheckFifoParam+0xb6>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d003      	beq.n	8001fe0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fd8:	e018      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8001fde:	e015      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00e      	beq.n	800200a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff0:	e00b      	b.n	800200a <DMA_CheckFifoParam+0xe6>
      break;
 8001ff2:	bf00      	nop
 8001ff4:	e00a      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      break;
 8001ff6:	bf00      	nop
 8001ff8:	e008      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      break;
 8001ffa:	bf00      	nop
 8001ffc:	e006      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      break;
 8001ffe:	bf00      	nop
 8002000:	e004      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      break;
 8002002:	bf00      	nop
 8002004:	e002      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      break;   
 8002006:	bf00      	nop
 8002008:	e000      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      break;
 800200a:	bf00      	nop
    }
  } 
  
  return status; 
 800200c:	7bfb      	ldrb	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop

0800201c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e06a      	b.n	8002104 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2223      	movs	r2, #35	; 0x23
 800203c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7fe fb81 	bl	8000748 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	4b31      	ldr	r3, [pc, #196]	; (800210c <HAL_ETH_Init+0xf0>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	4a30      	ldr	r2, [pc, #192]	; (800210c <HAL_ETH_Init+0xf0>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6453      	str	r3, [r2, #68]	; 0x44
 8002052:	4b2e      	ldr	r3, [pc, #184]	; (800210c <HAL_ETH_Init+0xf0>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800205e:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <HAL_ETH_Init+0xf4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a2b      	ldr	r2, [pc, #172]	; (8002110 <HAL_ETH_Init+0xf4>)
 8002064:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002068:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800206a:	4b29      	ldr	r3, [pc, #164]	; (8002110 <HAL_ETH_Init+0xf4>)
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	4927      	ldr	r1, [pc, #156]	; (8002110 <HAL_ETH_Init+0xf4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <HAL_ETH_Init+0xf4>)
 800207a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002092:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002094:	f7ff f800 	bl	8001098 <HAL_GetTick>
 8002098:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800209a:	e011      	b.n	80020c0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800209c:	f7fe fffc 	bl	8001098 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020aa:	d909      	bls.n	80020c0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2204      	movs	r2, #4
 80020b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	22e0      	movs	r2, #224	; 0xe0
 80020b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e021      	b.n	8002104 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e4      	bne.n	800209c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f958 	bl	8002388 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f9ff 	bl	80024dc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fa55 	bl	800258e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	461a      	mov	r2, r3
 80020ea:	2100      	movs	r1, #0
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f9bd 	bl	800246c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2210      	movs	r2, #16
 80020fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	40013800 	.word	0x40013800

08002114 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4b51      	ldr	r3, [pc, #324]	; (8002270 <ETH_SetMACConfig+0x15c>)
 800212a:	4013      	ands	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	7c1b      	ldrb	r3, [r3, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <ETH_SetMACConfig+0x28>
 8002136:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800213a:	e000      	b.n	800213e <ETH_SetMACConfig+0x2a>
 800213c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	7c5b      	ldrb	r3, [r3, #17]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <ETH_SetMACConfig+0x38>
 8002146:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800214a:	e000      	b.n	800214e <ETH_SetMACConfig+0x3a>
 800214c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800214e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002154:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	7fdb      	ldrb	r3, [r3, #31]
 800215a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800215c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002162:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	7f92      	ldrb	r2, [r2, #30]
 8002168:	2a00      	cmp	r2, #0
 800216a:	d102      	bne.n	8002172 <ETH_SetMACConfig+0x5e>
 800216c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002170:	e000      	b.n	8002174 <ETH_SetMACConfig+0x60>
 8002172:	2200      	movs	r2, #0
                        macconf->Speed |
 8002174:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	7f1b      	ldrb	r3, [r3, #28]
 800217a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800217c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002182:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	791b      	ldrb	r3, [r3, #4]
 8002188:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800218a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002192:	2a00      	cmp	r2, #0
 8002194:	d102      	bne.n	800219c <ETH_SetMACConfig+0x88>
 8002196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800219a:	e000      	b.n	800219e <ETH_SetMACConfig+0x8a>
 800219c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800219e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	7bdb      	ldrb	r3, [r3, #15]
 80021a4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021a6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021b4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021b6:	4313      	orrs	r3, r2
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ce:	2001      	movs	r0, #1
 80021d0:	f7fe ff6e 	bl	80010b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021ea:	4013      	ands	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80021fa:	2a00      	cmp	r2, #0
 80021fc:	d101      	bne.n	8002202 <ETH_SetMACConfig+0xee>
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	e000      	b.n	8002204 <ETH_SetMACConfig+0xf0>
 8002202:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002204:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800220a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002212:	2a01      	cmp	r2, #1
 8002214:	d101      	bne.n	800221a <ETH_SetMACConfig+0x106>
 8002216:	2208      	movs	r2, #8
 8002218:	e000      	b.n	800221c <ETH_SetMACConfig+0x108>
 800221a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800221c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002224:	2a01      	cmp	r2, #1
 8002226:	d101      	bne.n	800222c <ETH_SetMACConfig+0x118>
 8002228:	2204      	movs	r2, #4
 800222a:	e000      	b.n	800222e <ETH_SetMACConfig+0x11a>
 800222c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800222e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002236:	2a01      	cmp	r2, #1
 8002238:	d101      	bne.n	800223e <ETH_SetMACConfig+0x12a>
 800223a:	2202      	movs	r2, #2
 800223c:	e000      	b.n	8002240 <ETH_SetMACConfig+0x12c>
 800223e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002240:	4313      	orrs	r3, r2
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002258:	2001      	movs	r0, #1
 800225a:	f7fe ff29 	bl	80010b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	619a      	str	r2, [r3, #24]
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	ff20810f 	.word	0xff20810f

08002274 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <ETH_SetDMAConfig+0x110>)
 800228e:	4013      	ands	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	7b1b      	ldrb	r3, [r3, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <ETH_SetDMAConfig+0x2c>
 800229a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800229e:	e000      	b.n	80022a2 <ETH_SetDMAConfig+0x2e>
 80022a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	7b5b      	ldrb	r3, [r3, #13]
 80022a6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022a8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	7f52      	ldrb	r2, [r2, #29]
 80022ae:	2a00      	cmp	r2, #0
 80022b0:	d102      	bne.n	80022b8 <ETH_SetDMAConfig+0x44>
 80022b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022b6:	e000      	b.n	80022ba <ETH_SetDMAConfig+0x46>
 80022b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	7b9b      	ldrb	r3, [r3, #14]
 80022c0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022c2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	7f1b      	ldrb	r3, [r3, #28]
 80022ce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80022d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	7f9b      	ldrb	r3, [r3, #30]
 80022d6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022d8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022e8:	4313      	orrs	r3, r2
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f8:	461a      	mov	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800230a:	2001      	movs	r0, #1
 800230c:	f7fe fed0 	bl	80010b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002318:	461a      	mov	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	791b      	ldrb	r3, [r3, #4]
 8002322:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002328:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800232e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002334:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800233c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800233e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002346:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800234c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800235a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002368:	2001      	movs	r0, #1
 800236a:	f7fe fea1 	bl	80010b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	f8de3f23 	.word	0xf8de3f23

08002388 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b0a6      	sub	sp, #152	; 0x98
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002390:	2301      	movs	r3, #1
 8002392:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002396:	2301      	movs	r3, #1
 8002398:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800239c:	2300      	movs	r3, #0
 800239e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80023b2:	2301      	movs	r3, #1
 80023b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80023be:	2300      	movs	r3, #0
 80023c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023c4:	2300      	movs	r3, #0
 80023c6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80023ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023ee:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80023f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80023fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002400:	4619      	mov	r1, r3
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fe86 	bl	8002114 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002408:	2301      	movs	r3, #1
 800240a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800240c:	2301      	movs	r3, #1
 800240e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002410:	2301      	movs	r3, #1
 8002412:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002416:	2301      	movs	r3, #1
 8002418:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800242a:	2300      	movs	r3, #0
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800242e:	2301      	movs	r3, #1
 8002430:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002434:	2301      	movs	r3, #1
 8002436:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800243c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800243e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002442:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002448:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800244a:	2301      	movs	r3, #1
 800244c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002450:	2300      	movs	r3, #0
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002458:	f107 0308 	add.w	r3, r7, #8
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ff08 	bl	8002274 <ETH_SetDMAConfig>
}
 8002464:	bf00      	nop
 8002466:	3798      	adds	r7, #152	; 0x98
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3305      	adds	r3, #5
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	3204      	adds	r2, #4
 8002484:	7812      	ldrb	r2, [r2, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <ETH_MACAddressConfig+0x68>)
 800248e:	4413      	add	r3, r2
 8002490:	461a      	mov	r2, r3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3303      	adds	r3, #3
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	061a      	lsls	r2, r3, #24
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3302      	adds	r3, #2
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3301      	adds	r3, #1
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	4313      	orrs	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <ETH_MACAddressConfig+0x6c>)
 80024be:	4413      	add	r3, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	6013      	str	r3, [r2, #0]
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40028040 	.word	0x40028040
 80024d8:	40028044 	.word	0x40028044

080024dc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e03e      	b.n	8002568 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68d9      	ldr	r1, [r3, #12]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2200      	movs	r2, #0
 8002506:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2200      	movs	r2, #0
 8002512:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	3206      	adds	r2, #6
 800251c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d80c      	bhi.n	800254c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68d9      	ldr	r1, [r3, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	440b      	add	r3, r1
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	e004      	b.n	8002556 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	461a      	mov	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3301      	adds	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d9bd      	bls.n	80024ea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002580:	611a      	str	r2, [r3, #16]
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800258e:	b480      	push	{r7}
 8002590:	b085      	sub	sp, #20
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	e046      	b.n	800262a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6919      	ldr	r1, [r3, #16]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2200      	movs	r2, #0
 80025b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2200      	movs	r2, #0
 80025ca:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2200      	movs	r2, #0
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025d8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80025e0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	3212      	adds	r2, #18
 80025f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d80c      	bhi.n	800261a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6919      	ldr	r1, [r3, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	461a      	mov	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60da      	str	r2, [r3, #12]
 8002618:	e004      	b.n	8002624 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	461a      	mov	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	3301      	adds	r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d9b5      	bls.n	800259c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265a:	60da      	str	r2, [r3, #12]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	e175      	b.n	8002974 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	f040 8164 	bne.w	800296e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d005      	beq.n	80026be <HAL_GPIO_Init+0x56>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d130      	bne.n	8002720 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2203      	movs	r2, #3
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f4:	2201      	movs	r2, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 0201 	and.w	r2, r3, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b03      	cmp	r3, #3
 800272a:	d017      	beq.n	800275c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d123      	bne.n	80027b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	08da      	lsrs	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3208      	adds	r2, #8
 8002770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	08da      	lsrs	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	69b9      	ldr	r1, [r7, #24]
 80027ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0203 	and.w	r2, r3, #3
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80be 	beq.w	800296e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	4b66      	ldr	r3, [pc, #408]	; (800298c <HAL_GPIO_Init+0x324>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	4a65      	ldr	r2, [pc, #404]	; (800298c <HAL_GPIO_Init+0x324>)
 80027f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027fc:	6453      	str	r3, [r2, #68]	; 0x44
 80027fe:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_GPIO_Init+0x324>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800280a:	4a61      	ldr	r2, [pc, #388]	; (8002990 <HAL_GPIO_Init+0x328>)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	3302      	adds	r3, #2
 8002812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a58      	ldr	r2, [pc, #352]	; (8002994 <HAL_GPIO_Init+0x32c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d037      	beq.n	80028a6 <HAL_GPIO_Init+0x23e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a57      	ldr	r2, [pc, #348]	; (8002998 <HAL_GPIO_Init+0x330>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d031      	beq.n	80028a2 <HAL_GPIO_Init+0x23a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a56      	ldr	r2, [pc, #344]	; (800299c <HAL_GPIO_Init+0x334>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d02b      	beq.n	800289e <HAL_GPIO_Init+0x236>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a55      	ldr	r2, [pc, #340]	; (80029a0 <HAL_GPIO_Init+0x338>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d025      	beq.n	800289a <HAL_GPIO_Init+0x232>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a54      	ldr	r2, [pc, #336]	; (80029a4 <HAL_GPIO_Init+0x33c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01f      	beq.n	8002896 <HAL_GPIO_Init+0x22e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a53      	ldr	r2, [pc, #332]	; (80029a8 <HAL_GPIO_Init+0x340>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d019      	beq.n	8002892 <HAL_GPIO_Init+0x22a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a52      	ldr	r2, [pc, #328]	; (80029ac <HAL_GPIO_Init+0x344>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_GPIO_Init+0x226>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a51      	ldr	r2, [pc, #324]	; (80029b0 <HAL_GPIO_Init+0x348>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00d      	beq.n	800288a <HAL_GPIO_Init+0x222>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a50      	ldr	r2, [pc, #320]	; (80029b4 <HAL_GPIO_Init+0x34c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d007      	beq.n	8002886 <HAL_GPIO_Init+0x21e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4f      	ldr	r2, [pc, #316]	; (80029b8 <HAL_GPIO_Init+0x350>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <HAL_GPIO_Init+0x21a>
 800287e:	2309      	movs	r3, #9
 8002880:	e012      	b.n	80028a8 <HAL_GPIO_Init+0x240>
 8002882:	230a      	movs	r3, #10
 8002884:	e010      	b.n	80028a8 <HAL_GPIO_Init+0x240>
 8002886:	2308      	movs	r3, #8
 8002888:	e00e      	b.n	80028a8 <HAL_GPIO_Init+0x240>
 800288a:	2307      	movs	r3, #7
 800288c:	e00c      	b.n	80028a8 <HAL_GPIO_Init+0x240>
 800288e:	2306      	movs	r3, #6
 8002890:	e00a      	b.n	80028a8 <HAL_GPIO_Init+0x240>
 8002892:	2305      	movs	r3, #5
 8002894:	e008      	b.n	80028a8 <HAL_GPIO_Init+0x240>
 8002896:	2304      	movs	r3, #4
 8002898:	e006      	b.n	80028a8 <HAL_GPIO_Init+0x240>
 800289a:	2303      	movs	r3, #3
 800289c:	e004      	b.n	80028a8 <HAL_GPIO_Init+0x240>
 800289e:	2302      	movs	r3, #2
 80028a0:	e002      	b.n	80028a8 <HAL_GPIO_Init+0x240>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_GPIO_Init+0x240>
 80028a6:	2300      	movs	r3, #0
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	f002 0203 	and.w	r2, r2, #3
 80028ae:	0092      	lsls	r2, r2, #2
 80028b0:	4093      	lsls	r3, r2
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028b8:	4935      	ldr	r1, [pc, #212]	; (8002990 <HAL_GPIO_Init+0x328>)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	089b      	lsrs	r3, r3, #2
 80028be:	3302      	adds	r3, #2
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_GPIO_Init+0x354>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ea:	4a34      	ldr	r2, [pc, #208]	; (80029bc <HAL_GPIO_Init+0x354>)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f0:	4b32      	ldr	r3, [pc, #200]	; (80029bc <HAL_GPIO_Init+0x354>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002914:	4a29      	ldr	r2, [pc, #164]	; (80029bc <HAL_GPIO_Init+0x354>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800291a:	4b28      	ldr	r3, [pc, #160]	; (80029bc <HAL_GPIO_Init+0x354>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800293e:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <HAL_GPIO_Init+0x354>)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HAL_GPIO_Init+0x354>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <HAL_GPIO_Init+0x354>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3301      	adds	r3, #1
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	2b0f      	cmp	r3, #15
 8002978:	f67f ae86 	bls.w	8002688 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3724      	adds	r7, #36	; 0x24
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
 8002990:	40013800 	.word	0x40013800
 8002994:	40020000 	.word	0x40020000
 8002998:	40020400 	.word	0x40020400
 800299c:	40020800 	.word	0x40020800
 80029a0:	40020c00 	.word	0x40020c00
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40021400 	.word	0x40021400
 80029ac:	40021800 	.word	0x40021800
 80029b0:	40021c00 	.word	0x40021c00
 80029b4:	40022000 	.word	0x40022000
 80029b8:	40022400 	.word	0x40022400
 80029bc:	40013c00 	.word	0x40013c00

080029c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
 80029cc:	4613      	mov	r3, r2
 80029ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d0:	787b      	ldrb	r3, [r7, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029dc:	e003      	b.n	80029e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	041a      	lsls	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	619a      	str	r2, [r3, #24]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f4:	b08f      	sub	sp, #60	; 0x3c
 80029f6:	af0a      	add	r7, sp, #40	; 0x28
 80029f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e116      	b.n	8002c32 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f00a fae6 	bl	800cff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2203      	movs	r2, #3
 8002a28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d102      	bne.n	8002a3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 f825 	bl	8006a92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	687e      	ldr	r6, [r7, #4]
 8002a50:	466d      	mov	r5, sp
 8002a52:	f106 0410 	add.w	r4, r6, #16
 8002a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a62:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a66:	1d33      	adds	r3, r6, #4
 8002a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a6a:	6838      	ldr	r0, [r7, #0]
 8002a6c:	f003 ff06 	bl	800687c <USB_CoreInit>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e0d7      	b.n	8002c32 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f004 f813 	bl	8006ab4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
 8002a92:	e04a      	b.n	8002b2a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	333d      	adds	r3, #61	; 0x3d
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	333c      	adds	r3, #60	; 0x3c
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	b298      	uxth	r0, r3
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	3344      	adds	r3, #68	; 0x44
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3340      	adds	r3, #64	; 0x40
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	3348      	adds	r3, #72	; 0x48
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	334c      	adds	r3, #76	; 0x4c
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3354      	adds	r3, #84	; 0x54
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	3301      	adds	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d3af      	bcc.n	8002a94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e044      	b.n	8002bc4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d3b5      	bcc.n	8002b3a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	687e      	ldr	r6, [r7, #4]
 8002bd6:	466d      	mov	r5, sp
 8002bd8:	f106 0410 	add.w	r4, r6, #16
 8002bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002be8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bec:	1d33      	adds	r3, r6, #4
 8002bee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bf0:	6838      	ldr	r0, [r7, #0]
 8002bf2:	f003 ffab 	bl	8006b4c <USB_DevInit>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e014      	b.n	8002c32 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d102      	bne.n	8002c26 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f001 f97b 	bl	8003f1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f005 f8f9 	bl	8007e22 <USB_DevDisconnect>

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c3a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_PCD_Start+0x16>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e012      	b.n	8002c76 <HAL_PCD_Start+0x3c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f003 ff07 	bl	8006a70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f005 f8ba 	bl	8007de0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c7e:	b590      	push	{r4, r7, lr}
 8002c80:	b08d      	sub	sp, #52	; 0x34
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 f978 	bl	8007f8a <USB_GetMode>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f040 84b7 	bne.w	8003610 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f005 f8dc 	bl	8007e64 <USB_ReadInterrupts>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 84ad 	beq.w	800360e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f005 f8c9 	bl	8007e64 <USB_ReadInterrupts>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d107      	bne.n	8002cec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f002 0202 	and.w	r2, r2, #2
 8002cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f005 f8b7 	bl	8007e64 <USB_ReadInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d161      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0210 	bic.w	r2, r2, #16
 8002d0e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	0c5b      	lsrs	r3, r3, #17
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d124      	bne.n	8002d86 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d035      	beq.n	8002db4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6a38      	ldr	r0, [r7, #32]
 8002d5c:	f004 feee 	bl	8007b3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d6c:	441a      	add	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d7e:	441a      	add	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	621a      	str	r2, [r3, #32]
 8002d84:	e016      	b.n	8002db4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	0c5b      	lsrs	r3, r3, #17
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	2b06      	cmp	r3, #6
 8002d90:	d110      	bne.n	8002db4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d98:	2208      	movs	r2, #8
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6a38      	ldr	r0, [r7, #32]
 8002d9e:	f004 fecd 	bl	8007b3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	6a1a      	ldr	r2, [r3, #32]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dae:	441a      	add	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0210 	orr.w	r2, r2, #16
 8002dc2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f005 f84b 	bl	8007e64 <USB_ReadInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dd8:	f040 80a7 	bne.w	8002f2a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f005 f850 	bl	8007e8a <USB_ReadDevAllOutEpInterrupt>
 8002dea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002dec:	e099      	b.n	8002f22 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 808e 	beq.w	8002f16 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f005 f874 	bl	8007ef2 <USB_ReadDevOutEPInterrupt>
 8002e0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e22:	461a      	mov	r2, r3
 8002e24:	2301      	movs	r3, #1
 8002e26:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fef0 	bl	8003c10 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00c      	beq.n	8002e54 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e46:	461a      	mov	r2, r3
 8002e48:	2308      	movs	r3, #8
 8002e4a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 ffc6 	bl	8003de0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d030      	beq.n	8002edc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	2b80      	cmp	r3, #128	; 0x80
 8002e84:	d109      	bne.n	8002e9a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e98:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4413      	add	r3, r2
 8002eac:	3304      	adds	r3, #4
 8002eae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	78db      	ldrb	r3, [r3, #3]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d108      	bne.n	8002eca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f00a f9c7 	bl	800d258 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2302      	movs	r3, #2
 8002eda:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2320      	movs	r3, #32
 8002ef6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f14:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	3301      	adds	r3, #1
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f47f af62 	bne.w	8002dee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f004 ff98 	bl	8007e64 <USB_ReadInterrupts>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f3e:	f040 80db 	bne.w	80030f8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f004 ffb9 	bl	8007ebe <USB_ReadDevAllInEpInterrupt>
 8002f4c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f52:	e0cd      	b.n	80030f0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80c2 	beq.w	80030e4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f004 ffdf 	bl	8007f2e <USB_ReadDevInEPInterrupt>
 8002f70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d057      	beq.n	800302c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	2201      	movs	r2, #1
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69f9      	ldr	r1, [r7, #28]
 8002f98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fac:	461a      	mov	r2, r3
 8002fae:	2301      	movs	r3, #1
 8002fb0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d132      	bne.n	8003020 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	334c      	adds	r3, #76	; 0x4c
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4403      	add	r3, r0
 8002fda:	3348      	adds	r3, #72	; 0x48
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4419      	add	r1, r3
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4403      	add	r3, r0
 8002fee:	334c      	adds	r3, #76	; 0x4c
 8002ff0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d113      	bne.n	8003020 <HAL_PCD_IRQHandler+0x3a2>
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	3354      	adds	r3, #84	; 0x54
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d108      	bne.n	8003020 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003018:	461a      	mov	r2, r3
 800301a:	2101      	movs	r1, #1
 800301c:	f004 ffe8 	bl	8007ff0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	b2db      	uxtb	r3, r3
 8003024:	4619      	mov	r1, r3
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f00a f891 	bl	800d14e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003042:	461a      	mov	r2, r3
 8003044:	2308      	movs	r3, #8
 8003046:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305e:	461a      	mov	r2, r3
 8003060:	2310      	movs	r3, #16
 8003062:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	4413      	add	r3, r2
 8003076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800307a:	461a      	mov	r2, r3
 800307c:	2340      	movs	r3, #64	; 0x40
 800307e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d023      	beq.n	80030d2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800308a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800308c:	6a38      	ldr	r0, [r7, #32]
 800308e:	f003 febb 	bl	8006e08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	3338      	adds	r3, #56	; 0x38
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	3304      	adds	r3, #4
 80030a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	78db      	ldrb	r3, [r3, #3]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d108      	bne.n	80030c0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	4619      	mov	r1, r3
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f00a f8de 	bl	800d27c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030cc:	461a      	mov	r2, r3
 80030ce:	2302      	movs	r3, #2
 80030d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fd08 	bl	8003af4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	3301      	adds	r3, #1
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	085b      	lsrs	r3, r3, #1
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f47f af2e 	bne.w	8002f54 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 feb1 	bl	8007e64 <USB_ReadInterrupts>
 8003102:	4603      	mov	r3, r0
 8003104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800310c:	d122      	bne.n	8003154 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003128:	2b01      	cmp	r3, #1
 800312a:	d108      	bne.n	800313e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003134:	2100      	movs	r1, #0
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f00a fa58 	bl	800d5ec <HAL_PCDEx_LPM_Callback>
 800313c:	e002      	b.n	8003144 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f00a f87c 	bl	800d23c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003152:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f004 fe83 	bl	8007e64 <USB_ReadInterrupts>
 800315e:	4603      	mov	r3, r0
 8003160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003168:	d112      	bne.n	8003190 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f00a f838 	bl	800d1f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800318e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f004 fe65 	bl	8007e64 <USB_ReadInterrupts>
 800319a:	4603      	mov	r3, r0
 800319c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031a4:	d121      	bne.n	80031ea <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695a      	ldr	r2, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80031b4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d111      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	f003 020f 	and.w	r2, r3, #15
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80031da:	2101      	movs	r1, #1
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f00a fa05 	bl	800d5ec <HAL_PCDEx_LPM_Callback>
 80031e2:	e002      	b.n	80031ea <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f00a f803 	bl	800d1f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 fe38 	bl	8007e64 <USB_ReadInterrupts>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fe:	f040 80b7 	bne.w	8003370 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2110      	movs	r1, #16
 800321c:	4618      	mov	r0, r3
 800321e:	f003 fdf3 	bl	8006e08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003222:	2300      	movs	r3, #0
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003226:	e046      	b.n	80032b6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003234:	461a      	mov	r2, r3
 8003236:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800323a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800324c:	0151      	lsls	r1, r2, #5
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	440a      	add	r2, r1
 8003252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003256:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800325a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003268:	461a      	mov	r2, r3
 800326a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800326e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003280:	0151      	lsls	r1, r2, #5
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	440a      	add	r2, r1
 8003286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800328a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800328e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a0:	0151      	lsls	r1, r2, #5
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	440a      	add	r2, r1
 80032a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	3301      	adds	r3, #1
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032bc:	429a      	cmp	r2, r3
 80032be:	d3b3      	bcc.n	8003228 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d016      	beq.n	800330a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ec:	f043 030b 	orr.w	r3, r3, #11
 80032f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003302:	f043 030b 	orr.w	r3, r3, #11
 8003306:	6453      	str	r3, [r2, #68]	; 0x44
 8003308:	e015      	b.n	8003336 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003318:	4619      	mov	r1, r3
 800331a:	f242 032b 	movw	r3, #8235	; 0x202b
 800331e:	4313      	orrs	r3, r2
 8003320:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003330:	f043 030b 	orr.w	r3, r3, #11
 8003334:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003344:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003348:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800335a:	461a      	mov	r2, r3
 800335c:	f004 fe48 	bl	8007ff0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800336e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f004 fd75 	bl	8007e64 <USB_ReadInterrupts>
 800337a:	4603      	mov	r3, r0
 800337c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003384:	d124      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f004 fe0c 	bl	8007fa8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f003 fdb4 	bl	8006f02 <USB_GetDevSpeed>
 800339a:	4603      	mov	r3, r0
 800339c:	461a      	mov	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681c      	ldr	r4, [r3, #0]
 80033a6:	f001 fadd 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 80033aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	4620      	mov	r0, r4
 80033b6:	f003 fab9 	bl	800692c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f009 feef 	bl	800d19e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f004 fd45 	bl	8007e64 <USB_ReadInterrupts>
 80033da:	4603      	mov	r3, r0
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d10a      	bne.n	80033fa <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f009 fecc 	bl	800d182 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f002 0208 	and.w	r2, r2, #8
 80033f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 fd30 	bl	8007e64 <USB_ReadInterrupts>
 8003404:	4603      	mov	r3, r0
 8003406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340a:	2b80      	cmp	r3, #128	; 0x80
 800340c:	d122      	bne.n	8003454 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800341a:	2301      	movs	r3, #1
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
 800341e:	e014      	b.n	800344a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	b2db      	uxtb	r3, r3
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fb27 	bl	8003a92 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	3301      	adds	r3, #1
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003450:	429a      	cmp	r2, r3
 8003452:	d3e5      	bcc.n	8003420 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f004 fd03 	bl	8007e64 <USB_ReadInterrupts>
 800345e:	4603      	mov	r3, r0
 8003460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003468:	d13b      	bne.n	80034e2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800346a:	2301      	movs	r3, #1
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
 800346e:	e02b      	b.n	80034c8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	3340      	adds	r3, #64	; 0x40
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d115      	bne.n	80034c2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003496:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003498:	2b00      	cmp	r3, #0
 800349a:	da12      	bge.n	80034c2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	333f      	adds	r3, #63	; 0x3f
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fae8 	bl	8003a92 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	3301      	adds	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d3ce      	bcc.n	8003470 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f004 fcbc 	bl	8007e64 <USB_ReadInterrupts>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034f6:	d155      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034f8:	2301      	movs	r3, #1
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
 80034fc:	e045      	b.n	800358a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d12e      	bne.n	8003584 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003526:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003528:	2b00      	cmp	r3, #0
 800352a:	da2b      	bge.n	8003584 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003538:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800353c:	429a      	cmp	r2, r3
 800353e:	d121      	bne.n	8003584 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800357c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003580:	6053      	str	r3, [r2, #4]
            break;
 8003582:	e007      	b.n	8003594 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	3301      	adds	r3, #1
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003590:	429a      	cmp	r2, r3
 8003592:	d3b4      	bcc.n	80034fe <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695a      	ldr	r2, [r3, #20]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f004 fc5b 	bl	8007e64 <USB_ReadInterrupts>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b8:	d10a      	bne.n	80035d0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f009 fe70 	bl	800d2a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f004 fc45 	bl	8007e64 <USB_ReadInterrupts>
 80035da:	4603      	mov	r3, r0
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d115      	bne.n	8003610 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f009 fe60 	bl	800d2bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	430a      	orrs	r2, r1
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	e000      	b.n	8003610 <HAL_PCD_IRQHandler+0x992>
      return;
 800360e:	bf00      	nop
    }
  }
}
 8003610:	3734      	adds	r7, #52	; 0x34
 8003612:	46bd      	mov	sp, r7
 8003614:	bd90      	pop	{r4, r7, pc}

08003616 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	460b      	mov	r3, r1
 8003620:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_PCD_SetAddress+0x1a>
 800362c:	2302      	movs	r3, #2
 800362e:	e013      	b.n	8003658 <HAL_PCD_SetAddress+0x42>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f004 fba3 	bl	8007d94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	4608      	mov	r0, r1
 800366a:	4611      	mov	r1, r2
 800366c:	461a      	mov	r2, r3
 800366e:	4603      	mov	r3, r0
 8003670:	70fb      	strb	r3, [r7, #3]
 8003672:	460b      	mov	r3, r1
 8003674:	803b      	strh	r3, [r7, #0]
 8003676:	4613      	mov	r3, r2
 8003678:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800367e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003682:	2b00      	cmp	r3, #0
 8003684:	da0f      	bge.n	80036a6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	f003 020f 	and.w	r2, r3, #15
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	3338      	adds	r3, #56	; 0x38
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	3304      	adds	r3, #4
 800369c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	705a      	strb	r2, [r3, #1]
 80036a4:	e00f      	b.n	80036c6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	f003 020f 	and.w	r2, r3, #15
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	3304      	adds	r3, #4
 80036be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036d2:	883a      	ldrh	r2, [r7, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	78ba      	ldrb	r2, [r7, #2]
 80036dc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	785b      	ldrb	r3, [r3, #1]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036f0:	78bb      	ldrb	r3, [r7, #2]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d102      	bne.n	80036fc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_PCD_EP_Open+0xaa>
 8003706:	2302      	movs	r3, #2
 8003708:	e00e      	b.n	8003728 <HAL_PCD_EP_Open+0xc8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68f9      	ldr	r1, [r7, #12]
 8003718:	4618      	mov	r0, r3
 800371a:	f003 fc17 	bl	8006f4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003726:	7afb      	ldrb	r3, [r7, #11]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800373c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003740:	2b00      	cmp	r3, #0
 8003742:	da0f      	bge.n	8003764 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	f003 020f 	and.w	r2, r3, #15
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	3338      	adds	r3, #56	; 0x38
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4413      	add	r3, r2
 8003758:	3304      	adds	r3, #4
 800375a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	705a      	strb	r2, [r3, #1]
 8003762:	e00f      	b.n	8003784 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	f003 020f 	and.w	r2, r3, #15
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	3304      	adds	r3, #4
 800377c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_PCD_EP_Close+0x6e>
 800379a:	2302      	movs	r3, #2
 800379c:	e00e      	b.n	80037bc <HAL_PCD_EP_Close+0x8c>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68f9      	ldr	r1, [r7, #12]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f003 fc55 	bl	800705c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	460b      	mov	r3, r1
 80037d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d4:	7afb      	ldrb	r3, [r7, #11]
 80037d6:	f003 020f 	and.w	r2, r3, #15
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4413      	add	r3, r2
 80037ea:	3304      	adds	r3, #4
 80037ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2200      	movs	r2, #0
 80037fe:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2200      	movs	r2, #0
 8003804:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003806:	7afb      	ldrb	r3, [r7, #11]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	b2da      	uxtb	r2, r3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d102      	bne.n	8003820 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003820:	7afb      	ldrb	r3, [r7, #11]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	6979      	ldr	r1, [r7, #20]
 8003838:	f003 ff3c 	bl	80076b4 <USB_EP0StartXfer>
 800383c:	e008      	b.n	8003850 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	6979      	ldr	r1, [r7, #20]
 800384c:	f003 fce2 	bl	8007214 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	f003 020f 	and.w	r2, r3, #15
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800387c:	681b      	ldr	r3, [r3, #0]
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	460b      	mov	r3, r1
 8003898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389a:	7afb      	ldrb	r3, [r7, #11]
 800389c:	f003 020f 	and.w	r2, r3, #15
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	3338      	adds	r3, #56	; 0x38
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4413      	add	r3, r2
 80038ae:	3304      	adds	r3, #4
 80038b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2200      	movs	r2, #0
 80038c2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2201      	movs	r2, #1
 80038c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ca:	7afb      	ldrb	r3, [r7, #11]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d102      	bne.n	80038e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038e4:	7afb      	ldrb	r3, [r7, #11]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	6979      	ldr	r1, [r7, #20]
 80038fc:	f003 feda 	bl	80076b4 <USB_EP0StartXfer>
 8003900:	e008      	b.n	8003914 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	6979      	ldr	r1, [r7, #20]
 8003910:	f003 fc80 	bl	8007214 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	460b      	mov	r3, r1
 8003928:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800392a:	78fb      	ldrb	r3, [r7, #3]
 800392c:	f003 020f 	and.w	r2, r3, #15
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	429a      	cmp	r2, r3
 8003936:	d901      	bls.n	800393c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e050      	b.n	80039de <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800393c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003940:	2b00      	cmp	r3, #0
 8003942:	da0f      	bge.n	8003964 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	f003 020f 	and.w	r2, r3, #15
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	3338      	adds	r3, #56	; 0x38
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	3304      	adds	r3, #4
 800395a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	705a      	strb	r2, [r3, #1]
 8003962:	e00d      	b.n	8003980 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	4413      	add	r3, r2
 8003976:	3304      	adds	r3, #4
 8003978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_PCD_EP_SetStall+0x82>
 800399c:	2302      	movs	r3, #2
 800399e:	e01e      	b.n	80039de <HAL_PCD_EP_SetStall+0xc0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68f9      	ldr	r1, [r7, #12]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f004 f91c 	bl	8007bec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	b2d9      	uxtb	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039ce:	461a      	mov	r2, r3
 80039d0:	f004 fb0e 	bl	8007ff0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	f003 020f 	and.w	r2, r3, #15
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d901      	bls.n	8003a04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e042      	b.n	8003a8a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	da0f      	bge.n	8003a2c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	f003 020f 	and.w	r2, r3, #15
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	3338      	adds	r3, #56	; 0x38
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	4413      	add	r3, r2
 8003a20:	3304      	adds	r3, #4
 8003a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	705a      	strb	r2, [r3, #1]
 8003a2a:	e00f      	b.n	8003a4c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	f003 020f 	and.w	r2, r3, #15
 8003a32:	4613      	mov	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	3304      	adds	r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_PCD_EP_ClrStall+0x86>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e00e      	b.n	8003a8a <HAL_PCD_EP_ClrStall+0xa4>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68f9      	ldr	r1, [r7, #12]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f004 f924 	bl	8007cc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	da0c      	bge.n	8003ac0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	f003 020f 	and.w	r2, r3, #15
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	3338      	adds	r3, #56	; 0x38
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	3304      	adds	r3, #4
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	e00c      	b.n	8003ada <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	f003 020f 	and.w	r2, r3, #15
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68f9      	ldr	r1, [r7, #12]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f003 ff43 	bl	800796c <USB_EPStopXfer>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003aea:	7afb      	ldrb	r3, [r7, #11]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	; 0x28
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	3338      	adds	r3, #56	; 0x38
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4413      	add	r3, r2
 8003b18:	3304      	adds	r3, #4
 8003b1a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a1a      	ldr	r2, [r3, #32]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d901      	bls.n	8003b2c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e06c      	b.n	8003c06 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d902      	bls.n	8003b48 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	3303      	adds	r3, #3
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b50:	e02b      	b.n	8003baa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d902      	bls.n	8003b6e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3303      	adds	r3, #3
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6919      	ldr	r1, [r3, #16]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	6978      	ldr	r0, [r7, #20]
 8003b8e:	f003 ff97 	bl	8007ac0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	441a      	add	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a1a      	ldr	r2, [r3, #32]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	441a      	add	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d809      	bhi.n	8003bd4 <PCD_WriteEmptyTxFifo+0xe0>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a1a      	ldr	r2, [r3, #32]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d203      	bcs.n	8003bd4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1be      	bne.n	8003b52 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	699a      	ldr	r2, [r3, #24]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d811      	bhi.n	8003c04 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	2201      	movs	r2, #1
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	6939      	ldr	r1, [r7, #16]
 8003bfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c00:	4013      	ands	r3, r2
 8003c02:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	333c      	adds	r3, #60	; 0x3c
 8003c28:	3304      	adds	r3, #4
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d17b      	bne.n	8003d3e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d015      	beq.n	8003c7c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	4a61      	ldr	r2, [pc, #388]	; (8003dd8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	f240 80b9 	bls.w	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80b3 	beq.w	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c72:	461a      	mov	r2, r3
 8003c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c78:	6093      	str	r3, [r2, #8]
 8003c7a:	e0a7      	b.n	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c92:	461a      	mov	r2, r3
 8003c94:	2320      	movs	r3, #32
 8003c96:	6093      	str	r3, [r2, #8]
 8003c98:	e098      	b.n	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f040 8093 	bne.w	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	4a4b      	ldr	r2, [pc, #300]	; (8003dd8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d90f      	bls.n	8003cce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cca:	6093      	str	r3, [r2, #8]
 8003ccc:	e07e      	b.n	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	0159      	lsls	r1, r3, #5
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	440b      	add	r3, r1
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfa:	1ad2      	subs	r2, r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d114      	bne.n	8003d30 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	f004 f968 	bl	8007ff0 <USB_EP0_OutStart>
 8003d20:	e006      	b.n	8003d30 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	441a      	add	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f009 f9ee 	bl	800d118 <HAL_PCD_DataOutStageCallback>
 8003d3c:	e046      	b.n	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d124      	bne.n	8003d90 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d62:	6093      	str	r3, [r2, #8]
 8003d64:	e032      	b.n	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	2320      	movs	r3, #32
 8003d80:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f009 f9c5 	bl	800d118 <HAL_PCD_DataOutStageCallback>
 8003d8e:	e01d      	b.n	8003dcc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d114      	bne.n	8003dc0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d108      	bne.n	8003dc0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003db8:	461a      	mov	r2, r3
 8003dba:	2100      	movs	r1, #0
 8003dbc:	f004 f918 	bl	8007ff0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f009 f9a6 	bl	800d118 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	4f54300a 	.word	0x4f54300a
 8003ddc:	4f54310a 	.word	0x4f54310a

08003de0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	333c      	adds	r3, #60	; 0x3c
 8003df8:	3304      	adds	r3, #4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d90e      	bls.n	8003e34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f009 f95d 	bl	800d0f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d90c      	bls.n	8003e5c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d108      	bne.n	8003e5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e54:	461a      	mov	r2, r3
 8003e56:	2101      	movs	r1, #1
 8003e58:	f004 f8ca 	bl	8007ff0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	4f54300a 	.word	0x4f54300a

08003e6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d107      	bne.n	8003e9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e8a:	883b      	ldrh	r3, [r7, #0]
 8003e8c:	0419      	lsls	r1, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	629a      	str	r2, [r3, #40]	; 0x28
 8003e98:	e028      	b.n	8003eec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	e00d      	b.n	8003eca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	3340      	adds	r3, #64	; 0x40
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d3ec      	bcc.n	8003eae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ed4:	883b      	ldrh	r3, [r7, #0]
 8003ed6:	0418      	lsls	r0, r3, #16
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6819      	ldr	r1, [r3, #0]
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	4302      	orrs	r2, r0
 8003ee4:	3340      	adds	r3, #64	; 0x40
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f4a:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_PCDEx_ActivateLPM+0x44>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	10000003 	.word	0x10000003

08003f64 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f72:	6013      	str	r3, [r2, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40007000 	.word	0x40007000

08003f84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f8e:	4b23      	ldr	r3, [pc, #140]	; (800401c <HAL_PWREx_EnableOverDrive+0x98>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	4a22      	ldr	r2, [pc, #136]	; (800401c <HAL_PWREx_EnableOverDrive+0x98>)
 8003f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f98:	6413      	str	r3, [r2, #64]	; 0x40
 8003f9a:	4b20      	ldr	r3, [pc, #128]	; (800401c <HAL_PWREx_EnableOverDrive+0x98>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003fa6:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fb2:	f7fd f871 	bl	8001098 <HAL_GetTick>
 8003fb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fb8:	e009      	b.n	8003fce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fba:	f7fd f86d 	bl	8001098 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fc8:	d901      	bls.n	8003fce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e022      	b.n	8004014 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fce:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fda:	d1ee      	bne.n	8003fba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003fdc:	4b10      	ldr	r3, [pc, #64]	; (8004020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a0f      	ldr	r2, [pc, #60]	; (8004020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fe8:	f7fd f856 	bl	8001098 <HAL_GetTick>
 8003fec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fee:	e009      	b.n	8004004 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ff0:	f7fd f852 	bl	8001098 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ffe:	d901      	bls.n	8004004 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e007      	b.n	8004014 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004010:	d1ee      	bne.n	8003ff0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40023800 	.word	0x40023800
 8004020:	40007000 	.word	0x40007000

08004024 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800402c:	2300      	movs	r3, #0
 800402e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e29b      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8087 	beq.w	8004156 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004048:	4b96      	ldr	r3, [pc, #600]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b04      	cmp	r3, #4
 8004052:	d00c      	beq.n	800406e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004054:	4b93      	ldr	r3, [pc, #588]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b08      	cmp	r3, #8
 800405e:	d112      	bne.n	8004086 <HAL_RCC_OscConfig+0x62>
 8004060:	4b90      	ldr	r3, [pc, #576]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800406c:	d10b      	bne.n	8004086 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406e:	4b8d      	ldr	r3, [pc, #564]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d06c      	beq.n	8004154 <HAL_RCC_OscConfig+0x130>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d168      	bne.n	8004154 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e275      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408e:	d106      	bne.n	800409e <HAL_RCC_OscConfig+0x7a>
 8004090:	4b84      	ldr	r3, [pc, #528]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a83      	ldr	r2, [pc, #524]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	e02e      	b.n	80040fc <HAL_RCC_OscConfig+0xd8>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x9c>
 80040a6:	4b7f      	ldr	r3, [pc, #508]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a7e      	ldr	r2, [pc, #504]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80040ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	4b7c      	ldr	r3, [pc, #496]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a7b      	ldr	r2, [pc, #492]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80040b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e01d      	b.n	80040fc <HAL_RCC_OscConfig+0xd8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0xc0>
 80040ca:	4b76      	ldr	r3, [pc, #472]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a75      	ldr	r2, [pc, #468]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80040d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4b73      	ldr	r3, [pc, #460]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a72      	ldr	r2, [pc, #456]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e00b      	b.n	80040fc <HAL_RCC_OscConfig+0xd8>
 80040e4:	4b6f      	ldr	r3, [pc, #444]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a6e      	ldr	r2, [pc, #440]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80040ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4b6c      	ldr	r3, [pc, #432]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a6b      	ldr	r2, [pc, #428]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d013      	beq.n	800412c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fc ffc8 	bl	8001098 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410c:	f7fc ffc4 	bl	8001098 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e229      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	4b61      	ldr	r3, [pc, #388]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0xe8>
 800412a:	e014      	b.n	8004156 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fc ffb4 	bl	8001098 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004134:	f7fc ffb0 	bl	8001098 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	; 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e215      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004146:	4b57      	ldr	r3, [pc, #348]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x110>
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d069      	beq.n	8004236 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004162:	4b50      	ldr	r3, [pc, #320]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800416e:	4b4d      	ldr	r3, [pc, #308]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b08      	cmp	r3, #8
 8004178:	d11c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x190>
 800417a:	4b4a      	ldr	r3, [pc, #296]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d116      	bne.n	80041b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004186:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_RCC_OscConfig+0x17a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d001      	beq.n	800419e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e1e9      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419e:	4b41      	ldr	r3, [pc, #260]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	493d      	ldr	r1, [pc, #244]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b2:	e040      	b.n	8004236 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d023      	beq.n	8004204 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041bc:	4b39      	ldr	r3, [pc, #228]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a38      	ldr	r2, [pc, #224]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fc ff66 	bl	8001098 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d0:	f7fc ff62 	bl	8001098 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e1c7      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e2:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ee:	4b2d      	ldr	r3, [pc, #180]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4929      	ldr	r1, [pc, #164]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
 8004202:	e018      	b.n	8004236 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004204:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a26      	ldr	r2, [pc, #152]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 800420a:	f023 0301 	bic.w	r3, r3, #1
 800420e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fc ff42 	bl	8001098 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004218:	f7fc ff3e 	bl	8001098 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e1a3      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d038      	beq.n	80042b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d019      	beq.n	800427e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 800424c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424e:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004256:	f7fc ff1f 	bl	8001098 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425e:	f7fc ff1b 	bl	8001098 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e180      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004270:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x23a>
 800427c:	e01a      	b.n	80042b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004282:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <HAL_RCC_OscConfig+0x280>)
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428a:	f7fc ff05 	bl	8001098 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004292:	f7fc ff01 	bl	8001098 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d903      	bls.n	80042a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e166      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
 80042a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a8:	4b92      	ldr	r3, [pc, #584]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 80042aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1ee      	bne.n	8004292 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80a4 	beq.w	800440a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c2:	4b8c      	ldr	r3, [pc, #560]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10d      	bne.n	80042ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ce:	4b89      	ldr	r3, [pc, #548]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	4a88      	ldr	r2, [pc, #544]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 80042d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d8:	6413      	str	r3, [r2, #64]	; 0x40
 80042da:	4b86      	ldr	r3, [pc, #536]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e6:	2301      	movs	r3, #1
 80042e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ea:	4b83      	ldr	r3, [pc, #524]	; (80044f8 <HAL_RCC_OscConfig+0x4d4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d118      	bne.n	8004328 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042f6:	4b80      	ldr	r3, [pc, #512]	; (80044f8 <HAL_RCC_OscConfig+0x4d4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a7f      	ldr	r2, [pc, #508]	; (80044f8 <HAL_RCC_OscConfig+0x4d4>)
 80042fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004302:	f7fc fec9 	bl	8001098 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430a:	f7fc fec5 	bl	8001098 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b64      	cmp	r3, #100	; 0x64
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e12a      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800431c:	4b76      	ldr	r3, [pc, #472]	; (80044f8 <HAL_RCC_OscConfig+0x4d4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d106      	bne.n	800433e <HAL_RCC_OscConfig+0x31a>
 8004330:	4b70      	ldr	r3, [pc, #448]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	4a6f      	ldr	r2, [pc, #444]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6713      	str	r3, [r2, #112]	; 0x70
 800433c:	e02d      	b.n	800439a <HAL_RCC_OscConfig+0x376>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10c      	bne.n	8004360 <HAL_RCC_OscConfig+0x33c>
 8004346:	4b6b      	ldr	r3, [pc, #428]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	4a6a      	ldr	r2, [pc, #424]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	6713      	str	r3, [r2, #112]	; 0x70
 8004352:	4b68      	ldr	r3, [pc, #416]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	4a67      	ldr	r2, [pc, #412]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004358:	f023 0304 	bic.w	r3, r3, #4
 800435c:	6713      	str	r3, [r2, #112]	; 0x70
 800435e:	e01c      	b.n	800439a <HAL_RCC_OscConfig+0x376>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b05      	cmp	r3, #5
 8004366:	d10c      	bne.n	8004382 <HAL_RCC_OscConfig+0x35e>
 8004368:	4b62      	ldr	r3, [pc, #392]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	4a61      	ldr	r2, [pc, #388]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 800436e:	f043 0304 	orr.w	r3, r3, #4
 8004372:	6713      	str	r3, [r2, #112]	; 0x70
 8004374:	4b5f      	ldr	r3, [pc, #380]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a5e      	ldr	r2, [pc, #376]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
 8004380:	e00b      	b.n	800439a <HAL_RCC_OscConfig+0x376>
 8004382:	4b5c      	ldr	r3, [pc, #368]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	4a5b      	ldr	r2, [pc, #364]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	6713      	str	r3, [r2, #112]	; 0x70
 800438e:	4b59      	ldr	r3, [pc, #356]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	4a58      	ldr	r2, [pc, #352]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004394:	f023 0304 	bic.w	r3, r3, #4
 8004398:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d015      	beq.n	80043ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a2:	f7fc fe79 	bl	8001098 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a8:	e00a      	b.n	80043c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043aa:	f7fc fe75 	bl	8001098 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0d8      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c0:	4b4c      	ldr	r3, [pc, #304]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 80043c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0ee      	beq.n	80043aa <HAL_RCC_OscConfig+0x386>
 80043cc:	e014      	b.n	80043f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ce:	f7fc fe63 	bl	8001098 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d4:	e00a      	b.n	80043ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d6:	f7fc fe5f 	bl	8001098 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e0c2      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ec:	4b41      	ldr	r3, [pc, #260]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1ee      	bne.n	80043d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d105      	bne.n	800440a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fe:	4b3d      	ldr	r3, [pc, #244]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	4a3c      	ldr	r2, [pc, #240]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80ae 	beq.w	8004570 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004414:	4b37      	ldr	r3, [pc, #220]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 030c 	and.w	r3, r3, #12
 800441c:	2b08      	cmp	r3, #8
 800441e:	d06d      	beq.n	80044fc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d14b      	bne.n	80044c0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004428:	4b32      	ldr	r3, [pc, #200]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a31      	ldr	r2, [pc, #196]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 800442e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fc fe30 	bl	8001098 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443c:	f7fc fe2c 	bl	8001098 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e091      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444e:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69da      	ldr	r2, [r3, #28]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	019b      	lsls	r3, r3, #6
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	3b01      	subs	r3, #1
 8004474:	041b      	lsls	r3, r3, #16
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	061b      	lsls	r3, r3, #24
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	071b      	lsls	r3, r3, #28
 8004486:	491b      	ldr	r1, [pc, #108]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004488:	4313      	orrs	r3, r2
 800448a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800448c:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 8004492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fc fdfe 	bl	8001098 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a0:	f7fc fdfa 	bl	8001098 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e05f      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x47c>
 80044be:	e057      	b.n	8004570 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 80044c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fc fde4 	bl	8001098 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d4:	f7fc fde0 	bl	8001098 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e045      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e6:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <HAL_RCC_OscConfig+0x4d0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4b0>
 80044f2:	e03d      	b.n	8004570 <HAL_RCC_OscConfig+0x54c>
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044fc:	4b1f      	ldr	r3, [pc, #124]	; (800457c <HAL_RCC_OscConfig+0x558>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d030      	beq.n	800456c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d129      	bne.n	800456c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d122      	bne.n	800456c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800452c:	4013      	ands	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004532:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004534:	4293      	cmp	r3, r2
 8004536:	d119      	bne.n	800456c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	3b01      	subs	r3, #1
 8004546:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d10f      	bne.n	800456c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d107      	bne.n	800456c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800

08004580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0d0      	b.n	800473a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004598:	4b6a      	ldr	r3, [pc, #424]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d910      	bls.n	80045c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a6:	4b67      	ldr	r3, [pc, #412]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f023 020f 	bic.w	r2, r3, #15
 80045ae:	4965      	ldr	r1, [pc, #404]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b6:	4b63      	ldr	r3, [pc, #396]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d001      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0b8      	b.n	800473a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d020      	beq.n	8004616 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e0:	4b59      	ldr	r3, [pc, #356]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4a58      	ldr	r2, [pc, #352]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 80045e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045f8:	4b53      	ldr	r3, [pc, #332]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	4a52      	ldr	r2, [pc, #328]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 80045fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004602:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004604:	4b50      	ldr	r3, [pc, #320]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	494d      	ldr	r1, [pc, #308]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 8004612:	4313      	orrs	r3, r2
 8004614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d040      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d107      	bne.n	800463a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462a:	4b47      	ldr	r3, [pc, #284]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d115      	bne.n	8004662 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e07f      	b.n	800473a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d107      	bne.n	8004652 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004642:	4b41      	ldr	r3, [pc, #260]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d109      	bne.n	8004662 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e073      	b.n	800473a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004652:	4b3d      	ldr	r3, [pc, #244]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e06b      	b.n	800473a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004662:	4b39      	ldr	r3, [pc, #228]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f023 0203 	bic.w	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	4936      	ldr	r1, [pc, #216]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 8004670:	4313      	orrs	r3, r2
 8004672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004674:	f7fc fd10 	bl	8001098 <HAL_GetTick>
 8004678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467a:	e00a      	b.n	8004692 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800467c:	f7fc fd0c 	bl	8001098 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e053      	b.n	800473a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004692:	4b2d      	ldr	r3, [pc, #180]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 020c 	and.w	r2, r3, #12
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d1eb      	bne.n	800467c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046a4:	4b27      	ldr	r3, [pc, #156]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d210      	bcs.n	80046d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b24      	ldr	r3, [pc, #144]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 020f 	bic.w	r2, r3, #15
 80046ba:	4922      	ldr	r1, [pc, #136]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b20      	ldr	r3, [pc, #128]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e032      	b.n	800473a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e0:	4b19      	ldr	r3, [pc, #100]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	4916      	ldr	r1, [pc, #88]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046fe:	4b12      	ldr	r3, [pc, #72]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	490e      	ldr	r1, [pc, #56]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004712:	f000 f821 	bl	8004758 <HAL_RCC_GetSysClockFreq>
 8004716:	4602      	mov	r2, r0
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	490a      	ldr	r1, [pc, #40]	; (800474c <HAL_RCC_ClockConfig+0x1cc>)
 8004724:	5ccb      	ldrb	r3, [r1, r3]
 8004726:	fa22 f303 	lsr.w	r3, r2, r3
 800472a:	4a09      	ldr	r2, [pc, #36]	; (8004750 <HAL_RCC_ClockConfig+0x1d0>)
 800472c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <HAL_RCC_ClockConfig+0x1d4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fc fa48 	bl	8000bc8 <HAL_InitTick>

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40023c00 	.word	0x40023c00
 8004748:	40023800 	.word	0x40023800
 800474c:	0800da48 	.word	0x0800da48
 8004750:	20000000 	.word	0x20000000
 8004754:	20000004 	.word	0x20000004

08004758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800475c:	b094      	sub	sp, #80	; 0x50
 800475e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	647b      	str	r3, [r7, #68]	; 0x44
 8004764:	2300      	movs	r3, #0
 8004766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004768:	2300      	movs	r3, #0
 800476a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004770:	4b79      	ldr	r3, [pc, #484]	; (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b08      	cmp	r3, #8
 800477a:	d00d      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0x40>
 800477c:	2b08      	cmp	r3, #8
 800477e:	f200 80e1 	bhi.w	8004944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x34>
 8004786:	2b04      	cmp	r3, #4
 8004788:	d003      	beq.n	8004792 <HAL_RCC_GetSysClockFreq+0x3a>
 800478a:	e0db      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800478c:	4b73      	ldr	r3, [pc, #460]	; (800495c <HAL_RCC_GetSysClockFreq+0x204>)
 800478e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004790:	e0db      	b.n	800494a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004792:	4b73      	ldr	r3, [pc, #460]	; (8004960 <HAL_RCC_GetSysClockFreq+0x208>)
 8004794:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004796:	e0d8      	b.n	800494a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004798:	4b6f      	ldr	r3, [pc, #444]	; (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80047a2:	4b6d      	ldr	r3, [pc, #436]	; (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d063      	beq.n	8004876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ae:	4b6a      	ldr	r3, [pc, #424]	; (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	099b      	lsrs	r3, r3, #6
 80047b4:	2200      	movs	r2, #0
 80047b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80047b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c0:	633b      	str	r3, [r7, #48]	; 0x30
 80047c2:	2300      	movs	r3, #0
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
 80047c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047ca:	4622      	mov	r2, r4
 80047cc:	462b      	mov	r3, r5
 80047ce:	f04f 0000 	mov.w	r0, #0
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	0159      	lsls	r1, r3, #5
 80047d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047dc:	0150      	lsls	r0, r2, #5
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4621      	mov	r1, r4
 80047e4:	1a51      	subs	r1, r2, r1
 80047e6:	6139      	str	r1, [r7, #16]
 80047e8:	4629      	mov	r1, r5
 80047ea:	eb63 0301 	sbc.w	r3, r3, r1
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047fc:	4659      	mov	r1, fp
 80047fe:	018b      	lsls	r3, r1, #6
 8004800:	4651      	mov	r1, sl
 8004802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004806:	4651      	mov	r1, sl
 8004808:	018a      	lsls	r2, r1, #6
 800480a:	4651      	mov	r1, sl
 800480c:	ebb2 0801 	subs.w	r8, r2, r1
 8004810:	4659      	mov	r1, fp
 8004812:	eb63 0901 	sbc.w	r9, r3, r1
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800482a:	4690      	mov	r8, r2
 800482c:	4699      	mov	r9, r3
 800482e:	4623      	mov	r3, r4
 8004830:	eb18 0303 	adds.w	r3, r8, r3
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	462b      	mov	r3, r5
 8004838:	eb49 0303 	adc.w	r3, r9, r3
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800484a:	4629      	mov	r1, r5
 800484c:	024b      	lsls	r3, r1, #9
 800484e:	4621      	mov	r1, r4
 8004850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004854:	4621      	mov	r1, r4
 8004856:	024a      	lsls	r2, r1, #9
 8004858:	4610      	mov	r0, r2
 800485a:	4619      	mov	r1, r3
 800485c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800485e:	2200      	movs	r2, #0
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
 8004862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004868:	f7fb fcea 	bl	8000240 <__aeabi_uldivmod>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4613      	mov	r3, r2
 8004872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004874:	e058      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004876:	4b38      	ldr	r3, [pc, #224]	; (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	2200      	movs	r2, #0
 800487e:	4618      	mov	r0, r3
 8004880:	4611      	mov	r1, r2
 8004882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004886:	623b      	str	r3, [r7, #32]
 8004888:	2300      	movs	r3, #0
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
 800488c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	f04f 0000 	mov.w	r0, #0
 8004898:	f04f 0100 	mov.w	r1, #0
 800489c:	0159      	lsls	r1, r3, #5
 800489e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a2:	0150      	lsls	r0, r2, #5
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4641      	mov	r1, r8
 80048aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80048ae:	4649      	mov	r1, r9
 80048b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048c8:	ebb2 040a 	subs.w	r4, r2, sl
 80048cc:	eb63 050b 	sbc.w	r5, r3, fp
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	00eb      	lsls	r3, r5, #3
 80048da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048de:	00e2      	lsls	r2, r4, #3
 80048e0:	4614      	mov	r4, r2
 80048e2:	461d      	mov	r5, r3
 80048e4:	4643      	mov	r3, r8
 80048e6:	18e3      	adds	r3, r4, r3
 80048e8:	603b      	str	r3, [r7, #0]
 80048ea:	464b      	mov	r3, r9
 80048ec:	eb45 0303 	adc.w	r3, r5, r3
 80048f0:	607b      	str	r3, [r7, #4]
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048fe:	4629      	mov	r1, r5
 8004900:	028b      	lsls	r3, r1, #10
 8004902:	4621      	mov	r1, r4
 8004904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004908:	4621      	mov	r1, r4
 800490a:	028a      	lsls	r2, r1, #10
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004912:	2200      	movs	r2, #0
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	61fa      	str	r2, [r7, #28]
 8004918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800491c:	f7fb fc90 	bl	8000240 <__aeabi_uldivmod>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4613      	mov	r3, r2
 8004926:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_RCC_GetSysClockFreq+0x200>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	3301      	adds	r3, #1
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800493a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004942:	e002      	b.n	800494a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_RCC_GetSysClockFreq+0x204>)
 8004946:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800494a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800494c:	4618      	mov	r0, r3
 800494e:	3750      	adds	r7, #80	; 0x50
 8004950:	46bd      	mov	sp, r7
 8004952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800
 800495c:	00f42400 	.word	0x00f42400
 8004960:	007a1200 	.word	0x007a1200

08004964 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <HAL_RCC_GetHCLKFreq+0x14>)
 800496a:	681b      	ldr	r3, [r3, #0]
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000000 	.word	0x20000000

0800497c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004980:	f7ff fff0 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 8004984:	4602      	mov	r2, r0
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0a9b      	lsrs	r3, r3, #10
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4903      	ldr	r1, [pc, #12]	; (80049a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004992:	5ccb      	ldrb	r3, [r1, r3]
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40023800 	.word	0x40023800
 80049a0:	0800da58 	.word	0x0800da58

080049a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049a8:	f7ff ffdc 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 80049ac:	4602      	mov	r2, r0
 80049ae:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	0b5b      	lsrs	r3, r3, #13
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	4903      	ldr	r1, [pc, #12]	; (80049c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ba:	5ccb      	ldrb	r3, [r1, r3]
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40023800 	.word	0x40023800
 80049c8:	0800da58 	.word	0x0800da58

080049cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	220f      	movs	r2, #15
 80049da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049dc:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0203 	and.w	r2, r3, #3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049e8:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049f4:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a00:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	08db      	lsrs	r3, r3, #3
 8004a06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <HAL_RCC_GetClockConfig+0x60>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 020f 	and.w	r2, r3, #15
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40023c00 	.word	0x40023c00

08004a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d012      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a58:	4b69      	ldr	r3, [pc, #420]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a68      	ldr	r2, [pc, #416]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a62:	6093      	str	r3, [r2, #8]
 8004a64:	4b66      	ldr	r3, [pc, #408]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6c:	4964      	ldr	r1, [pc, #400]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d017      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a8a:	4b5d      	ldr	r3, [pc, #372]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	4959      	ldr	r1, [pc, #356]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aa8:	d101      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d017      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ac6:	4b4e      	ldr	r3, [pc, #312]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004acc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	494a      	ldr	r1, [pc, #296]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae4:	d101      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004af2:	2301      	movs	r3, #1
 8004af4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b02:	2301      	movs	r3, #1
 8004b04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 808b 	beq.w	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b14:	4b3a      	ldr	r3, [pc, #232]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	4a39      	ldr	r2, [pc, #228]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b20:	4b37      	ldr	r3, [pc, #220]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b2c:	4b35      	ldr	r3, [pc, #212]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a34      	ldr	r2, [pc, #208]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b38:	f7fc faae 	bl	8001098 <HAL_GetTick>
 8004b3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b40:	f7fc faaa 	bl	8001098 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b64      	cmp	r3, #100	; 0x64
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e38f      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b52:	4b2c      	ldr	r3, [pc, #176]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b5e:	4b28      	ldr	r3, [pc, #160]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d035      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d02e      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b7c:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b86:	4b1e      	ldr	r3, [pc, #120]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b90:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b92:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	4a1a      	ldr	r2, [pc, #104]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b9e:	4a18      	ldr	r2, [pc, #96]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ba4:	4b16      	ldr	r3, [pc, #88]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d114      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fc fa72 	bl	8001098 <HAL_GetTick>
 8004bb4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb6:	e00a      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb8:	f7fc fa6e 	bl	8001098 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e351      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bce:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0ee      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004be6:	d111      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bf4:	4b04      	ldr	r3, [pc, #16]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bf6:	400b      	ands	r3, r1
 8004bf8:	4901      	ldr	r1, [pc, #4]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	608b      	str	r3, [r1, #8]
 8004bfe:	e00b      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40007000 	.word	0x40007000
 8004c08:	0ffffcff 	.word	0x0ffffcff
 8004c0c:	4bac      	ldr	r3, [pc, #688]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	4aab      	ldr	r2, [pc, #684]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c16:	6093      	str	r3, [r2, #8]
 8004c18:	4ba9      	ldr	r3, [pc, #676]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c24:	49a6      	ldr	r1, [pc, #664]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d010      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c36:	4ba2      	ldr	r3, [pc, #648]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c3c:	4aa0      	ldr	r2, [pc, #640]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c46:	4b9e      	ldr	r3, [pc, #632]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c48:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	499b      	ldr	r1, [pc, #620]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c64:	4b96      	ldr	r3, [pc, #600]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c72:	4993      	ldr	r1, [pc, #588]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c86:	4b8e      	ldr	r3, [pc, #568]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c94:	498a      	ldr	r1, [pc, #552]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ca8:	4b85      	ldr	r3, [pc, #532]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cb6:	4982      	ldr	r1, [pc, #520]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cca:	4b7d      	ldr	r3, [pc, #500]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd8:	4979      	ldr	r1, [pc, #484]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cec:	4b74      	ldr	r3, [pc, #464]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	f023 0203 	bic.w	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	4971      	ldr	r1, [pc, #452]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d0e:	4b6c      	ldr	r3, [pc, #432]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d14:	f023 020c 	bic.w	r2, r3, #12
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1c:	4968      	ldr	r1, [pc, #416]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d30:	4b63      	ldr	r3, [pc, #396]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3e:	4960      	ldr	r1, [pc, #384]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d52:	4b5b      	ldr	r3, [pc, #364]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d58:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d60:	4957      	ldr	r1, [pc, #348]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d74:	4b52      	ldr	r3, [pc, #328]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	494f      	ldr	r1, [pc, #316]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d96:	4b4a      	ldr	r3, [pc, #296]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da4:	4946      	ldr	r1, [pc, #280]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004db8:	4b41      	ldr	r3, [pc, #260]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc6:	493e      	ldr	r1, [pc, #248]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004dda:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de8:	4935      	ldr	r1, [pc, #212]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dfc:	4b30      	ldr	r3, [pc, #192]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e0a:	492d      	ldr	r1, [pc, #180]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d011      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e1e:	4b28      	ldr	r3, [pc, #160]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e24:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e2c:	4924      	ldr	r1, [pc, #144]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e5e:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e64:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6c:	4914      	ldr	r1, [pc, #80]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00b      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e80:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e90:	490b      	ldr	r1, [pc, #44]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00f      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ea4:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb4:	4902      	ldr	r1, [pc, #8]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ebc:	e002      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004ebe:	bf00      	nop
 8004ec0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00b      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ed0:	4b8a      	ldr	r3, [pc, #552]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee0:	4986      	ldr	r1, [pc, #536]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00b      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ef4:	4b81      	ldr	r3, [pc, #516]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004efa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f04:	497d      	ldr	r1, [pc, #500]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d006      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 80d6 	beq.w	80050cc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f20:	4b76      	ldr	r3, [pc, #472]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a75      	ldr	r2, [pc, #468]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2c:	f7fc f8b4 	bl	8001098 <HAL_GetTick>
 8004f30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f34:	f7fc f8b0 	bl	8001098 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b64      	cmp	r3, #100	; 0x64
 8004f40:	d901      	bls.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e195      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f46:	4b6d      	ldr	r3, [pc, #436]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d021      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d11d      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f66:	4b65      	ldr	r3, [pc, #404]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f74:	4b61      	ldr	r3, [pc, #388]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f7a:	0e1b      	lsrs	r3, r3, #24
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	019a      	lsls	r2, r3, #6
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	061b      	lsls	r3, r3, #24
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	071b      	lsls	r3, r3, #28
 8004f9a:	4958      	ldr	r1, [pc, #352]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d02e      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fcc:	d129      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fce:	4b4b      	ldr	r3, [pc, #300]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd4:	0c1b      	lsrs	r3, r3, #16
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fdc:	4b47      	ldr	r3, [pc, #284]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe2:	0f1b      	lsrs	r3, r3, #28
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	019a      	lsls	r2, r3, #6
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	041b      	lsls	r3, r3, #16
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	061b      	lsls	r3, r3, #24
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	071b      	lsls	r3, r3, #28
 8005002:	493e      	ldr	r1, [pc, #248]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800500a:	4b3c      	ldr	r3, [pc, #240]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800500c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005010:	f023 021f 	bic.w	r2, r3, #31
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	3b01      	subs	r3, #1
 800501a:	4938      	ldr	r1, [pc, #224]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d01d      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800502e:	4b33      	ldr	r3, [pc, #204]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005034:	0e1b      	lsrs	r3, r3, #24
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800503c:	4b2f      	ldr	r3, [pc, #188]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005042:	0f1b      	lsrs	r3, r3, #28
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	019a      	lsls	r2, r3, #6
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	431a      	orrs	r2, r3
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	061b      	lsls	r3, r3, #24
 800505c:	431a      	orrs	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	071b      	lsls	r3, r3, #28
 8005062:	4926      	ldr	r1, [pc, #152]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d011      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	019a      	lsls	r2, r3, #6
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	041b      	lsls	r3, r3, #16
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	061b      	lsls	r3, r3, #24
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	071b      	lsls	r3, r3, #28
 8005092:	491a      	ldr	r1, [pc, #104]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800509a:	4b18      	ldr	r3, [pc, #96]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a17      	ldr	r2, [pc, #92]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a6:	f7fb fff7 	bl	8001098 <HAL_GetTick>
 80050aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050ac:	e008      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050ae:	f7fb fff3 	bl	8001098 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b64      	cmp	r3, #100	; 0x64
 80050ba:	d901      	bls.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e0d8      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050c0:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	f040 80ce 	bne.w	8005270 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050d4:	4b09      	ldr	r3, [pc, #36]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a08      	ldr	r2, [pc, #32]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e0:	f7fb ffda 	bl	8001098 <HAL_GetTick>
 80050e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050e6:	e00b      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050e8:	f7fb ffd6 	bl	8001098 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	; 0x64
 80050f4:	d904      	bls.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e0bb      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80050fa:	bf00      	nop
 80050fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005100:	4b5e      	ldr	r3, [pc, #376]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510c:	d0ec      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d009      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800512a:	2b00      	cmp	r3, #0
 800512c:	d02e      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d12a      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005136:	4b51      	ldr	r3, [pc, #324]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513c:	0c1b      	lsrs	r3, r3, #16
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005144:	4b4d      	ldr	r3, [pc, #308]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514a:	0f1b      	lsrs	r3, r3, #28
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	019a      	lsls	r2, r3, #6
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	041b      	lsls	r3, r3, #16
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	061b      	lsls	r3, r3, #24
 8005164:	431a      	orrs	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	071b      	lsls	r3, r3, #28
 800516a:	4944      	ldr	r1, [pc, #272]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005172:	4b42      	ldr	r3, [pc, #264]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005178:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	3b01      	subs	r3, #1
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	493d      	ldr	r1, [pc, #244]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d022      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800519c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a0:	d11d      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051a2:	4b36      	ldr	r3, [pc, #216]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a8:	0e1b      	lsrs	r3, r3, #24
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051b0:	4b32      	ldr	r3, [pc, #200]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	0f1b      	lsrs	r3, r3, #28
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	019a      	lsls	r2, r3, #6
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	431a      	orrs	r2, r3
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	061b      	lsls	r3, r3, #24
 80051d0:	431a      	orrs	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	071b      	lsls	r3, r3, #28
 80051d6:	4929      	ldr	r1, [pc, #164]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d028      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051ea:	4b24      	ldr	r3, [pc, #144]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	0e1b      	lsrs	r3, r3, #24
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051f8:	4b20      	ldr	r3, [pc, #128]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	0c1b      	lsrs	r3, r3, #16
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	019a      	lsls	r2, r3, #6
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	041b      	lsls	r3, r3, #16
 8005210:	431a      	orrs	r2, r3
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	061b      	lsls	r3, r3, #24
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	071b      	lsls	r3, r3, #28
 800521e:	4917      	ldr	r1, [pc, #92]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005226:	4b15      	ldr	r3, [pc, #84]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	4911      	ldr	r1, [pc, #68]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800523c:	4b0f      	ldr	r3, [pc, #60]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a0e      	ldr	r2, [pc, #56]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005248:	f7fb ff26 	bl	8001098 <HAL_GetTick>
 800524c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005250:	f7fb ff22 	bl	8001098 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e007      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005262:	4b06      	ldr	r3, [pc, #24]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800526a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800526e:	d1ef      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40023800 	.word	0x40023800

08005280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e049      	b.n	8005326 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f841 	bl	800532e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f000 fa00 	bl	80056c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	d001      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e054      	b.n	8005406 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a26      	ldr	r2, [pc, #152]	; (8005414 <HAL_TIM_Base_Start_IT+0xd0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d022      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005386:	d01d      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a22      	ldr	r2, [pc, #136]	; (8005418 <HAL_TIM_Base_Start_IT+0xd4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d018      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a21      	ldr	r2, [pc, #132]	; (800541c <HAL_TIM_Base_Start_IT+0xd8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d013      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <HAL_TIM_Base_Start_IT+0xdc>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00e      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <HAL_TIM_Base_Start_IT+0xe0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d009      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1c      	ldr	r2, [pc, #112]	; (8005428 <HAL_TIM_Base_Start_IT+0xe4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x80>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1b      	ldr	r2, [pc, #108]	; (800542c <HAL_TIM_Base_Start_IT+0xe8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d115      	bne.n	80053f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	4b19      	ldr	r3, [pc, #100]	; (8005430 <HAL_TIM_Base_Start_IT+0xec>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b06      	cmp	r3, #6
 80053d4:	d015      	beq.n	8005402 <HAL_TIM_Base_Start_IT+0xbe>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053dc:	d011      	beq.n	8005402 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0201 	orr.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ee:	e008      	b.n	8005402 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	e000      	b.n	8005404 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005402:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40010000 	.word	0x40010000
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40010400 	.word	0x40010400
 8005428:	40014000 	.word	0x40014000
 800542c:	40001800 	.word	0x40001800
 8005430:	00010007 	.word	0x00010007

08005434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b02      	cmp	r3, #2
 8005448:	d122      	bne.n	8005490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b02      	cmp	r3, #2
 8005456:	d11b      	bne.n	8005490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0202 	mvn.w	r2, #2
 8005460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f905 	bl	8005686 <HAL_TIM_IC_CaptureCallback>
 800547c:	e005      	b.n	800548a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f8f7 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f908 	bl	800569a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b04      	cmp	r3, #4
 800549c:	d122      	bne.n	80054e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d11b      	bne.n	80054e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0204 	mvn.w	r2, #4
 80054b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2202      	movs	r2, #2
 80054ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f8db 	bl	8005686 <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f8cd 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f8de 	bl	800569a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d122      	bne.n	8005538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d11b      	bne.n	8005538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0208 	mvn.w	r2, #8
 8005508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2204      	movs	r2, #4
 800550e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f8b1 	bl	8005686 <HAL_TIM_IC_CaptureCallback>
 8005524:	e005      	b.n	8005532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f8a3 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f8b4 	bl	800569a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b10      	cmp	r3, #16
 8005544:	d122      	bne.n	800558c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b10      	cmp	r3, #16
 8005552:	d11b      	bne.n	800558c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0210 	mvn.w	r2, #16
 800555c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2208      	movs	r2, #8
 8005562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f887 	bl	8005686 <HAL_TIM_IC_CaptureCallback>
 8005578:	e005      	b.n	8005586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f879 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f88a 	bl	800569a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b01      	cmp	r3, #1
 8005598:	d10e      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d107      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0201 	mvn.w	r2, #1
 80055b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fb fac8 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c2:	2b80      	cmp	r3, #128	; 0x80
 80055c4:	d10e      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d0:	2b80      	cmp	r3, #128	; 0x80
 80055d2:	d107      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f91a 	bl	8005818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f2:	d10e      	bne.n	8005612 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fe:	2b80      	cmp	r3, #128	; 0x80
 8005600:	d107      	bne.n	8005612 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800560a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f90d 	bl	800582c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b40      	cmp	r3, #64	; 0x40
 800561e:	d10e      	bne.n	800563e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562a:	2b40      	cmp	r3, #64	; 0x40
 800562c:	d107      	bne.n	800563e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f838 	bl	80056ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b20      	cmp	r3, #32
 800564a:	d10e      	bne.n	800566a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b20      	cmp	r3, #32
 8005658:	d107      	bne.n	800566a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f06f 0220 	mvn.w	r2, #32
 8005662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f8cd 	bl	8005804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a40      	ldr	r2, [pc, #256]	; (80057d8 <TIM_Base_SetConfig+0x114>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d013      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e2:	d00f      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a3d      	ldr	r2, [pc, #244]	; (80057dc <TIM_Base_SetConfig+0x118>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00b      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a3c      	ldr	r2, [pc, #240]	; (80057e0 <TIM_Base_SetConfig+0x11c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d007      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a3b      	ldr	r2, [pc, #236]	; (80057e4 <TIM_Base_SetConfig+0x120>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a3a      	ldr	r2, [pc, #232]	; (80057e8 <TIM_Base_SetConfig+0x124>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d108      	bne.n	8005716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2f      	ldr	r2, [pc, #188]	; (80057d8 <TIM_Base_SetConfig+0x114>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d02b      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005724:	d027      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2c      	ldr	r2, [pc, #176]	; (80057dc <TIM_Base_SetConfig+0x118>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d023      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2b      	ldr	r2, [pc, #172]	; (80057e0 <TIM_Base_SetConfig+0x11c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01f      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2a      	ldr	r2, [pc, #168]	; (80057e4 <TIM_Base_SetConfig+0x120>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d01b      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a29      	ldr	r2, [pc, #164]	; (80057e8 <TIM_Base_SetConfig+0x124>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d017      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a28      	ldr	r2, [pc, #160]	; (80057ec <TIM_Base_SetConfig+0x128>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a27      	ldr	r2, [pc, #156]	; (80057f0 <TIM_Base_SetConfig+0x12c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00f      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a26      	ldr	r2, [pc, #152]	; (80057f4 <TIM_Base_SetConfig+0x130>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00b      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a25      	ldr	r2, [pc, #148]	; (80057f8 <TIM_Base_SetConfig+0x134>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d007      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a24      	ldr	r2, [pc, #144]	; (80057fc <TIM_Base_SetConfig+0x138>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d003      	beq.n	8005776 <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a23      	ldr	r2, [pc, #140]	; (8005800 <TIM_Base_SetConfig+0x13c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d108      	bne.n	8005788 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800577c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a0a      	ldr	r2, [pc, #40]	; (80057d8 <TIM_Base_SetConfig+0x114>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_Base_SetConfig+0xf8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a0c      	ldr	r2, [pc, #48]	; (80057e8 <TIM_Base_SetConfig+0x124>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d103      	bne.n	80057c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	615a      	str	r2, [r3, #20]
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40010000 	.word	0x40010000
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40010400 	.word	0x40010400
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800
 80057f8:	40001800 	.word	0x40001800
 80057fc:	40001c00 	.word	0x40001c00
 8005800:	40002000 	.word	0x40002000

08005804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e040      	b.n	80058d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fb fafe 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2224      	movs	r2, #36	; 0x24
 800586c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fb3e 	bl	8005f00 <UART_SetConfig>
 8005884:	4603      	mov	r3, r0
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e022      	b.n	80058d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fd96 	bl	80063c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fe1d 	bl	800650c <UART_CheckIdleState>
 80058d2:	4603      	mov	r3, r0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b0ba      	sub	sp, #232	; 0xe8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005902:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005906:	f640 030f 	movw	r3, #2063	; 0x80f
 800590a:	4013      	ands	r3, r2
 800590c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005914:	2b00      	cmp	r3, #0
 8005916:	d115      	bne.n	8005944 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00f      	beq.n	8005944 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	2b00      	cmp	r3, #0
 800592e:	d009      	beq.n	8005944 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 82ac 	beq.w	8005e92 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
      }
      return;
 8005942:	e2a6      	b.n	8005e92 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8117 	beq.w	8005b7c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800594e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800595a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800595e:	4b85      	ldr	r3, [pc, #532]	; (8005b74 <HAL_UART_IRQHandler+0x298>)
 8005960:	4013      	ands	r3, r2
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 810a 	beq.w	8005b7c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d011      	beq.n	8005998 <HAL_UART_IRQHandler+0xbc>
 8005974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00b      	beq.n	8005998 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2201      	movs	r2, #1
 8005986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598e:	f043 0201 	orr.w	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d011      	beq.n	80059c8 <HAL_UART_IRQHandler+0xec>
 80059a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00b      	beq.n	80059c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2202      	movs	r2, #2
 80059b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059be:	f043 0204 	orr.w	r2, r3, #4
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d011      	beq.n	80059f8 <HAL_UART_IRQHandler+0x11c>
 80059d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00b      	beq.n	80059f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2204      	movs	r2, #4
 80059e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ee:	f043 0202 	orr.w	r2, r3, #2
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d017      	beq.n	8005a34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d105      	bne.n	8005a1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00b      	beq.n	8005a34 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2208      	movs	r2, #8
 8005a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a2a:	f043 0208 	orr.w	r2, r3, #8
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d012      	beq.n	8005a66 <HAL_UART_IRQHandler+0x18a>
 8005a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00c      	beq.n	8005a66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a5c:	f043 0220 	orr.w	r2, r3, #32
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 8212 	beq.w	8005e96 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aae:	2b40      	cmp	r3, #64	; 0x40
 8005ab0:	d005      	beq.n	8005abe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ab6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d04f      	beq.n	8005b5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fe37 	bl	8006732 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d141      	bne.n	8005b56 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3308      	adds	r3, #8
 8005afa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005afe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1d9      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d013      	beq.n	8005b4e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2a:	4a13      	ldr	r2, [pc, #76]	; (8005b78 <HAL_UART_IRQHandler+0x29c>)
 8005b2c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fc f814 	bl	8001b60 <HAL_DMA_Abort_IT>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d017      	beq.n	8005b6e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4c:	e00f      	b.n	8005b6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f9b6 	bl	8005ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	e00b      	b.n	8005b6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f9b2 	bl	8005ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	e007      	b.n	8005b6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f9ae 	bl	8005ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005b6c:	e193      	b.n	8005e96 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6e:	bf00      	nop
    return;
 8005b70:	e191      	b.n	8005e96 <HAL_UART_IRQHandler+0x5ba>
 8005b72:	bf00      	nop
 8005b74:	04000120 	.word	0x04000120
 8005b78:	080067fb 	.word	0x080067fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	f040 814c 	bne.w	8005e1e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8145 	beq.w	8005e1e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 813e 	beq.w	8005e1e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2210      	movs	r2, #16
 8005ba8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	f040 80b6 	bne.w	8005d26 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 8165 	beq.w	8005e9a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	f080 815d 	bcs.w	8005e9a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005be6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf4:	f000 8086 	beq.w	8005d04 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1da      	bne.n	8005bf8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3308      	adds	r3, #8
 8005c62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e1      	bne.n	8005c42 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3308      	adds	r3, #8
 8005c84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ca2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ca4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ca8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e3      	bne.n	8005c7e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd4:	f023 0310 	bic.w	r3, r3, #16
 8005cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ce6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ce8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e4      	bne.n	8005cc4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fb febe 	bl	8001a80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f8d8 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d24:	e0b9      	b.n	8005e9a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80ab 	beq.w	8005e9e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80a6 	beq.w	8005e9e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d74:	647b      	str	r3, [r7, #68]	; 0x44
 8005d76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e4      	bne.n	8005d52 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	623b      	str	r3, [r7, #32]
   return(result);
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	f023 0301 	bic.w	r3, r3, #1
 8005d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3308      	adds	r3, #8
 8005da8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dac:	633a      	str	r2, [r7, #48]	; 0x30
 8005dae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e3      	bne.n	8005d88 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f023 0310 	bic.w	r3, r3, #16
 8005de8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	69b9      	ldr	r1, [r7, #24]
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	617b      	str	r3, [r7, #20]
   return(result);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e4      	bne.n	8005dd4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e14:	4619      	mov	r1, r3
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f85c 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e1c:	e03f      	b.n	8005e9e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00e      	beq.n	8005e48 <HAL_UART_IRQHandler+0x56c>
 8005e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f853 	bl	8005eec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e46:	e02d      	b.n	8005ea4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00e      	beq.n	8005e72 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01c      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4798      	blx	r3
    }
    return;
 8005e70:	e017      	b.n	8005ea2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d012      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x5c8>
 8005e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00c      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fccb 	bl	8006826 <UART_EndTransmit_IT>
    return;
 8005e90:	e008      	b.n	8005ea4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e92:	bf00      	nop
 8005e94:	e006      	b.n	8005ea4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005e96:	bf00      	nop
 8005e98:	e004      	b.n	8005ea4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e9a:	bf00      	nop
 8005e9c:	e002      	b.n	8005ea4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e9e:	bf00      	nop
 8005ea0:	e000      	b.n	8005ea4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005ea2:	bf00      	nop
  }

}
 8005ea4:	37e8      	adds	r7, #232	; 0xe8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop

08005eac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4ba6      	ldr	r3, [pc, #664]	; (80061c4 <UART_SetConfig+0x2c4>)
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6812      	ldr	r2, [r2, #0]
 8005f32:	6979      	ldr	r1, [r7, #20]
 8005f34:	430b      	orrs	r3, r1
 8005f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a94      	ldr	r2, [pc, #592]	; (80061c8 <UART_SetConfig+0x2c8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d120      	bne.n	8005fbe <UART_SetConfig+0xbe>
 8005f7c:	4b93      	ldr	r3, [pc, #588]	; (80061cc <UART_SetConfig+0x2cc>)
 8005f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d816      	bhi.n	8005fb8 <UART_SetConfig+0xb8>
 8005f8a:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <UART_SetConfig+0x90>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fa1 	.word	0x08005fa1
 8005f94:	08005fad 	.word	0x08005fad
 8005f98:	08005fa7 	.word	0x08005fa7
 8005f9c:	08005fb3 	.word	0x08005fb3
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	77fb      	strb	r3, [r7, #31]
 8005fa4:	e150      	b.n	8006248 <UART_SetConfig+0x348>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	77fb      	strb	r3, [r7, #31]
 8005faa:	e14d      	b.n	8006248 <UART_SetConfig+0x348>
 8005fac:	2304      	movs	r3, #4
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e14a      	b.n	8006248 <UART_SetConfig+0x348>
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e147      	b.n	8006248 <UART_SetConfig+0x348>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e144      	b.n	8006248 <UART_SetConfig+0x348>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a83      	ldr	r2, [pc, #524]	; (80061d0 <UART_SetConfig+0x2d0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d132      	bne.n	800602e <UART_SetConfig+0x12e>
 8005fc8:	4b80      	ldr	r3, [pc, #512]	; (80061cc <UART_SetConfig+0x2cc>)
 8005fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fce:	f003 030c 	and.w	r3, r3, #12
 8005fd2:	2b0c      	cmp	r3, #12
 8005fd4:	d828      	bhi.n	8006028 <UART_SetConfig+0x128>
 8005fd6:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <UART_SetConfig+0xdc>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08006011 	.word	0x08006011
 8005fe0:	08006029 	.word	0x08006029
 8005fe4:	08006029 	.word	0x08006029
 8005fe8:	08006029 	.word	0x08006029
 8005fec:	0800601d 	.word	0x0800601d
 8005ff0:	08006029 	.word	0x08006029
 8005ff4:	08006029 	.word	0x08006029
 8005ff8:	08006029 	.word	0x08006029
 8005ffc:	08006017 	.word	0x08006017
 8006000:	08006029 	.word	0x08006029
 8006004:	08006029 	.word	0x08006029
 8006008:	08006029 	.word	0x08006029
 800600c:	08006023 	.word	0x08006023
 8006010:	2300      	movs	r3, #0
 8006012:	77fb      	strb	r3, [r7, #31]
 8006014:	e118      	b.n	8006248 <UART_SetConfig+0x348>
 8006016:	2302      	movs	r3, #2
 8006018:	77fb      	strb	r3, [r7, #31]
 800601a:	e115      	b.n	8006248 <UART_SetConfig+0x348>
 800601c:	2304      	movs	r3, #4
 800601e:	77fb      	strb	r3, [r7, #31]
 8006020:	e112      	b.n	8006248 <UART_SetConfig+0x348>
 8006022:	2308      	movs	r3, #8
 8006024:	77fb      	strb	r3, [r7, #31]
 8006026:	e10f      	b.n	8006248 <UART_SetConfig+0x348>
 8006028:	2310      	movs	r3, #16
 800602a:	77fb      	strb	r3, [r7, #31]
 800602c:	e10c      	b.n	8006248 <UART_SetConfig+0x348>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a68      	ldr	r2, [pc, #416]	; (80061d4 <UART_SetConfig+0x2d4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d120      	bne.n	800607a <UART_SetConfig+0x17a>
 8006038:	4b64      	ldr	r3, [pc, #400]	; (80061cc <UART_SetConfig+0x2cc>)
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006042:	2b30      	cmp	r3, #48	; 0x30
 8006044:	d013      	beq.n	800606e <UART_SetConfig+0x16e>
 8006046:	2b30      	cmp	r3, #48	; 0x30
 8006048:	d814      	bhi.n	8006074 <UART_SetConfig+0x174>
 800604a:	2b20      	cmp	r3, #32
 800604c:	d009      	beq.n	8006062 <UART_SetConfig+0x162>
 800604e:	2b20      	cmp	r3, #32
 8006050:	d810      	bhi.n	8006074 <UART_SetConfig+0x174>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <UART_SetConfig+0x15c>
 8006056:	2b10      	cmp	r3, #16
 8006058:	d006      	beq.n	8006068 <UART_SetConfig+0x168>
 800605a:	e00b      	b.n	8006074 <UART_SetConfig+0x174>
 800605c:	2300      	movs	r3, #0
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e0f2      	b.n	8006248 <UART_SetConfig+0x348>
 8006062:	2302      	movs	r3, #2
 8006064:	77fb      	strb	r3, [r7, #31]
 8006066:	e0ef      	b.n	8006248 <UART_SetConfig+0x348>
 8006068:	2304      	movs	r3, #4
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e0ec      	b.n	8006248 <UART_SetConfig+0x348>
 800606e:	2308      	movs	r3, #8
 8006070:	77fb      	strb	r3, [r7, #31]
 8006072:	e0e9      	b.n	8006248 <UART_SetConfig+0x348>
 8006074:	2310      	movs	r3, #16
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	e0e6      	b.n	8006248 <UART_SetConfig+0x348>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a56      	ldr	r2, [pc, #344]	; (80061d8 <UART_SetConfig+0x2d8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d120      	bne.n	80060c6 <UART_SetConfig+0x1c6>
 8006084:	4b51      	ldr	r3, [pc, #324]	; (80061cc <UART_SetConfig+0x2cc>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800608e:	2bc0      	cmp	r3, #192	; 0xc0
 8006090:	d013      	beq.n	80060ba <UART_SetConfig+0x1ba>
 8006092:	2bc0      	cmp	r3, #192	; 0xc0
 8006094:	d814      	bhi.n	80060c0 <UART_SetConfig+0x1c0>
 8006096:	2b80      	cmp	r3, #128	; 0x80
 8006098:	d009      	beq.n	80060ae <UART_SetConfig+0x1ae>
 800609a:	2b80      	cmp	r3, #128	; 0x80
 800609c:	d810      	bhi.n	80060c0 <UART_SetConfig+0x1c0>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <UART_SetConfig+0x1a8>
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	d006      	beq.n	80060b4 <UART_SetConfig+0x1b4>
 80060a6:	e00b      	b.n	80060c0 <UART_SetConfig+0x1c0>
 80060a8:	2300      	movs	r3, #0
 80060aa:	77fb      	strb	r3, [r7, #31]
 80060ac:	e0cc      	b.n	8006248 <UART_SetConfig+0x348>
 80060ae:	2302      	movs	r3, #2
 80060b0:	77fb      	strb	r3, [r7, #31]
 80060b2:	e0c9      	b.n	8006248 <UART_SetConfig+0x348>
 80060b4:	2304      	movs	r3, #4
 80060b6:	77fb      	strb	r3, [r7, #31]
 80060b8:	e0c6      	b.n	8006248 <UART_SetConfig+0x348>
 80060ba:	2308      	movs	r3, #8
 80060bc:	77fb      	strb	r3, [r7, #31]
 80060be:	e0c3      	b.n	8006248 <UART_SetConfig+0x348>
 80060c0:	2310      	movs	r3, #16
 80060c2:	77fb      	strb	r3, [r7, #31]
 80060c4:	e0c0      	b.n	8006248 <UART_SetConfig+0x348>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a44      	ldr	r2, [pc, #272]	; (80061dc <UART_SetConfig+0x2dc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d125      	bne.n	800611c <UART_SetConfig+0x21c>
 80060d0:	4b3e      	ldr	r3, [pc, #248]	; (80061cc <UART_SetConfig+0x2cc>)
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060de:	d017      	beq.n	8006110 <UART_SetConfig+0x210>
 80060e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060e4:	d817      	bhi.n	8006116 <UART_SetConfig+0x216>
 80060e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ea:	d00b      	beq.n	8006104 <UART_SetConfig+0x204>
 80060ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f0:	d811      	bhi.n	8006116 <UART_SetConfig+0x216>
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <UART_SetConfig+0x1fe>
 80060f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fa:	d006      	beq.n	800610a <UART_SetConfig+0x20a>
 80060fc:	e00b      	b.n	8006116 <UART_SetConfig+0x216>
 80060fe:	2300      	movs	r3, #0
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e0a1      	b.n	8006248 <UART_SetConfig+0x348>
 8006104:	2302      	movs	r3, #2
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e09e      	b.n	8006248 <UART_SetConfig+0x348>
 800610a:	2304      	movs	r3, #4
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e09b      	b.n	8006248 <UART_SetConfig+0x348>
 8006110:	2308      	movs	r3, #8
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e098      	b.n	8006248 <UART_SetConfig+0x348>
 8006116:	2310      	movs	r3, #16
 8006118:	77fb      	strb	r3, [r7, #31]
 800611a:	e095      	b.n	8006248 <UART_SetConfig+0x348>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2f      	ldr	r2, [pc, #188]	; (80061e0 <UART_SetConfig+0x2e0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d125      	bne.n	8006172 <UART_SetConfig+0x272>
 8006126:	4b29      	ldr	r3, [pc, #164]	; (80061cc <UART_SetConfig+0x2cc>)
 8006128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006134:	d017      	beq.n	8006166 <UART_SetConfig+0x266>
 8006136:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800613a:	d817      	bhi.n	800616c <UART_SetConfig+0x26c>
 800613c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006140:	d00b      	beq.n	800615a <UART_SetConfig+0x25a>
 8006142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006146:	d811      	bhi.n	800616c <UART_SetConfig+0x26c>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <UART_SetConfig+0x254>
 800614c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006150:	d006      	beq.n	8006160 <UART_SetConfig+0x260>
 8006152:	e00b      	b.n	800616c <UART_SetConfig+0x26c>
 8006154:	2301      	movs	r3, #1
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e076      	b.n	8006248 <UART_SetConfig+0x348>
 800615a:	2302      	movs	r3, #2
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e073      	b.n	8006248 <UART_SetConfig+0x348>
 8006160:	2304      	movs	r3, #4
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e070      	b.n	8006248 <UART_SetConfig+0x348>
 8006166:	2308      	movs	r3, #8
 8006168:	77fb      	strb	r3, [r7, #31]
 800616a:	e06d      	b.n	8006248 <UART_SetConfig+0x348>
 800616c:	2310      	movs	r3, #16
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e06a      	b.n	8006248 <UART_SetConfig+0x348>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1b      	ldr	r2, [pc, #108]	; (80061e4 <UART_SetConfig+0x2e4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d138      	bne.n	80061ee <UART_SetConfig+0x2ee>
 800617c:	4b13      	ldr	r3, [pc, #76]	; (80061cc <UART_SetConfig+0x2cc>)
 800617e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006182:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006186:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800618a:	d017      	beq.n	80061bc <UART_SetConfig+0x2bc>
 800618c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006190:	d82a      	bhi.n	80061e8 <UART_SetConfig+0x2e8>
 8006192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006196:	d00b      	beq.n	80061b0 <UART_SetConfig+0x2b0>
 8006198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800619c:	d824      	bhi.n	80061e8 <UART_SetConfig+0x2e8>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <UART_SetConfig+0x2aa>
 80061a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a6:	d006      	beq.n	80061b6 <UART_SetConfig+0x2b6>
 80061a8:	e01e      	b.n	80061e8 <UART_SetConfig+0x2e8>
 80061aa:	2300      	movs	r3, #0
 80061ac:	77fb      	strb	r3, [r7, #31]
 80061ae:	e04b      	b.n	8006248 <UART_SetConfig+0x348>
 80061b0:	2302      	movs	r3, #2
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e048      	b.n	8006248 <UART_SetConfig+0x348>
 80061b6:	2304      	movs	r3, #4
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e045      	b.n	8006248 <UART_SetConfig+0x348>
 80061bc:	2308      	movs	r3, #8
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e042      	b.n	8006248 <UART_SetConfig+0x348>
 80061c2:	bf00      	nop
 80061c4:	efff69f3 	.word	0xefff69f3
 80061c8:	40011000 	.word	0x40011000
 80061cc:	40023800 	.word	0x40023800
 80061d0:	40004400 	.word	0x40004400
 80061d4:	40004800 	.word	0x40004800
 80061d8:	40004c00 	.word	0x40004c00
 80061dc:	40005000 	.word	0x40005000
 80061e0:	40011400 	.word	0x40011400
 80061e4:	40007800 	.word	0x40007800
 80061e8:	2310      	movs	r3, #16
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e02c      	b.n	8006248 <UART_SetConfig+0x348>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a72      	ldr	r2, [pc, #456]	; (80063bc <UART_SetConfig+0x4bc>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d125      	bne.n	8006244 <UART_SetConfig+0x344>
 80061f8:	4b71      	ldr	r3, [pc, #452]	; (80063c0 <UART_SetConfig+0x4c0>)
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006202:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006206:	d017      	beq.n	8006238 <UART_SetConfig+0x338>
 8006208:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800620c:	d817      	bhi.n	800623e <UART_SetConfig+0x33e>
 800620e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006212:	d00b      	beq.n	800622c <UART_SetConfig+0x32c>
 8006214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006218:	d811      	bhi.n	800623e <UART_SetConfig+0x33e>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <UART_SetConfig+0x326>
 800621e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006222:	d006      	beq.n	8006232 <UART_SetConfig+0x332>
 8006224:	e00b      	b.n	800623e <UART_SetConfig+0x33e>
 8006226:	2300      	movs	r3, #0
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e00d      	b.n	8006248 <UART_SetConfig+0x348>
 800622c:	2302      	movs	r3, #2
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e00a      	b.n	8006248 <UART_SetConfig+0x348>
 8006232:	2304      	movs	r3, #4
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e007      	b.n	8006248 <UART_SetConfig+0x348>
 8006238:	2308      	movs	r3, #8
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e004      	b.n	8006248 <UART_SetConfig+0x348>
 800623e:	2310      	movs	r3, #16
 8006240:	77fb      	strb	r3, [r7, #31]
 8006242:	e001      	b.n	8006248 <UART_SetConfig+0x348>
 8006244:	2310      	movs	r3, #16
 8006246:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006250:	d15b      	bne.n	800630a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006252:	7ffb      	ldrb	r3, [r7, #31]
 8006254:	2b08      	cmp	r3, #8
 8006256:	d828      	bhi.n	80062aa <UART_SetConfig+0x3aa>
 8006258:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <UART_SetConfig+0x360>)
 800625a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625e:	bf00      	nop
 8006260:	08006285 	.word	0x08006285
 8006264:	0800628d 	.word	0x0800628d
 8006268:	08006295 	.word	0x08006295
 800626c:	080062ab 	.word	0x080062ab
 8006270:	0800629b 	.word	0x0800629b
 8006274:	080062ab 	.word	0x080062ab
 8006278:	080062ab 	.word	0x080062ab
 800627c:	080062ab 	.word	0x080062ab
 8006280:	080062a3 	.word	0x080062a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006284:	f7fe fb7a 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 8006288:	61b8      	str	r0, [r7, #24]
        break;
 800628a:	e013      	b.n	80062b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800628c:	f7fe fb8a 	bl	80049a4 <HAL_RCC_GetPCLK2Freq>
 8006290:	61b8      	str	r0, [r7, #24]
        break;
 8006292:	e00f      	b.n	80062b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006294:	4b4b      	ldr	r3, [pc, #300]	; (80063c4 <UART_SetConfig+0x4c4>)
 8006296:	61bb      	str	r3, [r7, #24]
        break;
 8006298:	e00c      	b.n	80062b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800629a:	f7fe fa5d 	bl	8004758 <HAL_RCC_GetSysClockFreq>
 800629e:	61b8      	str	r0, [r7, #24]
        break;
 80062a0:	e008      	b.n	80062b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a6:	61bb      	str	r3, [r7, #24]
        break;
 80062a8:	e004      	b.n	80062b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	77bb      	strb	r3, [r7, #30]
        break;
 80062b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d074      	beq.n	80063a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	005a      	lsls	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	441a      	add	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b0f      	cmp	r3, #15
 80062d4:	d916      	bls.n	8006304 <UART_SetConfig+0x404>
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062dc:	d212      	bcs.n	8006304 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f023 030f 	bic.w	r3, r3, #15
 80062e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	085b      	lsrs	r3, r3, #1
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	89fb      	ldrh	r3, [r7, #14]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	89fa      	ldrh	r2, [r7, #14]
 8006300:	60da      	str	r2, [r3, #12]
 8006302:	e04f      	b.n	80063a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	77bb      	strb	r3, [r7, #30]
 8006308:	e04c      	b.n	80063a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800630a:	7ffb      	ldrb	r3, [r7, #31]
 800630c:	2b08      	cmp	r3, #8
 800630e:	d828      	bhi.n	8006362 <UART_SetConfig+0x462>
 8006310:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <UART_SetConfig+0x418>)
 8006312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006316:	bf00      	nop
 8006318:	0800633d 	.word	0x0800633d
 800631c:	08006345 	.word	0x08006345
 8006320:	0800634d 	.word	0x0800634d
 8006324:	08006363 	.word	0x08006363
 8006328:	08006353 	.word	0x08006353
 800632c:	08006363 	.word	0x08006363
 8006330:	08006363 	.word	0x08006363
 8006334:	08006363 	.word	0x08006363
 8006338:	0800635b 	.word	0x0800635b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800633c:	f7fe fb1e 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 8006340:	61b8      	str	r0, [r7, #24]
        break;
 8006342:	e013      	b.n	800636c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006344:	f7fe fb2e 	bl	80049a4 <HAL_RCC_GetPCLK2Freq>
 8006348:	61b8      	str	r0, [r7, #24]
        break;
 800634a:	e00f      	b.n	800636c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800634c:	4b1d      	ldr	r3, [pc, #116]	; (80063c4 <UART_SetConfig+0x4c4>)
 800634e:	61bb      	str	r3, [r7, #24]
        break;
 8006350:	e00c      	b.n	800636c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006352:	f7fe fa01 	bl	8004758 <HAL_RCC_GetSysClockFreq>
 8006356:	61b8      	str	r0, [r7, #24]
        break;
 8006358:	e008      	b.n	800636c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800635a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800635e:	61bb      	str	r3, [r7, #24]
        break;
 8006360:	e004      	b.n	800636c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	77bb      	strb	r3, [r7, #30]
        break;
 800636a:	bf00      	nop
    }

    if (pclk != 0U)
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d018      	beq.n	80063a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	085a      	lsrs	r2, r3, #1
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	441a      	add	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	fbb2 f3f3 	udiv	r3, r2, r3
 8006384:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b0f      	cmp	r3, #15
 800638a:	d909      	bls.n	80063a0 <UART_SetConfig+0x4a0>
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006392:	d205      	bcs.n	80063a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	b29a      	uxth	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60da      	str	r2, [r3, #12]
 800639e:	e001      	b.n	80063a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80063b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3720      	adds	r7, #32
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	40007c00 	.word	0x40007c00
 80063c0:	40023800 	.word	0x40023800
 80063c4:	00f42400 	.word	0x00f42400

080063c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00a      	beq.n	80063f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d01a      	beq.n	80064de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064c6:	d10a      	bne.n	80064de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	605a      	str	r2, [r3, #4]
  }
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af02      	add	r7, sp, #8
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800651c:	f7fa fdbc 	bl	8001098 <HAL_GetTick>
 8006520:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b08      	cmp	r3, #8
 800652e:	d10e      	bne.n	800654e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f831 	bl	80065a6 <UART_WaitOnFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e027      	b.n	800659e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b04      	cmp	r3, #4
 800655a:	d10e      	bne.n	800657a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800655c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f81b 	bl	80065a6 <UART_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e011      	b.n	800659e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b09c      	sub	sp, #112	; 0x70
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	603b      	str	r3, [r7, #0]
 80065b2:	4613      	mov	r3, r2
 80065b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b6:	e0a7      	b.n	8006708 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065be:	f000 80a3 	beq.w	8006708 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c2:	f7fa fd69 	bl	8001098 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d302      	bcc.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80065d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d13f      	bne.n	8006658 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065ec:	667b      	str	r3, [r7, #100]	; 0x64
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e6      	bne.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3308      	adds	r3, #8
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	663b      	str	r3, [r7, #96]	; 0x60
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3308      	adds	r3, #8
 8006628:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800662a:	64ba      	str	r2, [r7, #72]	; 0x48
 800662c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e5      	bne.n	800660a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2220      	movs	r2, #32
 8006648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e068      	b.n	800672a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	2b00      	cmp	r3, #0
 8006664:	d050      	beq.n	8006708 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006674:	d148      	bne.n	8006708 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800667e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006694:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	461a      	mov	r2, r3
 800669c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669e:	637b      	str	r3, [r7, #52]	; 0x34
 80066a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e6      	bne.n	8006680 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3308      	adds	r3, #8
 80066b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	613b      	str	r3, [r7, #16]
   return(result);
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f023 0301 	bic.w	r3, r3, #1
 80066c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3308      	adds	r3, #8
 80066d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066d2:	623a      	str	r2, [r7, #32]
 80066d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	69f9      	ldr	r1, [r7, #28]
 80066d8:	6a3a      	ldr	r2, [r7, #32]
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	61bb      	str	r3, [r7, #24]
   return(result);
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e5      	bne.n	80066b2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e010      	b.n	800672a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69da      	ldr	r2, [r3, #28]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4013      	ands	r3, r2
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	429a      	cmp	r2, r3
 8006716:	bf0c      	ite	eq
 8006718:	2301      	moveq	r3, #1
 800671a:	2300      	movne	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	461a      	mov	r2, r3
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	429a      	cmp	r2, r3
 8006724:	f43f af48 	beq.w	80065b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3770      	adds	r7, #112	; 0x70
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006732:	b480      	push	{r7}
 8006734:	b095      	sub	sp, #84	; 0x54
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800674e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006758:	643b      	str	r3, [r7, #64]	; 0x40
 800675a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800675e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e6      	bne.n	800673a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3308      	adds	r3, #8
 8006772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	61fb      	str	r3, [r7, #28]
   return(result);
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f023 0301 	bic.w	r3, r3, #1
 8006782:	64bb      	str	r3, [r7, #72]	; 0x48
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3308      	adds	r3, #8
 800678a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800678c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e5      	bne.n	800676c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d118      	bne.n	80067da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f023 0310 	bic.w	r3, r3, #16
 80067bc:	647b      	str	r3, [r7, #68]	; 0x44
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c6:	61bb      	str	r3, [r7, #24]
 80067c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	6979      	ldr	r1, [r7, #20]
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	613b      	str	r3, [r7, #16]
   return(result);
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e6      	bne.n	80067a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80067ee:	bf00      	nop
 80067f0:	3754      	adds	r7, #84	; 0x54
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f7ff fb51 	bl	8005ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800681e:	bf00      	nop
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b088      	sub	sp, #32
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	60bb      	str	r3, [r7, #8]
   return(result);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	461a      	mov	r2, r3
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	6979      	ldr	r1, [r7, #20]
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	613b      	str	r3, [r7, #16]
   return(result);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e6      	bne.n	800682e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff fb1d 	bl	8005eac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006872:	bf00      	nop
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800687c:	b084      	sub	sp, #16
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	f107 001c 	add.w	r0, r7, #28
 800688a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	2b01      	cmp	r3, #1
 8006892:	d120      	bne.n	80068d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	4b20      	ldr	r3, [pc, #128]	; (8006928 <USB_CoreInit+0xac>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d105      	bne.n	80068ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fbee 	bl	80080ac <USB_CoreReset>
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]
 80068d4:	e010      	b.n	80068f8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 fbe2 	bl	80080ac <USB_CoreReset>
 80068e8:	4603      	mov	r3, r0
 80068ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d10b      	bne.n	8006916 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f043 0206 	orr.w	r2, r3, #6
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f043 0220 	orr.w	r2, r3, #32
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006922:	b004      	add	sp, #16
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	ffbdffbf 	.word	0xffbdffbf

0800692c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4613      	mov	r3, r2
 8006938:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d165      	bne.n	8006a0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4a41      	ldr	r2, [pc, #260]	; (8006a48 <USB_SetTurnaroundTime+0x11c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d906      	bls.n	8006956 <USB_SetTurnaroundTime+0x2a>
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4a40      	ldr	r2, [pc, #256]	; (8006a4c <USB_SetTurnaroundTime+0x120>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d202      	bcs.n	8006956 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006950:	230f      	movs	r3, #15
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e062      	b.n	8006a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4a3c      	ldr	r2, [pc, #240]	; (8006a4c <USB_SetTurnaroundTime+0x120>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d306      	bcc.n	800696c <USB_SetTurnaroundTime+0x40>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	4a3b      	ldr	r2, [pc, #236]	; (8006a50 <USB_SetTurnaroundTime+0x124>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d202      	bcs.n	800696c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006966:	230e      	movs	r3, #14
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	e057      	b.n	8006a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4a38      	ldr	r2, [pc, #224]	; (8006a50 <USB_SetTurnaroundTime+0x124>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d306      	bcc.n	8006982 <USB_SetTurnaroundTime+0x56>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4a37      	ldr	r2, [pc, #220]	; (8006a54 <USB_SetTurnaroundTime+0x128>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d202      	bcs.n	8006982 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800697c:	230d      	movs	r3, #13
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e04c      	b.n	8006a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	4a33      	ldr	r2, [pc, #204]	; (8006a54 <USB_SetTurnaroundTime+0x128>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d306      	bcc.n	8006998 <USB_SetTurnaroundTime+0x6c>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	4a32      	ldr	r2, [pc, #200]	; (8006a58 <USB_SetTurnaroundTime+0x12c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d802      	bhi.n	8006998 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006992:	230c      	movs	r3, #12
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	e041      	b.n	8006a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4a2f      	ldr	r2, [pc, #188]	; (8006a58 <USB_SetTurnaroundTime+0x12c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d906      	bls.n	80069ae <USB_SetTurnaroundTime+0x82>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4a2e      	ldr	r2, [pc, #184]	; (8006a5c <USB_SetTurnaroundTime+0x130>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d802      	bhi.n	80069ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80069a8:	230b      	movs	r3, #11
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e036      	b.n	8006a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4a2a      	ldr	r2, [pc, #168]	; (8006a5c <USB_SetTurnaroundTime+0x130>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d906      	bls.n	80069c4 <USB_SetTurnaroundTime+0x98>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	4a29      	ldr	r2, [pc, #164]	; (8006a60 <USB_SetTurnaroundTime+0x134>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d802      	bhi.n	80069c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80069be:	230a      	movs	r3, #10
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	e02b      	b.n	8006a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4a26      	ldr	r2, [pc, #152]	; (8006a60 <USB_SetTurnaroundTime+0x134>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d906      	bls.n	80069da <USB_SetTurnaroundTime+0xae>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4a25      	ldr	r2, [pc, #148]	; (8006a64 <USB_SetTurnaroundTime+0x138>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d202      	bcs.n	80069da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80069d4:	2309      	movs	r3, #9
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	e020      	b.n	8006a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4a21      	ldr	r2, [pc, #132]	; (8006a64 <USB_SetTurnaroundTime+0x138>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d306      	bcc.n	80069f0 <USB_SetTurnaroundTime+0xc4>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	4a20      	ldr	r2, [pc, #128]	; (8006a68 <USB_SetTurnaroundTime+0x13c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d802      	bhi.n	80069f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80069ea:	2308      	movs	r3, #8
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	e015      	b.n	8006a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4a1d      	ldr	r2, [pc, #116]	; (8006a68 <USB_SetTurnaroundTime+0x13c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d906      	bls.n	8006a06 <USB_SetTurnaroundTime+0xda>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4a1c      	ldr	r2, [pc, #112]	; (8006a6c <USB_SetTurnaroundTime+0x140>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d202      	bcs.n	8006a06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a00:	2307      	movs	r3, #7
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	e00a      	b.n	8006a1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a06:	2306      	movs	r3, #6
 8006a08:	617b      	str	r3, [r7, #20]
 8006a0a:	e007      	b.n	8006a1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d102      	bne.n	8006a18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a12:	2309      	movs	r3, #9
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	e001      	b.n	8006a1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a18:	2309      	movs	r3, #9
 8006a1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	029b      	lsls	r3, r3, #10
 8006a30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a34:	431a      	orrs	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	371c      	adds	r7, #28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	00d8acbf 	.word	0x00d8acbf
 8006a4c:	00e4e1c0 	.word	0x00e4e1c0
 8006a50:	00f42400 	.word	0x00f42400
 8006a54:	01067380 	.word	0x01067380
 8006a58:	011a499f 	.word	0x011a499f
 8006a5c:	01312cff 	.word	0x01312cff
 8006a60:	014ca43f 	.word	0x014ca43f
 8006a64:	016e3600 	.word	0x016e3600
 8006a68:	01a6ab1f 	.word	0x01a6ab1f
 8006a6c:	01e84800 	.word	0x01e84800

08006a70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f043 0201 	orr.w	r2, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f023 0201 	bic.w	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d115      	bne.n	8006b02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	f7fa fae4 	bl	80010b0 <HAL_Delay>
      ms++;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fa4b 	bl	8007f8a <USB_GetMode>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d01e      	beq.n	8006b38 <USB_SetCurrentMode+0x84>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b31      	cmp	r3, #49	; 0x31
 8006afe:	d9f0      	bls.n	8006ae2 <USB_SetCurrentMode+0x2e>
 8006b00:	e01a      	b.n	8006b38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d115      	bne.n	8006b34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b14:	2001      	movs	r0, #1
 8006b16:	f7fa facb 	bl	80010b0 <HAL_Delay>
      ms++;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 fa32 	bl	8007f8a <USB_GetMode>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <USB_SetCurrentMode+0x84>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b31      	cmp	r3, #49	; 0x31
 8006b30:	d9f0      	bls.n	8006b14 <USB_SetCurrentMode+0x60>
 8006b32:	e001      	b.n	8006b38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e005      	b.n	8006b44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2b32      	cmp	r3, #50	; 0x32
 8006b3c:	d101      	bne.n	8006b42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b086      	sub	sp, #24
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b66:	2300      	movs	r3, #0
 8006b68:	613b      	str	r3, [r7, #16]
 8006b6a:	e009      	b.n	8006b80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	3340      	adds	r3, #64	; 0x40
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	2200      	movs	r2, #0
 8006b78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	613b      	str	r3, [r7, #16]
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	2b0e      	cmp	r3, #14
 8006b84:	d9f2      	bls.n	8006b6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d11c      	bne.n	8006bc6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b9a:	f043 0302 	orr.w	r3, r3, #2
 8006b9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	e005      	b.n	8006bd2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bd8:	461a      	mov	r2, r3
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be4:	4619      	mov	r1, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bec:	461a      	mov	r2, r3
 8006bee:	680b      	ldr	r3, [r1, #0]
 8006bf0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d10c      	bne.n	8006c12 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d104      	bne.n	8006c08 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006bfe:	2100      	movs	r1, #0
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f965 	bl	8006ed0 <USB_SetDevSpeed>
 8006c06:	e008      	b.n	8006c1a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c08:	2101      	movs	r1, #1
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f960 	bl	8006ed0 <USB_SetDevSpeed>
 8006c10:	e003      	b.n	8006c1a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c12:	2103      	movs	r1, #3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f95b 	bl	8006ed0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c1a:	2110      	movs	r1, #16
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f8f3 	bl	8006e08 <USB_FlushTxFifo>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f91f 	bl	8006e70 <USB_FlushRxFifo>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c42:	461a      	mov	r2, r3
 8006c44:	2300      	movs	r3, #0
 8006c46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4e:	461a      	mov	r2, r3
 8006c50:	2300      	movs	r3, #0
 8006c52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c60:	2300      	movs	r3, #0
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	e043      	b.n	8006cee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c7c:	d118      	bne.n	8006cb0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c90:	461a      	mov	r2, r3
 8006c92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	e013      	b.n	8006cc2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	e008      	b.n	8006cc2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cce:	461a      	mov	r2, r3
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ce6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	3301      	adds	r3, #1
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d3b7      	bcc.n	8006c66 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	613b      	str	r3, [r7, #16]
 8006cfa:	e043      	b.n	8006d84 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d12:	d118      	bne.n	8006d46 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d26:	461a      	mov	r2, r3
 8006d28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d2c:	6013      	str	r3, [r2, #0]
 8006d2e:	e013      	b.n	8006d58 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	e008      	b.n	8006d58 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d52:	461a      	mov	r2, r3
 8006d54:	2300      	movs	r3, #0
 8006d56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d64:	461a      	mov	r2, r3
 8006d66:	2300      	movs	r3, #0
 8006d68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d76:	461a      	mov	r2, r3
 8006d78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	3301      	adds	r3, #1
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d3b7      	bcc.n	8006cfc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006dac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d105      	bne.n	8006dc0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	f043 0210 	orr.w	r2, r3, #16
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699a      	ldr	r2, [r3, #24]
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	; (8006e00 <USB_DevInit+0x2b4>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d005      	beq.n	8006dde <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	f043 0208 	orr.w	r2, r3, #8
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d105      	bne.n	8006df0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699a      	ldr	r2, [r3, #24]
 8006de8:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <USB_DevInit+0x2b8>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dfc:	b004      	add	sp, #16
 8006dfe:	4770      	bx	lr
 8006e00:	803c3800 	.word	0x803c3800
 8006e04:	40000004 	.word	0x40000004

08006e08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4a13      	ldr	r2, [pc, #76]	; (8006e6c <USB_FlushTxFifo+0x64>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d901      	bls.n	8006e28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e01b      	b.n	8006e60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	daf2      	bge.n	8006e16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	019b      	lsls	r3, r3, #6
 8006e38:	f043 0220 	orr.w	r2, r3, #32
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3301      	adds	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4a08      	ldr	r2, [pc, #32]	; (8006e6c <USB_FlushTxFifo+0x64>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d901      	bls.n	8006e52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e006      	b.n	8006e60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	d0f0      	beq.n	8006e40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	00030d40 	.word	0x00030d40

08006e70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4a11      	ldr	r2, [pc, #68]	; (8006ecc <USB_FlushRxFifo+0x5c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d901      	bls.n	8006e8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e018      	b.n	8006ec0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	daf2      	bge.n	8006e7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4a08      	ldr	r2, [pc, #32]	; (8006ecc <USB_FlushRxFifo+0x5c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d901      	bls.n	8006eb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e006      	b.n	8006ec0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0310 	and.w	r3, r3, #16
 8006eba:	2b10      	cmp	r3, #16
 8006ebc:	d0f0      	beq.n	8006ea0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	00030d40 	.word	0x00030d40

08006ed0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	78fb      	ldrb	r3, [r7, #3]
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b087      	sub	sp, #28
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f003 0306 	and.w	r3, r3, #6
 8006f1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d102      	bne.n	8006f28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f22:	2300      	movs	r3, #0
 8006f24:	75fb      	strb	r3, [r7, #23]
 8006f26:	e00a      	b.n	8006f3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d002      	beq.n	8006f34 <USB_GetDevSpeed+0x32>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b06      	cmp	r3, #6
 8006f32:	d102      	bne.n	8006f3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f34:	2302      	movs	r3, #2
 8006f36:	75fb      	strb	r3, [r7, #23]
 8006f38:	e001      	b.n	8006f3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f3a:	230f      	movs	r3, #15
 8006f3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	371c      	adds	r7, #28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	785b      	ldrb	r3, [r3, #1]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d139      	bne.n	8006fdc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6e:	69da      	ldr	r2, [r3, #28]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	2101      	movs	r1, #1
 8006f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	68f9      	ldr	r1, [r7, #12]
 8006f82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f86:	4313      	orrs	r3, r2
 8006f88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d153      	bne.n	8007048 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	791b      	ldrb	r3, [r3, #4]
 8006fba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fbc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	059b      	lsls	r3, r3, #22
 8006fc2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	0159      	lsls	r1, r3, #5
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	440b      	add	r3, r1
 8006fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4b20      	ldr	r3, [pc, #128]	; (8007058 <USB_ActivateEndpoint+0x10c>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	600b      	str	r3, [r1, #0]
 8006fda:	e035      	b.n	8007048 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe2:	69da      	ldr	r2, [r3, #28]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	2101      	movs	r1, #1
 8006fee:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff2:	041b      	lsls	r3, r3, #16
 8006ff4:	68f9      	ldr	r1, [r7, #12]
 8006ff6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d119      	bne.n	8007048 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	791b      	ldrb	r3, [r3, #4]
 800702e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007030:	430b      	orrs	r3, r1
 8007032:	431a      	orrs	r2, r3
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	0159      	lsls	r1, r3, #5
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	440b      	add	r3, r1
 800703c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007040:	4619      	mov	r1, r3
 8007042:	4b05      	ldr	r3, [pc, #20]	; (8007058 <USB_ActivateEndpoint+0x10c>)
 8007044:	4313      	orrs	r3, r2
 8007046:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	10008000 	.word	0x10008000

0800705c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	785b      	ldrb	r3, [r3, #1]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d161      	bne.n	800713c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800708a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800708e:	d11f      	bne.n	80070d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	0151      	lsls	r1, r2, #5
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	440a      	add	r2, r1
 80070c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	f003 030f 	and.w	r3, r3, #15
 80070e0:	2101      	movs	r1, #1
 80070e2:	fa01 f303 	lsl.w	r3, r1, r3
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	43db      	mvns	r3, r3
 80070ea:	68f9      	ldr	r1, [r7, #12]
 80070ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070f0:	4013      	ands	r3, r2
 80070f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	2101      	movs	r1, #1
 8007106:	fa01 f303 	lsl.w	r3, r1, r3
 800710a:	b29b      	uxth	r3, r3
 800710c:	43db      	mvns	r3, r3
 800710e:	68f9      	ldr	r1, [r7, #12]
 8007110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007114:	4013      	ands	r3, r2
 8007116:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	0159      	lsls	r1, r3, #5
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	440b      	add	r3, r1
 800712e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007132:	4619      	mov	r1, r3
 8007134:	4b35      	ldr	r3, [pc, #212]	; (800720c <USB_DeactivateEndpoint+0x1b0>)
 8007136:	4013      	ands	r3, r2
 8007138:	600b      	str	r3, [r1, #0]
 800713a:	e060      	b.n	80071fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800714e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007152:	d11f      	bne.n	8007194 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	0151      	lsls	r1, r2, #5
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	440a      	add	r2, r1
 800716a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007172:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800718e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007192:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f003 030f 	and.w	r3, r3, #15
 80071a4:	2101      	movs	r1, #1
 80071a6:	fa01 f303 	lsl.w	r3, r1, r3
 80071aa:	041b      	lsls	r3, r3, #16
 80071ac:	43db      	mvns	r3, r3
 80071ae:	68f9      	ldr	r1, [r7, #12]
 80071b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b4:	4013      	ands	r3, r2
 80071b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071be:	69da      	ldr	r2, [r3, #28]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	f003 030f 	and.w	r3, r3, #15
 80071c8:	2101      	movs	r1, #1
 80071ca:	fa01 f303 	lsl.w	r3, r1, r3
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	43db      	mvns	r3, r3
 80071d2:	68f9      	ldr	r1, [r7, #12]
 80071d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071d8:	4013      	ands	r3, r2
 80071da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	0159      	lsls	r1, r3, #5
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	440b      	add	r3, r1
 80071f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f6:	4619      	mov	r1, r3
 80071f8:	4b05      	ldr	r3, [pc, #20]	; (8007210 <USB_DeactivateEndpoint+0x1b4>)
 80071fa:	4013      	ands	r3, r2
 80071fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	ec337800 	.word	0xec337800
 8007210:	eff37800 	.word	0xeff37800

08007214 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	; 0x28
 8007218:	af02      	add	r7, sp, #8
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	2b01      	cmp	r3, #1
 8007232:	f040 8163 	bne.w	80074fc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d132      	bne.n	80072a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724a:	691a      	ldr	r2, [r3, #16]
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	0159      	lsls	r1, r3, #5
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	440b      	add	r3, r1
 8007254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007258:	4619      	mov	r1, r3
 800725a:	4ba5      	ldr	r3, [pc, #660]	; (80074f0 <USB_EPStartXfer+0x2dc>)
 800725c:	4013      	ands	r3, r2
 800725e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	0151      	lsls	r1, r2, #5
 8007272:	69fa      	ldr	r2, [r7, #28]
 8007274:	440a      	add	r2, r1
 8007276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800727e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728c:	691a      	ldr	r2, [r3, #16]
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	0159      	lsls	r1, r3, #5
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	440b      	add	r3, r1
 8007296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729a:	4619      	mov	r1, r3
 800729c:	4b95      	ldr	r3, [pc, #596]	; (80074f4 <USB_EPStartXfer+0x2e0>)
 800729e:	4013      	ands	r3, r2
 80072a0:	610b      	str	r3, [r1, #16]
 80072a2:	e074      	b.n	800738e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b0:	691a      	ldr	r2, [r3, #16]
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	0159      	lsls	r1, r3, #5
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	440b      	add	r3, r1
 80072ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072be:	4619      	mov	r1, r3
 80072c0:	4b8c      	ldr	r3, [pc, #560]	; (80074f4 <USB_EPStartXfer+0x2e0>)
 80072c2:	4013      	ands	r3, r2
 80072c4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d2:	691a      	ldr	r2, [r3, #16]
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	0159      	lsls	r1, r3, #5
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	440b      	add	r3, r1
 80072dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e0:	4619      	mov	r1, r3
 80072e2:	4b83      	ldr	r3, [pc, #524]	; (80074f0 <USB_EPStartXfer+0x2dc>)
 80072e4:	4013      	ands	r3, r2
 80072e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6999      	ldr	r1, [r3, #24]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	440b      	add	r3, r1
 8007300:	1e59      	subs	r1, r3, #1
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	fbb1 f3f3 	udiv	r3, r1, r3
 800730a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800730c:	4b7a      	ldr	r3, [pc, #488]	; (80074f8 <USB_EPStartXfer+0x2e4>)
 800730e:	400b      	ands	r3, r1
 8007310:	69b9      	ldr	r1, [r7, #24]
 8007312:	0148      	lsls	r0, r1, #5
 8007314:	69f9      	ldr	r1, [r7, #28]
 8007316:	4401      	add	r1, r0
 8007318:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800731c:	4313      	orrs	r3, r2
 800731e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732c:	691a      	ldr	r2, [r3, #16]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007336:	69b9      	ldr	r1, [r7, #24]
 8007338:	0148      	lsls	r0, r1, #5
 800733a:	69f9      	ldr	r1, [r7, #28]
 800733c:	4401      	add	r1, r0
 800733e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007342:	4313      	orrs	r3, r2
 8007344:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	791b      	ldrb	r3, [r3, #4]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d11f      	bne.n	800738e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	0151      	lsls	r1, r2, #5
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	440a      	add	r2, r1
 8007364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007368:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800736c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	0151      	lsls	r1, r2, #5
 8007380:	69fa      	ldr	r2, [r7, #28]
 8007382:	440a      	add	r2, r1
 8007384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007388:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800738c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d14b      	bne.n	800742c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d009      	beq.n	80073b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a8:	461a      	mov	r2, r3
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	791b      	ldrb	r3, [r3, #4]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d128      	bne.n	800740a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d110      	bne.n	80073ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	0151      	lsls	r1, r2, #5
 80073da:	69fa      	ldr	r2, [r7, #28]
 80073dc:	440a      	add	r2, r1
 80073de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073e6:	6013      	str	r3, [r2, #0]
 80073e8:	e00f      	b.n	800740a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	0151      	lsls	r1, r2, #5
 80073fc:	69fa      	ldr	r2, [r7, #28]
 80073fe:	440a      	add	r2, r1
 8007400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007408:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	440a      	add	r2, r1
 8007420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007424:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	e137      	b.n	800769c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	0151      	lsls	r1, r2, #5
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	440a      	add	r2, r1
 8007442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007446:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800744a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	791b      	ldrb	r3, [r3, #4]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d015      	beq.n	8007480 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 811f 	beq.w	800769c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	f003 030f 	and.w	r3, r3, #15
 800746e:	2101      	movs	r1, #1
 8007470:	fa01 f303 	lsl.w	r3, r1, r3
 8007474:	69f9      	ldr	r1, [r7, #28]
 8007476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800747a:	4313      	orrs	r3, r2
 800747c:	634b      	str	r3, [r1, #52]	; 0x34
 800747e:	e10d      	b.n	800769c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748c:	2b00      	cmp	r3, #0
 800748e:	d110      	bne.n	80074b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	69fa      	ldr	r2, [r7, #28]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	e00f      	b.n	80074d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	69ba      	ldr	r2, [r7, #24]
 80074c2:	0151      	lsls	r1, r2, #5
 80074c4:	69fa      	ldr	r2, [r7, #28]
 80074c6:	440a      	add	r2, r1
 80074c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6919      	ldr	r1, [r3, #16]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	781a      	ldrb	r2, [r3, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	b298      	uxth	r0, r3
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	4603      	mov	r3, r0
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 faea 	bl	8007ac0 <USB_WritePacket>
 80074ec:	e0d6      	b.n	800769c <USB_EPStartXfer+0x488>
 80074ee:	bf00      	nop
 80074f0:	e007ffff 	.word	0xe007ffff
 80074f4:	fff80000 	.word	0xfff80000
 80074f8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007508:	691a      	ldr	r2, [r3, #16]
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	0159      	lsls	r1, r3, #5
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	440b      	add	r3, r1
 8007512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007516:	4619      	mov	r1, r3
 8007518:	4b63      	ldr	r3, [pc, #396]	; (80076a8 <USB_EPStartXfer+0x494>)
 800751a:	4013      	ands	r3, r2
 800751c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	0159      	lsls	r1, r3, #5
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	440b      	add	r3, r1
 8007534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007538:	4619      	mov	r1, r3
 800753a:	4b5c      	ldr	r3, [pc, #368]	; (80076ac <USB_EPStartXfer+0x498>)
 800753c:	4013      	ands	r3, r2
 800753e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d123      	bne.n	8007590 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007554:	691a      	ldr	r2, [r3, #16]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800755e:	69b9      	ldr	r1, [r7, #24]
 8007560:	0148      	lsls	r0, r1, #5
 8007562:	69f9      	ldr	r1, [r7, #28]
 8007564:	4401      	add	r1, r0
 8007566:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800756a:	4313      	orrs	r3, r2
 800756c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	0151      	lsls	r1, r2, #5
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	440a      	add	r2, r1
 8007584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800758c:	6113      	str	r3, [r2, #16]
 800758e:	e037      	b.n	8007600 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	699a      	ldr	r2, [r3, #24]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	4413      	add	r3, r2
 800759a:	1e5a      	subs	r2, r3, #1
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	8afa      	ldrh	r2, [r7, #22]
 80075ac:	fb03 f202 	mul.w	r2, r3, r2
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	8afb      	ldrh	r3, [r7, #22]
 80075c4:	04d9      	lsls	r1, r3, #19
 80075c6:	4b3a      	ldr	r3, [pc, #232]	; (80076b0 <USB_EPStartXfer+0x49c>)
 80075c8:	400b      	ands	r3, r1
 80075ca:	69b9      	ldr	r1, [r7, #24]
 80075cc:	0148      	lsls	r0, r1, #5
 80075ce:	69f9      	ldr	r1, [r7, #28]
 80075d0:	4401      	add	r1, r0
 80075d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075d6:	4313      	orrs	r3, r2
 80075d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e6:	691a      	ldr	r2, [r3, #16]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075f0:	69b9      	ldr	r1, [r7, #24]
 80075f2:	0148      	lsls	r0, r1, #5
 80075f4:	69f9      	ldr	r1, [r7, #28]
 80075f6:	4401      	add	r1, r0
 80075f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075fc:	4313      	orrs	r3, r2
 80075fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d10d      	bne.n	8007622 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	6919      	ldr	r1, [r3, #16]
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761e:	460a      	mov	r2, r1
 8007620:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	791b      	ldrb	r3, [r3, #4]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d128      	bne.n	800767c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007636:	2b00      	cmp	r3, #0
 8007638:	d110      	bne.n	800765c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	440a      	add	r2, r1
 8007650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007654:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	e00f      	b.n	800767c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	0151      	lsls	r1, r2, #5
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	440a      	add	r2, r1
 8007672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800767a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	440a      	add	r2, r1
 8007692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800769a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3720      	adds	r7, #32
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	fff80000 	.word	0xfff80000
 80076ac:	e007ffff 	.word	0xe007ffff
 80076b0:	1ff80000 	.word	0x1ff80000

080076b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	785b      	ldrb	r3, [r3, #1]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	f040 80ce 	bne.w	8007872 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d132      	bne.n	8007744 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	691a      	ldr	r2, [r3, #16]
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	0159      	lsls	r1, r3, #5
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	440b      	add	r3, r1
 80076f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f8:	4619      	mov	r1, r3
 80076fa:	4b9a      	ldr	r3, [pc, #616]	; (8007964 <USB_EP0StartXfer+0x2b0>)
 80076fc:	4013      	ands	r3, r2
 80076fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	0151      	lsls	r1, r2, #5
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	440a      	add	r2, r1
 8007716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800771a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800771e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	0159      	lsls	r1, r3, #5
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	440b      	add	r3, r1
 8007736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773a:	4619      	mov	r1, r3
 800773c:	4b8a      	ldr	r3, [pc, #552]	; (8007968 <USB_EP0StartXfer+0x2b4>)
 800773e:	4013      	ands	r3, r2
 8007740:	610b      	str	r3, [r1, #16]
 8007742:	e04e      	b.n	80077e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007750:	691a      	ldr	r2, [r3, #16]
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	0159      	lsls	r1, r3, #5
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	440b      	add	r3, r1
 800775a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800775e:	4619      	mov	r1, r3
 8007760:	4b81      	ldr	r3, [pc, #516]	; (8007968 <USB_EP0StartXfer+0x2b4>)
 8007762:	4013      	ands	r3, r2
 8007764:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	0159      	lsls	r1, r3, #5
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	440b      	add	r3, r1
 800777c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007780:	4619      	mov	r1, r3
 8007782:	4b78      	ldr	r3, [pc, #480]	; (8007964 <USB_EP0StartXfer+0x2b0>)
 8007784:	4013      	ands	r3, r2
 8007786:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	699a      	ldr	r2, [r3, #24]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	429a      	cmp	r2, r3
 8007792:	d903      	bls.n	800779c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c8:	691a      	ldr	r2, [r3, #16]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077d2:	6939      	ldr	r1, [r7, #16]
 80077d4:	0148      	lsls	r0, r1, #5
 80077d6:	6979      	ldr	r1, [r7, #20]
 80077d8:	4401      	add	r1, r0
 80077da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80077de:	4313      	orrs	r3, r2
 80077e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d11e      	bne.n	8007826 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d009      	beq.n	8007804 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fc:	461a      	mov	r2, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	0151      	lsls	r1, r2, #5
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	440a      	add	r2, r1
 800781a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800781e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	e097      	b.n	8007956 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	0151      	lsls	r1, r2, #5
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	440a      	add	r2, r1
 800783c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007840:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007844:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 8083 	beq.w	8007956 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	2101      	movs	r1, #1
 8007862:	fa01 f303 	lsl.w	r3, r1, r3
 8007866:	6979      	ldr	r1, [r7, #20]
 8007868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800786c:	4313      	orrs	r3, r2
 800786e:	634b      	str	r3, [r1, #52]	; 0x34
 8007870:	e071      	b.n	8007956 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787e:	691a      	ldr	r2, [r3, #16]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	0159      	lsls	r1, r3, #5
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	440b      	add	r3, r1
 8007888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788c:	4619      	mov	r1, r3
 800788e:	4b36      	ldr	r3, [pc, #216]	; (8007968 <USB_EP0StartXfer+0x2b4>)
 8007890:	4013      	ands	r3, r2
 8007892:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a0:	691a      	ldr	r2, [r3, #16]
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	0159      	lsls	r1, r3, #5
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	440b      	add	r3, r1
 80078aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ae:	4619      	mov	r1, r3
 80078b0:	4b2c      	ldr	r3, [pc, #176]	; (8007964 <USB_EP0StartXfer+0x2b0>)
 80078b2:	4013      	ands	r3, r2
 80078b4:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fa:	691a      	ldr	r2, [r3, #16]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007904:	6939      	ldr	r1, [r7, #16]
 8007906:	0148      	lsls	r0, r1, #5
 8007908:	6979      	ldr	r1, [r7, #20]
 800790a:	4401      	add	r1, r0
 800790c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007910:	4313      	orrs	r3, r2
 8007912:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d10d      	bne.n	8007936 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d009      	beq.n	8007936 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6919      	ldr	r1, [r3, #16]
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007932:	460a      	mov	r2, r1
 8007934:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	0151      	lsls	r1, r2, #5
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	440a      	add	r2, r1
 800794c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007950:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007954:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	371c      	adds	r7, #28
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	e007ffff 	.word	0xe007ffff
 8007968:	fff80000 	.word	0xfff80000

0800796c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d14a      	bne.n	8007a20 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800799e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079a2:	f040 8086 	bne.w	8007ab2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	7812      	ldrb	r2, [r2, #0]
 80079ba:	0151      	lsls	r1, r2, #5
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	440a      	add	r2, r1
 80079c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	7812      	ldrb	r2, [r2, #0]
 80079de:	0151      	lsls	r1, r2, #5
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	440a      	add	r2, r1
 80079e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3301      	adds	r3, #1
 80079f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d902      	bls.n	8007a04 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	75fb      	strb	r3, [r7, #23]
          break;
 8007a02:	e056      	b.n	8007ab2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a1c:	d0e7      	beq.n	80079ee <USB_EPStopXfer+0x82>
 8007a1e:	e048      	b.n	8007ab2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a38:	d13b      	bne.n	8007ab2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	7812      	ldrb	r2, [r2, #0]
 8007a4e:	0151      	lsls	r1, r2, #5
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	440a      	add	r2, r1
 8007a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a5c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	7812      	ldrb	r2, [r2, #0]
 8007a72:	0151      	lsls	r1, r2, #5
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	440a      	add	r2, r1
 8007a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3301      	adds	r3, #1
 8007a86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d902      	bls.n	8007a98 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	75fb      	strb	r3, [r7, #23]
          break;
 8007a96:	e00c      	b.n	8007ab2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ab0:	d0e7      	beq.n	8007a82 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	371c      	adds	r7, #28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b089      	sub	sp, #36	; 0x24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	4611      	mov	r1, r2
 8007acc:	461a      	mov	r2, r3
 8007ace:	460b      	mov	r3, r1
 8007ad0:	71fb      	strb	r3, [r7, #7]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ade:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d123      	bne.n	8007b2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ae6:	88bb      	ldrh	r3, [r7, #4]
 8007ae8:	3303      	adds	r3, #3
 8007aea:	089b      	lsrs	r3, r3, #2
 8007aec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007aee:	2300      	movs	r3, #0
 8007af0:	61bb      	str	r3, [r7, #24]
 8007af2:	e018      	b.n	8007b26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	031a      	lsls	r2, r3, #12
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b00:	461a      	mov	r2, r3
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	3301      	adds	r3, #1
 8007b12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	3301      	adds	r3, #1
 8007b18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	3301      	adds	r3, #1
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d3e2      	bcc.n	8007af4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3724      	adds	r7, #36	; 0x24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b08b      	sub	sp, #44	; 0x2c
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b52:	88fb      	ldrh	r3, [r7, #6]
 8007b54:	089b      	lsrs	r3, r3, #2
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b5a:	88fb      	ldrh	r3, [r7, #6]
 8007b5c:	f003 0303 	and.w	r3, r3, #3
 8007b60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b62:	2300      	movs	r3, #0
 8007b64:	623b      	str	r3, [r7, #32]
 8007b66:	e014      	b.n	8007b92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	3301      	adds	r3, #1
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	3301      	adds	r3, #1
 8007b84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	3301      	adds	r3, #1
 8007b8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	623b      	str	r3, [r7, #32]
 8007b92:	6a3a      	ldr	r2, [r7, #32]
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d3e6      	bcc.n	8007b68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b9a:	8bfb      	ldrh	r3, [r7, #30]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d01e      	beq.n	8007bde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007baa:	461a      	mov	r2, r3
 8007bac:	f107 0310 	add.w	r3, r7, #16
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	701a      	strb	r2, [r3, #0]
      i++;
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	623b      	str	r3, [r7, #32]
      pDest++;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	3301      	adds	r3, #1
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007bd2:	8bfb      	ldrh	r3, [r7, #30]
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007bd8:	8bfb      	ldrh	r3, [r7, #30]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1ea      	bne.n	8007bb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	372c      	adds	r7, #44	; 0x2c
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	785b      	ldrb	r3, [r3, #1]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d12c      	bne.n	8007c62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	db12      	blt.n	8007c40 <USB_EPSetStall+0x54>
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00f      	beq.n	8007c40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	0151      	lsls	r1, r2, #5
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	440a      	add	r2, r1
 8007c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	0151      	lsls	r1, r2, #5
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	440a      	add	r2, r1
 8007c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	e02b      	b.n	8007cba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	db12      	blt.n	8007c9a <USB_EPSetStall+0xae>
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00f      	beq.n	8007c9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	0151      	lsls	r1, r2, #5
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	440a      	add	r2, r1
 8007c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	0151      	lsls	r1, r2, #5
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	440a      	add	r2, r1
 8007cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007cb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d128      	bne.n	8007d36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	0151      	lsls	r1, r2, #5
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	440a      	add	r2, r1
 8007cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	791b      	ldrb	r3, [r3, #4]
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	d003      	beq.n	8007d14 <USB_EPClearStall+0x4c>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	791b      	ldrb	r3, [r3, #4]
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d138      	bne.n	8007d86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	0151      	lsls	r1, r2, #5
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	440a      	add	r2, r1
 8007d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	e027      	b.n	8007d86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	0151      	lsls	r1, r2, #5
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	440a      	add	r2, r1
 8007d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	791b      	ldrb	r3, [r3, #4]
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d003      	beq.n	8007d66 <USB_EPClearStall+0x9e>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	791b      	ldrb	r3, [r3, #4]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d10f      	bne.n	8007d86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	0151      	lsls	r1, r2, #5
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	440a      	add	r2, r1
 8007d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3714      	adds	r7, #20
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007db2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007db6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	011b      	lsls	r3, r3, #4
 8007dc4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007dc8:	68f9      	ldr	r1, [r7, #12]
 8007dca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dfa:	f023 0303 	bic.w	r3, r3, #3
 8007dfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e0e:	f023 0302 	bic.w	r3, r3, #2
 8007e12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b085      	sub	sp, #20
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e3c:	f023 0303 	bic.w	r3, r3, #3
 8007e40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e50:	f043 0302 	orr.w	r3, r3, #2
 8007e54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b085      	sub	sp, #20
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	0c1b      	lsrs	r3, r3, #16
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b085      	sub	sp, #20
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	b29b      	uxth	r3, r3
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b085      	sub	sp, #20
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f02:	78fb      	ldrb	r3, [r7, #3]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f20:	68bb      	ldr	r3, [r7, #8]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b087      	sub	sp, #28
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	460b      	mov	r3, r1
 8007f38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f5e:	01db      	lsls	r3, r3, #7
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	4013      	ands	r3, r2
 8007f7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	371c      	adds	r7, #28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	f003 0301 	and.w	r3, r3, #1
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
	...

08007fa8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	4b09      	ldr	r3, [pc, #36]	; (8007fec <USB_ActivateSetup+0x44>)
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	fffff800 	.word	0xfffff800

08007ff0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	333c      	adds	r3, #60	; 0x3c
 8008006:	3304      	adds	r3, #4
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	4a26      	ldr	r2, [pc, #152]	; (80080a8 <USB_EP0_OutStart+0xb8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d90a      	bls.n	800802a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008024:	d101      	bne.n	800802a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	e037      	b.n	800809a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008030:	461a      	mov	r2, r3
 8008032:	2300      	movs	r3, #0
 8008034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008058:	f043 0318 	orr.w	r3, r3, #24
 800805c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800806c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008070:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008072:	7afb      	ldrb	r3, [r7, #11]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d10f      	bne.n	8008098 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807e:	461a      	mov	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008092:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008096:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	4f54300a 	.word	0x4f54300a

080080ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3301      	adds	r3, #1
 80080bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4a13      	ldr	r2, [pc, #76]	; (8008110 <USB_CoreReset+0x64>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d901      	bls.n	80080ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e01b      	b.n	8008102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	daf2      	bge.n	80080b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f043 0201 	orr.w	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3301      	adds	r3, #1
 80080e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4a09      	ldr	r2, [pc, #36]	; (8008110 <USB_CoreReset+0x64>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d901      	bls.n	80080f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e006      	b.n	8008102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d0f0      	beq.n	80080e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	00030d40 	.word	0x00030d40

08008114 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008120:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008124:	f005 fae2 	bl	800d6ec <malloc>
 8008128:	4603      	mov	r3, r0
 800812a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d109      	bne.n	8008146 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	32b0      	adds	r2, #176	; 0xb0
 800813c:	2100      	movs	r1, #0
 800813e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008142:	2302      	movs	r3, #2
 8008144:	e0d4      	b.n	80082f0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008146:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800814a:	2100      	movs	r1, #0
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f005 fb89 	bl	800d864 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	32b0      	adds	r2, #176	; 0xb0
 800815c:	68f9      	ldr	r1, [r7, #12]
 800815e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	32b0      	adds	r2, #176	; 0xb0
 800816c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	7c1b      	ldrb	r3, [r3, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d138      	bne.n	80081f0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800817e:	4b5e      	ldr	r3, [pc, #376]	; (80082f8 <USBD_CDC_Init+0x1e4>)
 8008180:	7819      	ldrb	r1, [r3, #0]
 8008182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008186:	2202      	movs	r2, #2
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f005 f90c 	bl	800d3a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800818e:	4b5a      	ldr	r3, [pc, #360]	; (80082f8 <USBD_CDC_Init+0x1e4>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	f003 020f 	and.w	r2, r3, #15
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	440b      	add	r3, r1
 80081a2:	3324      	adds	r3, #36	; 0x24
 80081a4:	2201      	movs	r2, #1
 80081a6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80081a8:	4b54      	ldr	r3, [pc, #336]	; (80082fc <USBD_CDC_Init+0x1e8>)
 80081aa:	7819      	ldrb	r1, [r3, #0]
 80081ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081b0:	2202      	movs	r2, #2
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f005 f8f7 	bl	800d3a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80081b8:	4b50      	ldr	r3, [pc, #320]	; (80082fc <USBD_CDC_Init+0x1e8>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	f003 020f 	and.w	r2, r3, #15
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	4613      	mov	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081d0:	2201      	movs	r2, #1
 80081d2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80081d4:	4b4a      	ldr	r3, [pc, #296]	; (8008300 <USBD_CDC_Init+0x1ec>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	f003 020f 	and.w	r2, r3, #15
 80081dc:	6879      	ldr	r1, [r7, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	3326      	adds	r3, #38	; 0x26
 80081ea:	2210      	movs	r2, #16
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	e035      	b.n	800825c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80081f0:	4b41      	ldr	r3, [pc, #260]	; (80082f8 <USBD_CDC_Init+0x1e4>)
 80081f2:	7819      	ldrb	r1, [r3, #0]
 80081f4:	2340      	movs	r3, #64	; 0x40
 80081f6:	2202      	movs	r2, #2
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f005 f8d4 	bl	800d3a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80081fe:	4b3e      	ldr	r3, [pc, #248]	; (80082f8 <USBD_CDC_Init+0x1e4>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	f003 020f 	and.w	r2, r3, #15
 8008206:	6879      	ldr	r1, [r7, #4]
 8008208:	4613      	mov	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	440b      	add	r3, r1
 8008212:	3324      	adds	r3, #36	; 0x24
 8008214:	2201      	movs	r2, #1
 8008216:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008218:	4b38      	ldr	r3, [pc, #224]	; (80082fc <USBD_CDC_Init+0x1e8>)
 800821a:	7819      	ldrb	r1, [r3, #0]
 800821c:	2340      	movs	r3, #64	; 0x40
 800821e:	2202      	movs	r2, #2
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f005 f8c0 	bl	800d3a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008226:	4b35      	ldr	r3, [pc, #212]	; (80082fc <USBD_CDC_Init+0x1e8>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	f003 020f 	and.w	r2, r3, #15
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800823e:	2201      	movs	r2, #1
 8008240:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008242:	4b2f      	ldr	r3, [pc, #188]	; (8008300 <USBD_CDC_Init+0x1ec>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	f003 020f 	and.w	r2, r3, #15
 800824a:	6879      	ldr	r1, [r7, #4]
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	440b      	add	r3, r1
 8008256:	3326      	adds	r3, #38	; 0x26
 8008258:	2210      	movs	r2, #16
 800825a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800825c:	4b28      	ldr	r3, [pc, #160]	; (8008300 <USBD_CDC_Init+0x1ec>)
 800825e:	7819      	ldrb	r1, [r3, #0]
 8008260:	2308      	movs	r3, #8
 8008262:	2203      	movs	r2, #3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f005 f89e 	bl	800d3a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800826a:	4b25      	ldr	r3, [pc, #148]	; (8008300 <USBD_CDC_Init+0x1ec>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	f003 020f 	and.w	r2, r3, #15
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	4613      	mov	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	440b      	add	r3, r1
 800827e:	3324      	adds	r3, #36	; 0x24
 8008280:	2201      	movs	r2, #1
 8008282:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	33b0      	adds	r3, #176	; 0xb0
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80082ba:	2302      	movs	r3, #2
 80082bc:	e018      	b.n	80082f0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	7c1b      	ldrb	r3, [r3, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10a      	bne.n	80082dc <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082c6:	4b0d      	ldr	r3, [pc, #52]	; (80082fc <USBD_CDC_Init+0x1e8>)
 80082c8:	7819      	ldrb	r1, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f005 f955 	bl	800d584 <USBD_LL_PrepareReceive>
 80082da:	e008      	b.n	80082ee <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082dc:	4b07      	ldr	r3, [pc, #28]	; (80082fc <USBD_CDC_Init+0x1e8>)
 80082de:	7819      	ldrb	r1, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082e6:	2340      	movs	r3, #64	; 0x40
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f005 f94b 	bl	800d584 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20000093 	.word	0x20000093
 80082fc:	20000094 	.word	0x20000094
 8008300:	20000095 	.word	0x20000095

08008304 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008310:	4b3a      	ldr	r3, [pc, #232]	; (80083fc <USBD_CDC_DeInit+0xf8>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f005 f86b 	bl	800d3f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800831c:	4b37      	ldr	r3, [pc, #220]	; (80083fc <USBD_CDC_DeInit+0xf8>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	f003 020f 	and.w	r2, r3, #15
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	440b      	add	r3, r1
 8008330:	3324      	adds	r3, #36	; 0x24
 8008332:	2200      	movs	r2, #0
 8008334:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008336:	4b32      	ldr	r3, [pc, #200]	; (8008400 <USBD_CDC_DeInit+0xfc>)
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f005 f858 	bl	800d3f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008342:	4b2f      	ldr	r3, [pc, #188]	; (8008400 <USBD_CDC_DeInit+0xfc>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	f003 020f 	and.w	r2, r3, #15
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	4613      	mov	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	440b      	add	r3, r1
 8008356:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800835a:	2200      	movs	r2, #0
 800835c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800835e:	4b29      	ldr	r3, [pc, #164]	; (8008404 <USBD_CDC_DeInit+0x100>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f005 f844 	bl	800d3f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800836a:	4b26      	ldr	r3, [pc, #152]	; (8008404 <USBD_CDC_DeInit+0x100>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	f003 020f 	and.w	r2, r3, #15
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	3324      	adds	r3, #36	; 0x24
 8008380:	2200      	movs	r2, #0
 8008382:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008384:	4b1f      	ldr	r3, [pc, #124]	; (8008404 <USBD_CDC_DeInit+0x100>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	f003 020f 	and.w	r2, r3, #15
 800838c:	6879      	ldr	r1, [r7, #4]
 800838e:	4613      	mov	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	440b      	add	r3, r1
 8008398:	3326      	adds	r3, #38	; 0x26
 800839a:	2200      	movs	r2, #0
 800839c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	32b0      	adds	r2, #176	; 0xb0
 80083a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01f      	beq.n	80083f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	33b0      	adds	r3, #176	; 0xb0
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	32b0      	adds	r2, #176	; 0xb0
 80083ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f005 f992 	bl	800d6fc <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	32b0      	adds	r2, #176	; 0xb0
 80083e2:	2100      	movs	r1, #0
 80083e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20000093 	.word	0x20000093
 8008400:	20000094 	.word	0x20000094
 8008404:	20000095 	.word	0x20000095

08008408 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	32b0      	adds	r2, #176	; 0xb0
 800841c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008420:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d101      	bne.n	8008438 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008434:	2303      	movs	r3, #3
 8008436:	e0bf      	b.n	80085b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008440:	2b00      	cmp	r3, #0
 8008442:	d050      	beq.n	80084e6 <USBD_CDC_Setup+0xde>
 8008444:	2b20      	cmp	r3, #32
 8008446:	f040 80af 	bne.w	80085a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	88db      	ldrh	r3, [r3, #6]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d03a      	beq.n	80084c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	b25b      	sxtb	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	da1b      	bge.n	8008494 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	33b0      	adds	r3, #176	; 0xb0
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008472:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	88d2      	ldrh	r2, [r2, #6]
 8008478:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	88db      	ldrh	r3, [r3, #6]
 800847e:	2b07      	cmp	r3, #7
 8008480:	bf28      	it	cs
 8008482:	2307      	movcs	r3, #7
 8008484:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	89fa      	ldrh	r2, [r7, #14]
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 fd6d 	bl	8009f6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008492:	e090      	b.n	80085b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	785a      	ldrb	r2, [r3, #1]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	88db      	ldrh	r3, [r3, #6]
 80084a2:	2b3f      	cmp	r3, #63	; 0x3f
 80084a4:	d803      	bhi.n	80084ae <USBD_CDC_Setup+0xa6>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	88db      	ldrh	r3, [r3, #6]
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	e000      	b.n	80084b0 <USBD_CDC_Setup+0xa8>
 80084ae:	2240      	movs	r2, #64	; 0x40
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80084b6:	6939      	ldr	r1, [r7, #16]
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80084be:	461a      	mov	r2, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 fd7f 	bl	8009fc4 <USBD_CtlPrepareRx>
      break;
 80084c6:	e076      	b.n	80085b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	33b0      	adds	r3, #176	; 0xb0
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	7850      	ldrb	r0, [r2, #1]
 80084de:	2200      	movs	r2, #0
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	4798      	blx	r3
      break;
 80084e4:	e067      	b.n	80085b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	785b      	ldrb	r3, [r3, #1]
 80084ea:	2b0b      	cmp	r3, #11
 80084ec:	d851      	bhi.n	8008592 <USBD_CDC_Setup+0x18a>
 80084ee:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <USBD_CDC_Setup+0xec>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008525 	.word	0x08008525
 80084f8:	080085a1 	.word	0x080085a1
 80084fc:	08008593 	.word	0x08008593
 8008500:	08008593 	.word	0x08008593
 8008504:	08008593 	.word	0x08008593
 8008508:	08008593 	.word	0x08008593
 800850c:	08008593 	.word	0x08008593
 8008510:	08008593 	.word	0x08008593
 8008514:	08008593 	.word	0x08008593
 8008518:	08008593 	.word	0x08008593
 800851c:	0800854f 	.word	0x0800854f
 8008520:	08008579 	.word	0x08008579
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b03      	cmp	r3, #3
 800852e:	d107      	bne.n	8008540 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008530:	f107 030a 	add.w	r3, r7, #10
 8008534:	2202      	movs	r2, #2
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 fd17 	bl	8009f6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800853e:	e032      	b.n	80085a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 fca1 	bl	8009e8a <USBD_CtlError>
            ret = USBD_FAIL;
 8008548:	2303      	movs	r3, #3
 800854a:	75fb      	strb	r3, [r7, #23]
          break;
 800854c:	e02b      	b.n	80085a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b03      	cmp	r3, #3
 8008558:	d107      	bne.n	800856a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800855a:	f107 030d 	add.w	r3, r7, #13
 800855e:	2201      	movs	r2, #1
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f001 fd02 	bl	8009f6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008568:	e01d      	b.n	80085a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 fc8c 	bl	8009e8a <USBD_CtlError>
            ret = USBD_FAIL;
 8008572:	2303      	movs	r3, #3
 8008574:	75fb      	strb	r3, [r7, #23]
          break;
 8008576:	e016      	b.n	80085a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b03      	cmp	r3, #3
 8008582:	d00f      	beq.n	80085a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f001 fc7f 	bl	8009e8a <USBD_CtlError>
            ret = USBD_FAIL;
 800858c:	2303      	movs	r3, #3
 800858e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008590:	e008      	b.n	80085a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 fc78 	bl	8009e8a <USBD_CtlError>
          ret = USBD_FAIL;
 800859a:	2303      	movs	r3, #3
 800859c:	75fb      	strb	r3, [r7, #23]
          break;
 800859e:	e002      	b.n	80085a6 <USBD_CDC_Setup+0x19e>
          break;
 80085a0:	bf00      	nop
 80085a2:	e008      	b.n	80085b6 <USBD_CDC_Setup+0x1ae>
          break;
 80085a4:	bf00      	nop
      }
      break;
 80085a6:	e006      	b.n	80085b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f001 fc6d 	bl	8009e8a <USBD_CtlError>
      ret = USBD_FAIL;
 80085b0:	2303      	movs	r3, #3
 80085b2:	75fb      	strb	r3, [r7, #23]
      break;
 80085b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	32b0      	adds	r2, #176	; 0xb0
 80085de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e065      	b.n	80086b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	32b0      	adds	r2, #176	; 0xb0
 80085f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	f003 020f 	and.w	r2, r3, #15
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	4613      	mov	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	440b      	add	r3, r1
 800860c:	3318      	adds	r3, #24
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d02f      	beq.n	8008674 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	f003 020f 	and.w	r2, r3, #15
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	4613      	mov	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	440b      	add	r3, r1
 8008626:	3318      	adds	r3, #24
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	78fb      	ldrb	r3, [r7, #3]
 800862c:	f003 010f 	and.w	r1, r3, #15
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	460b      	mov	r3, r1
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	440b      	add	r3, r1
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4403      	add	r3, r0
 800863c:	3348      	adds	r3, #72	; 0x48
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	fbb2 f1f3 	udiv	r1, r2, r3
 8008644:	fb01 f303 	mul.w	r3, r1, r3
 8008648:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800864a:	2b00      	cmp	r3, #0
 800864c:	d112      	bne.n	8008674 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	f003 020f 	and.w	r2, r3, #15
 8008654:	6879      	ldr	r1, [r7, #4]
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	440b      	add	r3, r1
 8008660:	3318      	adds	r3, #24
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008666:	78f9      	ldrb	r1, [r7, #3]
 8008668:	2300      	movs	r3, #0
 800866a:	2200      	movs	r2, #0
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f004 ff68 	bl	800d542 <USBD_LL_Transmit>
 8008672:	e01f      	b.n	80086b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2200      	movs	r2, #0
 8008678:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	33b0      	adds	r3, #176	; 0xb0
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d010      	beq.n	80086b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	33b0      	adds	r3, #176	; 0xb0
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80086b0:	78fa      	ldrb	r2, [r7, #3]
 80086b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	460b      	mov	r3, r1
 80086c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	32b0      	adds	r2, #176	; 0xb0
 80086d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	32b0      	adds	r2, #176	; 0xb0
 80086e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e01a      	b.n	8008726 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f004 ff66 	bl	800d5c6 <USBD_LL_GetRxDataSize>
 80086fa:	4602      	mov	r2, r0
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	33b0      	adds	r3, #176	; 0xb0
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008720:	4611      	mov	r1, r2
 8008722:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	32b0      	adds	r2, #176	; 0xb0
 8008740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008744:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800874c:	2303      	movs	r3, #3
 800874e:	e025      	b.n	800879c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	33b0      	adds	r3, #176	; 0xb0
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01a      	beq.n	800879a <USBD_CDC_EP0_RxReady+0x6c>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800876a:	2bff      	cmp	r3, #255	; 0xff
 800876c:	d015      	beq.n	800879a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	33b0      	adds	r3, #176	; 0xb0
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008786:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800878e:	b292      	uxth	r2, r2
 8008790:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	22ff      	movs	r2, #255	; 0xff
 8008796:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087ac:	2182      	movs	r1, #130	; 0x82
 80087ae:	4818      	ldr	r0, [pc, #96]	; (8008810 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087b0:	f000 fd09 	bl	80091c6 <USBD_GetEpDesc>
 80087b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087b6:	2101      	movs	r1, #1
 80087b8:	4815      	ldr	r0, [pc, #84]	; (8008810 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087ba:	f000 fd04 	bl	80091c6 <USBD_GetEpDesc>
 80087be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087c0:	2181      	movs	r1, #129	; 0x81
 80087c2:	4813      	ldr	r0, [pc, #76]	; (8008810 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80087c4:	f000 fcff 	bl	80091c6 <USBD_GetEpDesc>
 80087c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2210      	movs	r2, #16
 80087d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d006      	beq.n	80087ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	2200      	movs	r2, #0
 80087e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087e4:	711a      	strb	r2, [r3, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d006      	beq.n	80087fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087f8:	711a      	strb	r2, [r3, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2243      	movs	r2, #67	; 0x43
 8008802:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008804:	4b02      	ldr	r3, [pc, #8]	; (8008810 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000050 	.word	0x20000050

08008814 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800881c:	2182      	movs	r1, #130	; 0x82
 800881e:	4818      	ldr	r0, [pc, #96]	; (8008880 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008820:	f000 fcd1 	bl	80091c6 <USBD_GetEpDesc>
 8008824:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008826:	2101      	movs	r1, #1
 8008828:	4815      	ldr	r0, [pc, #84]	; (8008880 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800882a:	f000 fccc 	bl	80091c6 <USBD_GetEpDesc>
 800882e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008830:	2181      	movs	r1, #129	; 0x81
 8008832:	4813      	ldr	r0, [pc, #76]	; (8008880 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008834:	f000 fcc7 	bl	80091c6 <USBD_GetEpDesc>
 8008838:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	2210      	movs	r2, #16
 8008844:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d006      	beq.n	800885a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	2200      	movs	r2, #0
 8008850:	711a      	strb	r2, [r3, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f042 0202 	orr.w	r2, r2, #2
 8008858:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d006      	beq.n	800886e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	711a      	strb	r2, [r3, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f042 0202 	orr.w	r2, r2, #2
 800886c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2243      	movs	r2, #67	; 0x43
 8008872:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008874:	4b02      	ldr	r3, [pc, #8]	; (8008880 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	20000050 	.word	0x20000050

08008884 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800888c:	2182      	movs	r1, #130	; 0x82
 800888e:	4818      	ldr	r0, [pc, #96]	; (80088f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008890:	f000 fc99 	bl	80091c6 <USBD_GetEpDesc>
 8008894:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008896:	2101      	movs	r1, #1
 8008898:	4815      	ldr	r0, [pc, #84]	; (80088f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800889a:	f000 fc94 	bl	80091c6 <USBD_GetEpDesc>
 800889e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088a0:	2181      	movs	r1, #129	; 0x81
 80088a2:	4813      	ldr	r0, [pc, #76]	; (80088f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80088a4:	f000 fc8f 	bl	80091c6 <USBD_GetEpDesc>
 80088a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2210      	movs	r2, #16
 80088b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d006      	beq.n	80088ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2200      	movs	r2, #0
 80088c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088c4:	711a      	strb	r2, [r3, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d006      	beq.n	80088de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088d8:	711a      	strb	r2, [r3, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2243      	movs	r2, #67	; 0x43
 80088e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088e4:	4b02      	ldr	r3, [pc, #8]	; (80088f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	20000050 	.word	0x20000050

080088f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	220a      	movs	r2, #10
 8008900:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008902:	4b03      	ldr	r3, [pc, #12]	; (8008910 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008904:	4618      	mov	r0, r3
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	2000000c 	.word	0x2000000c

08008914 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008924:	2303      	movs	r3, #3
 8008926:	e009      	b.n	800893c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	33b0      	adds	r3, #176	; 0xb0
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	32b0      	adds	r2, #176	; 0xb0
 800895e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008962:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800896a:	2303      	movs	r3, #3
 800896c:	e008      	b.n	8008980 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	371c      	adds	r7, #28
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	32b0      	adds	r2, #176	; 0xb0
 80089a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e004      	b.n	80089ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
	...

080089c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	32b0      	adds	r2, #176	; 0xb0
 80089da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	32b0      	adds	r2, #176	; 0xb0
 80089ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e018      	b.n	8008a28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	7c1b      	ldrb	r3, [r3, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10a      	bne.n	8008a14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089fe:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <USBD_CDC_ReceivePacket+0x68>)
 8008a00:	7819      	ldrb	r1, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f004 fdb9 	bl	800d584 <USBD_LL_PrepareReceive>
 8008a12:	e008      	b.n	8008a26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a14:	4b06      	ldr	r3, [pc, #24]	; (8008a30 <USBD_CDC_ReceivePacket+0x68>)
 8008a16:	7819      	ldrb	r1, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a1e:	2340      	movs	r3, #64	; 0x40
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f004 fdaf 	bl	800d584 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20000094 	.word	0x20000094

08008a34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e01f      	b.n	8008a8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	79fa      	ldrb	r2, [r7, #7]
 8008a7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f004 fc29 	bl	800d2d8 <USBD_LL_Init>
 8008a86:	4603      	mov	r3, r0
 8008a88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e025      	b.n	8008af8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	32ae      	adds	r2, #174	; 0xae
 8008abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00f      	beq.n	8008ae8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	32ae      	adds	r2, #174	; 0xae
 8008ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	f107 020e 	add.w	r2, r7, #14
 8008adc:	4610      	mov	r0, r2
 8008ade:	4798      	blx	r3
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f004 fc31 	bl	800d370 <USBD_LL_Start>
 8008b0e:	4603      	mov	r3, r0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	460b      	mov	r3, r1
 8008b38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d009      	beq.n	8008b5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	78fa      	ldrb	r2, [r7, #3]
 8008b52:	4611      	mov	r1, r2
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	4798      	blx	r3
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	460b      	mov	r3, r1
 8008b70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	4611      	mov	r1, r2
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	4798      	blx	r3
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f001 f932 	bl	8009e16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008bce:	f003 031f 	and.w	r3, r3, #31
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d01a      	beq.n	8008c0c <USBD_LL_SetupStage+0x72>
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d822      	bhi.n	8008c20 <USBD_LL_SetupStage+0x86>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d002      	beq.n	8008be4 <USBD_LL_SetupStage+0x4a>
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d00a      	beq.n	8008bf8 <USBD_LL_SetupStage+0x5e>
 8008be2:	e01d      	b.n	8008c20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fb5f 	bl	80092b0 <USBD_StdDevReq>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8008bf6:	e020      	b.n	8008c3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fbc7 	bl	8009394 <USBD_StdItfReq>
 8008c06:	4603      	mov	r3, r0
 8008c08:	73fb      	strb	r3, [r7, #15]
      break;
 8008c0a:	e016      	b.n	8008c3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fc29 	bl	800946c <USBD_StdEPReq>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008c1e:	e00c      	b.n	8008c3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f004 fbfe 	bl	800d430 <USBD_LL_StallEP>
 8008c34:	4603      	mov	r3, r0
 8008c36:	73fb      	strb	r3, [r7, #15]
      break;
 8008c38:	bf00      	nop
  }

  return ret;
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	607a      	str	r2, [r7, #4]
 8008c50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008c56:	7afb      	ldrb	r3, [r7, #11]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d16e      	bne.n	8008d3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c6a:	2b03      	cmp	r3, #3
 8008c6c:	f040 8098 	bne.w	8008da0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d913      	bls.n	8008ca4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	689a      	ldr	r2, [r3, #8]
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	1ad2      	subs	r2, r2, r3
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	68da      	ldr	r2, [r3, #12]
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	4293      	cmp	r3, r2
 8008c94:	bf28      	it	cs
 8008c96:	4613      	movcs	r3, r2
 8008c98:	461a      	mov	r2, r3
 8008c9a:	6879      	ldr	r1, [r7, #4]
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f001 f9ae 	bl	8009ffe <USBD_CtlContinueRx>
 8008ca2:	e07d      	b.n	8008da0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008caa:	f003 031f 	and.w	r3, r3, #31
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d014      	beq.n	8008cdc <USBD_LL_DataOutStage+0x98>
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d81d      	bhi.n	8008cf2 <USBD_LL_DataOutStage+0xae>
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d002      	beq.n	8008cc0 <USBD_LL_DataOutStage+0x7c>
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d003      	beq.n	8008cc6 <USBD_LL_DataOutStage+0x82>
 8008cbe:	e018      	b.n	8008cf2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	75bb      	strb	r3, [r7, #22]
            break;
 8008cc4:	e018      	b.n	8008cf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	4619      	mov	r1, r3
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 fa5e 	bl	8009192 <USBD_CoreFindIF>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	75bb      	strb	r3, [r7, #22]
            break;
 8008cda:	e00d      	b.n	8008cf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 fa60 	bl	80091ac <USBD_CoreFindEP>
 8008cec:	4603      	mov	r3, r0
 8008cee:	75bb      	strb	r3, [r7, #22]
            break;
 8008cf0:	e002      	b.n	8008cf8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75bb      	strb	r3, [r7, #22]
            break;
 8008cf6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008cf8:	7dbb      	ldrb	r3, [r7, #22]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d119      	bne.n	8008d32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d113      	bne.n	8008d32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008d0a:	7dba      	ldrb	r2, [r7, #22]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	32ae      	adds	r2, #174	; 0xae
 8008d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00b      	beq.n	8008d32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008d1a:	7dba      	ldrb	r2, [r7, #22]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008d22:	7dba      	ldrb	r2, [r7, #22]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	32ae      	adds	r2, #174	; 0xae
 8008d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f001 f974 	bl	800a020 <USBD_CtlSendStatus>
 8008d38:	e032      	b.n	8008da0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008d3a:	7afb      	ldrb	r3, [r7, #11]
 8008d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	4619      	mov	r1, r3
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 fa31 	bl	80091ac <USBD_CoreFindEP>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d4e:	7dbb      	ldrb	r3, [r7, #22]
 8008d50:	2bff      	cmp	r3, #255	; 0xff
 8008d52:	d025      	beq.n	8008da0 <USBD_LL_DataOutStage+0x15c>
 8008d54:	7dbb      	ldrb	r3, [r7, #22]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d122      	bne.n	8008da0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d117      	bne.n	8008d96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008d66:	7dba      	ldrb	r2, [r7, #22]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	32ae      	adds	r2, #174	; 0xae
 8008d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00f      	beq.n	8008d96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008d76:	7dba      	ldrb	r2, [r7, #22]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008d7e:	7dba      	ldrb	r2, [r7, #22]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	32ae      	adds	r2, #174	; 0xae
 8008d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	7afa      	ldrb	r2, [r7, #11]
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	4798      	blx	r3
 8008d92:	4603      	mov	r3, r0
 8008d94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
 8008d9e:	e000      	b.n	8008da2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b086      	sub	sp, #24
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	460b      	mov	r3, r1
 8008db4:	607a      	str	r2, [r7, #4]
 8008db6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008db8:	7afb      	ldrb	r3, [r7, #11]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d16f      	bne.n	8008e9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3314      	adds	r3, #20
 8008dc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d15a      	bne.n	8008e84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d914      	bls.n	8008e04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	689a      	ldr	r2, [r3, #8]
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	1ad2      	subs	r2, r2, r3
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	461a      	mov	r2, r3
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f001 f8d6 	bl	8009fa2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008df6:	2300      	movs	r3, #0
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f004 fbc1 	bl	800d584 <USBD_LL_PrepareReceive>
 8008e02:	e03f      	b.n	8008e84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d11c      	bne.n	8008e4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d316      	bcc.n	8008e4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d20f      	bcs.n	8008e4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f001 f8b7 	bl	8009fa2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	2200      	movs	r2, #0
 8008e40:	2100      	movs	r1, #0
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f004 fb9e 	bl	800d584 <USBD_LL_PrepareReceive>
 8008e48:	e01c      	b.n	8008e84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d10f      	bne.n	8008e76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d009      	beq.n	8008e76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e76:	2180      	movs	r1, #128	; 0x80
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f004 fad9 	bl	800d430 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f001 f8e1 	bl	800a046 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d03a      	beq.n	8008f04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff fe42 	bl	8008b18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e9c:	e032      	b.n	8008f04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008e9e:	7afb      	ldrb	r3, [r7, #11]
 8008ea0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 f97f 	bl	80091ac <USBD_CoreFindEP>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	2bff      	cmp	r3, #255	; 0xff
 8008eb6:	d025      	beq.n	8008f04 <USBD_LL_DataInStage+0x15a>
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d122      	bne.n	8008f04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	d11c      	bne.n	8008f04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008eca:	7dfa      	ldrb	r2, [r7, #23]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	32ae      	adds	r2, #174	; 0xae
 8008ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d014      	beq.n	8008f04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008eda:	7dfa      	ldrb	r2, [r7, #23]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008ee2:	7dfa      	ldrb	r2, [r7, #23]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	32ae      	adds	r2, #174	; 0xae
 8008ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	7afa      	ldrb	r2, [r7, #11]
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	4798      	blx	r3
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008efa:	7dbb      	ldrb	r3, [r7, #22]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008f00:	7dbb      	ldrb	r3, [r7, #22]
 8008f02:	e000      	b.n	8008f06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3718      	adds	r7, #24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d014      	beq.n	8008f74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00e      	beq.n	8008f74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6852      	ldr	r2, [r2, #4]
 8008f62:	b2d2      	uxtb	r2, r2
 8008f64:	4611      	mov	r1, r2
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	4798      	blx	r3
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008f70:	2303      	movs	r3, #3
 8008f72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f74:	2340      	movs	r3, #64	; 0x40
 8008f76:	2200      	movs	r2, #0
 8008f78:	2100      	movs	r1, #0
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f004 fa13 	bl	800d3a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2240      	movs	r2, #64	; 0x40
 8008f8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f90:	2340      	movs	r3, #64	; 0x40
 8008f92:	2200      	movs	r2, #0
 8008f94:	2180      	movs	r1, #128	; 0x80
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f004 fa05 	bl	800d3a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2240      	movs	r2, #64	; 0x40
 8008fa6:	621a      	str	r2, [r3, #32]

  return ret;
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	460b      	mov	r3, r1
 8008fbc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	78fa      	ldrb	r2, [r7, #3]
 8008fc2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2204      	movs	r2, #4
 8008fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b083      	sub	sp, #12
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b04      	cmp	r3, #4
 8009010:	d106      	bne.n	8009020 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009018:	b2da      	uxtb	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b03      	cmp	r3, #3
 8009040:	d110      	bne.n	8009064 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d005      	beq.n	8009064 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b082      	sub	sp, #8
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	460b      	mov	r3, r1
 8009078:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	32ae      	adds	r2, #174	; 0xae
 8009084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800908c:	2303      	movs	r3, #3
 800908e:	e01c      	b.n	80090ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b03      	cmp	r3, #3
 800909a:	d115      	bne.n	80090c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	32ae      	adds	r2, #174	; 0xae
 80090a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00b      	beq.n	80090c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	32ae      	adds	r2, #174	; 0xae
 80090ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090be:	6a1b      	ldr	r3, [r3, #32]
 80090c0:	78fa      	ldrb	r2, [r7, #3]
 80090c2:	4611      	mov	r1, r2
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	460b      	mov	r3, r1
 80090dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	32ae      	adds	r2, #174	; 0xae
 80090e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e01c      	b.n	800912e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d115      	bne.n	800912c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	32ae      	adds	r2, #174	; 0xae
 800910a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800910e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00b      	beq.n	800912c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	32ae      	adds	r2, #174	; 0xae
 800911e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	78fa      	ldrb	r2, [r7, #3]
 8009126:	4611      	mov	r1, r2
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00e      	beq.n	8009188 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	6852      	ldr	r2, [r2, #4]
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	4611      	mov	r1, r2
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	4798      	blx	r3
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009184:	2303      	movs	r3, #3
 8009186:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009188:	7bfb      	ldrb	r3, [r7, #15]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009192:	b480      	push	{r7}
 8009194:	b083      	sub	sp, #12
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	460b      	mov	r3, r1
 800919c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800919e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80091b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b086      	sub	sp, #24
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	460b      	mov	r3, r1
 80091d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80091da:	2300      	movs	r3, #0
 80091dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	885b      	ldrh	r3, [r3, #2]
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d920      	bls.n	8009230 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80091f6:	e013      	b.n	8009220 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80091f8:	f107 030a 	add.w	r3, r7, #10
 80091fc:	4619      	mov	r1, r3
 80091fe:	6978      	ldr	r0, [r7, #20]
 8009200:	f000 f81b 	bl	800923a <USBD_GetNextDesc>
 8009204:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	785b      	ldrb	r3, [r3, #1]
 800920a:	2b05      	cmp	r3, #5
 800920c:	d108      	bne.n	8009220 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	789b      	ldrb	r3, [r3, #2]
 8009216:	78fa      	ldrb	r2, [r7, #3]
 8009218:	429a      	cmp	r2, r3
 800921a:	d008      	beq.n	800922e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800921c:	2300      	movs	r3, #0
 800921e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	885b      	ldrh	r3, [r3, #2]
 8009224:	b29a      	uxth	r2, r3
 8009226:	897b      	ldrh	r3, [r7, #10]
 8009228:	429a      	cmp	r2, r3
 800922a:	d8e5      	bhi.n	80091f8 <USBD_GetEpDesc+0x32>
 800922c:	e000      	b.n	8009230 <USBD_GetEpDesc+0x6a>
          break;
 800922e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009230:	693b      	ldr	r3, [r7, #16]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800923a:	b480      	push	{r7}
 800923c:	b085      	sub	sp, #20
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	881a      	ldrh	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	b29b      	uxth	r3, r3
 8009252:	4413      	add	r3, r2
 8009254:	b29a      	uxth	r2, r3
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4413      	add	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009266:	68fb      	ldr	r3, [r7, #12]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	3301      	adds	r3, #1
 800928a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009292:	8a3b      	ldrh	r3, [r7, #16]
 8009294:	021b      	lsls	r3, r3, #8
 8009296:	b21a      	sxth	r2, r3
 8009298:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800929c:	4313      	orrs	r3, r2
 800929e:	b21b      	sxth	r3, r3
 80092a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80092a2:	89fb      	ldrh	r3, [r7, #14]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	371c      	adds	r7, #28
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092c6:	2b40      	cmp	r3, #64	; 0x40
 80092c8:	d005      	beq.n	80092d6 <USBD_StdDevReq+0x26>
 80092ca:	2b40      	cmp	r3, #64	; 0x40
 80092cc:	d857      	bhi.n	800937e <USBD_StdDevReq+0xce>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00f      	beq.n	80092f2 <USBD_StdDevReq+0x42>
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	d153      	bne.n	800937e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	32ae      	adds	r2, #174	; 0xae
 80092e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	4798      	blx	r3
 80092ec:	4603      	mov	r3, r0
 80092ee:	73fb      	strb	r3, [r7, #15]
      break;
 80092f0:	e04a      	b.n	8009388 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	2b09      	cmp	r3, #9
 80092f8:	d83b      	bhi.n	8009372 <USBD_StdDevReq+0xc2>
 80092fa:	a201      	add	r2, pc, #4	; (adr r2, 8009300 <USBD_StdDevReq+0x50>)
 80092fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009300:	08009355 	.word	0x08009355
 8009304:	08009369 	.word	0x08009369
 8009308:	08009373 	.word	0x08009373
 800930c:	0800935f 	.word	0x0800935f
 8009310:	08009373 	.word	0x08009373
 8009314:	08009333 	.word	0x08009333
 8009318:	08009329 	.word	0x08009329
 800931c:	08009373 	.word	0x08009373
 8009320:	0800934b 	.word	0x0800934b
 8009324:	0800933d 	.word	0x0800933d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fa3c 	bl	80097a8 <USBD_GetDescriptor>
          break;
 8009330:	e024      	b.n	800937c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fbcb 	bl	8009ad0 <USBD_SetAddress>
          break;
 800933a:	e01f      	b.n	800937c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fc0a 	bl	8009b58 <USBD_SetConfig>
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]
          break;
 8009348:	e018      	b.n	800937c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fcad 	bl	8009cac <USBD_GetConfig>
          break;
 8009352:	e013      	b.n	800937c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fcde 	bl	8009d18 <USBD_GetStatus>
          break;
 800935c:	e00e      	b.n	800937c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fd0d 	bl	8009d80 <USBD_SetFeature>
          break;
 8009366:	e009      	b.n	800937c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fd31 	bl	8009dd2 <USBD_ClrFeature>
          break;
 8009370:	e004      	b.n	800937c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fd88 	bl	8009e8a <USBD_CtlError>
          break;
 800937a:	bf00      	nop
      }
      break;
 800937c:	e004      	b.n	8009388 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800937e:	6839      	ldr	r1, [r7, #0]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fd82 	bl	8009e8a <USBD_CtlError>
      break;
 8009386:	bf00      	nop
  }

  return ret;
 8009388:	7bfb      	ldrb	r3, [r7, #15]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop

08009394 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093aa:	2b40      	cmp	r3, #64	; 0x40
 80093ac:	d005      	beq.n	80093ba <USBD_StdItfReq+0x26>
 80093ae:	2b40      	cmp	r3, #64	; 0x40
 80093b0:	d852      	bhi.n	8009458 <USBD_StdItfReq+0xc4>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <USBD_StdItfReq+0x26>
 80093b6:	2b20      	cmp	r3, #32
 80093b8:	d14e      	bne.n	8009458 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	3b01      	subs	r3, #1
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d840      	bhi.n	800944a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	889b      	ldrh	r3, [r3, #4]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d836      	bhi.n	8009440 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	889b      	ldrh	r3, [r3, #4]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff fed9 	bl	8009192 <USBD_CoreFindIF>
 80093e0:	4603      	mov	r3, r0
 80093e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2bff      	cmp	r3, #255	; 0xff
 80093e8:	d01d      	beq.n	8009426 <USBD_StdItfReq+0x92>
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d11a      	bne.n	8009426 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80093f0:	7bba      	ldrb	r2, [r7, #14]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	32ae      	adds	r2, #174	; 0xae
 80093f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00f      	beq.n	8009420 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009400:	7bba      	ldrb	r2, [r7, #14]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009408:	7bba      	ldrb	r2, [r7, #14]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	32ae      	adds	r2, #174	; 0xae
 800940e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	4798      	blx	r3
 800941a:	4603      	mov	r3, r0
 800941c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800941e:	e004      	b.n	800942a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009420:	2303      	movs	r3, #3
 8009422:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009424:	e001      	b.n	800942a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009426:	2303      	movs	r3, #3
 8009428:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	88db      	ldrh	r3, [r3, #6]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d110      	bne.n	8009454 <USBD_StdItfReq+0xc0>
 8009432:	7bfb      	ldrb	r3, [r7, #15]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10d      	bne.n	8009454 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fdf1 	bl	800a020 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800943e:	e009      	b.n	8009454 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fd21 	bl	8009e8a <USBD_CtlError>
          break;
 8009448:	e004      	b.n	8009454 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fd1c 	bl	8009e8a <USBD_CtlError>
          break;
 8009452:	e000      	b.n	8009456 <USBD_StdItfReq+0xc2>
          break;
 8009454:	bf00      	nop
      }
      break;
 8009456:	e004      	b.n	8009462 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fd15 	bl	8009e8a <USBD_CtlError>
      break;
 8009460:	bf00      	nop
  }

  return ret;
 8009462:	7bfb      	ldrb	r3, [r7, #15]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	889b      	ldrh	r3, [r3, #4]
 800947e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009488:	2b40      	cmp	r3, #64	; 0x40
 800948a:	d007      	beq.n	800949c <USBD_StdEPReq+0x30>
 800948c:	2b40      	cmp	r3, #64	; 0x40
 800948e:	f200 817f 	bhi.w	8009790 <USBD_StdEPReq+0x324>
 8009492:	2b00      	cmp	r3, #0
 8009494:	d02a      	beq.n	80094ec <USBD_StdEPReq+0x80>
 8009496:	2b20      	cmp	r3, #32
 8009498:	f040 817a 	bne.w	8009790 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff fe83 	bl	80091ac <USBD_CoreFindEP>
 80094a6:	4603      	mov	r3, r0
 80094a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094aa:	7b7b      	ldrb	r3, [r7, #13]
 80094ac:	2bff      	cmp	r3, #255	; 0xff
 80094ae:	f000 8174 	beq.w	800979a <USBD_StdEPReq+0x32e>
 80094b2:	7b7b      	ldrb	r3, [r7, #13]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f040 8170 	bne.w	800979a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80094ba:	7b7a      	ldrb	r2, [r7, #13]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80094c2:	7b7a      	ldrb	r2, [r7, #13]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	32ae      	adds	r2, #174	; 0xae
 80094c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f000 8163 	beq.w	800979a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80094d4:	7b7a      	ldrb	r2, [r7, #13]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	32ae      	adds	r2, #174	; 0xae
 80094da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	4798      	blx	r3
 80094e6:	4603      	mov	r3, r0
 80094e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80094ea:	e156      	b.n	800979a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	785b      	ldrb	r3, [r3, #1]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d008      	beq.n	8009506 <USBD_StdEPReq+0x9a>
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	f300 8145 	bgt.w	8009784 <USBD_StdEPReq+0x318>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 809b 	beq.w	8009636 <USBD_StdEPReq+0x1ca>
 8009500:	2b01      	cmp	r3, #1
 8009502:	d03c      	beq.n	800957e <USBD_StdEPReq+0x112>
 8009504:	e13e      	b.n	8009784 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b02      	cmp	r3, #2
 8009510:	d002      	beq.n	8009518 <USBD_StdEPReq+0xac>
 8009512:	2b03      	cmp	r3, #3
 8009514:	d016      	beq.n	8009544 <USBD_StdEPReq+0xd8>
 8009516:	e02c      	b.n	8009572 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009518:	7bbb      	ldrb	r3, [r7, #14]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00d      	beq.n	800953a <USBD_StdEPReq+0xce>
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	2b80      	cmp	r3, #128	; 0x80
 8009522:	d00a      	beq.n	800953a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f003 ff81 	bl	800d430 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800952e:	2180      	movs	r1, #128	; 0x80
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f003 ff7d 	bl	800d430 <USBD_LL_StallEP>
 8009536:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009538:	e020      	b.n	800957c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fca4 	bl	8009e8a <USBD_CtlError>
              break;
 8009542:	e01b      	b.n	800957c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	885b      	ldrh	r3, [r3, #2]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10e      	bne.n	800956a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00b      	beq.n	800956a <USBD_StdEPReq+0xfe>
 8009552:	7bbb      	ldrb	r3, [r7, #14]
 8009554:	2b80      	cmp	r3, #128	; 0x80
 8009556:	d008      	beq.n	800956a <USBD_StdEPReq+0xfe>
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	88db      	ldrh	r3, [r3, #6]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d104      	bne.n	800956a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f003 ff63 	bl	800d430 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fd58 	bl	800a020 <USBD_CtlSendStatus>

              break;
 8009570:	e004      	b.n	800957c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fc88 	bl	8009e8a <USBD_CtlError>
              break;
 800957a:	bf00      	nop
          }
          break;
 800957c:	e107      	b.n	800978e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b02      	cmp	r3, #2
 8009588:	d002      	beq.n	8009590 <USBD_StdEPReq+0x124>
 800958a:	2b03      	cmp	r3, #3
 800958c:	d016      	beq.n	80095bc <USBD_StdEPReq+0x150>
 800958e:	e04b      	b.n	8009628 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009590:	7bbb      	ldrb	r3, [r7, #14]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00d      	beq.n	80095b2 <USBD_StdEPReq+0x146>
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	2b80      	cmp	r3, #128	; 0x80
 800959a:	d00a      	beq.n	80095b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f003 ff45 	bl	800d430 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80095a6:	2180      	movs	r1, #128	; 0x80
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f003 ff41 	bl	800d430 <USBD_LL_StallEP>
 80095ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095b0:	e040      	b.n	8009634 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fc68 	bl	8009e8a <USBD_CtlError>
              break;
 80095ba:	e03b      	b.n	8009634 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	885b      	ldrh	r3, [r3, #2]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d136      	bne.n	8009632 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
 80095c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d004      	beq.n	80095d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f003 ff4b 	bl	800d46e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fd21 	bl	800a020 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80095de:	7bbb      	ldrb	r3, [r7, #14]
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff fde2 	bl	80091ac <USBD_CoreFindEP>
 80095e8:	4603      	mov	r3, r0
 80095ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095ec:	7b7b      	ldrb	r3, [r7, #13]
 80095ee:	2bff      	cmp	r3, #255	; 0xff
 80095f0:	d01f      	beq.n	8009632 <USBD_StdEPReq+0x1c6>
 80095f2:	7b7b      	ldrb	r3, [r7, #13]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d11c      	bne.n	8009632 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80095f8:	7b7a      	ldrb	r2, [r7, #13]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009600:	7b7a      	ldrb	r2, [r7, #13]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	32ae      	adds	r2, #174	; 0xae
 8009606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d010      	beq.n	8009632 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009610:	7b7a      	ldrb	r2, [r7, #13]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	32ae      	adds	r2, #174	; 0xae
 8009616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	4798      	blx	r3
 8009622:	4603      	mov	r3, r0
 8009624:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009626:	e004      	b.n	8009632 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fc2d 	bl	8009e8a <USBD_CtlError>
              break;
 8009630:	e000      	b.n	8009634 <USBD_StdEPReq+0x1c8>
              break;
 8009632:	bf00      	nop
          }
          break;
 8009634:	e0ab      	b.n	800978e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b02      	cmp	r3, #2
 8009640:	d002      	beq.n	8009648 <USBD_StdEPReq+0x1dc>
 8009642:	2b03      	cmp	r3, #3
 8009644:	d032      	beq.n	80096ac <USBD_StdEPReq+0x240>
 8009646:	e097      	b.n	8009778 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009648:	7bbb      	ldrb	r3, [r7, #14]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d007      	beq.n	800965e <USBD_StdEPReq+0x1f2>
 800964e:	7bbb      	ldrb	r3, [r7, #14]
 8009650:	2b80      	cmp	r3, #128	; 0x80
 8009652:	d004      	beq.n	800965e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fc17 	bl	8009e8a <USBD_CtlError>
                break;
 800965c:	e091      	b.n	8009782 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800965e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009662:	2b00      	cmp	r3, #0
 8009664:	da0b      	bge.n	800967e <USBD_StdEPReq+0x212>
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	3310      	adds	r3, #16
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	4413      	add	r3, r2
 800967a:	3304      	adds	r3, #4
 800967c:	e00b      	b.n	8009696 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800967e:	7bbb      	ldrb	r3, [r7, #14]
 8009680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009684:	4613      	mov	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	4413      	add	r3, r2
 8009694:	3304      	adds	r3, #4
 8009696:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	2200      	movs	r2, #0
 800969c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2202      	movs	r2, #2
 80096a2:	4619      	mov	r1, r3
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fc61 	bl	8009f6c <USBD_CtlSendData>
              break;
 80096aa:	e06a      	b.n	8009782 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80096ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	da11      	bge.n	80096d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	f003 020f 	and.w	r2, r3, #15
 80096ba:	6879      	ldr	r1, [r7, #4]
 80096bc:	4613      	mov	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	440b      	add	r3, r1
 80096c6:	3324      	adds	r3, #36	; 0x24
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d117      	bne.n	80096fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fbda 	bl	8009e8a <USBD_CtlError>
                  break;
 80096d6:	e054      	b.n	8009782 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	f003 020f 	and.w	r2, r3, #15
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	4613      	mov	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	440b      	add	r3, r1
 80096ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d104      	bne.n	80096fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fbc7 	bl	8009e8a <USBD_CtlError>
                  break;
 80096fc:	e041      	b.n	8009782 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009702:	2b00      	cmp	r3, #0
 8009704:	da0b      	bge.n	800971e <USBD_StdEPReq+0x2b2>
 8009706:	7bbb      	ldrb	r3, [r7, #14]
 8009708:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800970c:	4613      	mov	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4413      	add	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	3310      	adds	r3, #16
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	4413      	add	r3, r2
 800971a:	3304      	adds	r3, #4
 800971c:	e00b      	b.n	8009736 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009724:	4613      	mov	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	4413      	add	r3, r2
 8009734:	3304      	adds	r3, #4
 8009736:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009738:	7bbb      	ldrb	r3, [r7, #14]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <USBD_StdEPReq+0x2d8>
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	2b80      	cmp	r3, #128	; 0x80
 8009742:	d103      	bne.n	800974c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	2200      	movs	r2, #0
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	e00e      	b.n	800976a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800974c:	7bbb      	ldrb	r3, [r7, #14]
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f003 feab 	bl	800d4ac <USBD_LL_IsStallEP>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	2201      	movs	r2, #1
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	e002      	b.n	800976a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	2200      	movs	r2, #0
 8009768:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2202      	movs	r2, #2
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fbfb 	bl	8009f6c <USBD_CtlSendData>
              break;
 8009776:	e004      	b.n	8009782 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fb85 	bl	8009e8a <USBD_CtlError>
              break;
 8009780:	bf00      	nop
          }
          break;
 8009782:	e004      	b.n	800978e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fb7f 	bl	8009e8a <USBD_CtlError>
          break;
 800978c:	bf00      	nop
      }
      break;
 800978e:	e005      	b.n	800979c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fb79 	bl	8009e8a <USBD_CtlError>
      break;
 8009798:	e000      	b.n	800979c <USBD_StdEPReq+0x330>
      break;
 800979a:	bf00      	nop
  }

  return ret;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
	...

080097a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	885b      	ldrh	r3, [r3, #2]
 80097c2:	0a1b      	lsrs	r3, r3, #8
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	3b01      	subs	r3, #1
 80097c8:	2b0e      	cmp	r3, #14
 80097ca:	f200 8152 	bhi.w	8009a72 <USBD_GetDescriptor+0x2ca>
 80097ce:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <USBD_GetDescriptor+0x2c>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	08009845 	.word	0x08009845
 80097d8:	0800985d 	.word	0x0800985d
 80097dc:	0800989d 	.word	0x0800989d
 80097e0:	08009a73 	.word	0x08009a73
 80097e4:	08009a73 	.word	0x08009a73
 80097e8:	08009a13 	.word	0x08009a13
 80097ec:	08009a3f 	.word	0x08009a3f
 80097f0:	08009a73 	.word	0x08009a73
 80097f4:	08009a73 	.word	0x08009a73
 80097f8:	08009a73 	.word	0x08009a73
 80097fc:	08009a73 	.word	0x08009a73
 8009800:	08009a73 	.word	0x08009a73
 8009804:	08009a73 	.word	0x08009a73
 8009808:	08009a73 	.word	0x08009a73
 800980c:	08009811 	.word	0x08009811
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00b      	beq.n	8009834 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009822:	69db      	ldr	r3, [r3, #28]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	7c12      	ldrb	r2, [r2, #16]
 8009828:	f107 0108 	add.w	r1, r7, #8
 800982c:	4610      	mov	r0, r2
 800982e:	4798      	blx	r3
 8009830:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009832:	e126      	b.n	8009a82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fb27 	bl	8009e8a <USBD_CtlError>
        err++;
 800983c:	7afb      	ldrb	r3, [r7, #11]
 800983e:	3301      	adds	r3, #1
 8009840:	72fb      	strb	r3, [r7, #11]
      break;
 8009842:	e11e      	b.n	8009a82 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	7c12      	ldrb	r2, [r2, #16]
 8009850:	f107 0108 	add.w	r1, r7, #8
 8009854:	4610      	mov	r0, r2
 8009856:	4798      	blx	r3
 8009858:	60f8      	str	r0, [r7, #12]
      break;
 800985a:	e112      	b.n	8009a82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	7c1b      	ldrb	r3, [r3, #16]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10d      	bne.n	8009880 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800986a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986c:	f107 0208 	add.w	r2, r7, #8
 8009870:	4610      	mov	r0, r2
 8009872:	4798      	blx	r3
 8009874:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	3301      	adds	r3, #1
 800987a:	2202      	movs	r2, #2
 800987c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800987e:	e100      	b.n	8009a82 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	f107 0208 	add.w	r2, r7, #8
 800988c:	4610      	mov	r0, r2
 800988e:	4798      	blx	r3
 8009890:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3301      	adds	r3, #1
 8009896:	2202      	movs	r2, #2
 8009898:	701a      	strb	r2, [r3, #0]
      break;
 800989a:	e0f2      	b.n	8009a82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	885b      	ldrh	r3, [r3, #2]
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b05      	cmp	r3, #5
 80098a4:	f200 80ac 	bhi.w	8009a00 <USBD_GetDescriptor+0x258>
 80098a8:	a201      	add	r2, pc, #4	; (adr r2, 80098b0 <USBD_GetDescriptor+0x108>)
 80098aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ae:	bf00      	nop
 80098b0:	080098c9 	.word	0x080098c9
 80098b4:	080098fd 	.word	0x080098fd
 80098b8:	08009931 	.word	0x08009931
 80098bc:	08009965 	.word	0x08009965
 80098c0:	08009999 	.word	0x08009999
 80098c4:	080099cd 	.word	0x080099cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00b      	beq.n	80098ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	7c12      	ldrb	r2, [r2, #16]
 80098e0:	f107 0108 	add.w	r1, r7, #8
 80098e4:	4610      	mov	r0, r2
 80098e6:	4798      	blx	r3
 80098e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ea:	e091      	b.n	8009a10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 facb 	bl	8009e8a <USBD_CtlError>
            err++;
 80098f4:	7afb      	ldrb	r3, [r7, #11]
 80098f6:	3301      	adds	r3, #1
 80098f8:	72fb      	strb	r3, [r7, #11]
          break;
 80098fa:	e089      	b.n	8009a10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00b      	beq.n	8009920 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	7c12      	ldrb	r2, [r2, #16]
 8009914:	f107 0108 	add.w	r1, r7, #8
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
 800991c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800991e:	e077      	b.n	8009a10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fab1 	bl	8009e8a <USBD_CtlError>
            err++;
 8009928:	7afb      	ldrb	r3, [r7, #11]
 800992a:	3301      	adds	r3, #1
 800992c:	72fb      	strb	r3, [r7, #11]
          break;
 800992e:	e06f      	b.n	8009a10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00b      	beq.n	8009954 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	7c12      	ldrb	r2, [r2, #16]
 8009948:	f107 0108 	add.w	r1, r7, #8
 800994c:	4610      	mov	r0, r2
 800994e:	4798      	blx	r3
 8009950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009952:	e05d      	b.n	8009a10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fa97 	bl	8009e8a <USBD_CtlError>
            err++;
 800995c:	7afb      	ldrb	r3, [r7, #11]
 800995e:	3301      	adds	r3, #1
 8009960:	72fb      	strb	r3, [r7, #11]
          break;
 8009962:	e055      	b.n	8009a10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00b      	beq.n	8009988 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	7c12      	ldrb	r2, [r2, #16]
 800997c:	f107 0108 	add.w	r1, r7, #8
 8009980:	4610      	mov	r0, r2
 8009982:	4798      	blx	r3
 8009984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009986:	e043      	b.n	8009a10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fa7d 	bl	8009e8a <USBD_CtlError>
            err++;
 8009990:	7afb      	ldrb	r3, [r7, #11]
 8009992:	3301      	adds	r3, #1
 8009994:	72fb      	strb	r3, [r7, #11]
          break;
 8009996:	e03b      	b.n	8009a10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00b      	beq.n	80099bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	7c12      	ldrb	r2, [r2, #16]
 80099b0:	f107 0108 	add.w	r1, r7, #8
 80099b4:	4610      	mov	r0, r2
 80099b6:	4798      	blx	r3
 80099b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ba:	e029      	b.n	8009a10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fa63 	bl	8009e8a <USBD_CtlError>
            err++;
 80099c4:	7afb      	ldrb	r3, [r7, #11]
 80099c6:	3301      	adds	r3, #1
 80099c8:	72fb      	strb	r3, [r7, #11]
          break;
 80099ca:	e021      	b.n	8009a10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00b      	beq.n	80099f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	7c12      	ldrb	r2, [r2, #16]
 80099e4:	f107 0108 	add.w	r1, r7, #8
 80099e8:	4610      	mov	r0, r2
 80099ea:	4798      	blx	r3
 80099ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ee:	e00f      	b.n	8009a10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fa49 	bl	8009e8a <USBD_CtlError>
            err++;
 80099f8:	7afb      	ldrb	r3, [r7, #11]
 80099fa:	3301      	adds	r3, #1
 80099fc:	72fb      	strb	r3, [r7, #11]
          break;
 80099fe:	e007      	b.n	8009a10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fa41 	bl	8009e8a <USBD_CtlError>
          err++;
 8009a08:	7afb      	ldrb	r3, [r7, #11]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009a0e:	bf00      	nop
      }
      break;
 8009a10:	e037      	b.n	8009a82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	7c1b      	ldrb	r3, [r3, #16]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d109      	bne.n	8009a2e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a22:	f107 0208 	add.w	r2, r7, #8
 8009a26:	4610      	mov	r0, r2
 8009a28:	4798      	blx	r3
 8009a2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a2c:	e029      	b.n	8009a82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fa2a 	bl	8009e8a <USBD_CtlError>
        err++;
 8009a36:	7afb      	ldrb	r3, [r7, #11]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	72fb      	strb	r3, [r7, #11]
      break;
 8009a3c:	e021      	b.n	8009a82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	7c1b      	ldrb	r3, [r3, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10d      	bne.n	8009a62 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4e:	f107 0208 	add.w	r2, r7, #8
 8009a52:	4610      	mov	r0, r2
 8009a54:	4798      	blx	r3
 8009a56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	2207      	movs	r2, #7
 8009a5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a60:	e00f      	b.n	8009a82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fa10 	bl	8009e8a <USBD_CtlError>
        err++;
 8009a6a:	7afb      	ldrb	r3, [r7, #11]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	72fb      	strb	r3, [r7, #11]
      break;
 8009a70:	e007      	b.n	8009a82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fa08 	bl	8009e8a <USBD_CtlError>
      err++;
 8009a7a:	7afb      	ldrb	r3, [r7, #11]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	72fb      	strb	r3, [r7, #11]
      break;
 8009a80:	bf00      	nop
  }

  if (err != 0U)
 8009a82:	7afb      	ldrb	r3, [r7, #11]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d11e      	bne.n	8009ac6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	88db      	ldrh	r3, [r3, #6]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d016      	beq.n	8009abe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009a90:	893b      	ldrh	r3, [r7, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00e      	beq.n	8009ab4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	88da      	ldrh	r2, [r3, #6]
 8009a9a:	893b      	ldrh	r3, [r7, #8]
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	bf28      	it	cs
 8009aa0:	4613      	movcs	r3, r2
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009aa6:	893b      	ldrh	r3, [r7, #8]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	68f9      	ldr	r1, [r7, #12]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fa5d 	bl	8009f6c <USBD_CtlSendData>
 8009ab2:	e009      	b.n	8009ac8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f9e7 	bl	8009e8a <USBD_CtlError>
 8009abc:	e004      	b.n	8009ac8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 faae 	bl	800a020 <USBD_CtlSendStatus>
 8009ac4:	e000      	b.n	8009ac8 <USBD_GetDescriptor+0x320>
    return;
 8009ac6:	bf00      	nop
  }
}
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop

08009ad0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	889b      	ldrh	r3, [r3, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d131      	bne.n	8009b46 <USBD_SetAddress+0x76>
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	88db      	ldrh	r3, [r3, #6]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d12d      	bne.n	8009b46 <USBD_SetAddress+0x76>
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	885b      	ldrh	r3, [r3, #2]
 8009aee:	2b7f      	cmp	r3, #127	; 0x7f
 8009af0:	d829      	bhi.n	8009b46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	885b      	ldrh	r3, [r3, #2]
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009afc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d104      	bne.n	8009b14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f9bc 	bl	8009e8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b12:	e01d      	b.n	8009b50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	7bfa      	ldrb	r2, [r7, #15]
 8009b18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f003 fcef 	bl	800d504 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fa7a 	bl	800a020 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d004      	beq.n	8009b3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2202      	movs	r2, #2
 8009b36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b3a:	e009      	b.n	8009b50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b44:	e004      	b.n	8009b50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f99e 	bl	8009e8a <USBD_CtlError>
  }
}
 8009b4e:	bf00      	nop
 8009b50:	bf00      	nop
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	885b      	ldrh	r3, [r3, #2]
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	4b4e      	ldr	r3, [pc, #312]	; (8009ca8 <USBD_SetConfig+0x150>)
 8009b6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b70:	4b4d      	ldr	r3, [pc, #308]	; (8009ca8 <USBD_SetConfig+0x150>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d905      	bls.n	8009b84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f985 	bl	8009e8a <USBD_CtlError>
    return USBD_FAIL;
 8009b80:	2303      	movs	r3, #3
 8009b82:	e08c      	b.n	8009c9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d002      	beq.n	8009b96 <USBD_SetConfig+0x3e>
 8009b90:	2b03      	cmp	r3, #3
 8009b92:	d029      	beq.n	8009be8 <USBD_SetConfig+0x90>
 8009b94:	e075      	b.n	8009c82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009b96:	4b44      	ldr	r3, [pc, #272]	; (8009ca8 <USBD_SetConfig+0x150>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d020      	beq.n	8009be0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009b9e:	4b42      	ldr	r3, [pc, #264]	; (8009ca8 <USBD_SetConfig+0x150>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ba8:	4b3f      	ldr	r3, [pc, #252]	; (8009ca8 <USBD_SetConfig+0x150>)
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7fe ffbd 	bl	8008b2e <USBD_SetClassConfig>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d008      	beq.n	8009bd0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f962 	bl	8009e8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2202      	movs	r2, #2
 8009bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009bce:	e065      	b.n	8009c9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fa25 	bl	800a020 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2203      	movs	r2, #3
 8009bda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009bde:	e05d      	b.n	8009c9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fa1d 	bl	800a020 <USBD_CtlSendStatus>
      break;
 8009be6:	e059      	b.n	8009c9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009be8:	4b2f      	ldr	r3, [pc, #188]	; (8009ca8 <USBD_SetConfig+0x150>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d112      	bne.n	8009c16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009bf8:	4b2b      	ldr	r3, [pc, #172]	; (8009ca8 <USBD_SetConfig+0x150>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c02:	4b29      	ldr	r3, [pc, #164]	; (8009ca8 <USBD_SetConfig+0x150>)
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7fe ffac 	bl	8008b66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fa06 	bl	800a020 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c14:	e042      	b.n	8009c9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009c16:	4b24      	ldr	r3, [pc, #144]	; (8009ca8 <USBD_SetConfig+0x150>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d02a      	beq.n	8009c7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7fe ff9a 	bl	8008b66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009c32:	4b1d      	ldr	r3, [pc, #116]	; (8009ca8 <USBD_SetConfig+0x150>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c3c:	4b1a      	ldr	r3, [pc, #104]	; (8009ca8 <USBD_SetConfig+0x150>)
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7fe ff73 	bl	8008b2e <USBD_SetClassConfig>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00f      	beq.n	8009c72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f918 	bl	8009e8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7fe ff7f 	bl	8008b66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c70:	e014      	b.n	8009c9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f9d4 	bl	800a020 <USBD_CtlSendStatus>
      break;
 8009c78:	e010      	b.n	8009c9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f9d0 	bl	800a020 <USBD_CtlSendStatus>
      break;
 8009c80:	e00c      	b.n	8009c9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f900 	bl	8009e8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c8a:	4b07      	ldr	r3, [pc, #28]	; (8009ca8 <USBD_SetConfig+0x150>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7fe ff68 	bl	8008b66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009c96:	2303      	movs	r3, #3
 8009c98:	73fb      	strb	r3, [r7, #15]
      break;
 8009c9a:	bf00      	nop
  }

  return ret;
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	200034b0 	.word	0x200034b0

08009cac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	88db      	ldrh	r3, [r3, #6]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d004      	beq.n	8009cc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f8e2 	bl	8009e8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009cc6:	e023      	b.n	8009d10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	dc02      	bgt.n	8009cda <USBD_GetConfig+0x2e>
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	dc03      	bgt.n	8009ce0 <USBD_GetConfig+0x34>
 8009cd8:	e015      	b.n	8009d06 <USBD_GetConfig+0x5a>
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d00b      	beq.n	8009cf6 <USBD_GetConfig+0x4a>
 8009cde:	e012      	b.n	8009d06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	3308      	adds	r3, #8
 8009cea:	2201      	movs	r2, #1
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f93c 	bl	8009f6c <USBD_CtlSendData>
        break;
 8009cf4:	e00c      	b.n	8009d10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f934 	bl	8009f6c <USBD_CtlSendData>
        break;
 8009d04:	e004      	b.n	8009d10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f8be 	bl	8009e8a <USBD_CtlError>
        break;
 8009d0e:	bf00      	nop
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d81e      	bhi.n	8009d6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	88db      	ldrh	r3, [r3, #6]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d004      	beq.n	8009d42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f8a5 	bl	8009e8a <USBD_CtlError>
        break;
 8009d40:	e01a      	b.n	8009d78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d005      	beq.n	8009d5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f043 0202 	orr.w	r2, r3, #2
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	330c      	adds	r3, #12
 8009d62:	2202      	movs	r2, #2
 8009d64:	4619      	mov	r1, r3
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f900 	bl	8009f6c <USBD_CtlSendData>
      break;
 8009d6c:	e004      	b.n	8009d78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f88a 	bl	8009e8a <USBD_CtlError>
      break;
 8009d76:	bf00      	nop
  }
}
 8009d78:	bf00      	nop
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	885b      	ldrh	r3, [r3, #2]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d107      	bne.n	8009da2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f940 	bl	800a020 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009da0:	e013      	b.n	8009dca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	885b      	ldrh	r3, [r3, #2]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d10b      	bne.n	8009dc2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	889b      	ldrh	r3, [r3, #4]
 8009dae:	0a1b      	lsrs	r3, r3, #8
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f930 	bl	800a020 <USBD_CtlSendStatus>
}
 8009dc0:	e003      	b.n	8009dca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f860 	bl	8009e8a <USBD_CtlError>
}
 8009dca:	bf00      	nop
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	3b01      	subs	r3, #1
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d80b      	bhi.n	8009e02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	885b      	ldrh	r3, [r3, #2]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d10c      	bne.n	8009e0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f910 	bl	800a020 <USBD_CtlSendStatus>
      }
      break;
 8009e00:	e004      	b.n	8009e0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f840 	bl	8009e8a <USBD_CtlError>
      break;
 8009e0a:	e000      	b.n	8009e0e <USBD_ClrFeature+0x3c>
      break;
 8009e0c:	bf00      	nop
  }
}
 8009e0e:	bf00      	nop
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	781a      	ldrb	r2, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	781a      	ldrb	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7ff fa17 	bl	8009274 <SWAPBYTE>
 8009e46:	4603      	mov	r3, r0
 8009e48:	461a      	mov	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3301      	adds	r3, #1
 8009e52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	3301      	adds	r3, #1
 8009e58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f7ff fa0a 	bl	8009274 <SWAPBYTE>
 8009e60:	4603      	mov	r3, r0
 8009e62:	461a      	mov	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	3301      	adds	r3, #1
 8009e72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f7ff f9fd 	bl	8009274 <SWAPBYTE>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	80da      	strh	r2, [r3, #6]
}
 8009e82:	bf00      	nop
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e94:	2180      	movs	r1, #128	; 0x80
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f003 faca 	bl	800d430 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f003 fac6 	bl	800d430 <USBD_LL_StallEP>
}
 8009ea4:	bf00      	nop
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d036      	beq.n	8009f30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009ec6:	6938      	ldr	r0, [r7, #16]
 8009ec8:	f000 f836 	bl	8009f38 <USBD_GetLen>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	3301      	adds	r3, #1
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	005b      	lsls	r3, r3, #1
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	4413      	add	r3, r2
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	7812      	ldrb	r2, [r2, #0]
 8009ee4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ee6:	7dfb      	ldrb	r3, [r7, #23]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
 8009eee:	68ba      	ldr	r2, [r7, #8]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	2203      	movs	r2, #3
 8009ef4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009efc:	e013      	b.n	8009f26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009efe:	7dfb      	ldrb	r3, [r7, #23]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	4413      	add	r3, r2
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	7812      	ldrb	r2, [r2, #0]
 8009f08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	613b      	str	r3, [r7, #16]
    idx++;
 8009f10:	7dfb      	ldrb	r3, [r7, #23]
 8009f12:	3301      	adds	r3, #1
 8009f14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f20:	7dfb      	ldrb	r3, [r7, #23]
 8009f22:	3301      	adds	r3, #1
 8009f24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e7      	bne.n	8009efe <USBD_GetString+0x52>
 8009f2e:	e000      	b.n	8009f32 <USBD_GetString+0x86>
    return;
 8009f30:	bf00      	nop
  }
}
 8009f32:	3718      	adds	r7, #24
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009f48:	e005      	b.n	8009f56 <USBD_GetLen+0x1e>
  {
    len++;
 8009f4a:	7bfb      	ldrb	r3, [r7, #15]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	3301      	adds	r3, #1
 8009f54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1f5      	bne.n	8009f4a <USBD_GetLen+0x12>
  }

  return len;
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3714      	adds	r7, #20
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	2100      	movs	r1, #0
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f003 fad5 	bl	800d542 <USBD_LL_Transmit>

  return USBD_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	60f8      	str	r0, [r7, #12]
 8009faa:	60b9      	str	r1, [r7, #8]
 8009fac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f003 fac4 	bl	800d542 <USBD_LL_Transmit>

  return USBD_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2203      	movs	r2, #3
 8009fd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	2100      	movs	r1, #0
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f003 fac8 	bl	800d584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b084      	sub	sp, #16
 800a002:	af00      	add	r7, sp, #0
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	2100      	movs	r1, #0
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f003 fab7 	bl	800d584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2204      	movs	r2, #4
 800a02c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a030:	2300      	movs	r3, #0
 800a032:	2200      	movs	r2, #0
 800a034:	2100      	movs	r1, #0
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f003 fa83 	bl	800d542 <USBD_LL_Transmit>

  return USBD_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b082      	sub	sp, #8
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2205      	movs	r2, #5
 800a052:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a056:	2300      	movs	r3, #0
 800a058:	2200      	movs	r2, #0
 800a05a:	2100      	movs	r1, #0
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f003 fa91 	bl	800d584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a070:	bf00      	nop
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
	...

0800a07c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a082:	f3ef 8305 	mrs	r3, IPSR
 800a086:	60bb      	str	r3, [r7, #8]
  return(result);
 800a088:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10f      	bne.n	800a0ae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a08e:	f3ef 8310 	mrs	r3, PRIMASK
 800a092:	607b      	str	r3, [r7, #4]
  return(result);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d105      	bne.n	800a0a6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a09a:	f3ef 8311 	mrs	r3, BASEPRI
 800a09e:	603b      	str	r3, [r7, #0]
  return(result);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d007      	beq.n	800a0b6 <osKernelInitialize+0x3a>
 800a0a6:	4b0e      	ldr	r3, [pc, #56]	; (800a0e0 <osKernelInitialize+0x64>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d103      	bne.n	800a0b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a0ae:	f06f 0305 	mvn.w	r3, #5
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	e00c      	b.n	800a0d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a0b6:	4b0a      	ldr	r3, [pc, #40]	; (800a0e0 <osKernelInitialize+0x64>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d105      	bne.n	800a0ca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a0be:	4b08      	ldr	r3, [pc, #32]	; (800a0e0 <osKernelInitialize+0x64>)
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60fb      	str	r3, [r7, #12]
 800a0c8:	e002      	b.n	800a0d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a0ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	200034b4 	.word	0x200034b4

0800a0e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0ea:	f3ef 8305 	mrs	r3, IPSR
 800a0ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10f      	bne.n	800a116 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0f6:	f3ef 8310 	mrs	r3, PRIMASK
 800a0fa:	607b      	str	r3, [r7, #4]
  return(result);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d105      	bne.n	800a10e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a102:	f3ef 8311 	mrs	r3, BASEPRI
 800a106:	603b      	str	r3, [r7, #0]
  return(result);
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d007      	beq.n	800a11e <osKernelStart+0x3a>
 800a10e:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <osKernelStart+0x68>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b02      	cmp	r3, #2
 800a114:	d103      	bne.n	800a11e <osKernelStart+0x3a>
    stat = osErrorISR;
 800a116:	f06f 0305 	mvn.w	r3, #5
 800a11a:	60fb      	str	r3, [r7, #12]
 800a11c:	e010      	b.n	800a140 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a11e:	4b0b      	ldr	r3, [pc, #44]	; (800a14c <osKernelStart+0x68>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d109      	bne.n	800a13a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a126:	f7ff ffa1 	bl	800a06c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a12a:	4b08      	ldr	r3, [pc, #32]	; (800a14c <osKernelStart+0x68>)
 800a12c:	2202      	movs	r2, #2
 800a12e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a130:	f001 f8b4 	bl	800b29c <vTaskStartScheduler>
      stat = osOK;
 800a134:	2300      	movs	r3, #0
 800a136:	60fb      	str	r3, [r7, #12]
 800a138:	e002      	b.n	800a140 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a13a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a13e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a140:	68fb      	ldr	r3, [r7, #12]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	200034b4 	.word	0x200034b4

0800a150 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a150:	b580      	push	{r7, lr}
 800a152:	b090      	sub	sp, #64	; 0x40
 800a154:	af04      	add	r7, sp, #16
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a15c:	2300      	movs	r3, #0
 800a15e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a160:	f3ef 8305 	mrs	r3, IPSR
 800a164:	61fb      	str	r3, [r7, #28]
  return(result);
 800a166:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f040 808f 	bne.w	800a28c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a16e:	f3ef 8310 	mrs	r3, PRIMASK
 800a172:	61bb      	str	r3, [r7, #24]
  return(result);
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d105      	bne.n	800a186 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a17a:	f3ef 8311 	mrs	r3, BASEPRI
 800a17e:	617b      	str	r3, [r7, #20]
  return(result);
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <osThreadNew+0x3e>
 800a186:	4b44      	ldr	r3, [pc, #272]	; (800a298 <osThreadNew+0x148>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d07e      	beq.n	800a28c <osThreadNew+0x13c>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d07b      	beq.n	800a28c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a194:	2380      	movs	r3, #128	; 0x80
 800a196:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a198:	2318      	movs	r3, #24
 800a19a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a19c:	2300      	movs	r3, #0
 800a19e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a1a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d045      	beq.n	800a238 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <osThreadNew+0x6a>
        name = attr->name;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d002      	beq.n	800a1c8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d008      	beq.n	800a1e0 <osThreadNew+0x90>
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	2b38      	cmp	r3, #56	; 0x38
 800a1d2:	d805      	bhi.n	800a1e0 <osThreadNew+0x90>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <osThreadNew+0x94>
        return (NULL);
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e054      	b.n	800a28e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	695b      	ldr	r3, [r3, #20]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	089b      	lsrs	r3, r3, #2
 800a1f2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00e      	beq.n	800a21a <osThreadNew+0xca>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	2b5b      	cmp	r3, #91	; 0x5b
 800a202:	d90a      	bls.n	800a21a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d006      	beq.n	800a21a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <osThreadNew+0xca>
        mem = 1;
 800a214:	2301      	movs	r3, #1
 800a216:	623b      	str	r3, [r7, #32]
 800a218:	e010      	b.n	800a23c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10c      	bne.n	800a23c <osThreadNew+0xec>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d108      	bne.n	800a23c <osThreadNew+0xec>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d104      	bne.n	800a23c <osThreadNew+0xec>
          mem = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	623b      	str	r3, [r7, #32]
 800a236:	e001      	b.n	800a23c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a238:	2300      	movs	r3, #0
 800a23a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d110      	bne.n	800a264 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a24a:	9202      	str	r2, [sp, #8]
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f000 fe3f 	bl	800aedc <xTaskCreateStatic>
 800a25e:	4603      	mov	r3, r0
 800a260:	613b      	str	r3, [r7, #16]
 800a262:	e013      	b.n	800a28c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d110      	bne.n	800a28c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	f107 0310 	add.w	r3, r7, #16
 800a272:	9301      	str	r3, [sp, #4]
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 fe90 	bl	800afa2 <xTaskCreate>
 800a282:	4603      	mov	r3, r0
 800a284:	2b01      	cmp	r3, #1
 800a286:	d001      	beq.n	800a28c <osThreadNew+0x13c>
          hTask = NULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a28c:	693b      	ldr	r3, [r7, #16]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3730      	adds	r7, #48	; 0x30
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	200034b4 	.word	0x200034b4

0800a29c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2a4:	f3ef 8305 	mrs	r3, IPSR
 800a2a8:	613b      	str	r3, [r7, #16]
  return(result);
 800a2aa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10f      	bne.n	800a2d0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2b0:	f3ef 8310 	mrs	r3, PRIMASK
 800a2b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d105      	bne.n	800a2c8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2bc:	f3ef 8311 	mrs	r3, BASEPRI
 800a2c0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d007      	beq.n	800a2d8 <osDelay+0x3c>
 800a2c8:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <osDelay+0x58>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d103      	bne.n	800a2d8 <osDelay+0x3c>
    stat = osErrorISR;
 800a2d0:	f06f 0305 	mvn.w	r3, #5
 800a2d4:	617b      	str	r3, [r7, #20]
 800a2d6:	e007      	b.n	800a2e8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d002      	beq.n	800a2e8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 ffa4 	bl	800b230 <vTaskDelay>
    }
  }

  return (stat);
 800a2e8:	697b      	ldr	r3, [r7, #20]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3718      	adds	r7, #24
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	200034b4 	.word	0x200034b4

0800a2f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4a07      	ldr	r2, [pc, #28]	; (800a324 <vApplicationGetIdleTaskMemory+0x2c>)
 800a308:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	4a06      	ldr	r2, [pc, #24]	; (800a328 <vApplicationGetIdleTaskMemory+0x30>)
 800a30e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2280      	movs	r2, #128	; 0x80
 800a314:	601a      	str	r2, [r3, #0]
}
 800a316:	bf00      	nop
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	200034b8 	.word	0x200034b8
 800a328:	20003514 	.word	0x20003514

0800a32c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	4a07      	ldr	r2, [pc, #28]	; (800a358 <vApplicationGetTimerTaskMemory+0x2c>)
 800a33c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	4a06      	ldr	r2, [pc, #24]	; (800a35c <vApplicationGetTimerTaskMemory+0x30>)
 800a342:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a34a:	601a      	str	r2, [r3, #0]
}
 800a34c:	bf00      	nop
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	20003714 	.word	0x20003714
 800a35c:	20003770 	.word	0x20003770

0800a360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f103 0208 	add.w	r2, r3, #8
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f103 0208 	add.w	r2, r3, #8
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f103 0208 	add.w	r2, r3, #8
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b085      	sub	sp, #20
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	689a      	ldr	r2, [r3, #8]
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	1c5a      	adds	r2, r3, #1
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	601a      	str	r2, [r3, #0]
}
 800a3f6:	bf00      	nop
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a402:	b480      	push	{r7}
 800a404:	b085      	sub	sp, #20
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a418:	d103      	bne.n	800a422 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	e00c      	b.n	800a43c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3308      	adds	r3, #8
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	e002      	b.n	800a430 <vListInsert+0x2e>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	60fb      	str	r3, [r7, #12]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d2f6      	bcs.n	800a42a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	601a      	str	r2, [r3, #0]
}
 800a468:	bf00      	nop
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6892      	ldr	r2, [r2, #8]
 800a48a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	6852      	ldr	r2, [r2, #4]
 800a494:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d103      	bne.n	800a4a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	689a      	ldr	r2, [r3, #8]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	1e5a      	subs	r2, r3, #1
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10c      	bne.n	800a4f6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	b672      	cpsid	i
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	b662      	cpsie	i
 800a4f0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a4f2:	bf00      	nop
 800a4f4:	e7fe      	b.n	800a4f4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a4f6:	f002 f879 	bl	800c5ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a502:	68f9      	ldr	r1, [r7, #12]
 800a504:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a506:	fb01 f303 	mul.w	r3, r1, r3
 800a50a:	441a      	add	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a526:	3b01      	subs	r3, #1
 800a528:	68f9      	ldr	r1, [r7, #12]
 800a52a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a52c:	fb01 f303 	mul.w	r3, r1, r3
 800a530:	441a      	add	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	22ff      	movs	r2, #255	; 0xff
 800a53a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	22ff      	movs	r2, #255	; 0xff
 800a542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d114      	bne.n	800a576 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d01a      	beq.n	800a58a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	3310      	adds	r3, #16
 800a558:	4618      	mov	r0, r3
 800a55a:	f001 f937 	bl	800b7cc <xTaskRemoveFromEventList>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d012      	beq.n	800a58a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a564:	4b0c      	ldr	r3, [pc, #48]	; (800a598 <xQueueGenericReset+0xd0>)
 800a566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a56a:	601a      	str	r2, [r3, #0]
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	e009      	b.n	800a58a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	3310      	adds	r3, #16
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7ff fef0 	bl	800a360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3324      	adds	r3, #36	; 0x24
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff feeb 	bl	800a360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a58a:	f002 f863 	bl	800c654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a58e:	2301      	movs	r3, #1
}
 800a590:	4618      	mov	r0, r3
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08e      	sub	sp, #56	; 0x38
 800a5a0:	af02      	add	r7, sp, #8
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10c      	bne.n	800a5ca <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	b672      	cpsid	i
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	b662      	cpsie	i
 800a5c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5c6:	bf00      	nop
 800a5c8:	e7fe      	b.n	800a5c8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10c      	bne.n	800a5ea <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	b672      	cpsid	i
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	b662      	cpsie	i
 800a5e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5e6:	bf00      	nop
 800a5e8:	e7fe      	b.n	800a5e8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <xQueueGenericCreateStatic+0x5a>
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <xQueueGenericCreateStatic+0x5e>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e000      	b.n	800a5fc <xQueueGenericCreateStatic+0x60>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10c      	bne.n	800a61a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	b672      	cpsid	i
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	b662      	cpsie	i
 800a614:	623b      	str	r3, [r7, #32]
}
 800a616:	bf00      	nop
 800a618:	e7fe      	b.n	800a618 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d102      	bne.n	800a626 <xQueueGenericCreateStatic+0x8a>
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <xQueueGenericCreateStatic+0x8e>
 800a626:	2301      	movs	r3, #1
 800a628:	e000      	b.n	800a62c <xQueueGenericCreateStatic+0x90>
 800a62a:	2300      	movs	r3, #0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10c      	bne.n	800a64a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	b672      	cpsid	i
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	b662      	cpsie	i
 800a644:	61fb      	str	r3, [r7, #28]
}
 800a646:	bf00      	nop
 800a648:	e7fe      	b.n	800a648 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a64a:	2350      	movs	r3, #80	; 0x50
 800a64c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2b50      	cmp	r3, #80	; 0x50
 800a652:	d00c      	beq.n	800a66e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	b672      	cpsid	i
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	b662      	cpsie	i
 800a668:	61bb      	str	r3, [r7, #24]
}
 800a66a:	bf00      	nop
 800a66c:	e7fe      	b.n	800a66c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a66e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00d      	beq.n	800a696 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a682:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	4613      	mov	r3, r2
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	68b9      	ldr	r1, [r7, #8]
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f000 f805 	bl	800a6a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a698:	4618      	mov	r0, r3
 800a69a:	3730      	adds	r7, #48	; 0x30
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
 800a6ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d103      	bne.n	800a6bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	e002      	b.n	800a6c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	69b8      	ldr	r0, [r7, #24]
 800a6d2:	f7ff fef9 	bl	800a4c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	78fa      	ldrb	r2, [r7, #3]
 800a6da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6de:	bf00      	nop
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
	...

0800a6e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b08e      	sub	sp, #56	; 0x38
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
 800a6f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10c      	bne.n	800a71e <xQueueGenericSend+0x36>
	__asm volatile
 800a704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a708:	b672      	cpsid	i
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	b662      	cpsie	i
 800a718:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d103      	bne.n	800a72c <xQueueGenericSend+0x44>
 800a724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <xQueueGenericSend+0x48>
 800a72c:	2301      	movs	r3, #1
 800a72e:	e000      	b.n	800a732 <xQueueGenericSend+0x4a>
 800a730:	2300      	movs	r3, #0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10c      	bne.n	800a750 <xQueueGenericSend+0x68>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	b672      	cpsid	i
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	b662      	cpsie	i
 800a74a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a74c:	bf00      	nop
 800a74e:	e7fe      	b.n	800a74e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	2b02      	cmp	r3, #2
 800a754:	d103      	bne.n	800a75e <xQueueGenericSend+0x76>
 800a756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d101      	bne.n	800a762 <xQueueGenericSend+0x7a>
 800a75e:	2301      	movs	r3, #1
 800a760:	e000      	b.n	800a764 <xQueueGenericSend+0x7c>
 800a762:	2300      	movs	r3, #0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10c      	bne.n	800a782 <xQueueGenericSend+0x9a>
	__asm volatile
 800a768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76c:	b672      	cpsid	i
 800a76e:	f383 8811 	msr	BASEPRI, r3
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	f3bf 8f4f 	dsb	sy
 800a77a:	b662      	cpsie	i
 800a77c:	623b      	str	r3, [r7, #32]
}
 800a77e:	bf00      	nop
 800a780:	e7fe      	b.n	800a780 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a782:	f001 f9e9 	bl	800bb58 <xTaskGetSchedulerState>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d102      	bne.n	800a792 <xQueueGenericSend+0xaa>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <xQueueGenericSend+0xae>
 800a792:	2301      	movs	r3, #1
 800a794:	e000      	b.n	800a798 <xQueueGenericSend+0xb0>
 800a796:	2300      	movs	r3, #0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10c      	bne.n	800a7b6 <xQueueGenericSend+0xce>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a0:	b672      	cpsid	i
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	b662      	cpsie	i
 800a7b0:	61fb      	str	r3, [r7, #28]
}
 800a7b2:	bf00      	nop
 800a7b4:	e7fe      	b.n	800a7b4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7b6:	f001 ff19 	bl	800c5ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d302      	bcc.n	800a7cc <xQueueGenericSend+0xe4>
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d129      	bne.n	800a820 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	68b9      	ldr	r1, [r7, #8]
 800a7d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7d2:	f000 fa15 	bl	800ac00 <prvCopyDataToQueue>
 800a7d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d010      	beq.n	800a802 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	3324      	adds	r3, #36	; 0x24
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 fff1 	bl	800b7cc <xTaskRemoveFromEventList>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d013      	beq.n	800a818 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a7f0:	4b3f      	ldr	r3, [pc, #252]	; (800a8f0 <xQueueGenericSend+0x208>)
 800a7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	e00a      	b.n	800a818 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a804:	2b00      	cmp	r3, #0
 800a806:	d007      	beq.n	800a818 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a808:	4b39      	ldr	r3, [pc, #228]	; (800a8f0 <xQueueGenericSend+0x208>)
 800a80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a80e:	601a      	str	r2, [r3, #0]
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a818:	f001 ff1c 	bl	800c654 <vPortExitCritical>
				return pdPASS;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e063      	b.n	800a8e8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d103      	bne.n	800a82e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a826:	f001 ff15 	bl	800c654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a82a:	2300      	movs	r3, #0
 800a82c:	e05c      	b.n	800a8e8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a830:	2b00      	cmp	r3, #0
 800a832:	d106      	bne.n	800a842 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a834:	f107 0314 	add.w	r3, r7, #20
 800a838:	4618      	mov	r0, r3
 800a83a:	f001 f82d 	bl	800b898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a83e:	2301      	movs	r3, #1
 800a840:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a842:	f001 ff07 	bl	800c654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a846:	f000 fd93 	bl	800b370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a84a:	f001 fecf 	bl	800c5ec <vPortEnterCritical>
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a854:	b25b      	sxtb	r3, r3
 800a856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a85a:	d103      	bne.n	800a864 <xQueueGenericSend+0x17c>
 800a85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a86a:	b25b      	sxtb	r3, r3
 800a86c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a870:	d103      	bne.n	800a87a <xQueueGenericSend+0x192>
 800a872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a87a:	f001 feeb 	bl	800c654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a87e:	1d3a      	adds	r2, r7, #4
 800a880:	f107 0314 	add.w	r3, r7, #20
 800a884:	4611      	mov	r1, r2
 800a886:	4618      	mov	r0, r3
 800a888:	f001 f81c 	bl	800b8c4 <xTaskCheckForTimeOut>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d124      	bne.n	800a8dc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a892:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a894:	f000 faac 	bl	800adf0 <prvIsQueueFull>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d018      	beq.n	800a8d0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a0:	3310      	adds	r3, #16
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	4611      	mov	r1, r2
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f000 ff3c 	bl	800b724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ae:	f000 fa37 	bl	800ad20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8b2:	f000 fd6b 	bl	800b38c <xTaskResumeAll>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f47f af7c 	bne.w	800a7b6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a8be:	4b0c      	ldr	r3, [pc, #48]	; (800a8f0 <xQueueGenericSend+0x208>)
 800a8c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8c4:	601a      	str	r2, [r3, #0]
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	e772      	b.n	800a7b6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8d2:	f000 fa25 	bl	800ad20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8d6:	f000 fd59 	bl	800b38c <xTaskResumeAll>
 800a8da:	e76c      	b.n	800a7b6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a8dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8de:	f000 fa1f 	bl	800ad20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8e2:	f000 fd53 	bl	800b38c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a8e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3738      	adds	r7, #56	; 0x38
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	e000ed04 	.word	0xe000ed04

0800a8f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b08e      	sub	sp, #56	; 0x38
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10c      	bne.n	800a926 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a910:	b672      	cpsid	i
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	b662      	cpsie	i
 800a920:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a922:	bf00      	nop
 800a924:	e7fe      	b.n	800a924 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d103      	bne.n	800a934 <xQueueGenericSendFromISR+0x40>
 800a92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <xQueueGenericSendFromISR+0x44>
 800a934:	2301      	movs	r3, #1
 800a936:	e000      	b.n	800a93a <xQueueGenericSendFromISR+0x46>
 800a938:	2300      	movs	r3, #0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10c      	bne.n	800a958 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	b672      	cpsid	i
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	b662      	cpsie	i
 800a952:	623b      	str	r3, [r7, #32]
}
 800a954:	bf00      	nop
 800a956:	e7fe      	b.n	800a956 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d103      	bne.n	800a966 <xQueueGenericSendFromISR+0x72>
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a962:	2b01      	cmp	r3, #1
 800a964:	d101      	bne.n	800a96a <xQueueGenericSendFromISR+0x76>
 800a966:	2301      	movs	r3, #1
 800a968:	e000      	b.n	800a96c <xQueueGenericSendFromISR+0x78>
 800a96a:	2300      	movs	r3, #0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10c      	bne.n	800a98a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a974:	b672      	cpsid	i
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	b662      	cpsie	i
 800a984:	61fb      	str	r3, [r7, #28]
}
 800a986:	bf00      	nop
 800a988:	e7fe      	b.n	800a988 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a98a:	f001 ff17 	bl	800c7bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a98e:	f3ef 8211 	mrs	r2, BASEPRI
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	b672      	cpsid	i
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	b662      	cpsie	i
 800a9a6:	61ba      	str	r2, [r7, #24]
 800a9a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a9aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d302      	bcc.n	800a9c0 <xQueueGenericSendFromISR+0xcc>
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d12c      	bne.n	800aa1a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9d0:	f000 f916 	bl	800ac00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a9d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a9d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9dc:	d112      	bne.n	800aa04 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d016      	beq.n	800aa14 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	3324      	adds	r3, #36	; 0x24
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 feee 	bl	800b7cc <xTaskRemoveFromEventList>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00e      	beq.n	800aa14 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00b      	beq.n	800aa14 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	601a      	str	r2, [r3, #0]
 800aa02:	e007      	b.n	800aa14 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa08:	3301      	adds	r3, #1
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	b25a      	sxtb	r2, r3
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa14:	2301      	movs	r3, #1
 800aa16:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800aa18:	e001      	b.n	800aa1e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa20:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3738      	adds	r7, #56	; 0x38
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08c      	sub	sp, #48	; 0x30
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa40:	2300      	movs	r3, #0
 800aa42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10c      	bne.n	800aa68 <xQueueReceive+0x34>
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa52:	b672      	cpsid	i
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	b662      	cpsie	i
 800aa62:	623b      	str	r3, [r7, #32]
}
 800aa64:	bf00      	nop
 800aa66:	e7fe      	b.n	800aa66 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d103      	bne.n	800aa76 <xQueueReceive+0x42>
 800aa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <xQueueReceive+0x46>
 800aa76:	2301      	movs	r3, #1
 800aa78:	e000      	b.n	800aa7c <xQueueReceive+0x48>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10c      	bne.n	800aa9a <xQueueReceive+0x66>
	__asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa84:	b672      	cpsid	i
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	b662      	cpsie	i
 800aa94:	61fb      	str	r3, [r7, #28]
}
 800aa96:	bf00      	nop
 800aa98:	e7fe      	b.n	800aa98 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa9a:	f001 f85d 	bl	800bb58 <xTaskGetSchedulerState>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d102      	bne.n	800aaaa <xQueueReceive+0x76>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d101      	bne.n	800aaae <xQueueReceive+0x7a>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e000      	b.n	800aab0 <xQueueReceive+0x7c>
 800aaae:	2300      	movs	r3, #0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10c      	bne.n	800aace <xQueueReceive+0x9a>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	b672      	cpsid	i
 800aaba:	f383 8811 	msr	BASEPRI, r3
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	f3bf 8f4f 	dsb	sy
 800aac6:	b662      	cpsie	i
 800aac8:	61bb      	str	r3, [r7, #24]
}
 800aaca:	bf00      	nop
 800aacc:	e7fe      	b.n	800aacc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aace:	f001 fd8d 	bl	800c5ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d01f      	beq.n	800ab1e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aade:	68b9      	ldr	r1, [r7, #8]
 800aae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aae2:	f000 f8f7 	bl	800acd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae8:	1e5a      	subs	r2, r3, #1
 800aaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00f      	beq.n	800ab16 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf8:	3310      	adds	r3, #16
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 fe66 	bl	800b7cc <xTaskRemoveFromEventList>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d007      	beq.n	800ab16 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab06:	4b3d      	ldr	r3, [pc, #244]	; (800abfc <xQueueReceive+0x1c8>)
 800ab08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab16:	f001 fd9d 	bl	800c654 <vPortExitCritical>
				return pdPASS;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e069      	b.n	800abf2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d103      	bne.n	800ab2c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab24:	f001 fd96 	bl	800c654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e062      	b.n	800abf2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d106      	bne.n	800ab40 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab32:	f107 0310 	add.w	r3, r7, #16
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 feae 	bl	800b898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab40:	f001 fd88 	bl	800c654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab44:	f000 fc14 	bl	800b370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab48:	f001 fd50 	bl	800c5ec <vPortEnterCritical>
 800ab4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab52:	b25b      	sxtb	r3, r3
 800ab54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab58:	d103      	bne.n	800ab62 <xQueueReceive+0x12e>
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab68:	b25b      	sxtb	r3, r3
 800ab6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab6e:	d103      	bne.n	800ab78 <xQueueReceive+0x144>
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab78:	f001 fd6c 	bl	800c654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab7c:	1d3a      	adds	r2, r7, #4
 800ab7e:	f107 0310 	add.w	r3, r7, #16
 800ab82:	4611      	mov	r1, r2
 800ab84:	4618      	mov	r0, r3
 800ab86:	f000 fe9d 	bl	800b8c4 <xTaskCheckForTimeOut>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d123      	bne.n	800abd8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab92:	f000 f917 	bl	800adc4 <prvIsQueueEmpty>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d017      	beq.n	800abcc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	3324      	adds	r3, #36	; 0x24
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	4611      	mov	r1, r2
 800aba4:	4618      	mov	r0, r3
 800aba6:	f000 fdbd 	bl	800b724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abac:	f000 f8b8 	bl	800ad20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abb0:	f000 fbec 	bl	800b38c <xTaskResumeAll>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d189      	bne.n	800aace <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800abba:	4b10      	ldr	r3, [pc, #64]	; (800abfc <xQueueReceive+0x1c8>)
 800abbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abc0:	601a      	str	r2, [r3, #0]
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	e780      	b.n	800aace <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abce:	f000 f8a7 	bl	800ad20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abd2:	f000 fbdb 	bl	800b38c <xTaskResumeAll>
 800abd6:	e77a      	b.n	800aace <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800abd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abda:	f000 f8a1 	bl	800ad20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abde:	f000 fbd5 	bl	800b38c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abe4:	f000 f8ee 	bl	800adc4 <prvIsQueueEmpty>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	f43f af6f 	beq.w	800aace <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800abf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3730      	adds	r7, #48	; 0x30
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	e000ed04 	.word	0xe000ed04

0800ac00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10d      	bne.n	800ac3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d14d      	bne.n	800acc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 ffb2 	bl	800bb94 <xTaskPriorityDisinherit>
 800ac30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	609a      	str	r2, [r3, #8]
 800ac38:	e043      	b.n	800acc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d119      	bne.n	800ac74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6858      	ldr	r0, [r3, #4]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac48:	461a      	mov	r2, r3
 800ac4a:	68b9      	ldr	r1, [r7, #8]
 800ac4c:	f002 fe4e 	bl	800d8ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	685a      	ldr	r2, [r3, #4]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac58:	441a      	add	r2, r3
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d32b      	bcc.n	800acc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	605a      	str	r2, [r3, #4]
 800ac72:	e026      	b.n	800acc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	68d8      	ldr	r0, [r3, #12]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	68b9      	ldr	r1, [r7, #8]
 800ac80:	f002 fe34 	bl	800d8ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	68da      	ldr	r2, [r3, #12]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8c:	425b      	negs	r3, r3
 800ac8e:	441a      	add	r2, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	68da      	ldr	r2, [r3, #12]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d207      	bcs.n	800acb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	689a      	ldr	r2, [r3, #8]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca8:	425b      	negs	r3, r3
 800acaa:	441a      	add	r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d105      	bne.n	800acc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	3b01      	subs	r3, #1
 800acc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	1c5a      	adds	r2, r3, #1
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800acca:	697b      	ldr	r3, [r7, #20]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d018      	beq.n	800ad18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68da      	ldr	r2, [r3, #12]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acee:	441a      	add	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	68da      	ldr	r2, [r3, #12]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d303      	bcc.n	800ad08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	68d9      	ldr	r1, [r3, #12]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad10:	461a      	mov	r2, r3
 800ad12:	6838      	ldr	r0, [r7, #0]
 800ad14:	f002 fdea 	bl	800d8ec <memcpy>
	}
}
 800ad18:	bf00      	nop
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad28:	f001 fc60 	bl	800c5ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad34:	e011      	b.n	800ad5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d012      	beq.n	800ad64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	3324      	adds	r3, #36	; 0x24
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 fd42 	bl	800b7cc <xTaskRemoveFromEventList>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad4e:	f000 fe1f 	bl	800b990 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	dce9      	bgt.n	800ad36 <prvUnlockQueue+0x16>
 800ad62:	e000      	b.n	800ad66 <prvUnlockQueue+0x46>
					break;
 800ad64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	22ff      	movs	r2, #255	; 0xff
 800ad6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad6e:	f001 fc71 	bl	800c654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad72:	f001 fc3b 	bl	800c5ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad7e:	e011      	b.n	800ada4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d012      	beq.n	800adae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	3310      	adds	r3, #16
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 fd1d 	bl	800b7cc <xTaskRemoveFromEventList>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d001      	beq.n	800ad9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad98:	f000 fdfa 	bl	800b990 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad9c:	7bbb      	ldrb	r3, [r7, #14]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ada4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	dce9      	bgt.n	800ad80 <prvUnlockQueue+0x60>
 800adac:	e000      	b.n	800adb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	22ff      	movs	r2, #255	; 0xff
 800adb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800adb8:	f001 fc4c 	bl	800c654 <vPortExitCritical>
}
 800adbc:	bf00      	nop
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adcc:	f001 fc0e 	bl	800c5ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add4:	2b00      	cmp	r3, #0
 800add6:	d102      	bne.n	800adde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800add8:	2301      	movs	r3, #1
 800adda:	60fb      	str	r3, [r7, #12]
 800addc:	e001      	b.n	800ade2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800adde:	2300      	movs	r3, #0
 800ade0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ade2:	f001 fc37 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800ade6:	68fb      	ldr	r3, [r7, #12]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adf8:	f001 fbf8 	bl	800c5ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d102      	bne.n	800ae0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	e001      	b.n	800ae12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae12:	f001 fc1f 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800ae16:	68fb      	ldr	r3, [r7, #12]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	60fb      	str	r3, [r7, #12]
 800ae2e:	e014      	b.n	800ae5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae30:	4a0f      	ldr	r2, [pc, #60]	; (800ae70 <vQueueAddToRegistry+0x50>)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10b      	bne.n	800ae54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae3c:	490c      	ldr	r1, [pc, #48]	; (800ae70 <vQueueAddToRegistry+0x50>)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	683a      	ldr	r2, [r7, #0]
 800ae42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae46:	4a0a      	ldr	r2, [pc, #40]	; (800ae70 <vQueueAddToRegistry+0x50>)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	00db      	lsls	r3, r3, #3
 800ae4c:	4413      	add	r3, r2
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae52:	e006      	b.n	800ae62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3301      	adds	r3, #1
 800ae58:	60fb      	str	r3, [r7, #12]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b07      	cmp	r3, #7
 800ae5e:	d9e7      	bls.n	800ae30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae60:	bf00      	nop
 800ae62:	bf00      	nop
 800ae64:	3714      	adds	r7, #20
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	20003b70 	.word	0x20003b70

0800ae74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae84:	f001 fbb2 	bl	800c5ec <vPortEnterCritical>
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae8e:	b25b      	sxtb	r3, r3
 800ae90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae94:	d103      	bne.n	800ae9e <vQueueWaitForMessageRestricted+0x2a>
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aea4:	b25b      	sxtb	r3, r3
 800aea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeaa:	d103      	bne.n	800aeb4 <vQueueWaitForMessageRestricted+0x40>
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeb4:	f001 fbce 	bl	800c654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d106      	bne.n	800aece <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	3324      	adds	r3, #36	; 0x24
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	68b9      	ldr	r1, [r7, #8]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f000 fc51 	bl	800b770 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aece:	6978      	ldr	r0, [r7, #20]
 800aed0:	f7ff ff26 	bl	800ad20 <prvUnlockQueue>
	}
 800aed4:	bf00      	nop
 800aed6:	3718      	adds	r7, #24
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08e      	sub	sp, #56	; 0x38
 800aee0:	af04      	add	r7, sp, #16
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aeea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d10c      	bne.n	800af0a <xTaskCreateStatic+0x2e>
	__asm volatile
 800aef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef4:	b672      	cpsid	i
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	b662      	cpsie	i
 800af04:	623b      	str	r3, [r7, #32]
}
 800af06:	bf00      	nop
 800af08:	e7fe      	b.n	800af08 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800af0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10c      	bne.n	800af2a <xTaskCreateStatic+0x4e>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	b672      	cpsid	i
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	b662      	cpsie	i
 800af24:	61fb      	str	r3, [r7, #28]
}
 800af26:	bf00      	nop
 800af28:	e7fe      	b.n	800af28 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af2a:	235c      	movs	r3, #92	; 0x5c
 800af2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	2b5c      	cmp	r3, #92	; 0x5c
 800af32:	d00c      	beq.n	800af4e <xTaskCreateStatic+0x72>
	__asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af38:	b672      	cpsid	i
 800af3a:	f383 8811 	msr	BASEPRI, r3
 800af3e:	f3bf 8f6f 	isb	sy
 800af42:	f3bf 8f4f 	dsb	sy
 800af46:	b662      	cpsie	i
 800af48:	61bb      	str	r3, [r7, #24]
}
 800af4a:	bf00      	nop
 800af4c:	e7fe      	b.n	800af4c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af52:	2b00      	cmp	r3, #0
 800af54:	d01e      	beq.n	800af94 <xTaskCreateStatic+0xb8>
 800af56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d01b      	beq.n	800af94 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af68:	2202      	movs	r2, #2
 800af6a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af6e:	2300      	movs	r3, #0
 800af70:	9303      	str	r3, [sp, #12]
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af74:	9302      	str	r3, [sp, #8]
 800af76:	f107 0314 	add.w	r3, r7, #20
 800af7a:	9301      	str	r3, [sp, #4]
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	9300      	str	r3, [sp, #0]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	68b9      	ldr	r1, [r7, #8]
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f000 f850 	bl	800b02c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af8e:	f000 f8df 	bl	800b150 <prvAddNewTaskToReadyList>
 800af92:	e001      	b.n	800af98 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800af94:	2300      	movs	r3, #0
 800af96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800af98:	697b      	ldr	r3, [r7, #20]
	}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3728      	adds	r7, #40	; 0x28
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b08c      	sub	sp, #48	; 0x30
 800afa6:	af04      	add	r7, sp, #16
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	603b      	str	r3, [r7, #0]
 800afae:	4613      	mov	r3, r2
 800afb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800afb2:	88fb      	ldrh	r3, [r7, #6]
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4618      	mov	r0, r3
 800afb8:	f001 fc44 	bl	800c844 <pvPortMalloc>
 800afbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00e      	beq.n	800afe2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800afc4:	205c      	movs	r0, #92	; 0x5c
 800afc6:	f001 fc3d 	bl	800c844 <pvPortMalloc>
 800afca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d003      	beq.n	800afda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	631a      	str	r2, [r3, #48]	; 0x30
 800afd8:	e005      	b.n	800afe6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800afda:	6978      	ldr	r0, [r7, #20]
 800afdc:	f001 fcfc 	bl	800c9d8 <vPortFree>
 800afe0:	e001      	b.n	800afe6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800afe2:	2300      	movs	r3, #0
 800afe4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d017      	beq.n	800b01c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aff4:	88fa      	ldrh	r2, [r7, #6]
 800aff6:	2300      	movs	r3, #0
 800aff8:	9303      	str	r3, [sp, #12]
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	9302      	str	r3, [sp, #8]
 800affe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b000:	9301      	str	r3, [sp, #4]
 800b002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	68b9      	ldr	r1, [r7, #8]
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f000 f80e 	bl	800b02c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b010:	69f8      	ldr	r0, [r7, #28]
 800b012:	f000 f89d 	bl	800b150 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b016:	2301      	movs	r3, #1
 800b018:	61bb      	str	r3, [r7, #24]
 800b01a:	e002      	b.n	800b022 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b01c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b020:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b022:	69bb      	ldr	r3, [r7, #24]
	}
 800b024:	4618      	mov	r0, r3
 800b026:	3720      	adds	r7, #32
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b088      	sub	sp, #32
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
 800b038:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	461a      	mov	r2, r3
 800b044:	21a5      	movs	r1, #165	; 0xa5
 800b046:	f002 fc0d 	bl	800d864 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b04e:	6879      	ldr	r1, [r7, #4]
 800b050:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b054:	440b      	add	r3, r1
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	f023 0307 	bic.w	r3, r3, #7
 800b062:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00c      	beq.n	800b088 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	b672      	cpsid	i
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	b662      	cpsie	i
 800b082:	617b      	str	r3, [r7, #20]
}
 800b084:	bf00      	nop
 800b086:	e7fe      	b.n	800b086 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d01f      	beq.n	800b0ce <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b08e:	2300      	movs	r3, #0
 800b090:	61fb      	str	r3, [r7, #28]
 800b092:	e012      	b.n	800b0ba <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	4413      	add	r3, r2
 800b09a:	7819      	ldrb	r1, [r3, #0]
 800b09c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	3334      	adds	r3, #52	; 0x34
 800b0a4:	460a      	mov	r2, r1
 800b0a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d006      	beq.n	800b0c2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	61fb      	str	r3, [r7, #28]
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	2b0f      	cmp	r3, #15
 800b0be:	d9e9      	bls.n	800b094 <prvInitialiseNewTask+0x68>
 800b0c0:	e000      	b.n	800b0c4 <prvInitialiseNewTask+0x98>
			{
				break;
 800b0c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0cc:	e003      	b.n	800b0d6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d8:	2b37      	cmp	r3, #55	; 0x37
 800b0da:	d901      	bls.n	800b0e0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0dc:	2337      	movs	r3, #55	; 0x37
 800b0de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7ff f952 	bl	800a3a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	3318      	adds	r3, #24
 800b100:	4618      	mov	r0, r3
 800b102:	f7ff f94d 	bl	800a3a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b10a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b114:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b11a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	2200      	movs	r2, #0
 800b120:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b124:	2200      	movs	r2, #0
 800b126:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	68f9      	ldr	r1, [r7, #12]
 800b12e:	69b8      	ldr	r0, [r7, #24]
 800b130:	f001 f952 	bl	800c3d8 <pxPortInitialiseStack>
 800b134:	4602      	mov	r2, r0
 800b136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b138:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d002      	beq.n	800b146 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b146:	bf00      	nop
 800b148:	3720      	adds	r7, #32
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
	...

0800b150 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b158:	f001 fa48 	bl	800c5ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b15c:	4b2d      	ldr	r3, [pc, #180]	; (800b214 <prvAddNewTaskToReadyList+0xc4>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	3301      	adds	r3, #1
 800b162:	4a2c      	ldr	r2, [pc, #176]	; (800b214 <prvAddNewTaskToReadyList+0xc4>)
 800b164:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b166:	4b2c      	ldr	r3, [pc, #176]	; (800b218 <prvAddNewTaskToReadyList+0xc8>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d109      	bne.n	800b182 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b16e:	4a2a      	ldr	r2, [pc, #168]	; (800b218 <prvAddNewTaskToReadyList+0xc8>)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b174:	4b27      	ldr	r3, [pc, #156]	; (800b214 <prvAddNewTaskToReadyList+0xc4>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d110      	bne.n	800b19e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b17c:	f000 fc2c 	bl	800b9d8 <prvInitialiseTaskLists>
 800b180:	e00d      	b.n	800b19e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b182:	4b26      	ldr	r3, [pc, #152]	; (800b21c <prvAddNewTaskToReadyList+0xcc>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d109      	bne.n	800b19e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b18a:	4b23      	ldr	r3, [pc, #140]	; (800b218 <prvAddNewTaskToReadyList+0xc8>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	429a      	cmp	r2, r3
 800b196:	d802      	bhi.n	800b19e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b198:	4a1f      	ldr	r2, [pc, #124]	; (800b218 <prvAddNewTaskToReadyList+0xc8>)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b19e:	4b20      	ldr	r3, [pc, #128]	; (800b220 <prvAddNewTaskToReadyList+0xd0>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	4a1e      	ldr	r2, [pc, #120]	; (800b220 <prvAddNewTaskToReadyList+0xd0>)
 800b1a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b1a8:	4b1d      	ldr	r3, [pc, #116]	; (800b220 <prvAddNewTaskToReadyList+0xd0>)
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b4:	4b1b      	ldr	r3, [pc, #108]	; (800b224 <prvAddNewTaskToReadyList+0xd4>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d903      	bls.n	800b1c4 <prvAddNewTaskToReadyList+0x74>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c0:	4a18      	ldr	r2, [pc, #96]	; (800b224 <prvAddNewTaskToReadyList+0xd4>)
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	4413      	add	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4a15      	ldr	r2, [pc, #84]	; (800b228 <prvAddNewTaskToReadyList+0xd8>)
 800b1d2:	441a      	add	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3304      	adds	r3, #4
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4610      	mov	r0, r2
 800b1dc:	f7ff f8ed 	bl	800a3ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b1e0:	f001 fa38 	bl	800c654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b1e4:	4b0d      	ldr	r3, [pc, #52]	; (800b21c <prvAddNewTaskToReadyList+0xcc>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00e      	beq.n	800b20a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b1ec:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <prvAddNewTaskToReadyList+0xc8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d207      	bcs.n	800b20a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b1fa:	4b0c      	ldr	r3, [pc, #48]	; (800b22c <prvAddNewTaskToReadyList+0xdc>)
 800b1fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b20a:	bf00      	nop
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	20004084 	.word	0x20004084
 800b218:	20003bb0 	.word	0x20003bb0
 800b21c:	20004090 	.word	0x20004090
 800b220:	200040a0 	.word	0x200040a0
 800b224:	2000408c 	.word	0x2000408c
 800b228:	20003bb4 	.word	0x20003bb4
 800b22c:	e000ed04 	.word	0xe000ed04

0800b230 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b238:	2300      	movs	r3, #0
 800b23a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d019      	beq.n	800b276 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b242:	4b14      	ldr	r3, [pc, #80]	; (800b294 <vTaskDelay+0x64>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00c      	beq.n	800b264 <vTaskDelay+0x34>
	__asm volatile
 800b24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24e:	b672      	cpsid	i
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	b662      	cpsie	i
 800b25e:	60bb      	str	r3, [r7, #8]
}
 800b260:	bf00      	nop
 800b262:	e7fe      	b.n	800b262 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b264:	f000 f884 	bl	800b370 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b268:	2100      	movs	r1, #0
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 fd04 	bl	800bc78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b270:	f000 f88c 	bl	800b38c <xTaskResumeAll>
 800b274:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d107      	bne.n	800b28c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b27c:	4b06      	ldr	r3, [pc, #24]	; (800b298 <vTaskDelay+0x68>)
 800b27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b282:	601a      	str	r2, [r3, #0]
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b28c:	bf00      	nop
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	200040ac 	.word	0x200040ac
 800b298:	e000ed04 	.word	0xe000ed04

0800b29c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b08a      	sub	sp, #40	; 0x28
 800b2a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2aa:	463a      	mov	r2, r7
 800b2ac:	1d39      	adds	r1, r7, #4
 800b2ae:	f107 0308 	add.w	r3, r7, #8
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff f820 	bl	800a2f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	9202      	str	r2, [sp, #8]
 800b2c0:	9301      	str	r3, [sp, #4]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	460a      	mov	r2, r1
 800b2ca:	4923      	ldr	r1, [pc, #140]	; (800b358 <vTaskStartScheduler+0xbc>)
 800b2cc:	4823      	ldr	r0, [pc, #140]	; (800b35c <vTaskStartScheduler+0xc0>)
 800b2ce:	f7ff fe05 	bl	800aedc <xTaskCreateStatic>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	4a22      	ldr	r2, [pc, #136]	; (800b360 <vTaskStartScheduler+0xc4>)
 800b2d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2d8:	4b21      	ldr	r3, [pc, #132]	; (800b360 <vTaskStartScheduler+0xc4>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	617b      	str	r3, [r7, #20]
 800b2e4:	e001      	b.n	800b2ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d102      	bne.n	800b2f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b2f0:	f000 fd16 	bl	800bd20 <xTimerCreateTimerTask>
 800b2f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d118      	bne.n	800b32e <vTaskStartScheduler+0x92>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b300:	b672      	cpsid	i
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	b662      	cpsie	i
 800b310:	613b      	str	r3, [r7, #16]
}
 800b312:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b314:	4b13      	ldr	r3, [pc, #76]	; (800b364 <vTaskStartScheduler+0xc8>)
 800b316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b31a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b31c:	4b12      	ldr	r3, [pc, #72]	; (800b368 <vTaskStartScheduler+0xcc>)
 800b31e:	2201      	movs	r2, #1
 800b320:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b322:	4b12      	ldr	r3, [pc, #72]	; (800b36c <vTaskStartScheduler+0xd0>)
 800b324:	2200      	movs	r2, #0
 800b326:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b328:	f001 f8e2 	bl	800c4f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b32c:	e010      	b.n	800b350 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b334:	d10c      	bne.n	800b350 <vTaskStartScheduler+0xb4>
	__asm volatile
 800b336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33a:	b672      	cpsid	i
 800b33c:	f383 8811 	msr	BASEPRI, r3
 800b340:	f3bf 8f6f 	isb	sy
 800b344:	f3bf 8f4f 	dsb	sy
 800b348:	b662      	cpsie	i
 800b34a:	60fb      	str	r3, [r7, #12]
}
 800b34c:	bf00      	nop
 800b34e:	e7fe      	b.n	800b34e <vTaskStartScheduler+0xb2>
}
 800b350:	bf00      	nop
 800b352:	3718      	adds	r7, #24
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	0800d9c4 	.word	0x0800d9c4
 800b35c:	0800b9a9 	.word	0x0800b9a9
 800b360:	200040a8 	.word	0x200040a8
 800b364:	200040a4 	.word	0x200040a4
 800b368:	20004090 	.word	0x20004090
 800b36c:	20004088 	.word	0x20004088

0800b370 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b370:	b480      	push	{r7}
 800b372:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b374:	4b04      	ldr	r3, [pc, #16]	; (800b388 <vTaskSuspendAll+0x18>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	3301      	adds	r3, #1
 800b37a:	4a03      	ldr	r2, [pc, #12]	; (800b388 <vTaskSuspendAll+0x18>)
 800b37c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b37e:	bf00      	nop
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr
 800b388:	200040ac 	.word	0x200040ac

0800b38c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b392:	2300      	movs	r3, #0
 800b394:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b396:	2300      	movs	r3, #0
 800b398:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b39a:	4b43      	ldr	r3, [pc, #268]	; (800b4a8 <xTaskResumeAll+0x11c>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10c      	bne.n	800b3bc <xTaskResumeAll+0x30>
	__asm volatile
 800b3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a6:	b672      	cpsid	i
 800b3a8:	f383 8811 	msr	BASEPRI, r3
 800b3ac:	f3bf 8f6f 	isb	sy
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	b662      	cpsie	i
 800b3b6:	603b      	str	r3, [r7, #0]
}
 800b3b8:	bf00      	nop
 800b3ba:	e7fe      	b.n	800b3ba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3bc:	f001 f916 	bl	800c5ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3c0:	4b39      	ldr	r3, [pc, #228]	; (800b4a8 <xTaskResumeAll+0x11c>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	4a38      	ldr	r2, [pc, #224]	; (800b4a8 <xTaskResumeAll+0x11c>)
 800b3c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ca:	4b37      	ldr	r3, [pc, #220]	; (800b4a8 <xTaskResumeAll+0x11c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d162      	bne.n	800b498 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3d2:	4b36      	ldr	r3, [pc, #216]	; (800b4ac <xTaskResumeAll+0x120>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d05e      	beq.n	800b498 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3da:	e02f      	b.n	800b43c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3dc:	4b34      	ldr	r3, [pc, #208]	; (800b4b0 <xTaskResumeAll+0x124>)
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	3318      	adds	r3, #24
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7ff f843 	bl	800a474 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7ff f83e 	bl	800a474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3fc:	4b2d      	ldr	r3, [pc, #180]	; (800b4b4 <xTaskResumeAll+0x128>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	429a      	cmp	r2, r3
 800b402:	d903      	bls.n	800b40c <xTaskResumeAll+0x80>
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b408:	4a2a      	ldr	r2, [pc, #168]	; (800b4b4 <xTaskResumeAll+0x128>)
 800b40a:	6013      	str	r3, [r2, #0]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b410:	4613      	mov	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4a27      	ldr	r2, [pc, #156]	; (800b4b8 <xTaskResumeAll+0x12c>)
 800b41a:	441a      	add	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3304      	adds	r3, #4
 800b420:	4619      	mov	r1, r3
 800b422:	4610      	mov	r0, r2
 800b424:	f7fe ffc9 	bl	800a3ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42c:	4b23      	ldr	r3, [pc, #140]	; (800b4bc <xTaskResumeAll+0x130>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b432:	429a      	cmp	r2, r3
 800b434:	d302      	bcc.n	800b43c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b436:	4b22      	ldr	r3, [pc, #136]	; (800b4c0 <xTaskResumeAll+0x134>)
 800b438:	2201      	movs	r2, #1
 800b43a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b43c:	4b1c      	ldr	r3, [pc, #112]	; (800b4b0 <xTaskResumeAll+0x124>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1cb      	bne.n	800b3dc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d001      	beq.n	800b44e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b44a:	f000 fb65 	bl	800bb18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b44e:	4b1d      	ldr	r3, [pc, #116]	; (800b4c4 <xTaskResumeAll+0x138>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d010      	beq.n	800b47c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b45a:	f000 f847 	bl	800b4ec <xTaskIncrementTick>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d002      	beq.n	800b46a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b464:	4b16      	ldr	r3, [pc, #88]	; (800b4c0 <xTaskResumeAll+0x134>)
 800b466:	2201      	movs	r2, #1
 800b468:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	3b01      	subs	r3, #1
 800b46e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1f1      	bne.n	800b45a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b476:	4b13      	ldr	r3, [pc, #76]	; (800b4c4 <xTaskResumeAll+0x138>)
 800b478:	2200      	movs	r2, #0
 800b47a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b47c:	4b10      	ldr	r3, [pc, #64]	; (800b4c0 <xTaskResumeAll+0x134>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d009      	beq.n	800b498 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b484:	2301      	movs	r3, #1
 800b486:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b488:	4b0f      	ldr	r3, [pc, #60]	; (800b4c8 <xTaskResumeAll+0x13c>)
 800b48a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b48e:	601a      	str	r2, [r3, #0]
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b498:	f001 f8dc 	bl	800c654 <vPortExitCritical>

	return xAlreadyYielded;
 800b49c:	68bb      	ldr	r3, [r7, #8]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	200040ac 	.word	0x200040ac
 800b4ac:	20004084 	.word	0x20004084
 800b4b0:	20004044 	.word	0x20004044
 800b4b4:	2000408c 	.word	0x2000408c
 800b4b8:	20003bb4 	.word	0x20003bb4
 800b4bc:	20003bb0 	.word	0x20003bb0
 800b4c0:	20004098 	.word	0x20004098
 800b4c4:	20004094 	.word	0x20004094
 800b4c8:	e000ed04 	.word	0xe000ed04

0800b4cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b4d2:	4b05      	ldr	r3, [pc, #20]	; (800b4e8 <xTaskGetTickCount+0x1c>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b4d8:	687b      	ldr	r3, [r7, #4]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	20004088 	.word	0x20004088

0800b4ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4f6:	4b50      	ldr	r3, [pc, #320]	; (800b638 <xTaskIncrementTick+0x14c>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f040 808b 	bne.w	800b616 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b500:	4b4e      	ldr	r3, [pc, #312]	; (800b63c <xTaskIncrementTick+0x150>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3301      	adds	r3, #1
 800b506:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b508:	4a4c      	ldr	r2, [pc, #304]	; (800b63c <xTaskIncrementTick+0x150>)
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d122      	bne.n	800b55a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b514:	4b4a      	ldr	r3, [pc, #296]	; (800b640 <xTaskIncrementTick+0x154>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00c      	beq.n	800b538 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b522:	b672      	cpsid	i
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	b662      	cpsie	i
 800b532:	603b      	str	r3, [r7, #0]
}
 800b534:	bf00      	nop
 800b536:	e7fe      	b.n	800b536 <xTaskIncrementTick+0x4a>
 800b538:	4b41      	ldr	r3, [pc, #260]	; (800b640 <xTaskIncrementTick+0x154>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	60fb      	str	r3, [r7, #12]
 800b53e:	4b41      	ldr	r3, [pc, #260]	; (800b644 <xTaskIncrementTick+0x158>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a3f      	ldr	r2, [pc, #252]	; (800b640 <xTaskIncrementTick+0x154>)
 800b544:	6013      	str	r3, [r2, #0]
 800b546:	4a3f      	ldr	r2, [pc, #252]	; (800b644 <xTaskIncrementTick+0x158>)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	4b3e      	ldr	r3, [pc, #248]	; (800b648 <xTaskIncrementTick+0x15c>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	3301      	adds	r3, #1
 800b552:	4a3d      	ldr	r2, [pc, #244]	; (800b648 <xTaskIncrementTick+0x15c>)
 800b554:	6013      	str	r3, [r2, #0]
 800b556:	f000 fadf 	bl	800bb18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b55a:	4b3c      	ldr	r3, [pc, #240]	; (800b64c <xTaskIncrementTick+0x160>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	429a      	cmp	r2, r3
 800b562:	d349      	bcc.n	800b5f8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b564:	4b36      	ldr	r3, [pc, #216]	; (800b640 <xTaskIncrementTick+0x154>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d104      	bne.n	800b578 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b56e:	4b37      	ldr	r3, [pc, #220]	; (800b64c <xTaskIncrementTick+0x160>)
 800b570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b574:	601a      	str	r2, [r3, #0]
					break;
 800b576:	e03f      	b.n	800b5f8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b578:	4b31      	ldr	r3, [pc, #196]	; (800b640 <xTaskIncrementTick+0x154>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b588:	693a      	ldr	r2, [r7, #16]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d203      	bcs.n	800b598 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b590:	4a2e      	ldr	r2, [pc, #184]	; (800b64c <xTaskIncrementTick+0x160>)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b596:	e02f      	b.n	800b5f8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	3304      	adds	r3, #4
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fe ff69 	bl	800a474 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d004      	beq.n	800b5b4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	3318      	adds	r3, #24
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fe ff60 	bl	800a474 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b8:	4b25      	ldr	r3, [pc, #148]	; (800b650 <xTaskIncrementTick+0x164>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d903      	bls.n	800b5c8 <xTaskIncrementTick+0xdc>
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c4:	4a22      	ldr	r2, [pc, #136]	; (800b650 <xTaskIncrementTick+0x164>)
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	4413      	add	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4a1f      	ldr	r2, [pc, #124]	; (800b654 <xTaskIncrementTick+0x168>)
 800b5d6:	441a      	add	r2, r3
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	4619      	mov	r1, r3
 800b5de:	4610      	mov	r0, r2
 800b5e0:	f7fe feeb 	bl	800a3ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e8:	4b1b      	ldr	r3, [pc, #108]	; (800b658 <xTaskIncrementTick+0x16c>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d3b8      	bcc.n	800b564 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5f6:	e7b5      	b.n	800b564 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5f8:	4b17      	ldr	r3, [pc, #92]	; (800b658 <xTaskIncrementTick+0x16c>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fe:	4915      	ldr	r1, [pc, #84]	; (800b654 <xTaskIncrementTick+0x168>)
 800b600:	4613      	mov	r3, r2
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	4413      	add	r3, r2
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	440b      	add	r3, r1
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d907      	bls.n	800b620 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b610:	2301      	movs	r3, #1
 800b612:	617b      	str	r3, [r7, #20]
 800b614:	e004      	b.n	800b620 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b616:	4b11      	ldr	r3, [pc, #68]	; (800b65c <xTaskIncrementTick+0x170>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3301      	adds	r3, #1
 800b61c:	4a0f      	ldr	r2, [pc, #60]	; (800b65c <xTaskIncrementTick+0x170>)
 800b61e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b620:	4b0f      	ldr	r3, [pc, #60]	; (800b660 <xTaskIncrementTick+0x174>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d001      	beq.n	800b62c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b628:	2301      	movs	r3, #1
 800b62a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b62c:	697b      	ldr	r3, [r7, #20]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3718      	adds	r7, #24
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	200040ac 	.word	0x200040ac
 800b63c:	20004088 	.word	0x20004088
 800b640:	2000403c 	.word	0x2000403c
 800b644:	20004040 	.word	0x20004040
 800b648:	2000409c 	.word	0x2000409c
 800b64c:	200040a4 	.word	0x200040a4
 800b650:	2000408c 	.word	0x2000408c
 800b654:	20003bb4 	.word	0x20003bb4
 800b658:	20003bb0 	.word	0x20003bb0
 800b65c:	20004094 	.word	0x20004094
 800b660:	20004098 	.word	0x20004098

0800b664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b66a:	4b29      	ldr	r3, [pc, #164]	; (800b710 <vTaskSwitchContext+0xac>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d003      	beq.n	800b67a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b672:	4b28      	ldr	r3, [pc, #160]	; (800b714 <vTaskSwitchContext+0xb0>)
 800b674:	2201      	movs	r2, #1
 800b676:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b678:	e043      	b.n	800b702 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800b67a:	4b26      	ldr	r3, [pc, #152]	; (800b714 <vTaskSwitchContext+0xb0>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b680:	4b25      	ldr	r3, [pc, #148]	; (800b718 <vTaskSwitchContext+0xb4>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	60fb      	str	r3, [r7, #12]
 800b686:	e012      	b.n	800b6ae <vTaskSwitchContext+0x4a>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10c      	bne.n	800b6a8 <vTaskSwitchContext+0x44>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	b672      	cpsid	i
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	b662      	cpsie	i
 800b6a2:	607b      	str	r3, [r7, #4]
}
 800b6a4:	bf00      	nop
 800b6a6:	e7fe      	b.n	800b6a6 <vTaskSwitchContext+0x42>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	60fb      	str	r3, [r7, #12]
 800b6ae:	491b      	ldr	r1, [pc, #108]	; (800b71c <vTaskSwitchContext+0xb8>)
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	4413      	add	r3, r2
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	440b      	add	r3, r1
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d0e2      	beq.n	800b688 <vTaskSwitchContext+0x24>
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4a13      	ldr	r2, [pc, #76]	; (800b71c <vTaskSwitchContext+0xb8>)
 800b6ce:	4413      	add	r3, r2
 800b6d0:	60bb      	str	r3, [r7, #8]
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	685a      	ldr	r2, [r3, #4]
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	605a      	str	r2, [r3, #4]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	685a      	ldr	r2, [r3, #4]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d104      	bne.n	800b6f2 <vTaskSwitchContext+0x8e>
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	605a      	str	r2, [r3, #4]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	4a09      	ldr	r2, [pc, #36]	; (800b720 <vTaskSwitchContext+0xbc>)
 800b6fa:	6013      	str	r3, [r2, #0]
 800b6fc:	4a06      	ldr	r2, [pc, #24]	; (800b718 <vTaskSwitchContext+0xb4>)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6013      	str	r3, [r2, #0]
}
 800b702:	bf00      	nop
 800b704:	3714      	adds	r7, #20
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop
 800b710:	200040ac 	.word	0x200040ac
 800b714:	20004098 	.word	0x20004098
 800b718:	2000408c 	.word	0x2000408c
 800b71c:	20003bb4 	.word	0x20003bb4
 800b720:	20003bb0 	.word	0x20003bb0

0800b724 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10c      	bne.n	800b74e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b738:	b672      	cpsid	i
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	b662      	cpsie	i
 800b748:	60fb      	str	r3, [r7, #12]
}
 800b74a:	bf00      	nop
 800b74c:	e7fe      	b.n	800b74c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b74e:	4b07      	ldr	r3, [pc, #28]	; (800b76c <vTaskPlaceOnEventList+0x48>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3318      	adds	r3, #24
 800b754:	4619      	mov	r1, r3
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7fe fe53 	bl	800a402 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b75c:	2101      	movs	r1, #1
 800b75e:	6838      	ldr	r0, [r7, #0]
 800b760:	f000 fa8a 	bl	800bc78 <prvAddCurrentTaskToDelayedList>
}
 800b764:	bf00      	nop
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	20003bb0 	.word	0x20003bb0

0800b770 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10c      	bne.n	800b79c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b786:	b672      	cpsid	i
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	b662      	cpsie	i
 800b796:	617b      	str	r3, [r7, #20]
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b79c:	4b0a      	ldr	r3, [pc, #40]	; (800b7c8 <vTaskPlaceOnEventListRestricted+0x58>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3318      	adds	r3, #24
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f7fe fe08 	bl	800a3ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b7b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7b6:	6879      	ldr	r1, [r7, #4]
 800b7b8:	68b8      	ldr	r0, [r7, #8]
 800b7ba:	f000 fa5d 	bl	800bc78 <prvAddCurrentTaskToDelayedList>
	}
 800b7be:	bf00      	nop
 800b7c0:	3718      	adds	r7, #24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20003bb0 	.word	0x20003bb0

0800b7cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d10c      	bne.n	800b7fc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e6:	b672      	cpsid	i
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	b662      	cpsie	i
 800b7f6:	60fb      	str	r3, [r7, #12]
}
 800b7f8:	bf00      	nop
 800b7fa:	e7fe      	b.n	800b7fa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	3318      	adds	r3, #24
 800b800:	4618      	mov	r0, r3
 800b802:	f7fe fe37 	bl	800a474 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b806:	4b1e      	ldr	r3, [pc, #120]	; (800b880 <xTaskRemoveFromEventList+0xb4>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d11d      	bne.n	800b84a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	3304      	adds	r3, #4
 800b812:	4618      	mov	r0, r3
 800b814:	f7fe fe2e 	bl	800a474 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81c:	4b19      	ldr	r3, [pc, #100]	; (800b884 <xTaskRemoveFromEventList+0xb8>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	429a      	cmp	r2, r3
 800b822:	d903      	bls.n	800b82c <xTaskRemoveFromEventList+0x60>
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b828:	4a16      	ldr	r2, [pc, #88]	; (800b884 <xTaskRemoveFromEventList+0xb8>)
 800b82a:	6013      	str	r3, [r2, #0]
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b830:	4613      	mov	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4413      	add	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4a13      	ldr	r2, [pc, #76]	; (800b888 <xTaskRemoveFromEventList+0xbc>)
 800b83a:	441a      	add	r2, r3
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	3304      	adds	r3, #4
 800b840:	4619      	mov	r1, r3
 800b842:	4610      	mov	r0, r2
 800b844:	f7fe fdb9 	bl	800a3ba <vListInsertEnd>
 800b848:	e005      	b.n	800b856 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	3318      	adds	r3, #24
 800b84e:	4619      	mov	r1, r3
 800b850:	480e      	ldr	r0, [pc, #56]	; (800b88c <xTaskRemoveFromEventList+0xc0>)
 800b852:	f7fe fdb2 	bl	800a3ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85a:	4b0d      	ldr	r3, [pc, #52]	; (800b890 <xTaskRemoveFromEventList+0xc4>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b860:	429a      	cmp	r2, r3
 800b862:	d905      	bls.n	800b870 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b864:	2301      	movs	r3, #1
 800b866:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b868:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <xTaskRemoveFromEventList+0xc8>)
 800b86a:	2201      	movs	r2, #1
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	e001      	b.n	800b874 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b870:	2300      	movs	r3, #0
 800b872:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b874:	697b      	ldr	r3, [r7, #20]
}
 800b876:	4618      	mov	r0, r3
 800b878:	3718      	adds	r7, #24
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	200040ac 	.word	0x200040ac
 800b884:	2000408c 	.word	0x2000408c
 800b888:	20003bb4 	.word	0x20003bb4
 800b88c:	20004044 	.word	0x20004044
 800b890:	20003bb0 	.word	0x20003bb0
 800b894:	20004098 	.word	0x20004098

0800b898 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8a0:	4b06      	ldr	r3, [pc, #24]	; (800b8bc <vTaskInternalSetTimeOutState+0x24>)
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8a8:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <vTaskInternalSetTimeOutState+0x28>)
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	605a      	str	r2, [r3, #4]
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	2000409c 	.word	0x2000409c
 800b8c0:	20004088 	.word	0x20004088

0800b8c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b088      	sub	sp, #32
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10c      	bne.n	800b8ee <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d8:	b672      	cpsid	i
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	b662      	cpsie	i
 800b8e8:	613b      	str	r3, [r7, #16]
}
 800b8ea:	bf00      	nop
 800b8ec:	e7fe      	b.n	800b8ec <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10c      	bne.n	800b90e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	b672      	cpsid	i
 800b8fa:	f383 8811 	msr	BASEPRI, r3
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	f3bf 8f4f 	dsb	sy
 800b906:	b662      	cpsie	i
 800b908:	60fb      	str	r3, [r7, #12]
}
 800b90a:	bf00      	nop
 800b90c:	e7fe      	b.n	800b90c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b90e:	f000 fe6d 	bl	800c5ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b912:	4b1d      	ldr	r3, [pc, #116]	; (800b988 <xTaskCheckForTimeOut+0xc4>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	69ba      	ldr	r2, [r7, #24]
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b92a:	d102      	bne.n	800b932 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b92c:	2300      	movs	r3, #0
 800b92e:	61fb      	str	r3, [r7, #28]
 800b930:	e023      	b.n	800b97a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	4b15      	ldr	r3, [pc, #84]	; (800b98c <xTaskCheckForTimeOut+0xc8>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d007      	beq.n	800b94e <xTaskCheckForTimeOut+0x8a>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	69ba      	ldr	r2, [r7, #24]
 800b944:	429a      	cmp	r2, r3
 800b946:	d302      	bcc.n	800b94e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b948:	2301      	movs	r3, #1
 800b94a:	61fb      	str	r3, [r7, #28]
 800b94c:	e015      	b.n	800b97a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	429a      	cmp	r2, r3
 800b956:	d20b      	bcs.n	800b970 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	1ad2      	subs	r2, r2, r3
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7ff ff97 	bl	800b898 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b96a:	2300      	movs	r3, #0
 800b96c:	61fb      	str	r3, [r7, #28]
 800b96e:	e004      	b.n	800b97a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	2200      	movs	r2, #0
 800b974:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b976:	2301      	movs	r3, #1
 800b978:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b97a:	f000 fe6b 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800b97e:	69fb      	ldr	r3, [r7, #28]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3720      	adds	r7, #32
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	20004088 	.word	0x20004088
 800b98c:	2000409c 	.word	0x2000409c

0800b990 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b990:	b480      	push	{r7}
 800b992:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b994:	4b03      	ldr	r3, [pc, #12]	; (800b9a4 <vTaskMissedYield+0x14>)
 800b996:	2201      	movs	r2, #1
 800b998:	601a      	str	r2, [r3, #0]
}
 800b99a:	bf00      	nop
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr
 800b9a4:	20004098 	.word	0x20004098

0800b9a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9b0:	f000 f852 	bl	800ba58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9b4:	4b06      	ldr	r3, [pc, #24]	; (800b9d0 <prvIdleTask+0x28>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d9f9      	bls.n	800b9b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9bc:	4b05      	ldr	r3, [pc, #20]	; (800b9d4 <prvIdleTask+0x2c>)
 800b9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b9cc:	e7f0      	b.n	800b9b0 <prvIdleTask+0x8>
 800b9ce:	bf00      	nop
 800b9d0:	20003bb4 	.word	0x20003bb4
 800b9d4:	e000ed04 	.word	0xe000ed04

0800b9d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9de:	2300      	movs	r3, #0
 800b9e0:	607b      	str	r3, [r7, #4]
 800b9e2:	e00c      	b.n	800b9fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	4a12      	ldr	r2, [pc, #72]	; (800ba38 <prvInitialiseTaskLists+0x60>)
 800b9f0:	4413      	add	r3, r2
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7fe fcb4 	bl	800a360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	607b      	str	r3, [r7, #4]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2b37      	cmp	r3, #55	; 0x37
 800ba02:	d9ef      	bls.n	800b9e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba04:	480d      	ldr	r0, [pc, #52]	; (800ba3c <prvInitialiseTaskLists+0x64>)
 800ba06:	f7fe fcab 	bl	800a360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba0a:	480d      	ldr	r0, [pc, #52]	; (800ba40 <prvInitialiseTaskLists+0x68>)
 800ba0c:	f7fe fca8 	bl	800a360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba10:	480c      	ldr	r0, [pc, #48]	; (800ba44 <prvInitialiseTaskLists+0x6c>)
 800ba12:	f7fe fca5 	bl	800a360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba16:	480c      	ldr	r0, [pc, #48]	; (800ba48 <prvInitialiseTaskLists+0x70>)
 800ba18:	f7fe fca2 	bl	800a360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba1c:	480b      	ldr	r0, [pc, #44]	; (800ba4c <prvInitialiseTaskLists+0x74>)
 800ba1e:	f7fe fc9f 	bl	800a360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba22:	4b0b      	ldr	r3, [pc, #44]	; (800ba50 <prvInitialiseTaskLists+0x78>)
 800ba24:	4a05      	ldr	r2, [pc, #20]	; (800ba3c <prvInitialiseTaskLists+0x64>)
 800ba26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba28:	4b0a      	ldr	r3, [pc, #40]	; (800ba54 <prvInitialiseTaskLists+0x7c>)
 800ba2a:	4a05      	ldr	r2, [pc, #20]	; (800ba40 <prvInitialiseTaskLists+0x68>)
 800ba2c:	601a      	str	r2, [r3, #0]
}
 800ba2e:	bf00      	nop
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	20003bb4 	.word	0x20003bb4
 800ba3c:	20004014 	.word	0x20004014
 800ba40:	20004028 	.word	0x20004028
 800ba44:	20004044 	.word	0x20004044
 800ba48:	20004058 	.word	0x20004058
 800ba4c:	20004070 	.word	0x20004070
 800ba50:	2000403c 	.word	0x2000403c
 800ba54:	20004040 	.word	0x20004040

0800ba58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba5e:	e019      	b.n	800ba94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba60:	f000 fdc4 	bl	800c5ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba64:	4b10      	ldr	r3, [pc, #64]	; (800baa8 <prvCheckTasksWaitingTermination+0x50>)
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	3304      	adds	r3, #4
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7fe fcff 	bl	800a474 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba76:	4b0d      	ldr	r3, [pc, #52]	; (800baac <prvCheckTasksWaitingTermination+0x54>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	4a0b      	ldr	r2, [pc, #44]	; (800baac <prvCheckTasksWaitingTermination+0x54>)
 800ba7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba80:	4b0b      	ldr	r3, [pc, #44]	; (800bab0 <prvCheckTasksWaitingTermination+0x58>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	3b01      	subs	r3, #1
 800ba86:	4a0a      	ldr	r2, [pc, #40]	; (800bab0 <prvCheckTasksWaitingTermination+0x58>)
 800ba88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba8a:	f000 fde3 	bl	800c654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f810 	bl	800bab4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba94:	4b06      	ldr	r3, [pc, #24]	; (800bab0 <prvCheckTasksWaitingTermination+0x58>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1e1      	bne.n	800ba60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba9c:	bf00      	nop
 800ba9e:	bf00      	nop
 800baa0:	3708      	adds	r7, #8
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20004058 	.word	0x20004058
 800baac:	20004084 	.word	0x20004084
 800bab0:	2000406c 	.word	0x2000406c

0800bab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d108      	bne.n	800bad8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 ff84 	bl	800c9d8 <vPortFree>
				vPortFree( pxTCB );
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 ff81 	bl	800c9d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bad6:	e01a      	b.n	800bb0e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d103      	bne.n	800baea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 ff78 	bl	800c9d8 <vPortFree>
	}
 800bae8:	e011      	b.n	800bb0e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d00c      	beq.n	800bb0e <prvDeleteTCB+0x5a>
	__asm volatile
 800baf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf8:	b672      	cpsid	i
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	b662      	cpsie	i
 800bb08:	60fb      	str	r3, [r7, #12]
}
 800bb0a:	bf00      	nop
 800bb0c:	e7fe      	b.n	800bb0c <prvDeleteTCB+0x58>
	}
 800bb0e:	bf00      	nop
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
	...

0800bb18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb1e:	4b0c      	ldr	r3, [pc, #48]	; (800bb50 <prvResetNextTaskUnblockTime+0x38>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d104      	bne.n	800bb32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb28:	4b0a      	ldr	r3, [pc, #40]	; (800bb54 <prvResetNextTaskUnblockTime+0x3c>)
 800bb2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb30:	e008      	b.n	800bb44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb32:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <prvResetNextTaskUnblockTime+0x38>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	4a04      	ldr	r2, [pc, #16]	; (800bb54 <prvResetNextTaskUnblockTime+0x3c>)
 800bb42:	6013      	str	r3, [r2, #0]
}
 800bb44:	bf00      	nop
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr
 800bb50:	2000403c 	.word	0x2000403c
 800bb54:	200040a4 	.word	0x200040a4

0800bb58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb5e:	4b0b      	ldr	r3, [pc, #44]	; (800bb8c <xTaskGetSchedulerState+0x34>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d102      	bne.n	800bb6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb66:	2301      	movs	r3, #1
 800bb68:	607b      	str	r3, [r7, #4]
 800bb6a:	e008      	b.n	800bb7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb6c:	4b08      	ldr	r3, [pc, #32]	; (800bb90 <xTaskGetSchedulerState+0x38>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d102      	bne.n	800bb7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb74:	2302      	movs	r3, #2
 800bb76:	607b      	str	r3, [r7, #4]
 800bb78:	e001      	b.n	800bb7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb7e:	687b      	ldr	r3, [r7, #4]
	}
 800bb80:	4618      	mov	r0, r3
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	20004090 	.word	0x20004090
 800bb90:	200040ac 	.word	0x200040ac

0800bb94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bba0:	2300      	movs	r3, #0
 800bba2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d05a      	beq.n	800bc60 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bbaa:	4b30      	ldr	r3, [pc, #192]	; (800bc6c <xTaskPriorityDisinherit+0xd8>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	693a      	ldr	r2, [r7, #16]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d00c      	beq.n	800bbce <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800bbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb8:	b672      	cpsid	i
 800bbba:	f383 8811 	msr	BASEPRI, r3
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f3bf 8f4f 	dsb	sy
 800bbc6:	b662      	cpsie	i
 800bbc8:	60fb      	str	r3, [r7, #12]
}
 800bbca:	bf00      	nop
 800bbcc:	e7fe      	b.n	800bbcc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10c      	bne.n	800bbf0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbda:	b672      	cpsid	i
 800bbdc:	f383 8811 	msr	BASEPRI, r3
 800bbe0:	f3bf 8f6f 	isb	sy
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	b662      	cpsie	i
 800bbea:	60bb      	str	r3, [r7, #8]
}
 800bbec:	bf00      	nop
 800bbee:	e7fe      	b.n	800bbee <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbf4:	1e5a      	subs	r2, r3, #1
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d02c      	beq.n	800bc60 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d128      	bne.n	800bc60 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	3304      	adds	r3, #4
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fe fc2e 	bl	800a474 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc30:	4b0f      	ldr	r3, [pc, #60]	; (800bc70 <xTaskPriorityDisinherit+0xdc>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d903      	bls.n	800bc40 <xTaskPriorityDisinherit+0xac>
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3c:	4a0c      	ldr	r2, [pc, #48]	; (800bc70 <xTaskPriorityDisinherit+0xdc>)
 800bc3e:	6013      	str	r3, [r2, #0]
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc44:	4613      	mov	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	4a09      	ldr	r2, [pc, #36]	; (800bc74 <xTaskPriorityDisinherit+0xe0>)
 800bc4e:	441a      	add	r2, r3
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	3304      	adds	r3, #4
 800bc54:	4619      	mov	r1, r3
 800bc56:	4610      	mov	r0, r2
 800bc58:	f7fe fbaf 	bl	800a3ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc60:	697b      	ldr	r3, [r7, #20]
	}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3718      	adds	r7, #24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	20003bb0 	.word	0x20003bb0
 800bc70:	2000408c 	.word	0x2000408c
 800bc74:	20003bb4 	.word	0x20003bb4

0800bc78 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc82:	4b21      	ldr	r3, [pc, #132]	; (800bd08 <prvAddCurrentTaskToDelayedList+0x90>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc88:	4b20      	ldr	r3, [pc, #128]	; (800bd0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	3304      	adds	r3, #4
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe fbf0 	bl	800a474 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc9a:	d10a      	bne.n	800bcb2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d007      	beq.n	800bcb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bca2:	4b1a      	ldr	r3, [pc, #104]	; (800bd0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	3304      	adds	r3, #4
 800bca8:	4619      	mov	r1, r3
 800bcaa:	4819      	ldr	r0, [pc, #100]	; (800bd10 <prvAddCurrentTaskToDelayedList+0x98>)
 800bcac:	f7fe fb85 	bl	800a3ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bcb0:	e026      	b.n	800bd00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bcba:	4b14      	ldr	r3, [pc, #80]	; (800bd0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d209      	bcs.n	800bcde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcca:	4b12      	ldr	r3, [pc, #72]	; (800bd14 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	4b0f      	ldr	r3, [pc, #60]	; (800bd0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	3304      	adds	r3, #4
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	4610      	mov	r0, r2
 800bcd8:	f7fe fb93 	bl	800a402 <vListInsert>
}
 800bcdc:	e010      	b.n	800bd00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcde:	4b0e      	ldr	r3, [pc, #56]	; (800bd18 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	4b0a      	ldr	r3, [pc, #40]	; (800bd0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3304      	adds	r3, #4
 800bce8:	4619      	mov	r1, r3
 800bcea:	4610      	mov	r0, r2
 800bcec:	f7fe fb89 	bl	800a402 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bcf0:	4b0a      	ldr	r3, [pc, #40]	; (800bd1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68ba      	ldr	r2, [r7, #8]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d202      	bcs.n	800bd00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bcfa:	4a08      	ldr	r2, [pc, #32]	; (800bd1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	6013      	str	r3, [r2, #0]
}
 800bd00:	bf00      	nop
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	20004088 	.word	0x20004088
 800bd0c:	20003bb0 	.word	0x20003bb0
 800bd10:	20004070 	.word	0x20004070
 800bd14:	20004040 	.word	0x20004040
 800bd18:	2000403c 	.word	0x2000403c
 800bd1c:	200040a4 	.word	0x200040a4

0800bd20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08a      	sub	sp, #40	; 0x28
 800bd24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd26:	2300      	movs	r3, #0
 800bd28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd2a:	f000 fb15 	bl	800c358 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd2e:	4b1d      	ldr	r3, [pc, #116]	; (800bda4 <xTimerCreateTimerTask+0x84>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d021      	beq.n	800bd7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd3e:	1d3a      	adds	r2, r7, #4
 800bd40:	f107 0108 	add.w	r1, r7, #8
 800bd44:	f107 030c 	add.w	r3, r7, #12
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fe faef 	bl	800a32c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd4e:	6879      	ldr	r1, [r7, #4]
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	9202      	str	r2, [sp, #8]
 800bd56:	9301      	str	r3, [sp, #4]
 800bd58:	2302      	movs	r3, #2
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	460a      	mov	r2, r1
 800bd60:	4911      	ldr	r1, [pc, #68]	; (800bda8 <xTimerCreateTimerTask+0x88>)
 800bd62:	4812      	ldr	r0, [pc, #72]	; (800bdac <xTimerCreateTimerTask+0x8c>)
 800bd64:	f7ff f8ba 	bl	800aedc <xTaskCreateStatic>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	4a11      	ldr	r2, [pc, #68]	; (800bdb0 <xTimerCreateTimerTask+0x90>)
 800bd6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd6e:	4b10      	ldr	r3, [pc, #64]	; (800bdb0 <xTimerCreateTimerTask+0x90>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd76:	2301      	movs	r3, #1
 800bd78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10c      	bne.n	800bd9a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	b672      	cpsid	i
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	b662      	cpsie	i
 800bd94:	613b      	str	r3, [r7, #16]
}
 800bd96:	bf00      	nop
 800bd98:	e7fe      	b.n	800bd98 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800bd9a:	697b      	ldr	r3, [r7, #20]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3718      	adds	r7, #24
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	200040e0 	.word	0x200040e0
 800bda8:	0800d9cc 	.word	0x0800d9cc
 800bdac:	0800bef1 	.word	0x0800bef1
 800bdb0:	200040e4 	.word	0x200040e4

0800bdb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b08a      	sub	sp, #40	; 0x28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
 800bdc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10c      	bne.n	800bde6 <xTimerGenericCommand+0x32>
	__asm volatile
 800bdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd0:	b672      	cpsid	i
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	b662      	cpsie	i
 800bde0:	623b      	str	r3, [r7, #32]
}
 800bde2:	bf00      	nop
 800bde4:	e7fe      	b.n	800bde4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bde6:	4b1a      	ldr	r3, [pc, #104]	; (800be50 <xTimerGenericCommand+0x9c>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d02a      	beq.n	800be44 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	2b05      	cmp	r3, #5
 800bdfe:	dc18      	bgt.n	800be32 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be00:	f7ff feaa 	bl	800bb58 <xTaskGetSchedulerState>
 800be04:	4603      	mov	r3, r0
 800be06:	2b02      	cmp	r3, #2
 800be08:	d109      	bne.n	800be1e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be0a:	4b11      	ldr	r3, [pc, #68]	; (800be50 <xTimerGenericCommand+0x9c>)
 800be0c:	6818      	ldr	r0, [r3, #0]
 800be0e:	f107 0110 	add.w	r1, r7, #16
 800be12:	2300      	movs	r3, #0
 800be14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be16:	f7fe fc67 	bl	800a6e8 <xQueueGenericSend>
 800be1a:	6278      	str	r0, [r7, #36]	; 0x24
 800be1c:	e012      	b.n	800be44 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800be1e:	4b0c      	ldr	r3, [pc, #48]	; (800be50 <xTimerGenericCommand+0x9c>)
 800be20:	6818      	ldr	r0, [r3, #0]
 800be22:	f107 0110 	add.w	r1, r7, #16
 800be26:	2300      	movs	r3, #0
 800be28:	2200      	movs	r2, #0
 800be2a:	f7fe fc5d 	bl	800a6e8 <xQueueGenericSend>
 800be2e:	6278      	str	r0, [r7, #36]	; 0x24
 800be30:	e008      	b.n	800be44 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800be32:	4b07      	ldr	r3, [pc, #28]	; (800be50 <xTimerGenericCommand+0x9c>)
 800be34:	6818      	ldr	r0, [r3, #0]
 800be36:	f107 0110 	add.w	r1, r7, #16
 800be3a:	2300      	movs	r3, #0
 800be3c:	683a      	ldr	r2, [r7, #0]
 800be3e:	f7fe fd59 	bl	800a8f4 <xQueueGenericSendFromISR>
 800be42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be46:	4618      	mov	r0, r3
 800be48:	3728      	adds	r7, #40	; 0x28
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	200040e0 	.word	0x200040e0

0800be54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b088      	sub	sp, #32
 800be58:	af02      	add	r7, sp, #8
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be5e:	4b23      	ldr	r3, [pc, #140]	; (800beec <prvProcessExpiredTimer+0x98>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	3304      	adds	r3, #4
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7fe fb01 	bl	800a474 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be78:	f003 0304 	and.w	r3, r3, #4
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d024      	beq.n	800beca <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	699a      	ldr	r2, [r3, #24]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	18d1      	adds	r1, r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	6978      	ldr	r0, [r7, #20]
 800be8e:	f000 f8d3 	bl	800c038 <prvInsertTimerInActiveList>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d021      	beq.n	800bedc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be98:	2300      	movs	r3, #0
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	2300      	movs	r3, #0
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	2100      	movs	r1, #0
 800bea2:	6978      	ldr	r0, [r7, #20]
 800bea4:	f7ff ff86 	bl	800bdb4 <xTimerGenericCommand>
 800bea8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d115      	bne.n	800bedc <prvProcessExpiredTimer+0x88>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb4:	b672      	cpsid	i
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	b662      	cpsie	i
 800bec4:	60fb      	str	r3, [r7, #12]
}
 800bec6:	bf00      	nop
 800bec8:	e7fe      	b.n	800bec8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bed0:	f023 0301 	bic.w	r3, r3, #1
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	6a1b      	ldr	r3, [r3, #32]
 800bee0:	6978      	ldr	r0, [r7, #20]
 800bee2:	4798      	blx	r3
}
 800bee4:	bf00      	nop
 800bee6:	3718      	adds	r7, #24
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	200040d8 	.word	0x200040d8

0800bef0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bef8:	f107 0308 	add.w	r3, r7, #8
 800befc:	4618      	mov	r0, r3
 800befe:	f000 f857 	bl	800bfb0 <prvGetNextExpireTime>
 800bf02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	4619      	mov	r1, r3
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f000 f803 	bl	800bf14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bf0e:	f000 f8d5 	bl	800c0bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf12:	e7f1      	b.n	800bef8 <prvTimerTask+0x8>

0800bf14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bf1e:	f7ff fa27 	bl	800b370 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf22:	f107 0308 	add.w	r3, r7, #8
 800bf26:	4618      	mov	r0, r3
 800bf28:	f000 f866 	bl	800bff8 <prvSampleTimeNow>
 800bf2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d130      	bne.n	800bf96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d10a      	bne.n	800bf50 <prvProcessTimerOrBlockTask+0x3c>
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d806      	bhi.n	800bf50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf42:	f7ff fa23 	bl	800b38c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf46:	68f9      	ldr	r1, [r7, #12]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7ff ff83 	bl	800be54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf4e:	e024      	b.n	800bf9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d008      	beq.n	800bf68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf56:	4b13      	ldr	r3, [pc, #76]	; (800bfa4 <prvProcessTimerOrBlockTask+0x90>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <prvProcessTimerOrBlockTask+0x50>
 800bf60:	2301      	movs	r3, #1
 800bf62:	e000      	b.n	800bf66 <prvProcessTimerOrBlockTask+0x52>
 800bf64:	2300      	movs	r3, #0
 800bf66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf68:	4b0f      	ldr	r3, [pc, #60]	; (800bfa8 <prvProcessTimerOrBlockTask+0x94>)
 800bf6a:	6818      	ldr	r0, [r3, #0]
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	4619      	mov	r1, r3
 800bf76:	f7fe ff7d 	bl	800ae74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf7a:	f7ff fa07 	bl	800b38c <xTaskResumeAll>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10a      	bne.n	800bf9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf84:	4b09      	ldr	r3, [pc, #36]	; (800bfac <prvProcessTimerOrBlockTask+0x98>)
 800bf86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	f3bf 8f6f 	isb	sy
}
 800bf94:	e001      	b.n	800bf9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf96:	f7ff f9f9 	bl	800b38c <xTaskResumeAll>
}
 800bf9a:	bf00      	nop
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	200040dc 	.word	0x200040dc
 800bfa8:	200040e0 	.word	0x200040e0
 800bfac:	e000ed04 	.word	0xe000ed04

0800bfb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bfb8:	4b0e      	ldr	r3, [pc, #56]	; (800bff4 <prvGetNextExpireTime+0x44>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d101      	bne.n	800bfc6 <prvGetNextExpireTime+0x16>
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	e000      	b.n	800bfc8 <prvGetNextExpireTime+0x18>
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d105      	bne.n	800bfe0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bfd4:	4b07      	ldr	r3, [pc, #28]	; (800bff4 <prvGetNextExpireTime+0x44>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	60fb      	str	r3, [r7, #12]
 800bfde:	e001      	b.n	800bfe4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3714      	adds	r7, #20
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	200040d8 	.word	0x200040d8

0800bff8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c000:	f7ff fa64 	bl	800b4cc <xTaskGetTickCount>
 800c004:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c006:	4b0b      	ldr	r3, [pc, #44]	; (800c034 <prvSampleTimeNow+0x3c>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d205      	bcs.n	800c01c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c010:	f000 f93c 	bl	800c28c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2201      	movs	r2, #1
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	e002      	b.n	800c022 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c022:	4a04      	ldr	r2, [pc, #16]	; (800c034 <prvSampleTimeNow+0x3c>)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c028:	68fb      	ldr	r3, [r7, #12]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	200040e8 	.word	0x200040e8

0800c038 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
 800c044:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c046:	2300      	movs	r3, #0
 800c048:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	68ba      	ldr	r2, [r7, #8]
 800c04e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	68fa      	ldr	r2, [r7, #12]
 800c054:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c056:	68ba      	ldr	r2, [r7, #8]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d812      	bhi.n	800c084 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	1ad2      	subs	r2, r2, r3
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	699b      	ldr	r3, [r3, #24]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d302      	bcc.n	800c072 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c06c:	2301      	movs	r3, #1
 800c06e:	617b      	str	r3, [r7, #20]
 800c070:	e01b      	b.n	800c0aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c072:	4b10      	ldr	r3, [pc, #64]	; (800c0b4 <prvInsertTimerInActiveList+0x7c>)
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3304      	adds	r3, #4
 800c07a:	4619      	mov	r1, r3
 800c07c:	4610      	mov	r0, r2
 800c07e:	f7fe f9c0 	bl	800a402 <vListInsert>
 800c082:	e012      	b.n	800c0aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d206      	bcs.n	800c09a <prvInsertTimerInActiveList+0x62>
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	429a      	cmp	r2, r3
 800c092:	d302      	bcc.n	800c09a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c094:	2301      	movs	r3, #1
 800c096:	617b      	str	r3, [r7, #20]
 800c098:	e007      	b.n	800c0aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c09a:	4b07      	ldr	r3, [pc, #28]	; (800c0b8 <prvInsertTimerInActiveList+0x80>)
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	3304      	adds	r3, #4
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	4610      	mov	r0, r2
 800c0a6:	f7fe f9ac 	bl	800a402 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c0aa:	697b      	ldr	r3, [r7, #20]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3718      	adds	r7, #24
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	200040dc 	.word	0x200040dc
 800c0b8:	200040d8 	.word	0x200040d8

0800c0bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b08e      	sub	sp, #56	; 0x38
 800c0c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0c2:	e0d0      	b.n	800c266 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	da1a      	bge.n	800c100 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c0ca:	1d3b      	adds	r3, r7, #4
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10c      	bne.n	800c0f0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0da:	b672      	cpsid	i
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	b662      	cpsie	i
 800c0ea:	61fb      	str	r3, [r7, #28]
}
 800c0ec:	bf00      	nop
 800c0ee:	e7fe      	b.n	800c0ee <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0f6:	6850      	ldr	r0, [r2, #4]
 800c0f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0fa:	6892      	ldr	r2, [r2, #8]
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	f2c0 80af 	blt.w	800c266 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d004      	beq.n	800c11e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	3304      	adds	r3, #4
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fe f9ab 	bl	800a474 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c11e:	463b      	mov	r3, r7
 800c120:	4618      	mov	r0, r3
 800c122:	f7ff ff69 	bl	800bff8 <prvSampleTimeNow>
 800c126:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2b09      	cmp	r3, #9
 800c12c:	f200 809a 	bhi.w	800c264 <prvProcessReceivedCommands+0x1a8>
 800c130:	a201      	add	r2, pc, #4	; (adr r2, 800c138 <prvProcessReceivedCommands+0x7c>)
 800c132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c136:	bf00      	nop
 800c138:	0800c161 	.word	0x0800c161
 800c13c:	0800c161 	.word	0x0800c161
 800c140:	0800c161 	.word	0x0800c161
 800c144:	0800c1d9 	.word	0x0800c1d9
 800c148:	0800c1ed 	.word	0x0800c1ed
 800c14c:	0800c23b 	.word	0x0800c23b
 800c150:	0800c161 	.word	0x0800c161
 800c154:	0800c161 	.word	0x0800c161
 800c158:	0800c1d9 	.word	0x0800c1d9
 800c15c:	0800c1ed 	.word	0x0800c1ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c166:	f043 0301 	orr.w	r3, r3, #1
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c172:	68ba      	ldr	r2, [r7, #8]
 800c174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c176:	699b      	ldr	r3, [r3, #24]
 800c178:	18d1      	adds	r1, r2, r3
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c180:	f7ff ff5a 	bl	800c038 <prvInsertTimerInActiveList>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d06d      	beq.n	800c266 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18c:	6a1b      	ldr	r3, [r3, #32]
 800c18e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c190:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c198:	f003 0304 	and.w	r3, r3, #4
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d062      	beq.n	800c266 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	441a      	add	r2, r3
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1b2:	f7ff fdff 	bl	800bdb4 <xTimerGenericCommand>
 800c1b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c1b8:	6a3b      	ldr	r3, [r7, #32]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d153      	bne.n	800c266 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c2:	b672      	cpsid	i
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	b662      	cpsie	i
 800c1d2:	61bb      	str	r3, [r7, #24]
}
 800c1d4:	bf00      	nop
 800c1d6:	e7fe      	b.n	800c1d6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1de:	f023 0301 	bic.w	r3, r3, #1
 800c1e2:	b2da      	uxtb	r2, r3
 800c1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c1ea:	e03c      	b.n	800c266 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1f2:	f043 0301 	orr.w	r3, r3, #1
 800c1f6:	b2da      	uxtb	r2, r3
 800c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c202:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c206:	699b      	ldr	r3, [r3, #24]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10c      	bne.n	800c226 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c210:	b672      	cpsid	i
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	b662      	cpsie	i
 800c220:	617b      	str	r3, [r7, #20]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c228:	699a      	ldr	r2, [r3, #24]
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	18d1      	adds	r1, r2, r3
 800c22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c234:	f7ff ff00 	bl	800c038 <prvInsertTimerInActiveList>
					break;
 800c238:	e015      	b.n	800c266 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c240:	f003 0302 	and.w	r3, r3, #2
 800c244:	2b00      	cmp	r3, #0
 800c246:	d103      	bne.n	800c250 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c24a:	f000 fbc5 	bl	800c9d8 <vPortFree>
 800c24e:	e00a      	b.n	800c266 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c256:	f023 0301 	bic.w	r3, r3, #1
 800c25a:	b2da      	uxtb	r2, r3
 800c25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c262:	e000      	b.n	800c266 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800c264:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c266:	4b08      	ldr	r3, [pc, #32]	; (800c288 <prvProcessReceivedCommands+0x1cc>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	1d39      	adds	r1, r7, #4
 800c26c:	2200      	movs	r2, #0
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fe fbe0 	bl	800aa34 <xQueueReceive>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	f47f af24 	bne.w	800c0c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c27c:	bf00      	nop
 800c27e:	bf00      	nop
 800c280:	3730      	adds	r7, #48	; 0x30
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	200040e0 	.word	0x200040e0

0800c28c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b088      	sub	sp, #32
 800c290:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c292:	e04a      	b.n	800c32a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c294:	4b2e      	ldr	r3, [pc, #184]	; (800c350 <prvSwitchTimerLists+0xc4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c29e:	4b2c      	ldr	r3, [pc, #176]	; (800c350 <prvSwitchTimerLists+0xc4>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	3304      	adds	r3, #4
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fe f8e1 	bl	800a474 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6a1b      	ldr	r3, [r3, #32]
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2c0:	f003 0304 	and.w	r3, r3, #4
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d030      	beq.n	800c32a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	699b      	ldr	r3, [r3, #24]
 800c2cc:	693a      	ldr	r2, [r7, #16]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c2d2:	68ba      	ldr	r2, [r7, #8]
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d90e      	bls.n	800c2f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2e6:	4b1a      	ldr	r3, [pc, #104]	; (800c350 <prvSwitchTimerLists+0xc4>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	f7fe f886 	bl	800a402 <vListInsert>
 800c2f6:	e018      	b.n	800c32a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	693a      	ldr	r2, [r7, #16]
 800c300:	2100      	movs	r1, #0
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f7ff fd56 	bl	800bdb4 <xTimerGenericCommand>
 800c308:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d10c      	bne.n	800c32a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c314:	b672      	cpsid	i
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	b662      	cpsie	i
 800c324:	603b      	str	r3, [r7, #0]
}
 800c326:	bf00      	nop
 800c328:	e7fe      	b.n	800c328 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c32a:	4b09      	ldr	r3, [pc, #36]	; (800c350 <prvSwitchTimerLists+0xc4>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d1af      	bne.n	800c294 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c334:	4b06      	ldr	r3, [pc, #24]	; (800c350 <prvSwitchTimerLists+0xc4>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c33a:	4b06      	ldr	r3, [pc, #24]	; (800c354 <prvSwitchTimerLists+0xc8>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a04      	ldr	r2, [pc, #16]	; (800c350 <prvSwitchTimerLists+0xc4>)
 800c340:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c342:	4a04      	ldr	r2, [pc, #16]	; (800c354 <prvSwitchTimerLists+0xc8>)
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	6013      	str	r3, [r2, #0]
}
 800c348:	bf00      	nop
 800c34a:	3718      	adds	r7, #24
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	200040d8 	.word	0x200040d8
 800c354:	200040dc 	.word	0x200040dc

0800c358 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c35e:	f000 f945 	bl	800c5ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c362:	4b15      	ldr	r3, [pc, #84]	; (800c3b8 <prvCheckForValidListAndQueue+0x60>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d120      	bne.n	800c3ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c36a:	4814      	ldr	r0, [pc, #80]	; (800c3bc <prvCheckForValidListAndQueue+0x64>)
 800c36c:	f7fd fff8 	bl	800a360 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c370:	4813      	ldr	r0, [pc, #76]	; (800c3c0 <prvCheckForValidListAndQueue+0x68>)
 800c372:	f7fd fff5 	bl	800a360 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c376:	4b13      	ldr	r3, [pc, #76]	; (800c3c4 <prvCheckForValidListAndQueue+0x6c>)
 800c378:	4a10      	ldr	r2, [pc, #64]	; (800c3bc <prvCheckForValidListAndQueue+0x64>)
 800c37a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c37c:	4b12      	ldr	r3, [pc, #72]	; (800c3c8 <prvCheckForValidListAndQueue+0x70>)
 800c37e:	4a10      	ldr	r2, [pc, #64]	; (800c3c0 <prvCheckForValidListAndQueue+0x68>)
 800c380:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c382:	2300      	movs	r3, #0
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	4b11      	ldr	r3, [pc, #68]	; (800c3cc <prvCheckForValidListAndQueue+0x74>)
 800c388:	4a11      	ldr	r2, [pc, #68]	; (800c3d0 <prvCheckForValidListAndQueue+0x78>)
 800c38a:	2110      	movs	r1, #16
 800c38c:	200a      	movs	r0, #10
 800c38e:	f7fe f905 	bl	800a59c <xQueueGenericCreateStatic>
 800c392:	4603      	mov	r3, r0
 800c394:	4a08      	ldr	r2, [pc, #32]	; (800c3b8 <prvCheckForValidListAndQueue+0x60>)
 800c396:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c398:	4b07      	ldr	r3, [pc, #28]	; (800c3b8 <prvCheckForValidListAndQueue+0x60>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d005      	beq.n	800c3ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c3a0:	4b05      	ldr	r3, [pc, #20]	; (800c3b8 <prvCheckForValidListAndQueue+0x60>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	490b      	ldr	r1, [pc, #44]	; (800c3d4 <prvCheckForValidListAndQueue+0x7c>)
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7fe fd3a 	bl	800ae20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3ac:	f000 f952 	bl	800c654 <vPortExitCritical>
}
 800c3b0:	bf00      	nop
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	200040e0 	.word	0x200040e0
 800c3bc:	200040b0 	.word	0x200040b0
 800c3c0:	200040c4 	.word	0x200040c4
 800c3c4:	200040d8 	.word	0x200040d8
 800c3c8:	200040dc 	.word	0x200040dc
 800c3cc:	2000418c 	.word	0x2000418c
 800c3d0:	200040ec 	.word	0x200040ec
 800c3d4:	0800d9d4 	.word	0x0800d9d4

0800c3d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	3b04      	subs	r3, #4
 800c3e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	3b04      	subs	r3, #4
 800c3f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	f023 0201 	bic.w	r2, r3, #1
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	3b04      	subs	r3, #4
 800c406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c408:	4a0c      	ldr	r2, [pc, #48]	; (800c43c <pxPortInitialiseStack+0x64>)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	3b14      	subs	r3, #20
 800c412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	3b04      	subs	r3, #4
 800c41e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f06f 0202 	mvn.w	r2, #2
 800c426:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	3b20      	subs	r3, #32
 800c42c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c42e:	68fb      	ldr	r3, [r7, #12]
}
 800c430:	4618      	mov	r0, r3
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	0800c441 	.word	0x0800c441

0800c440 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c440:	b480      	push	{r7}
 800c442:	b085      	sub	sp, #20
 800c444:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c446:	2300      	movs	r3, #0
 800c448:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c44a:	4b14      	ldr	r3, [pc, #80]	; (800c49c <prvTaskExitError+0x5c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c452:	d00c      	beq.n	800c46e <prvTaskExitError+0x2e>
	__asm volatile
 800c454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c458:	b672      	cpsid	i
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	b662      	cpsie	i
 800c468:	60fb      	str	r3, [r7, #12]
}
 800c46a:	bf00      	nop
 800c46c:	e7fe      	b.n	800c46c <prvTaskExitError+0x2c>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	b672      	cpsid	i
 800c474:	f383 8811 	msr	BASEPRI, r3
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	b662      	cpsie	i
 800c482:	60bb      	str	r3, [r7, #8]
}
 800c484:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c486:	bf00      	nop
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d0fc      	beq.n	800c488 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c48e:	bf00      	nop
 800c490:	bf00      	nop
 800c492:	3714      	adds	r7, #20
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	20000098 	.word	0x20000098

0800c4a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c4a0:	4b07      	ldr	r3, [pc, #28]	; (800c4c0 <pxCurrentTCBConst2>)
 800c4a2:	6819      	ldr	r1, [r3, #0]
 800c4a4:	6808      	ldr	r0, [r1, #0]
 800c4a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4aa:	f380 8809 	msr	PSP, r0
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f04f 0000 	mov.w	r0, #0
 800c4b6:	f380 8811 	msr	BASEPRI, r0
 800c4ba:	4770      	bx	lr
 800c4bc:	f3af 8000 	nop.w

0800c4c0 <pxCurrentTCBConst2>:
 800c4c0:	20003bb0 	.word	0x20003bb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c4c4:	bf00      	nop
 800c4c6:	bf00      	nop

0800c4c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c4c8:	4808      	ldr	r0, [pc, #32]	; (800c4ec <prvPortStartFirstTask+0x24>)
 800c4ca:	6800      	ldr	r0, [r0, #0]
 800c4cc:	6800      	ldr	r0, [r0, #0]
 800c4ce:	f380 8808 	msr	MSP, r0
 800c4d2:	f04f 0000 	mov.w	r0, #0
 800c4d6:	f380 8814 	msr	CONTROL, r0
 800c4da:	b662      	cpsie	i
 800c4dc:	b661      	cpsie	f
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	f3bf 8f6f 	isb	sy
 800c4e6:	df00      	svc	0
 800c4e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4ea:	bf00      	nop
 800c4ec:	e000ed08 	.word	0xe000ed08

0800c4f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4f6:	4b37      	ldr	r3, [pc, #220]	; (800c5d4 <xPortStartScheduler+0xe4>)
 800c4f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	22ff      	movs	r2, #255	; 0xff
 800c506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c510:	78fb      	ldrb	r3, [r7, #3]
 800c512:	b2db      	uxtb	r3, r3
 800c514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	4b2f      	ldr	r3, [pc, #188]	; (800c5d8 <xPortStartScheduler+0xe8>)
 800c51c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c51e:	4b2f      	ldr	r3, [pc, #188]	; (800c5dc <xPortStartScheduler+0xec>)
 800c520:	2207      	movs	r2, #7
 800c522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c524:	e009      	b.n	800c53a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c526:	4b2d      	ldr	r3, [pc, #180]	; (800c5dc <xPortStartScheduler+0xec>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	4a2b      	ldr	r2, [pc, #172]	; (800c5dc <xPortStartScheduler+0xec>)
 800c52e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c530:	78fb      	ldrb	r3, [r7, #3]
 800c532:	b2db      	uxtb	r3, r3
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	b2db      	uxtb	r3, r3
 800c538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c53a:	78fb      	ldrb	r3, [r7, #3]
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c542:	2b80      	cmp	r3, #128	; 0x80
 800c544:	d0ef      	beq.n	800c526 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c546:	4b25      	ldr	r3, [pc, #148]	; (800c5dc <xPortStartScheduler+0xec>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f1c3 0307 	rsb	r3, r3, #7
 800c54e:	2b04      	cmp	r3, #4
 800c550:	d00c      	beq.n	800c56c <xPortStartScheduler+0x7c>
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	b672      	cpsid	i
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	b662      	cpsie	i
 800c566:	60bb      	str	r3, [r7, #8]
}
 800c568:	bf00      	nop
 800c56a:	e7fe      	b.n	800c56a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c56c:	4b1b      	ldr	r3, [pc, #108]	; (800c5dc <xPortStartScheduler+0xec>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	021b      	lsls	r3, r3, #8
 800c572:	4a1a      	ldr	r2, [pc, #104]	; (800c5dc <xPortStartScheduler+0xec>)
 800c574:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c576:	4b19      	ldr	r3, [pc, #100]	; (800c5dc <xPortStartScheduler+0xec>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c57e:	4a17      	ldr	r2, [pc, #92]	; (800c5dc <xPortStartScheduler+0xec>)
 800c580:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	b2da      	uxtb	r2, r3
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c58a:	4b15      	ldr	r3, [pc, #84]	; (800c5e0 <xPortStartScheduler+0xf0>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a14      	ldr	r2, [pc, #80]	; (800c5e0 <xPortStartScheduler+0xf0>)
 800c590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c594:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c596:	4b12      	ldr	r3, [pc, #72]	; (800c5e0 <xPortStartScheduler+0xf0>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a11      	ldr	r2, [pc, #68]	; (800c5e0 <xPortStartScheduler+0xf0>)
 800c59c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c5a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5a2:	f000 f8dd 	bl	800c760 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5a6:	4b0f      	ldr	r3, [pc, #60]	; (800c5e4 <xPortStartScheduler+0xf4>)
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5ac:	f000 f8fc 	bl	800c7a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5b0:	4b0d      	ldr	r3, [pc, #52]	; (800c5e8 <xPortStartScheduler+0xf8>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a0c      	ldr	r2, [pc, #48]	; (800c5e8 <xPortStartScheduler+0xf8>)
 800c5b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c5ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5bc:	f7ff ff84 	bl	800c4c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5c0:	f7ff f850 	bl	800b664 <vTaskSwitchContext>
	prvTaskExitError();
 800c5c4:	f7ff ff3c 	bl	800c440 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	e000e400 	.word	0xe000e400
 800c5d8:	200041dc 	.word	0x200041dc
 800c5dc:	200041e0 	.word	0x200041e0
 800c5e0:	e000ed20 	.word	0xe000ed20
 800c5e4:	20000098 	.word	0x20000098
 800c5e8:	e000ef34 	.word	0xe000ef34

0800c5ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
	__asm volatile
 800c5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f6:	b672      	cpsid	i
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	b662      	cpsie	i
 800c606:	607b      	str	r3, [r7, #4]
}
 800c608:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c60a:	4b10      	ldr	r3, [pc, #64]	; (800c64c <vPortEnterCritical+0x60>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	3301      	adds	r3, #1
 800c610:	4a0e      	ldr	r2, [pc, #56]	; (800c64c <vPortEnterCritical+0x60>)
 800c612:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c614:	4b0d      	ldr	r3, [pc, #52]	; (800c64c <vPortEnterCritical+0x60>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d111      	bne.n	800c640 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c61c:	4b0c      	ldr	r3, [pc, #48]	; (800c650 <vPortEnterCritical+0x64>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	b2db      	uxtb	r3, r3
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00c      	beq.n	800c640 <vPortEnterCritical+0x54>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62a:	b672      	cpsid	i
 800c62c:	f383 8811 	msr	BASEPRI, r3
 800c630:	f3bf 8f6f 	isb	sy
 800c634:	f3bf 8f4f 	dsb	sy
 800c638:	b662      	cpsie	i
 800c63a:	603b      	str	r3, [r7, #0]
}
 800c63c:	bf00      	nop
 800c63e:	e7fe      	b.n	800c63e <vPortEnterCritical+0x52>
	}
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr
 800c64c:	20000098 	.word	0x20000098
 800c650:	e000ed04 	.word	0xe000ed04

0800c654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c65a:	4b13      	ldr	r3, [pc, #76]	; (800c6a8 <vPortExitCritical+0x54>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10c      	bne.n	800c67c <vPortExitCritical+0x28>
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c666:	b672      	cpsid	i
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	b662      	cpsie	i
 800c676:	607b      	str	r3, [r7, #4]
}
 800c678:	bf00      	nop
 800c67a:	e7fe      	b.n	800c67a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c67c:	4b0a      	ldr	r3, [pc, #40]	; (800c6a8 <vPortExitCritical+0x54>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	3b01      	subs	r3, #1
 800c682:	4a09      	ldr	r2, [pc, #36]	; (800c6a8 <vPortExitCritical+0x54>)
 800c684:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c686:	4b08      	ldr	r3, [pc, #32]	; (800c6a8 <vPortExitCritical+0x54>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d105      	bne.n	800c69a <vPortExitCritical+0x46>
 800c68e:	2300      	movs	r3, #0
 800c690:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	f383 8811 	msr	BASEPRI, r3
}
 800c698:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c69a:	bf00      	nop
 800c69c:	370c      	adds	r7, #12
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	20000098 	.word	0x20000098
 800c6ac:	00000000 	.word	0x00000000

0800c6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6b0:	f3ef 8009 	mrs	r0, PSP
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	4b15      	ldr	r3, [pc, #84]	; (800c710 <pxCurrentTCBConst>)
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	f01e 0f10 	tst.w	lr, #16
 800c6c0:	bf08      	it	eq
 800c6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ca:	6010      	str	r0, [r2, #0]
 800c6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c6d4:	b672      	cpsid	i
 800c6d6:	f380 8811 	msr	BASEPRI, r0
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	b662      	cpsie	i
 800c6e4:	f7fe ffbe 	bl	800b664 <vTaskSwitchContext>
 800c6e8:	f04f 0000 	mov.w	r0, #0
 800c6ec:	f380 8811 	msr	BASEPRI, r0
 800c6f0:	bc09      	pop	{r0, r3}
 800c6f2:	6819      	ldr	r1, [r3, #0]
 800c6f4:	6808      	ldr	r0, [r1, #0]
 800c6f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fa:	f01e 0f10 	tst.w	lr, #16
 800c6fe:	bf08      	it	eq
 800c700:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c704:	f380 8809 	msr	PSP, r0
 800c708:	f3bf 8f6f 	isb	sy
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop

0800c710 <pxCurrentTCBConst>:
 800c710:	20003bb0 	.word	0x20003bb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c714:	bf00      	nop
 800c716:	bf00      	nop

0800c718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	b672      	cpsid	i
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	f3bf 8f4f 	dsb	sy
 800c730:	b662      	cpsie	i
 800c732:	607b      	str	r3, [r7, #4]
}
 800c734:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c736:	f7fe fed9 	bl	800b4ec <xTaskIncrementTick>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d003      	beq.n	800c748 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c740:	4b06      	ldr	r3, [pc, #24]	; (800c75c <SysTick_Handler+0x44>)
 800c742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c746:	601a      	str	r2, [r3, #0]
 800c748:	2300      	movs	r3, #0
 800c74a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	f383 8811 	msr	BASEPRI, r3
}
 800c752:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c754:	bf00      	nop
 800c756:	3708      	adds	r7, #8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	e000ed04 	.word	0xe000ed04

0800c760 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c760:	b480      	push	{r7}
 800c762:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c764:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <vPortSetupTimerInterrupt+0x34>)
 800c766:	2200      	movs	r2, #0
 800c768:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c76a:	4b0b      	ldr	r3, [pc, #44]	; (800c798 <vPortSetupTimerInterrupt+0x38>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c770:	4b0a      	ldr	r3, [pc, #40]	; (800c79c <vPortSetupTimerInterrupt+0x3c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a0a      	ldr	r2, [pc, #40]	; (800c7a0 <vPortSetupTimerInterrupt+0x40>)
 800c776:	fba2 2303 	umull	r2, r3, r2, r3
 800c77a:	099b      	lsrs	r3, r3, #6
 800c77c:	4a09      	ldr	r2, [pc, #36]	; (800c7a4 <vPortSetupTimerInterrupt+0x44>)
 800c77e:	3b01      	subs	r3, #1
 800c780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c782:	4b04      	ldr	r3, [pc, #16]	; (800c794 <vPortSetupTimerInterrupt+0x34>)
 800c784:	2207      	movs	r2, #7
 800c786:	601a      	str	r2, [r3, #0]
}
 800c788:	bf00      	nop
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	e000e010 	.word	0xe000e010
 800c798:	e000e018 	.word	0xe000e018
 800c79c:	20000000 	.word	0x20000000
 800c7a0:	10624dd3 	.word	0x10624dd3
 800c7a4:	e000e014 	.word	0xe000e014

0800c7a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c7b8 <vPortEnableVFP+0x10>
 800c7ac:	6801      	ldr	r1, [r0, #0]
 800c7ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7b2:	6001      	str	r1, [r0, #0]
 800c7b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7b6:	bf00      	nop
 800c7b8:	e000ed88 	.word	0xe000ed88

0800c7bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7c2:	f3ef 8305 	mrs	r3, IPSR
 800c7c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2b0f      	cmp	r3, #15
 800c7cc:	d916      	bls.n	800c7fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7ce:	4a19      	ldr	r2, [pc, #100]	; (800c834 <vPortValidateInterruptPriority+0x78>)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7d8:	4b17      	ldr	r3, [pc, #92]	; (800c838 <vPortValidateInterruptPriority+0x7c>)
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	7afa      	ldrb	r2, [r7, #11]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d20c      	bcs.n	800c7fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e6:	b672      	cpsid	i
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	b662      	cpsie	i
 800c7f6:	607b      	str	r3, [r7, #4]
}
 800c7f8:	bf00      	nop
 800c7fa:	e7fe      	b.n	800c7fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7fc:	4b0f      	ldr	r3, [pc, #60]	; (800c83c <vPortValidateInterruptPriority+0x80>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c804:	4b0e      	ldr	r3, [pc, #56]	; (800c840 <vPortValidateInterruptPriority+0x84>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d90c      	bls.n	800c826 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c810:	b672      	cpsid	i
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	b662      	cpsie	i
 800c820:	603b      	str	r3, [r7, #0]
}
 800c822:	bf00      	nop
 800c824:	e7fe      	b.n	800c824 <vPortValidateInterruptPriority+0x68>
	}
 800c826:	bf00      	nop
 800c828:	3714      	adds	r7, #20
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	e000e3f0 	.word	0xe000e3f0
 800c838:	200041dc 	.word	0x200041dc
 800c83c:	e000ed0c 	.word	0xe000ed0c
 800c840:	200041e0 	.word	0x200041e0

0800c844 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b08a      	sub	sp, #40	; 0x28
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c84c:	2300      	movs	r3, #0
 800c84e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c850:	f7fe fd8e 	bl	800b370 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c854:	4b5b      	ldr	r3, [pc, #364]	; (800c9c4 <pvPortMalloc+0x180>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c85c:	f000 f91a 	bl	800ca94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c860:	4b59      	ldr	r3, [pc, #356]	; (800c9c8 <pvPortMalloc+0x184>)
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4013      	ands	r3, r2
 800c868:	2b00      	cmp	r3, #0
 800c86a:	f040 8092 	bne.w	800c992 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d01f      	beq.n	800c8b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c874:	2208      	movs	r2, #8
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4413      	add	r3, r2
 800c87a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f003 0307 	and.w	r3, r3, #7
 800c882:	2b00      	cmp	r3, #0
 800c884:	d016      	beq.n	800c8b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f023 0307 	bic.w	r3, r3, #7
 800c88c:	3308      	adds	r3, #8
 800c88e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f003 0307 	and.w	r3, r3, #7
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00c      	beq.n	800c8b4 <pvPortMalloc+0x70>
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	b672      	cpsid	i
 800c8a0:	f383 8811 	msr	BASEPRI, r3
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	b662      	cpsie	i
 800c8ae:	617b      	str	r3, [r7, #20]
}
 800c8b0:	bf00      	nop
 800c8b2:	e7fe      	b.n	800c8b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d06b      	beq.n	800c992 <pvPortMalloc+0x14e>
 800c8ba:	4b44      	ldr	r3, [pc, #272]	; (800c9cc <pvPortMalloc+0x188>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d866      	bhi.n	800c992 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8c4:	4b42      	ldr	r3, [pc, #264]	; (800c9d0 <pvPortMalloc+0x18c>)
 800c8c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8c8:	4b41      	ldr	r3, [pc, #260]	; (800c9d0 <pvPortMalloc+0x18c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8ce:	e004      	b.n	800c8da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d903      	bls.n	800c8ec <pvPortMalloc+0xa8>
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d1f1      	bne.n	800c8d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8ec:	4b35      	ldr	r3, [pc, #212]	; (800c9c4 <pvPortMalloc+0x180>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d04d      	beq.n	800c992 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8f6:	6a3b      	ldr	r3, [r7, #32]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2208      	movs	r2, #8
 800c8fc:	4413      	add	r3, r2
 800c8fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	6a3b      	ldr	r3, [r7, #32]
 800c906:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	685a      	ldr	r2, [r3, #4]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	1ad2      	subs	r2, r2, r3
 800c910:	2308      	movs	r3, #8
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	429a      	cmp	r2, r3
 800c916:	d921      	bls.n	800c95c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4413      	add	r3, r2
 800c91e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	f003 0307 	and.w	r3, r3, #7
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00c      	beq.n	800c944 <pvPortMalloc+0x100>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92e:	b672      	cpsid	i
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	b662      	cpsie	i
 800c93e:	613b      	str	r3, [r7, #16]
}
 800c940:	bf00      	nop
 800c942:	e7fe      	b.n	800c942 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	685a      	ldr	r2, [r3, #4]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	1ad2      	subs	r2, r2, r3
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c956:	69b8      	ldr	r0, [r7, #24]
 800c958:	f000 f8fe 	bl	800cb58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c95c:	4b1b      	ldr	r3, [pc, #108]	; (800c9cc <pvPortMalloc+0x188>)
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	1ad3      	subs	r3, r2, r3
 800c966:	4a19      	ldr	r2, [pc, #100]	; (800c9cc <pvPortMalloc+0x188>)
 800c968:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c96a:	4b18      	ldr	r3, [pc, #96]	; (800c9cc <pvPortMalloc+0x188>)
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	4b19      	ldr	r3, [pc, #100]	; (800c9d4 <pvPortMalloc+0x190>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	429a      	cmp	r2, r3
 800c974:	d203      	bcs.n	800c97e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c976:	4b15      	ldr	r3, [pc, #84]	; (800c9cc <pvPortMalloc+0x188>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a16      	ldr	r2, [pc, #88]	; (800c9d4 <pvPortMalloc+0x190>)
 800c97c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c980:	685a      	ldr	r2, [r3, #4]
 800c982:	4b11      	ldr	r3, [pc, #68]	; (800c9c8 <pvPortMalloc+0x184>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	431a      	orrs	r2, r3
 800c988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98e:	2200      	movs	r2, #0
 800c990:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c992:	f7fe fcfb 	bl	800b38c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	f003 0307 	and.w	r3, r3, #7
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00c      	beq.n	800c9ba <pvPortMalloc+0x176>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a4:	b672      	cpsid	i
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	b662      	cpsie	i
 800c9b4:	60fb      	str	r3, [r7, #12]
}
 800c9b6:	bf00      	nop
 800c9b8:	e7fe      	b.n	800c9b8 <pvPortMalloc+0x174>
	return pvReturn;
 800c9ba:	69fb      	ldr	r3, [r7, #28]
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3728      	adds	r7, #40	; 0x28
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	20007dec 	.word	0x20007dec
 800c9c8:	20007df8 	.word	0x20007df8
 800c9cc:	20007df0 	.word	0x20007df0
 800c9d0:	20007de4 	.word	0x20007de4
 800c9d4:	20007df4 	.word	0x20007df4

0800c9d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d04c      	beq.n	800ca84 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9ea:	2308      	movs	r3, #8
 800c9ec:	425b      	negs	r3, r3
 800c9ee:	697a      	ldr	r2, [r7, #20]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	4b23      	ldr	r3, [pc, #140]	; (800ca8c <vPortFree+0xb4>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4013      	ands	r3, r2
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d10c      	bne.n	800ca20 <vPortFree+0x48>
	__asm volatile
 800ca06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0a:	b672      	cpsid	i
 800ca0c:	f383 8811 	msr	BASEPRI, r3
 800ca10:	f3bf 8f6f 	isb	sy
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	b662      	cpsie	i
 800ca1a:	60fb      	str	r3, [r7, #12]
}
 800ca1c:	bf00      	nop
 800ca1e:	e7fe      	b.n	800ca1e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00c      	beq.n	800ca42 <vPortFree+0x6a>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	b672      	cpsid	i
 800ca2e:	f383 8811 	msr	BASEPRI, r3
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	b662      	cpsie	i
 800ca3c:	60bb      	str	r3, [r7, #8]
}
 800ca3e:	bf00      	nop
 800ca40:	e7fe      	b.n	800ca40 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	685a      	ldr	r2, [r3, #4]
 800ca46:	4b11      	ldr	r3, [pc, #68]	; (800ca8c <vPortFree+0xb4>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d019      	beq.n	800ca84 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d115      	bne.n	800ca84 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	685a      	ldr	r2, [r3, #4]
 800ca5c:	4b0b      	ldr	r3, [pc, #44]	; (800ca8c <vPortFree+0xb4>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	43db      	mvns	r3, r3
 800ca62:	401a      	ands	r2, r3
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca68:	f7fe fc82 	bl	800b370 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	685a      	ldr	r2, [r3, #4]
 800ca70:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <vPortFree+0xb8>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4413      	add	r3, r2
 800ca76:	4a06      	ldr	r2, [pc, #24]	; (800ca90 <vPortFree+0xb8>)
 800ca78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca7a:	6938      	ldr	r0, [r7, #16]
 800ca7c:	f000 f86c 	bl	800cb58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ca80:	f7fe fc84 	bl	800b38c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca84:	bf00      	nop
 800ca86:	3718      	adds	r7, #24
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	20007df8 	.word	0x20007df8
 800ca90:	20007df0 	.word	0x20007df0

0800ca94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ca9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800caa0:	4b27      	ldr	r3, [pc, #156]	; (800cb40 <prvHeapInit+0xac>)
 800caa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f003 0307 	and.w	r3, r3, #7
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00c      	beq.n	800cac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3307      	adds	r3, #7
 800cab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f023 0307 	bic.w	r3, r3, #7
 800caba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	4a1f      	ldr	r2, [pc, #124]	; (800cb40 <prvHeapInit+0xac>)
 800cac4:	4413      	add	r3, r2
 800cac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cacc:	4a1d      	ldr	r2, [pc, #116]	; (800cb44 <prvHeapInit+0xb0>)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cad2:	4b1c      	ldr	r3, [pc, #112]	; (800cb44 <prvHeapInit+0xb0>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	4413      	add	r3, r2
 800cade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cae0:	2208      	movs	r2, #8
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	1a9b      	subs	r3, r3, r2
 800cae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f023 0307 	bic.w	r3, r3, #7
 800caee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	4a15      	ldr	r2, [pc, #84]	; (800cb48 <prvHeapInit+0xb4>)
 800caf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800caf6:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <prvHeapInit+0xb4>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2200      	movs	r2, #0
 800cafc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cafe:	4b12      	ldr	r3, [pc, #72]	; (800cb48 <prvHeapInit+0xb4>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2200      	movs	r2, #0
 800cb04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	1ad2      	subs	r2, r2, r3
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb14:	4b0c      	ldr	r3, [pc, #48]	; (800cb48 <prvHeapInit+0xb4>)
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	4a0a      	ldr	r2, [pc, #40]	; (800cb4c <prvHeapInit+0xb8>)
 800cb22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	4a09      	ldr	r2, [pc, #36]	; (800cb50 <prvHeapInit+0xbc>)
 800cb2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb2c:	4b09      	ldr	r3, [pc, #36]	; (800cb54 <prvHeapInit+0xc0>)
 800cb2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb32:	601a      	str	r2, [r3, #0]
}
 800cb34:	bf00      	nop
 800cb36:	3714      	adds	r7, #20
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	200041e4 	.word	0x200041e4
 800cb44:	20007de4 	.word	0x20007de4
 800cb48:	20007dec 	.word	0x20007dec
 800cb4c:	20007df4 	.word	0x20007df4
 800cb50:	20007df0 	.word	0x20007df0
 800cb54:	20007df8 	.word	0x20007df8

0800cb58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb60:	4b28      	ldr	r3, [pc, #160]	; (800cc04 <prvInsertBlockIntoFreeList+0xac>)
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	e002      	b.n	800cb6c <prvInsertBlockIntoFreeList+0x14>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d8f7      	bhi.n	800cb66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	4413      	add	r3, r2
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d108      	bne.n	800cb9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	441a      	add	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	68ba      	ldr	r2, [r7, #8]
 800cba4:	441a      	add	r2, r3
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d118      	bne.n	800cbe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	4b15      	ldr	r3, [pc, #84]	; (800cc08 <prvInsertBlockIntoFreeList+0xb0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d00d      	beq.n	800cbd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	685a      	ldr	r2, [r3, #4]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	441a      	add	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	e008      	b.n	800cbe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbd6:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <prvInsertBlockIntoFreeList+0xb0>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	601a      	str	r2, [r3, #0]
 800cbde:	e003      	b.n	800cbe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d002      	beq.n	800cbf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbf6:	bf00      	nop
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	20007de4 	.word	0x20007de4
 800cc08:	20007dec 	.word	0x20007dec

0800cc0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc10:	2200      	movs	r2, #0
 800cc12:	4912      	ldr	r1, [pc, #72]	; (800cc5c <MX_USB_DEVICE_Init+0x50>)
 800cc14:	4812      	ldr	r0, [pc, #72]	; (800cc60 <MX_USB_DEVICE_Init+0x54>)
 800cc16:	f7fb ff0d 	bl	8008a34 <USBD_Init>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d001      	beq.n	800cc24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cc20:	f7f3 ffa4 	bl	8000b6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cc24:	490f      	ldr	r1, [pc, #60]	; (800cc64 <MX_USB_DEVICE_Init+0x58>)
 800cc26:	480e      	ldr	r0, [pc, #56]	; (800cc60 <MX_USB_DEVICE_Init+0x54>)
 800cc28:	f7fb ff34 	bl	8008a94 <USBD_RegisterClass>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d001      	beq.n	800cc36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cc32:	f7f3 ff9b 	bl	8000b6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cc36:	490c      	ldr	r1, [pc, #48]	; (800cc68 <MX_USB_DEVICE_Init+0x5c>)
 800cc38:	4809      	ldr	r0, [pc, #36]	; (800cc60 <MX_USB_DEVICE_Init+0x54>)
 800cc3a:	f7fb fe6b 	bl	8008914 <USBD_CDC_RegisterInterface>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d001      	beq.n	800cc48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cc44:	f7f3 ff92 	bl	8000b6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc48:	4805      	ldr	r0, [pc, #20]	; (800cc60 <MX_USB_DEVICE_Init+0x54>)
 800cc4a:	f7fb ff59 	bl	8008b00 <USBD_Start>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cc54:	f7f3 ff8a 	bl	8000b6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc58:	bf00      	nop
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	200000b0 	.word	0x200000b0
 800cc60:	20007dfc 	.word	0x20007dfc
 800cc64:	20000018 	.word	0x20000018
 800cc68:	2000009c 	.word	0x2000009c

0800cc6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc70:	2200      	movs	r2, #0
 800cc72:	4905      	ldr	r1, [pc, #20]	; (800cc88 <CDC_Init_FS+0x1c>)
 800cc74:	4805      	ldr	r0, [pc, #20]	; (800cc8c <CDC_Init_FS+0x20>)
 800cc76:	f7fb fe67 	bl	8008948 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc7a:	4905      	ldr	r1, [pc, #20]	; (800cc90 <CDC_Init_FS+0x24>)
 800cc7c:	4803      	ldr	r0, [pc, #12]	; (800cc8c <CDC_Init_FS+0x20>)
 800cc7e:	f7fb fe85 	bl	800898c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	200088d8 	.word	0x200088d8
 800cc8c:	20007dfc 	.word	0x20007dfc
 800cc90:	200080d8 	.word	0x200080d8

0800cc94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc94:	b480      	push	{r7}
 800cc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	4603      	mov	r3, r0
 800ccac:	6039      	str	r1, [r7, #0]
 800ccae:	71fb      	strb	r3, [r7, #7]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ccb4:	79fb      	ldrb	r3, [r7, #7]
 800ccb6:	2b23      	cmp	r3, #35	; 0x23
 800ccb8:	d84a      	bhi.n	800cd50 <CDC_Control_FS+0xac>
 800ccba:	a201      	add	r2, pc, #4	; (adr r2, 800ccc0 <CDC_Control_FS+0x1c>)
 800ccbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc0:	0800cd51 	.word	0x0800cd51
 800ccc4:	0800cd51 	.word	0x0800cd51
 800ccc8:	0800cd51 	.word	0x0800cd51
 800cccc:	0800cd51 	.word	0x0800cd51
 800ccd0:	0800cd51 	.word	0x0800cd51
 800ccd4:	0800cd51 	.word	0x0800cd51
 800ccd8:	0800cd51 	.word	0x0800cd51
 800ccdc:	0800cd51 	.word	0x0800cd51
 800cce0:	0800cd51 	.word	0x0800cd51
 800cce4:	0800cd51 	.word	0x0800cd51
 800cce8:	0800cd51 	.word	0x0800cd51
 800ccec:	0800cd51 	.word	0x0800cd51
 800ccf0:	0800cd51 	.word	0x0800cd51
 800ccf4:	0800cd51 	.word	0x0800cd51
 800ccf8:	0800cd51 	.word	0x0800cd51
 800ccfc:	0800cd51 	.word	0x0800cd51
 800cd00:	0800cd51 	.word	0x0800cd51
 800cd04:	0800cd51 	.word	0x0800cd51
 800cd08:	0800cd51 	.word	0x0800cd51
 800cd0c:	0800cd51 	.word	0x0800cd51
 800cd10:	0800cd51 	.word	0x0800cd51
 800cd14:	0800cd51 	.word	0x0800cd51
 800cd18:	0800cd51 	.word	0x0800cd51
 800cd1c:	0800cd51 	.word	0x0800cd51
 800cd20:	0800cd51 	.word	0x0800cd51
 800cd24:	0800cd51 	.word	0x0800cd51
 800cd28:	0800cd51 	.word	0x0800cd51
 800cd2c:	0800cd51 	.word	0x0800cd51
 800cd30:	0800cd51 	.word	0x0800cd51
 800cd34:	0800cd51 	.word	0x0800cd51
 800cd38:	0800cd51 	.word	0x0800cd51
 800cd3c:	0800cd51 	.word	0x0800cd51
 800cd40:	0800cd51 	.word	0x0800cd51
 800cd44:	0800cd51 	.word	0x0800cd51
 800cd48:	0800cd51 	.word	0x0800cd51
 800cd4c:	0800cd51 	.word	0x0800cd51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd50:	bf00      	nop
  }

  return (USBD_OK);
 800cd52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd6a:	6879      	ldr	r1, [r7, #4]
 800cd6c:	4805      	ldr	r0, [pc, #20]	; (800cd84 <CDC_Receive_FS+0x24>)
 800cd6e:	f7fb fe0d 	bl	800898c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd72:	4804      	ldr	r0, [pc, #16]	; (800cd84 <CDC_Receive_FS+0x24>)
 800cd74:	f7fb fe28 	bl	80089c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	20007dfc 	.word	0x20007dfc

0800cd88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b087      	sub	sp, #28
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	4613      	mov	r3, r2
 800cd94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	371c      	adds	r7, #28
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
	...

0800cdac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	6039      	str	r1, [r7, #0]
 800cdb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	2212      	movs	r2, #18
 800cdbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cdbe:	4b03      	ldr	r3, [pc, #12]	; (800cdcc <USBD_FS_DeviceDescriptor+0x20>)
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr
 800cdcc:	200000d0 	.word	0x200000d0

0800cdd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	6039      	str	r1, [r7, #0]
 800cdda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	2204      	movs	r2, #4
 800cde0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cde2:	4b03      	ldr	r3, [pc, #12]	; (800cdf0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr
 800cdf0:	200000f0 	.word	0x200000f0

0800cdf4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	6039      	str	r1, [r7, #0]
 800cdfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce00:	79fb      	ldrb	r3, [r7, #7]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d105      	bne.n	800ce12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce06:	683a      	ldr	r2, [r7, #0]
 800ce08:	4907      	ldr	r1, [pc, #28]	; (800ce28 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce0a:	4808      	ldr	r0, [pc, #32]	; (800ce2c <USBD_FS_ProductStrDescriptor+0x38>)
 800ce0c:	f7fd f84e 	bl	8009eac <USBD_GetString>
 800ce10:	e004      	b.n	800ce1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce12:	683a      	ldr	r2, [r7, #0]
 800ce14:	4904      	ldr	r1, [pc, #16]	; (800ce28 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce16:	4805      	ldr	r0, [pc, #20]	; (800ce2c <USBD_FS_ProductStrDescriptor+0x38>)
 800ce18:	f7fd f848 	bl	8009eac <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce1c:	4b02      	ldr	r3, [pc, #8]	; (800ce28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3708      	adds	r7, #8
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	200090d8 	.word	0x200090d8
 800ce2c:	0800d9dc 	.word	0x0800d9dc

0800ce30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	4603      	mov	r3, r0
 800ce38:	6039      	str	r1, [r7, #0]
 800ce3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce3c:	683a      	ldr	r2, [r7, #0]
 800ce3e:	4904      	ldr	r1, [pc, #16]	; (800ce50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce40:	4804      	ldr	r0, [pc, #16]	; (800ce54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce42:	f7fd f833 	bl	8009eac <USBD_GetString>
  return USBD_StrDesc;
 800ce46:	4b02      	ldr	r3, [pc, #8]	; (800ce50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	200090d8 	.word	0x200090d8
 800ce54:	0800d9f4 	.word	0x0800d9f4

0800ce58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	4603      	mov	r3, r0
 800ce60:	6039      	str	r1, [r7, #0]
 800ce62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	221a      	movs	r2, #26
 800ce68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce6a:	f000 f855 	bl	800cf18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce6e:	4b02      	ldr	r3, [pc, #8]	; (800ce78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	200000f4 	.word	0x200000f4

0800ce7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	6039      	str	r1, [r7, #0]
 800ce86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d105      	bne.n	800ce9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce8e:	683a      	ldr	r2, [r7, #0]
 800ce90:	4907      	ldr	r1, [pc, #28]	; (800ceb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce92:	4808      	ldr	r0, [pc, #32]	; (800ceb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce94:	f7fd f80a 	bl	8009eac <USBD_GetString>
 800ce98:	e004      	b.n	800cea4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce9a:	683a      	ldr	r2, [r7, #0]
 800ce9c:	4904      	ldr	r1, [pc, #16]	; (800ceb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce9e:	4805      	ldr	r0, [pc, #20]	; (800ceb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cea0:	f7fd f804 	bl	8009eac <USBD_GetString>
  }
  return USBD_StrDesc;
 800cea4:	4b02      	ldr	r3, [pc, #8]	; (800ceb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3708      	adds	r7, #8
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	200090d8 	.word	0x200090d8
 800ceb4:	0800da08 	.word	0x0800da08

0800ceb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	6039      	str	r1, [r7, #0]
 800cec2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cec4:	79fb      	ldrb	r3, [r7, #7]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d105      	bne.n	800ced6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ceca:	683a      	ldr	r2, [r7, #0]
 800cecc:	4907      	ldr	r1, [pc, #28]	; (800ceec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cece:	4808      	ldr	r0, [pc, #32]	; (800cef0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ced0:	f7fc ffec 	bl	8009eac <USBD_GetString>
 800ced4:	e004      	b.n	800cee0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	4904      	ldr	r1, [pc, #16]	; (800ceec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ceda:	4805      	ldr	r0, [pc, #20]	; (800cef0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cedc:	f7fc ffe6 	bl	8009eac <USBD_GetString>
  }
  return USBD_StrDesc;
 800cee0:	4b02      	ldr	r3, [pc, #8]	; (800ceec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	200090d8 	.word	0x200090d8
 800cef0:	0800da14 	.word	0x0800da14

0800cef4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	4603      	mov	r3, r0
 800cefc:	6039      	str	r1, [r7, #0]
 800cefe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	220c      	movs	r2, #12
 800cf04:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cf06:	4b03      	ldr	r3, [pc, #12]	; (800cf14 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr
 800cf14:	200000e4 	.word	0x200000e4

0800cf18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf1e:	4b0f      	ldr	r3, [pc, #60]	; (800cf5c <Get_SerialNum+0x44>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf24:	4b0e      	ldr	r3, [pc, #56]	; (800cf60 <Get_SerialNum+0x48>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf2a:	4b0e      	ldr	r3, [pc, #56]	; (800cf64 <Get_SerialNum+0x4c>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4413      	add	r3, r2
 800cf36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d009      	beq.n	800cf52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf3e:	2208      	movs	r2, #8
 800cf40:	4909      	ldr	r1, [pc, #36]	; (800cf68 <Get_SerialNum+0x50>)
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f000 f814 	bl	800cf70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf48:	2204      	movs	r2, #4
 800cf4a:	4908      	ldr	r1, [pc, #32]	; (800cf6c <Get_SerialNum+0x54>)
 800cf4c:	68b8      	ldr	r0, [r7, #8]
 800cf4e:	f000 f80f 	bl	800cf70 <IntToUnicode>
  }
}
 800cf52:	bf00      	nop
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	1ff0f420 	.word	0x1ff0f420
 800cf60:	1ff0f424 	.word	0x1ff0f424
 800cf64:	1ff0f428 	.word	0x1ff0f428
 800cf68:	200000f6 	.word	0x200000f6
 800cf6c:	20000106 	.word	0x20000106

0800cf70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b087      	sub	sp, #28
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf82:	2300      	movs	r3, #0
 800cf84:	75fb      	strb	r3, [r7, #23]
 800cf86:	e027      	b.n	800cfd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	0f1b      	lsrs	r3, r3, #28
 800cf8c:	2b09      	cmp	r3, #9
 800cf8e:	d80b      	bhi.n	800cfa8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	0f1b      	lsrs	r3, r3, #28
 800cf94:	b2da      	uxtb	r2, r3
 800cf96:	7dfb      	ldrb	r3, [r7, #23]
 800cf98:	005b      	lsls	r3, r3, #1
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	440b      	add	r3, r1
 800cfa0:	3230      	adds	r2, #48	; 0x30
 800cfa2:	b2d2      	uxtb	r2, r2
 800cfa4:	701a      	strb	r2, [r3, #0]
 800cfa6:	e00a      	b.n	800cfbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	0f1b      	lsrs	r3, r3, #28
 800cfac:	b2da      	uxtb	r2, r3
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	005b      	lsls	r3, r3, #1
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	440b      	add	r3, r1
 800cfb8:	3237      	adds	r2, #55	; 0x37
 800cfba:	b2d2      	uxtb	r2, r2
 800cfbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	011b      	lsls	r3, r3, #4
 800cfc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cfc4:	7dfb      	ldrb	r3, [r7, #23]
 800cfc6:	005b      	lsls	r3, r3, #1
 800cfc8:	3301      	adds	r3, #1
 800cfca:	68ba      	ldr	r2, [r7, #8]
 800cfcc:	4413      	add	r3, r2
 800cfce:	2200      	movs	r2, #0
 800cfd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cfd2:	7dfb      	ldrb	r3, [r7, #23]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	75fb      	strb	r3, [r7, #23]
 800cfd8:	7dfa      	ldrb	r2, [r7, #23]
 800cfda:	79fb      	ldrb	r3, [r7, #7]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d3d3      	bcc.n	800cf88 <IntToUnicode+0x18>
  }
}
 800cfe0:	bf00      	nop
 800cfe2:	bf00      	nop
 800cfe4:	371c      	adds	r7, #28
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
	...

0800cff0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b0ae      	sub	sp, #184	; 0xb8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cff8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800cffc:	2200      	movs	r2, #0
 800cffe:	601a      	str	r2, [r3, #0]
 800d000:	605a      	str	r2, [r3, #4]
 800d002:	609a      	str	r2, [r3, #8]
 800d004:	60da      	str	r2, [r3, #12]
 800d006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d008:	f107 0314 	add.w	r3, r7, #20
 800d00c:	2290      	movs	r2, #144	; 0x90
 800d00e:	2100      	movs	r1, #0
 800d010:	4618      	mov	r0, r3
 800d012:	f000 fc27 	bl	800d864 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d01e:	d161      	bne.n	800d0e4 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d020:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d024:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d026:	2300      	movs	r3, #0
 800d028:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d02c:	f107 0314 	add.w	r3, r7, #20
 800d030:	4618      	mov	r0, r3
 800d032:	f7f7 fcfd 	bl	8004a30 <HAL_RCCEx_PeriphCLKConfig>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d001      	beq.n	800d040 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d03c:	f7f3 fd96 	bl	8000b6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d040:	4b2a      	ldr	r3, [pc, #168]	; (800d0ec <HAL_PCD_MspInit+0xfc>)
 800d042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d044:	4a29      	ldr	r2, [pc, #164]	; (800d0ec <HAL_PCD_MspInit+0xfc>)
 800d046:	f043 0301 	orr.w	r3, r3, #1
 800d04a:	6313      	str	r3, [r2, #48]	; 0x30
 800d04c:	4b27      	ldr	r3, [pc, #156]	; (800d0ec <HAL_PCD_MspInit+0xfc>)
 800d04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d050:	f003 0301 	and.w	r3, r3, #1
 800d054:	613b      	str	r3, [r7, #16]
 800d056:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d058:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800d05c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d060:	2302      	movs	r3, #2
 800d062:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d066:	2300      	movs	r3, #0
 800d068:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d06c:	2303      	movs	r3, #3
 800d06e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d072:	230a      	movs	r3, #10
 800d074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d078:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d07c:	4619      	mov	r1, r3
 800d07e:	481c      	ldr	r0, [pc, #112]	; (800d0f0 <HAL_PCD_MspInit+0x100>)
 800d080:	f7f5 faf2 	bl	8002668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d084:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d088:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d08c:	2300      	movs	r3, #0
 800d08e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d092:	2300      	movs	r3, #0
 800d094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d098:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d09c:	4619      	mov	r1, r3
 800d09e:	4814      	ldr	r0, [pc, #80]	; (800d0f0 <HAL_PCD_MspInit+0x100>)
 800d0a0:	f7f5 fae2 	bl	8002668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d0a4:	4b11      	ldr	r3, [pc, #68]	; (800d0ec <HAL_PCD_MspInit+0xfc>)
 800d0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a8:	4a10      	ldr	r2, [pc, #64]	; (800d0ec <HAL_PCD_MspInit+0xfc>)
 800d0aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0ae:	6353      	str	r3, [r2, #52]	; 0x34
 800d0b0:	4b0e      	ldr	r3, [pc, #56]	; (800d0ec <HAL_PCD_MspInit+0xfc>)
 800d0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0b8:	60fb      	str	r3, [r7, #12]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	4b0b      	ldr	r3, [pc, #44]	; (800d0ec <HAL_PCD_MspInit+0xfc>)
 800d0be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0c0:	4a0a      	ldr	r2, [pc, #40]	; (800d0ec <HAL_PCD_MspInit+0xfc>)
 800d0c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0c6:	6453      	str	r3, [r2, #68]	; 0x44
 800d0c8:	4b08      	ldr	r3, [pc, #32]	; (800d0ec <HAL_PCD_MspInit+0xfc>)
 800d0ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0d0:	60bb      	str	r3, [r7, #8]
 800d0d2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	2105      	movs	r1, #5
 800d0d8:	2043      	movs	r0, #67	; 0x43
 800d0da:	f7f4 fbf9 	bl	80018d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d0de:	2043      	movs	r0, #67	; 0x43
 800d0e0:	f7f4 fc12 	bl	8001908 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d0e4:	bf00      	nop
 800d0e6:	37b8      	adds	r7, #184	; 0xb8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}
 800d0ec:	40023800 	.word	0x40023800
 800d0f0:	40020000 	.word	0x40020000

0800d0f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d108:	4619      	mov	r1, r3
 800d10a:	4610      	mov	r0, r2
 800d10c:	f7fb fd45 	bl	8008b9a <USBD_LL_SetupStage>
}
 800d110:	bf00      	nop
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	460b      	mov	r3, r1
 800d122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d12a:	78fa      	ldrb	r2, [r7, #3]
 800d12c:	6879      	ldr	r1, [r7, #4]
 800d12e:	4613      	mov	r3, r2
 800d130:	00db      	lsls	r3, r3, #3
 800d132:	4413      	add	r3, r2
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	440b      	add	r3, r1
 800d138:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	78fb      	ldrb	r3, [r7, #3]
 800d140:	4619      	mov	r1, r3
 800d142:	f7fb fd7f 	bl	8008c44 <USBD_LL_DataOutStage>
}
 800d146:	bf00      	nop
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b082      	sub	sp, #8
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
 800d156:	460b      	mov	r3, r1
 800d158:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d160:	78fa      	ldrb	r2, [r7, #3]
 800d162:	6879      	ldr	r1, [r7, #4]
 800d164:	4613      	mov	r3, r2
 800d166:	00db      	lsls	r3, r3, #3
 800d168:	4413      	add	r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	440b      	add	r3, r1
 800d16e:	334c      	adds	r3, #76	; 0x4c
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	78fb      	ldrb	r3, [r7, #3]
 800d174:	4619      	mov	r1, r3
 800d176:	f7fb fe18 	bl	8008daa <USBD_LL_DataInStage>
}
 800d17a:	bf00      	nop
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b082      	sub	sp, #8
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d190:	4618      	mov	r0, r3
 800d192:	f7fb ff4c 	bl	800902e <USBD_LL_SOF>
}
 800d196:	bf00      	nop
 800d198:	3708      	adds	r7, #8
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b084      	sub	sp, #16
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d102      	bne.n	800d1b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	73fb      	strb	r3, [r7, #15]
 800d1b6:	e008      	b.n	800d1ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	d102      	bne.n	800d1c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	73fb      	strb	r3, [r7, #15]
 800d1c4:	e001      	b.n	800d1ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d1c6:	f7f3 fcd1 	bl	8000b6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d1d0:	7bfa      	ldrb	r2, [r7, #15]
 800d1d2:	4611      	mov	r1, r2
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7fb feec 	bl	8008fb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fb fe94 	bl	8008f0e <USBD_LL_Reset>
}
 800d1e6:	bf00      	nop
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
	...

0800d1f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7fb fee7 	bl	8008fd2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	6812      	ldr	r2, [r2, #0]
 800d212:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d216:	f043 0301 	orr.w	r3, r3, #1
 800d21a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a1b      	ldr	r3, [r3, #32]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d005      	beq.n	800d230 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d224:	4b04      	ldr	r3, [pc, #16]	; (800d238 <HAL_PCD_SuspendCallback+0x48>)
 800d226:	691b      	ldr	r3, [r3, #16]
 800d228:	4a03      	ldr	r2, [pc, #12]	; (800d238 <HAL_PCD_SuspendCallback+0x48>)
 800d22a:	f043 0306 	orr.w	r3, r3, #6
 800d22e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d230:	bf00      	nop
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	e000ed00 	.word	0xe000ed00

0800d23c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fb fed7 	bl	8008ffe <USBD_LL_Resume>
}
 800d250:	bf00      	nop
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	460b      	mov	r3, r1
 800d262:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d26a:	78fa      	ldrb	r2, [r7, #3]
 800d26c:	4611      	mov	r1, r2
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fb ff2f 	bl	80090d2 <USBD_LL_IsoOUTIncomplete>
}
 800d274:	bf00      	nop
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	460b      	mov	r3, r1
 800d286:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d28e:	78fa      	ldrb	r2, [r7, #3]
 800d290:	4611      	mov	r1, r2
 800d292:	4618      	mov	r0, r3
 800d294:	f7fb feeb 	bl	800906e <USBD_LL_IsoINIncomplete>
}
 800d298:	bf00      	nop
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fb ff41 	bl	8009136 <USBD_LL_DevConnected>
}
 800d2b4:	bf00      	nop
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7fb ff3e 	bl	800914c <USBD_LL_DevDisconnected>
}
 800d2d0:	bf00      	nop
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d13c      	bne.n	800d362 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d2e8:	4a20      	ldr	r2, [pc, #128]	; (800d36c <USBD_LL_Init+0x94>)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	4a1e      	ldr	r2, [pc, #120]	; (800d36c <USBD_LL_Init+0x94>)
 800d2f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2f8:	4b1c      	ldr	r3, [pc, #112]	; (800d36c <USBD_LL_Init+0x94>)
 800d2fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d2fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d300:	4b1a      	ldr	r3, [pc, #104]	; (800d36c <USBD_LL_Init+0x94>)
 800d302:	2206      	movs	r2, #6
 800d304:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d306:	4b19      	ldr	r3, [pc, #100]	; (800d36c <USBD_LL_Init+0x94>)
 800d308:	2202      	movs	r2, #2
 800d30a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d30c:	4b17      	ldr	r3, [pc, #92]	; (800d36c <USBD_LL_Init+0x94>)
 800d30e:	2200      	movs	r2, #0
 800d310:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d312:	4b16      	ldr	r3, [pc, #88]	; (800d36c <USBD_LL_Init+0x94>)
 800d314:	2202      	movs	r2, #2
 800d316:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800d318:	4b14      	ldr	r3, [pc, #80]	; (800d36c <USBD_LL_Init+0x94>)
 800d31a:	2201      	movs	r2, #1
 800d31c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d31e:	4b13      	ldr	r3, [pc, #76]	; (800d36c <USBD_LL_Init+0x94>)
 800d320:	2200      	movs	r2, #0
 800d322:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d324:	4b11      	ldr	r3, [pc, #68]	; (800d36c <USBD_LL_Init+0x94>)
 800d326:	2200      	movs	r2, #0
 800d328:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d32a:	4b10      	ldr	r3, [pc, #64]	; (800d36c <USBD_LL_Init+0x94>)
 800d32c:	2201      	movs	r2, #1
 800d32e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d330:	4b0e      	ldr	r3, [pc, #56]	; (800d36c <USBD_LL_Init+0x94>)
 800d332:	2200      	movs	r2, #0
 800d334:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d336:	480d      	ldr	r0, [pc, #52]	; (800d36c <USBD_LL_Init+0x94>)
 800d338:	f7f5 fb5b 	bl	80029f2 <HAL_PCD_Init>
 800d33c:	4603      	mov	r3, r0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d001      	beq.n	800d346 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d342:	f7f3 fc13 	bl	8000b6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d346:	2180      	movs	r1, #128	; 0x80
 800d348:	4808      	ldr	r0, [pc, #32]	; (800d36c <USBD_LL_Init+0x94>)
 800d34a:	f7f6 fdd6 	bl	8003efa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d34e:	2240      	movs	r2, #64	; 0x40
 800d350:	2100      	movs	r1, #0
 800d352:	4806      	ldr	r0, [pc, #24]	; (800d36c <USBD_LL_Init+0x94>)
 800d354:	f7f6 fd8a 	bl	8003e6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d358:	2280      	movs	r2, #128	; 0x80
 800d35a:	2101      	movs	r1, #1
 800d35c:	4803      	ldr	r0, [pc, #12]	; (800d36c <USBD_LL_Init+0x94>)
 800d35e:	f7f6 fd85 	bl	8003e6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d362:	2300      	movs	r3, #0
}
 800d364:	4618      	mov	r0, r3
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	200092d8 	.word	0x200092d8

0800d370 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d378:	2300      	movs	r3, #0
 800d37a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d37c:	2300      	movs	r3, #0
 800d37e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d386:	4618      	mov	r0, r3
 800d388:	f7f5 fc57 	bl	8002c3a <HAL_PCD_Start>
 800d38c:	4603      	mov	r3, r0
 800d38e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d390:	7bfb      	ldrb	r3, [r7, #15]
 800d392:	4618      	mov	r0, r3
 800d394:	f000 f97e 	bl	800d694 <USBD_Get_USB_Status>
 800d398:	4603      	mov	r3, r0
 800d39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d39c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b084      	sub	sp, #16
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	4608      	mov	r0, r1
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	70fb      	strb	r3, [r7, #3]
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	70bb      	strb	r3, [r7, #2]
 800d3bc:	4613      	mov	r3, r2
 800d3be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d3ce:	78bb      	ldrb	r3, [r7, #2]
 800d3d0:	883a      	ldrh	r2, [r7, #0]
 800d3d2:	78f9      	ldrb	r1, [r7, #3]
 800d3d4:	f7f6 f944 	bl	8003660 <HAL_PCD_EP_Open>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3dc:	7bfb      	ldrb	r3, [r7, #15]
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f000 f958 	bl	800d694 <USBD_Get_USB_Status>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b084      	sub	sp, #16
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3fe:	2300      	movs	r3, #0
 800d400:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d40c:	78fa      	ldrb	r2, [r7, #3]
 800d40e:	4611      	mov	r1, r2
 800d410:	4618      	mov	r0, r3
 800d412:	f7f6 f98d 	bl	8003730 <HAL_PCD_EP_Close>
 800d416:	4603      	mov	r3, r0
 800d418:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d41a:	7bfb      	ldrb	r3, [r7, #15]
 800d41c:	4618      	mov	r0, r3
 800d41e:	f000 f939 	bl	800d694 <USBD_Get_USB_Status>
 800d422:	4603      	mov	r3, r0
 800d424:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d426:	7bbb      	ldrb	r3, [r7, #14]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	460b      	mov	r3, r1
 800d43a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d440:	2300      	movs	r3, #0
 800d442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d44a:	78fa      	ldrb	r2, [r7, #3]
 800d44c:	4611      	mov	r1, r2
 800d44e:	4618      	mov	r0, r3
 800d450:	f7f6 fa65 	bl	800391e <HAL_PCD_EP_SetStall>
 800d454:	4603      	mov	r3, r0
 800d456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d458:	7bfb      	ldrb	r3, [r7, #15]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f000 f91a 	bl	800d694 <USBD_Get_USB_Status>
 800d460:	4603      	mov	r3, r0
 800d462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d464:	7bbb      	ldrb	r3, [r7, #14]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b084      	sub	sp, #16
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
 800d476:	460b      	mov	r3, r1
 800d478:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d47a:	2300      	movs	r3, #0
 800d47c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d47e:	2300      	movs	r3, #0
 800d480:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d488:	78fa      	ldrb	r2, [r7, #3]
 800d48a:	4611      	mov	r1, r2
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7f6 faaa 	bl	80039e6 <HAL_PCD_EP_ClrStall>
 800d492:	4603      	mov	r3, r0
 800d494:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d496:	7bfb      	ldrb	r3, [r7, #15]
 800d498:	4618      	mov	r0, r3
 800d49a:	f000 f8fb 	bl	800d694 <USBD_Get_USB_Status>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b085      	sub	sp, #20
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d4be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d4c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	da0b      	bge.n	800d4e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d4c8:	78fb      	ldrb	r3, [r7, #3]
 800d4ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4ce:	68f9      	ldr	r1, [r7, #12]
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	00db      	lsls	r3, r3, #3
 800d4d4:	4413      	add	r3, r2
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	440b      	add	r3, r1
 800d4da:	333e      	adds	r3, #62	; 0x3e
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	e00b      	b.n	800d4f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d4e0:	78fb      	ldrb	r3, [r7, #3]
 800d4e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4e6:	68f9      	ldr	r1, [r7, #12]
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	00db      	lsls	r3, r3, #3
 800d4ec:	4413      	add	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	440b      	add	r3, r1
 800d4f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d4f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3714      	adds	r7, #20
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d510:	2300      	movs	r3, #0
 800d512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d514:	2300      	movs	r3, #0
 800d516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d51e:	78fa      	ldrb	r2, [r7, #3]
 800d520:	4611      	mov	r1, r2
 800d522:	4618      	mov	r0, r3
 800d524:	f7f6 f877 	bl	8003616 <HAL_PCD_SetAddress>
 800d528:	4603      	mov	r3, r0
 800d52a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d52c:	7bfb      	ldrb	r3, [r7, #15]
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 f8b0 	bl	800d694 <USBD_Get_USB_Status>
 800d534:	4603      	mov	r3, r0
 800d536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d538:	7bbb      	ldrb	r3, [r7, #14]
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b086      	sub	sp, #24
 800d546:	af00      	add	r7, sp, #0
 800d548:	60f8      	str	r0, [r7, #12]
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	603b      	str	r3, [r7, #0]
 800d54e:	460b      	mov	r3, r1
 800d550:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d556:	2300      	movs	r3, #0
 800d558:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d560:	7af9      	ldrb	r1, [r7, #11]
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	f7f6 f990 	bl	800388a <HAL_PCD_EP_Transmit>
 800d56a:	4603      	mov	r3, r0
 800d56c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d56e:	7dfb      	ldrb	r3, [r7, #23]
 800d570:	4618      	mov	r0, r3
 800d572:	f000 f88f 	bl	800d694 <USBD_Get_USB_Status>
 800d576:	4603      	mov	r3, r0
 800d578:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d57a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3718      	adds	r7, #24
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b086      	sub	sp, #24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	607a      	str	r2, [r7, #4]
 800d58e:	603b      	str	r3, [r7, #0]
 800d590:	460b      	mov	r3, r1
 800d592:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d594:	2300      	movs	r3, #0
 800d596:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d598:	2300      	movs	r3, #0
 800d59a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d5a2:	7af9      	ldrb	r1, [r7, #11]
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	f7f6 f90c 	bl	80037c4 <HAL_PCD_EP_Receive>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5b0:	7dfb      	ldrb	r3, [r7, #23]
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f000 f86e 	bl	800d694 <USBD_Get_USB_Status>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3718      	adds	r7, #24
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5c6:	b580      	push	{r7, lr}
 800d5c8:	b082      	sub	sp, #8
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5d8:	78fa      	ldrb	r2, [r7, #3]
 800d5da:	4611      	mov	r1, r2
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7f6 f93c 	bl	800385a <HAL_PCD_EP_GetRxCount>
 800d5e2:	4603      	mov	r3, r0
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d5f8:	78fb      	ldrb	r3, [r7, #3]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d002      	beq.n	800d604 <HAL_PCDEx_LPM_Callback+0x18>
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d01f      	beq.n	800d642 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d602:	e03b      	b.n	800d67c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a1b      	ldr	r3, [r3, #32]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d007      	beq.n	800d61c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d60c:	f000 f83c 	bl	800d688 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d610:	4b1c      	ldr	r3, [pc, #112]	; (800d684 <HAL_PCDEx_LPM_Callback+0x98>)
 800d612:	691b      	ldr	r3, [r3, #16]
 800d614:	4a1b      	ldr	r2, [pc, #108]	; (800d684 <HAL_PCDEx_LPM_Callback+0x98>)
 800d616:	f023 0306 	bic.w	r3, r3, #6
 800d61a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	6812      	ldr	r2, [r2, #0]
 800d62a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d62e:	f023 0301 	bic.w	r3, r3, #1
 800d632:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fb fcdf 	bl	8008ffe <USBD_LL_Resume>
    break;
 800d640:	e01c      	b.n	800d67c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	6812      	ldr	r2, [r2, #0]
 800d650:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d654:	f043 0301 	orr.w	r3, r3, #1
 800d658:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d660:	4618      	mov	r0, r3
 800d662:	f7fb fcb6 	bl	8008fd2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a1b      	ldr	r3, [r3, #32]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d005      	beq.n	800d67a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d66e:	4b05      	ldr	r3, [pc, #20]	; (800d684 <HAL_PCDEx_LPM_Callback+0x98>)
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	4a04      	ldr	r2, [pc, #16]	; (800d684 <HAL_PCDEx_LPM_Callback+0x98>)
 800d674:	f043 0306 	orr.w	r3, r3, #6
 800d678:	6113      	str	r3, [r2, #16]
    break;
 800d67a:	bf00      	nop
}
 800d67c:	bf00      	nop
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	e000ed00 	.word	0xe000ed00

0800d688 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d68c:	f7f3 f9ea 	bl	8000a64 <SystemClock_Config>
}
 800d690:	bf00      	nop
 800d692:	bd80      	pop	{r7, pc}

0800d694 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	4603      	mov	r3, r0
 800d69c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d6a2:	79fb      	ldrb	r3, [r7, #7]
 800d6a4:	2b03      	cmp	r3, #3
 800d6a6:	d817      	bhi.n	800d6d8 <USBD_Get_USB_Status+0x44>
 800d6a8:	a201      	add	r2, pc, #4	; (adr r2, 800d6b0 <USBD_Get_USB_Status+0x1c>)
 800d6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ae:	bf00      	nop
 800d6b0:	0800d6c1 	.word	0x0800d6c1
 800d6b4:	0800d6c7 	.word	0x0800d6c7
 800d6b8:	0800d6cd 	.word	0x0800d6cd
 800d6bc:	0800d6d3 	.word	0x0800d6d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d6c4:	e00b      	b.n	800d6de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6c6:	2303      	movs	r3, #3
 800d6c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d6ca:	e008      	b.n	800d6de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d6d0:	e005      	b.n	800d6de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6d2:	2303      	movs	r3, #3
 800d6d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d6d6:	e002      	b.n	800d6de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d6d8:	2303      	movs	r3, #3
 800d6da:	73fb      	strb	r3, [r7, #15]
    break;
 800d6dc:	bf00      	nop
  }
  return usb_status;
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3714      	adds	r7, #20
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <malloc>:
 800d6ec:	4b02      	ldr	r3, [pc, #8]	; (800d6f8 <malloc+0xc>)
 800d6ee:	4601      	mov	r1, r0
 800d6f0:	6818      	ldr	r0, [r3, #0]
 800d6f2:	f000 b82b 	b.w	800d74c <_malloc_r>
 800d6f6:	bf00      	nop
 800d6f8:	2000015c 	.word	0x2000015c

0800d6fc <free>:
 800d6fc:	4b02      	ldr	r3, [pc, #8]	; (800d708 <free+0xc>)
 800d6fe:	4601      	mov	r1, r0
 800d700:	6818      	ldr	r0, [r3, #0]
 800d702:	f000 b901 	b.w	800d908 <_free_r>
 800d706:	bf00      	nop
 800d708:	2000015c 	.word	0x2000015c

0800d70c <sbrk_aligned>:
 800d70c:	b570      	push	{r4, r5, r6, lr}
 800d70e:	4e0e      	ldr	r6, [pc, #56]	; (800d748 <sbrk_aligned+0x3c>)
 800d710:	460c      	mov	r4, r1
 800d712:	6831      	ldr	r1, [r6, #0]
 800d714:	4605      	mov	r5, r0
 800d716:	b911      	cbnz	r1, 800d71e <sbrk_aligned+0x12>
 800d718:	f000 f8ac 	bl	800d874 <_sbrk_r>
 800d71c:	6030      	str	r0, [r6, #0]
 800d71e:	4621      	mov	r1, r4
 800d720:	4628      	mov	r0, r5
 800d722:	f000 f8a7 	bl	800d874 <_sbrk_r>
 800d726:	1c43      	adds	r3, r0, #1
 800d728:	d00a      	beq.n	800d740 <sbrk_aligned+0x34>
 800d72a:	1cc4      	adds	r4, r0, #3
 800d72c:	f024 0403 	bic.w	r4, r4, #3
 800d730:	42a0      	cmp	r0, r4
 800d732:	d007      	beq.n	800d744 <sbrk_aligned+0x38>
 800d734:	1a21      	subs	r1, r4, r0
 800d736:	4628      	mov	r0, r5
 800d738:	f000 f89c 	bl	800d874 <_sbrk_r>
 800d73c:	3001      	adds	r0, #1
 800d73e:	d101      	bne.n	800d744 <sbrk_aligned+0x38>
 800d740:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d744:	4620      	mov	r0, r4
 800d746:	bd70      	pop	{r4, r5, r6, pc}
 800d748:	200097e4 	.word	0x200097e4

0800d74c <_malloc_r>:
 800d74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d750:	1ccd      	adds	r5, r1, #3
 800d752:	f025 0503 	bic.w	r5, r5, #3
 800d756:	3508      	adds	r5, #8
 800d758:	2d0c      	cmp	r5, #12
 800d75a:	bf38      	it	cc
 800d75c:	250c      	movcc	r5, #12
 800d75e:	2d00      	cmp	r5, #0
 800d760:	4607      	mov	r7, r0
 800d762:	db01      	blt.n	800d768 <_malloc_r+0x1c>
 800d764:	42a9      	cmp	r1, r5
 800d766:	d905      	bls.n	800d774 <_malloc_r+0x28>
 800d768:	230c      	movs	r3, #12
 800d76a:	603b      	str	r3, [r7, #0]
 800d76c:	2600      	movs	r6, #0
 800d76e:	4630      	mov	r0, r6
 800d770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d774:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d848 <_malloc_r+0xfc>
 800d778:	f000 f868 	bl	800d84c <__malloc_lock>
 800d77c:	f8d8 3000 	ldr.w	r3, [r8]
 800d780:	461c      	mov	r4, r3
 800d782:	bb5c      	cbnz	r4, 800d7dc <_malloc_r+0x90>
 800d784:	4629      	mov	r1, r5
 800d786:	4638      	mov	r0, r7
 800d788:	f7ff ffc0 	bl	800d70c <sbrk_aligned>
 800d78c:	1c43      	adds	r3, r0, #1
 800d78e:	4604      	mov	r4, r0
 800d790:	d155      	bne.n	800d83e <_malloc_r+0xf2>
 800d792:	f8d8 4000 	ldr.w	r4, [r8]
 800d796:	4626      	mov	r6, r4
 800d798:	2e00      	cmp	r6, #0
 800d79a:	d145      	bne.n	800d828 <_malloc_r+0xdc>
 800d79c:	2c00      	cmp	r4, #0
 800d79e:	d048      	beq.n	800d832 <_malloc_r+0xe6>
 800d7a0:	6823      	ldr	r3, [r4, #0]
 800d7a2:	4631      	mov	r1, r6
 800d7a4:	4638      	mov	r0, r7
 800d7a6:	eb04 0903 	add.w	r9, r4, r3
 800d7aa:	f000 f863 	bl	800d874 <_sbrk_r>
 800d7ae:	4581      	cmp	r9, r0
 800d7b0:	d13f      	bne.n	800d832 <_malloc_r+0xe6>
 800d7b2:	6821      	ldr	r1, [r4, #0]
 800d7b4:	1a6d      	subs	r5, r5, r1
 800d7b6:	4629      	mov	r1, r5
 800d7b8:	4638      	mov	r0, r7
 800d7ba:	f7ff ffa7 	bl	800d70c <sbrk_aligned>
 800d7be:	3001      	adds	r0, #1
 800d7c0:	d037      	beq.n	800d832 <_malloc_r+0xe6>
 800d7c2:	6823      	ldr	r3, [r4, #0]
 800d7c4:	442b      	add	r3, r5
 800d7c6:	6023      	str	r3, [r4, #0]
 800d7c8:	f8d8 3000 	ldr.w	r3, [r8]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d038      	beq.n	800d842 <_malloc_r+0xf6>
 800d7d0:	685a      	ldr	r2, [r3, #4]
 800d7d2:	42a2      	cmp	r2, r4
 800d7d4:	d12b      	bne.n	800d82e <_malloc_r+0xe2>
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	605a      	str	r2, [r3, #4]
 800d7da:	e00f      	b.n	800d7fc <_malloc_r+0xb0>
 800d7dc:	6822      	ldr	r2, [r4, #0]
 800d7de:	1b52      	subs	r2, r2, r5
 800d7e0:	d41f      	bmi.n	800d822 <_malloc_r+0xd6>
 800d7e2:	2a0b      	cmp	r2, #11
 800d7e4:	d917      	bls.n	800d816 <_malloc_r+0xca>
 800d7e6:	1961      	adds	r1, r4, r5
 800d7e8:	42a3      	cmp	r3, r4
 800d7ea:	6025      	str	r5, [r4, #0]
 800d7ec:	bf18      	it	ne
 800d7ee:	6059      	strne	r1, [r3, #4]
 800d7f0:	6863      	ldr	r3, [r4, #4]
 800d7f2:	bf08      	it	eq
 800d7f4:	f8c8 1000 	streq.w	r1, [r8]
 800d7f8:	5162      	str	r2, [r4, r5]
 800d7fa:	604b      	str	r3, [r1, #4]
 800d7fc:	4638      	mov	r0, r7
 800d7fe:	f104 060b 	add.w	r6, r4, #11
 800d802:	f000 f829 	bl	800d858 <__malloc_unlock>
 800d806:	f026 0607 	bic.w	r6, r6, #7
 800d80a:	1d23      	adds	r3, r4, #4
 800d80c:	1af2      	subs	r2, r6, r3
 800d80e:	d0ae      	beq.n	800d76e <_malloc_r+0x22>
 800d810:	1b9b      	subs	r3, r3, r6
 800d812:	50a3      	str	r3, [r4, r2]
 800d814:	e7ab      	b.n	800d76e <_malloc_r+0x22>
 800d816:	42a3      	cmp	r3, r4
 800d818:	6862      	ldr	r2, [r4, #4]
 800d81a:	d1dd      	bne.n	800d7d8 <_malloc_r+0x8c>
 800d81c:	f8c8 2000 	str.w	r2, [r8]
 800d820:	e7ec      	b.n	800d7fc <_malloc_r+0xb0>
 800d822:	4623      	mov	r3, r4
 800d824:	6864      	ldr	r4, [r4, #4]
 800d826:	e7ac      	b.n	800d782 <_malloc_r+0x36>
 800d828:	4634      	mov	r4, r6
 800d82a:	6876      	ldr	r6, [r6, #4]
 800d82c:	e7b4      	b.n	800d798 <_malloc_r+0x4c>
 800d82e:	4613      	mov	r3, r2
 800d830:	e7cc      	b.n	800d7cc <_malloc_r+0x80>
 800d832:	230c      	movs	r3, #12
 800d834:	603b      	str	r3, [r7, #0]
 800d836:	4638      	mov	r0, r7
 800d838:	f000 f80e 	bl	800d858 <__malloc_unlock>
 800d83c:	e797      	b.n	800d76e <_malloc_r+0x22>
 800d83e:	6025      	str	r5, [r4, #0]
 800d840:	e7dc      	b.n	800d7fc <_malloc_r+0xb0>
 800d842:	605b      	str	r3, [r3, #4]
 800d844:	deff      	udf	#255	; 0xff
 800d846:	bf00      	nop
 800d848:	200097e0 	.word	0x200097e0

0800d84c <__malloc_lock>:
 800d84c:	4801      	ldr	r0, [pc, #4]	; (800d854 <__malloc_lock+0x8>)
 800d84e:	f000 b84b 	b.w	800d8e8 <__retarget_lock_acquire_recursive>
 800d852:	bf00      	nop
 800d854:	20009924 	.word	0x20009924

0800d858 <__malloc_unlock>:
 800d858:	4801      	ldr	r0, [pc, #4]	; (800d860 <__malloc_unlock+0x8>)
 800d85a:	f000 b846 	b.w	800d8ea <__retarget_lock_release_recursive>
 800d85e:	bf00      	nop
 800d860:	20009924 	.word	0x20009924

0800d864 <memset>:
 800d864:	4402      	add	r2, r0
 800d866:	4603      	mov	r3, r0
 800d868:	4293      	cmp	r3, r2
 800d86a:	d100      	bne.n	800d86e <memset+0xa>
 800d86c:	4770      	bx	lr
 800d86e:	f803 1b01 	strb.w	r1, [r3], #1
 800d872:	e7f9      	b.n	800d868 <memset+0x4>

0800d874 <_sbrk_r>:
 800d874:	b538      	push	{r3, r4, r5, lr}
 800d876:	4d06      	ldr	r5, [pc, #24]	; (800d890 <_sbrk_r+0x1c>)
 800d878:	2300      	movs	r3, #0
 800d87a:	4604      	mov	r4, r0
 800d87c:	4608      	mov	r0, r1
 800d87e:	602b      	str	r3, [r5, #0]
 800d880:	f7f3 fa78 	bl	8000d74 <_sbrk>
 800d884:	1c43      	adds	r3, r0, #1
 800d886:	d102      	bne.n	800d88e <_sbrk_r+0x1a>
 800d888:	682b      	ldr	r3, [r5, #0]
 800d88a:	b103      	cbz	r3, 800d88e <_sbrk_r+0x1a>
 800d88c:	6023      	str	r3, [r4, #0]
 800d88e:	bd38      	pop	{r3, r4, r5, pc}
 800d890:	20009920 	.word	0x20009920

0800d894 <__errno>:
 800d894:	4b01      	ldr	r3, [pc, #4]	; (800d89c <__errno+0x8>)
 800d896:	6818      	ldr	r0, [r3, #0]
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop
 800d89c:	2000015c 	.word	0x2000015c

0800d8a0 <__libc_init_array>:
 800d8a0:	b570      	push	{r4, r5, r6, lr}
 800d8a2:	4d0d      	ldr	r5, [pc, #52]	; (800d8d8 <__libc_init_array+0x38>)
 800d8a4:	4c0d      	ldr	r4, [pc, #52]	; (800d8dc <__libc_init_array+0x3c>)
 800d8a6:	1b64      	subs	r4, r4, r5
 800d8a8:	10a4      	asrs	r4, r4, #2
 800d8aa:	2600      	movs	r6, #0
 800d8ac:	42a6      	cmp	r6, r4
 800d8ae:	d109      	bne.n	800d8c4 <__libc_init_array+0x24>
 800d8b0:	4d0b      	ldr	r5, [pc, #44]	; (800d8e0 <__libc_init_array+0x40>)
 800d8b2:	4c0c      	ldr	r4, [pc, #48]	; (800d8e4 <__libc_init_array+0x44>)
 800d8b4:	f000 f874 	bl	800d9a0 <_init>
 800d8b8:	1b64      	subs	r4, r4, r5
 800d8ba:	10a4      	asrs	r4, r4, #2
 800d8bc:	2600      	movs	r6, #0
 800d8be:	42a6      	cmp	r6, r4
 800d8c0:	d105      	bne.n	800d8ce <__libc_init_array+0x2e>
 800d8c2:	bd70      	pop	{r4, r5, r6, pc}
 800d8c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8c8:	4798      	blx	r3
 800d8ca:	3601      	adds	r6, #1
 800d8cc:	e7ee      	b.n	800d8ac <__libc_init_array+0xc>
 800d8ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8d2:	4798      	blx	r3
 800d8d4:	3601      	adds	r6, #1
 800d8d6:	e7f2      	b.n	800d8be <__libc_init_array+0x1e>
 800d8d8:	0800da70 	.word	0x0800da70
 800d8dc:	0800da70 	.word	0x0800da70
 800d8e0:	0800da70 	.word	0x0800da70
 800d8e4:	0800da74 	.word	0x0800da74

0800d8e8 <__retarget_lock_acquire_recursive>:
 800d8e8:	4770      	bx	lr

0800d8ea <__retarget_lock_release_recursive>:
 800d8ea:	4770      	bx	lr

0800d8ec <memcpy>:
 800d8ec:	440a      	add	r2, r1
 800d8ee:	4291      	cmp	r1, r2
 800d8f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d8f4:	d100      	bne.n	800d8f8 <memcpy+0xc>
 800d8f6:	4770      	bx	lr
 800d8f8:	b510      	push	{r4, lr}
 800d8fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d902:	4291      	cmp	r1, r2
 800d904:	d1f9      	bne.n	800d8fa <memcpy+0xe>
 800d906:	bd10      	pop	{r4, pc}

0800d908 <_free_r>:
 800d908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d90a:	2900      	cmp	r1, #0
 800d90c:	d044      	beq.n	800d998 <_free_r+0x90>
 800d90e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d912:	9001      	str	r0, [sp, #4]
 800d914:	2b00      	cmp	r3, #0
 800d916:	f1a1 0404 	sub.w	r4, r1, #4
 800d91a:	bfb8      	it	lt
 800d91c:	18e4      	addlt	r4, r4, r3
 800d91e:	f7ff ff95 	bl	800d84c <__malloc_lock>
 800d922:	4a1e      	ldr	r2, [pc, #120]	; (800d99c <_free_r+0x94>)
 800d924:	9801      	ldr	r0, [sp, #4]
 800d926:	6813      	ldr	r3, [r2, #0]
 800d928:	b933      	cbnz	r3, 800d938 <_free_r+0x30>
 800d92a:	6063      	str	r3, [r4, #4]
 800d92c:	6014      	str	r4, [r2, #0]
 800d92e:	b003      	add	sp, #12
 800d930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d934:	f7ff bf90 	b.w	800d858 <__malloc_unlock>
 800d938:	42a3      	cmp	r3, r4
 800d93a:	d908      	bls.n	800d94e <_free_r+0x46>
 800d93c:	6825      	ldr	r5, [r4, #0]
 800d93e:	1961      	adds	r1, r4, r5
 800d940:	428b      	cmp	r3, r1
 800d942:	bf01      	itttt	eq
 800d944:	6819      	ldreq	r1, [r3, #0]
 800d946:	685b      	ldreq	r3, [r3, #4]
 800d948:	1949      	addeq	r1, r1, r5
 800d94a:	6021      	streq	r1, [r4, #0]
 800d94c:	e7ed      	b.n	800d92a <_free_r+0x22>
 800d94e:	461a      	mov	r2, r3
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	b10b      	cbz	r3, 800d958 <_free_r+0x50>
 800d954:	42a3      	cmp	r3, r4
 800d956:	d9fa      	bls.n	800d94e <_free_r+0x46>
 800d958:	6811      	ldr	r1, [r2, #0]
 800d95a:	1855      	adds	r5, r2, r1
 800d95c:	42a5      	cmp	r5, r4
 800d95e:	d10b      	bne.n	800d978 <_free_r+0x70>
 800d960:	6824      	ldr	r4, [r4, #0]
 800d962:	4421      	add	r1, r4
 800d964:	1854      	adds	r4, r2, r1
 800d966:	42a3      	cmp	r3, r4
 800d968:	6011      	str	r1, [r2, #0]
 800d96a:	d1e0      	bne.n	800d92e <_free_r+0x26>
 800d96c:	681c      	ldr	r4, [r3, #0]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	6053      	str	r3, [r2, #4]
 800d972:	440c      	add	r4, r1
 800d974:	6014      	str	r4, [r2, #0]
 800d976:	e7da      	b.n	800d92e <_free_r+0x26>
 800d978:	d902      	bls.n	800d980 <_free_r+0x78>
 800d97a:	230c      	movs	r3, #12
 800d97c:	6003      	str	r3, [r0, #0]
 800d97e:	e7d6      	b.n	800d92e <_free_r+0x26>
 800d980:	6825      	ldr	r5, [r4, #0]
 800d982:	1961      	adds	r1, r4, r5
 800d984:	428b      	cmp	r3, r1
 800d986:	bf04      	itt	eq
 800d988:	6819      	ldreq	r1, [r3, #0]
 800d98a:	685b      	ldreq	r3, [r3, #4]
 800d98c:	6063      	str	r3, [r4, #4]
 800d98e:	bf04      	itt	eq
 800d990:	1949      	addeq	r1, r1, r5
 800d992:	6021      	streq	r1, [r4, #0]
 800d994:	6054      	str	r4, [r2, #4]
 800d996:	e7ca      	b.n	800d92e <_free_r+0x26>
 800d998:	b003      	add	sp, #12
 800d99a:	bd30      	pop	{r4, r5, pc}
 800d99c:	200097e0 	.word	0x200097e0

0800d9a0 <_init>:
 800d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a2:	bf00      	nop
 800d9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9a6:	bc08      	pop	{r3}
 800d9a8:	469e      	mov	lr, r3
 800d9aa:	4770      	bx	lr

0800d9ac <_fini>:
 800d9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ae:	bf00      	nop
 800d9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9b2:	bc08      	pop	{r3}
 800d9b4:	469e      	mov	lr, r3
 800d9b6:	4770      	bx	lr
