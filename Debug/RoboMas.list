
RoboMas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011180  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08011380  08011380  00021380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116bc  080116bc  000302ac  2**0
                  CONTENTS
  4 .ARM          00000008  080116bc  080116bc  000216bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116c4  080116c4  000302ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116c4  080116c4  000216c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080116c8  080116c8  000216c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  080116cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000016c  08011838  0003016c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000020c  080118d8  0003020c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000e0b0  200002b0  08011978  000302b0  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  2000e360  08011978  0003e360  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000302da  2**0
                  CONTENTS, READONLY
 15 .debug_info   00030b10  00000000  00000000  0003031d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000070e0  00000000  00000000  00060e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002478  00000000  00000000  00067f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001bfb  00000000  00000000  0006a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00032343  00000000  00000000  0006bf83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00030ac2  00000000  00000000  0009e2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011ec48  00000000  00000000  000ced88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009ef0  00000000  00000000  001ed9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005e  00000000  00000000  001f78c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b0 	.word	0x200002b0
 800021c:	00000000 	.word	0x00000000
 8000220:	08011368 	.word	0x08011368

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b4 	.word	0x200002b4
 800023c:	08011368 	.word	0x08011368

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_frsub>:
 80002e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__addsf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_fsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002ec <__addsf3>:
 80002ec:	0042      	lsls	r2, r0, #1
 80002ee:	bf1f      	itttt	ne
 80002f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002f4:	ea92 0f03 	teqne	r2, r3
 80002f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000300:	d06a      	beq.n	80003d8 <__addsf3+0xec>
 8000302:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000306:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800030a:	bfc1      	itttt	gt
 800030c:	18d2      	addgt	r2, r2, r3
 800030e:	4041      	eorgt	r1, r0
 8000310:	4048      	eorgt	r0, r1
 8000312:	4041      	eorgt	r1, r0
 8000314:	bfb8      	it	lt
 8000316:	425b      	neglt	r3, r3
 8000318:	2b19      	cmp	r3, #25
 800031a:	bf88      	it	hi
 800031c:	4770      	bxhi	lr
 800031e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000322:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000326:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800032a:	bf18      	it	ne
 800032c:	4240      	negne	r0, r0
 800032e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000332:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000336:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800033a:	bf18      	it	ne
 800033c:	4249      	negne	r1, r1
 800033e:	ea92 0f03 	teq	r2, r3
 8000342:	d03f      	beq.n	80003c4 <__addsf3+0xd8>
 8000344:	f1a2 0201 	sub.w	r2, r2, #1
 8000348:	fa41 fc03 	asr.w	ip, r1, r3
 800034c:	eb10 000c 	adds.w	r0, r0, ip
 8000350:	f1c3 0320 	rsb	r3, r3, #32
 8000354:	fa01 f103 	lsl.w	r1, r1, r3
 8000358:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800035c:	d502      	bpl.n	8000364 <__addsf3+0x78>
 800035e:	4249      	negs	r1, r1
 8000360:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000364:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000368:	d313      	bcc.n	8000392 <__addsf3+0xa6>
 800036a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800036e:	d306      	bcc.n	800037e <__addsf3+0x92>
 8000370:	0840      	lsrs	r0, r0, #1
 8000372:	ea4f 0131 	mov.w	r1, r1, rrx
 8000376:	f102 0201 	add.w	r2, r2, #1
 800037a:	2afe      	cmp	r2, #254	; 0xfe
 800037c:	d251      	bcs.n	8000422 <__addsf3+0x136>
 800037e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000382:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000386:	bf08      	it	eq
 8000388:	f020 0001 	biceq.w	r0, r0, #1
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	4770      	bx	lr
 8000392:	0049      	lsls	r1, r1, #1
 8000394:	eb40 0000 	adc.w	r0, r0, r0
 8000398:	3a01      	subs	r2, #1
 800039a:	bf28      	it	cs
 800039c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003a0:	d2ed      	bcs.n	800037e <__addsf3+0x92>
 80003a2:	fab0 fc80 	clz	ip, r0
 80003a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003aa:	ebb2 020c 	subs.w	r2, r2, ip
 80003ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80003b2:	bfaa      	itet	ge
 80003b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b8:	4252      	neglt	r2, r2
 80003ba:	4318      	orrge	r0, r3
 80003bc:	bfbc      	itt	lt
 80003be:	40d0      	lsrlt	r0, r2
 80003c0:	4318      	orrlt	r0, r3
 80003c2:	4770      	bx	lr
 80003c4:	f092 0f00 	teq	r2, #0
 80003c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003cc:	bf06      	itte	eq
 80003ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003d2:	3201      	addeq	r2, #1
 80003d4:	3b01      	subne	r3, #1
 80003d6:	e7b5      	b.n	8000344 <__addsf3+0x58>
 80003d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e0:	bf18      	it	ne
 80003e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003e6:	d021      	beq.n	800042c <__addsf3+0x140>
 80003e8:	ea92 0f03 	teq	r2, r3
 80003ec:	d004      	beq.n	80003f8 <__addsf3+0x10c>
 80003ee:	f092 0f00 	teq	r2, #0
 80003f2:	bf08      	it	eq
 80003f4:	4608      	moveq	r0, r1
 80003f6:	4770      	bx	lr
 80003f8:	ea90 0f01 	teq	r0, r1
 80003fc:	bf1c      	itt	ne
 80003fe:	2000      	movne	r0, #0
 8000400:	4770      	bxne	lr
 8000402:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000406:	d104      	bne.n	8000412 <__addsf3+0x126>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	bf28      	it	cs
 800040c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000410:	4770      	bx	lr
 8000412:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000416:	bf3c      	itt	cc
 8000418:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800041c:	4770      	bxcc	lr
 800041e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000422:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000426:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800042a:	4770      	bx	lr
 800042c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000430:	bf16      	itet	ne
 8000432:	4608      	movne	r0, r1
 8000434:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000438:	4601      	movne	r1, r0
 800043a:	0242      	lsls	r2, r0, #9
 800043c:	bf06      	itte	eq
 800043e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000442:	ea90 0f01 	teqeq	r0, r1
 8000446:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800044a:	4770      	bx	lr

0800044c <__aeabi_ui2f>:
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e004      	b.n	800045c <__aeabi_i2f+0x8>
 8000452:	bf00      	nop

08000454 <__aeabi_i2f>:
 8000454:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000458:	bf48      	it	mi
 800045a:	4240      	negmi	r0, r0
 800045c:	ea5f 0c00 	movs.w	ip, r0
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000468:	4601      	mov	r1, r0
 800046a:	f04f 0000 	mov.w	r0, #0
 800046e:	e01c      	b.n	80004aa <__aeabi_l2f+0x2a>

08000470 <__aeabi_ul2f>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	f04f 0300 	mov.w	r3, #0
 800047c:	e00a      	b.n	8000494 <__aeabi_l2f+0x14>
 800047e:	bf00      	nop

08000480 <__aeabi_l2f>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800048c:	d502      	bpl.n	8000494 <__aeabi_l2f+0x14>
 800048e:	4240      	negs	r0, r0
 8000490:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000494:	ea5f 0c01 	movs.w	ip, r1
 8000498:	bf02      	ittt	eq
 800049a:	4684      	moveq	ip, r0
 800049c:	4601      	moveq	r1, r0
 800049e:	2000      	moveq	r0, #0
 80004a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004a4:	bf08      	it	eq
 80004a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004ae:	fabc f28c 	clz	r2, ip
 80004b2:	3a08      	subs	r2, #8
 80004b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b8:	db10      	blt.n	80004dc <__aeabi_l2f+0x5c>
 80004ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80004be:	4463      	add	r3, ip
 80004c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004c4:	f1c2 0220 	rsb	r2, r2, #32
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	fa20 f202 	lsr.w	r2, r0, r2
 80004d0:	eb43 0002 	adc.w	r0, r3, r2
 80004d4:	bf08      	it	eq
 80004d6:	f020 0001 	biceq.w	r0, r0, #1
 80004da:	4770      	bx	lr
 80004dc:	f102 0220 	add.w	r2, r2, #32
 80004e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004e4:	f1c2 0220 	rsb	r2, r2, #32
 80004e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004ec:	fa21 f202 	lsr.w	r2, r1, r2
 80004f0:	eb43 0002 	adc.w	r0, r3, r2
 80004f4:	bf08      	it	eq
 80004f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004fa:	4770      	bx	lr

080004fc <__aeabi_uldivmod>:
 80004fc:	b953      	cbnz	r3, 8000514 <__aeabi_uldivmod+0x18>
 80004fe:	b94a      	cbnz	r2, 8000514 <__aeabi_uldivmod+0x18>
 8000500:	2900      	cmp	r1, #0
 8000502:	bf08      	it	eq
 8000504:	2800      	cmpeq	r0, #0
 8000506:	bf1c      	itt	ne
 8000508:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800050c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000510:	f000 b970 	b.w	80007f4 <__aeabi_idiv0>
 8000514:	f1ad 0c08 	sub.w	ip, sp, #8
 8000518:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800051c:	f000 f806 	bl	800052c <__udivmoddi4>
 8000520:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000528:	b004      	add	sp, #16
 800052a:	4770      	bx	lr

0800052c <__udivmoddi4>:
 800052c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000530:	9e08      	ldr	r6, [sp, #32]
 8000532:	460d      	mov	r5, r1
 8000534:	4604      	mov	r4, r0
 8000536:	460f      	mov	r7, r1
 8000538:	2b00      	cmp	r3, #0
 800053a:	d14a      	bne.n	80005d2 <__udivmoddi4+0xa6>
 800053c:	428a      	cmp	r2, r1
 800053e:	4694      	mov	ip, r2
 8000540:	d965      	bls.n	800060e <__udivmoddi4+0xe2>
 8000542:	fab2 f382 	clz	r3, r2
 8000546:	b143      	cbz	r3, 800055a <__udivmoddi4+0x2e>
 8000548:	fa02 fc03 	lsl.w	ip, r2, r3
 800054c:	f1c3 0220 	rsb	r2, r3, #32
 8000550:	409f      	lsls	r7, r3
 8000552:	fa20 f202 	lsr.w	r2, r0, r2
 8000556:	4317      	orrs	r7, r2
 8000558:	409c      	lsls	r4, r3
 800055a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800055e:	fa1f f58c 	uxth.w	r5, ip
 8000562:	fbb7 f1fe 	udiv	r1, r7, lr
 8000566:	0c22      	lsrs	r2, r4, #16
 8000568:	fb0e 7711 	mls	r7, lr, r1, r7
 800056c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000570:	fb01 f005 	mul.w	r0, r1, r5
 8000574:	4290      	cmp	r0, r2
 8000576:	d90a      	bls.n	800058e <__udivmoddi4+0x62>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000580:	f080 811c 	bcs.w	80007bc <__udivmoddi4+0x290>
 8000584:	4290      	cmp	r0, r2
 8000586:	f240 8119 	bls.w	80007bc <__udivmoddi4+0x290>
 800058a:	3902      	subs	r1, #2
 800058c:	4462      	add	r2, ip
 800058e:	1a12      	subs	r2, r2, r0
 8000590:	b2a4      	uxth	r4, r4
 8000592:	fbb2 f0fe 	udiv	r0, r2, lr
 8000596:	fb0e 2210 	mls	r2, lr, r0, r2
 800059a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800059e:	fb00 f505 	mul.w	r5, r0, r5
 80005a2:	42a5      	cmp	r5, r4
 80005a4:	d90a      	bls.n	80005bc <__udivmoddi4+0x90>
 80005a6:	eb1c 0404 	adds.w	r4, ip, r4
 80005aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80005ae:	f080 8107 	bcs.w	80007c0 <__udivmoddi4+0x294>
 80005b2:	42a5      	cmp	r5, r4
 80005b4:	f240 8104 	bls.w	80007c0 <__udivmoddi4+0x294>
 80005b8:	4464      	add	r4, ip
 80005ba:	3802      	subs	r0, #2
 80005bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	2100      	movs	r1, #0
 80005c4:	b11e      	cbz	r6, 80005ce <__udivmoddi4+0xa2>
 80005c6:	40dc      	lsrs	r4, r3
 80005c8:	2300      	movs	r3, #0
 80005ca:	e9c6 4300 	strd	r4, r3, [r6]
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0xbc>
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	f000 80ed 	beq.w	80007b6 <__udivmoddi4+0x28a>
 80005dc:	2100      	movs	r1, #0
 80005de:	e9c6 0500 	strd	r0, r5, [r6]
 80005e2:	4608      	mov	r0, r1
 80005e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e8:	fab3 f183 	clz	r1, r3
 80005ec:	2900      	cmp	r1, #0
 80005ee:	d149      	bne.n	8000684 <__udivmoddi4+0x158>
 80005f0:	42ab      	cmp	r3, r5
 80005f2:	d302      	bcc.n	80005fa <__udivmoddi4+0xce>
 80005f4:	4282      	cmp	r2, r0
 80005f6:	f200 80f8 	bhi.w	80007ea <__udivmoddi4+0x2be>
 80005fa:	1a84      	subs	r4, r0, r2
 80005fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000600:	2001      	movs	r0, #1
 8000602:	4617      	mov	r7, r2
 8000604:	2e00      	cmp	r6, #0
 8000606:	d0e2      	beq.n	80005ce <__udivmoddi4+0xa2>
 8000608:	e9c6 4700 	strd	r4, r7, [r6]
 800060c:	e7df      	b.n	80005ce <__udivmoddi4+0xa2>
 800060e:	b902      	cbnz	r2, 8000612 <__udivmoddi4+0xe6>
 8000610:	deff      	udf	#255	; 0xff
 8000612:	fab2 f382 	clz	r3, r2
 8000616:	2b00      	cmp	r3, #0
 8000618:	f040 8090 	bne.w	800073c <__udivmoddi4+0x210>
 800061c:	1a8a      	subs	r2, r1, r2
 800061e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000622:	fa1f fe8c 	uxth.w	lr, ip
 8000626:	2101      	movs	r1, #1
 8000628:	fbb2 f5f7 	udiv	r5, r2, r7
 800062c:	fb07 2015 	mls	r0, r7, r5, r2
 8000630:	0c22      	lsrs	r2, r4, #16
 8000632:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000636:	fb0e f005 	mul.w	r0, lr, r5
 800063a:	4290      	cmp	r0, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x124>
 800063e:	eb1c 0202 	adds.w	r2, ip, r2
 8000642:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000646:	d202      	bcs.n	800064e <__udivmoddi4+0x122>
 8000648:	4290      	cmp	r0, r2
 800064a:	f200 80cb 	bhi.w	80007e4 <__udivmoddi4+0x2b8>
 800064e:	4645      	mov	r5, r8
 8000650:	1a12      	subs	r2, r2, r0
 8000652:	b2a4      	uxth	r4, r4
 8000654:	fbb2 f0f7 	udiv	r0, r2, r7
 8000658:	fb07 2210 	mls	r2, r7, r0, r2
 800065c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000660:	fb0e fe00 	mul.w	lr, lr, r0
 8000664:	45a6      	cmp	lr, r4
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x14e>
 8000668:	eb1c 0404 	adds.w	r4, ip, r4
 800066c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000670:	d202      	bcs.n	8000678 <__udivmoddi4+0x14c>
 8000672:	45a6      	cmp	lr, r4
 8000674:	f200 80bb 	bhi.w	80007ee <__udivmoddi4+0x2c2>
 8000678:	4610      	mov	r0, r2
 800067a:	eba4 040e 	sub.w	r4, r4, lr
 800067e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000682:	e79f      	b.n	80005c4 <__udivmoddi4+0x98>
 8000684:	f1c1 0720 	rsb	r7, r1, #32
 8000688:	408b      	lsls	r3, r1
 800068a:	fa22 fc07 	lsr.w	ip, r2, r7
 800068e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000692:	fa05 f401 	lsl.w	r4, r5, r1
 8000696:	fa20 f307 	lsr.w	r3, r0, r7
 800069a:	40fd      	lsrs	r5, r7
 800069c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006a0:	4323      	orrs	r3, r4
 80006a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80006a6:	fa1f fe8c 	uxth.w	lr, ip
 80006aa:	fb09 5518 	mls	r5, r9, r8, r5
 80006ae:	0c1c      	lsrs	r4, r3, #16
 80006b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80006b4:	fb08 f50e 	mul.w	r5, r8, lr
 80006b8:	42a5      	cmp	r5, r4
 80006ba:	fa02 f201 	lsl.w	r2, r2, r1
 80006be:	fa00 f001 	lsl.w	r0, r0, r1
 80006c2:	d90b      	bls.n	80006dc <__udivmoddi4+0x1b0>
 80006c4:	eb1c 0404 	adds.w	r4, ip, r4
 80006c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80006cc:	f080 8088 	bcs.w	80007e0 <__udivmoddi4+0x2b4>
 80006d0:	42a5      	cmp	r5, r4
 80006d2:	f240 8085 	bls.w	80007e0 <__udivmoddi4+0x2b4>
 80006d6:	f1a8 0802 	sub.w	r8, r8, #2
 80006da:	4464      	add	r4, ip
 80006dc:	1b64      	subs	r4, r4, r5
 80006de:	b29d      	uxth	r5, r3
 80006e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80006e4:	fb09 4413 	mls	r4, r9, r3, r4
 80006e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80006ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80006f0:	45a6      	cmp	lr, r4
 80006f2:	d908      	bls.n	8000706 <__udivmoddi4+0x1da>
 80006f4:	eb1c 0404 	adds.w	r4, ip, r4
 80006f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80006fc:	d26c      	bcs.n	80007d8 <__udivmoddi4+0x2ac>
 80006fe:	45a6      	cmp	lr, r4
 8000700:	d96a      	bls.n	80007d8 <__udivmoddi4+0x2ac>
 8000702:	3b02      	subs	r3, #2
 8000704:	4464      	add	r4, ip
 8000706:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800070a:	fba3 9502 	umull	r9, r5, r3, r2
 800070e:	eba4 040e 	sub.w	r4, r4, lr
 8000712:	42ac      	cmp	r4, r5
 8000714:	46c8      	mov	r8, r9
 8000716:	46ae      	mov	lr, r5
 8000718:	d356      	bcc.n	80007c8 <__udivmoddi4+0x29c>
 800071a:	d053      	beq.n	80007c4 <__udivmoddi4+0x298>
 800071c:	b156      	cbz	r6, 8000734 <__udivmoddi4+0x208>
 800071e:	ebb0 0208 	subs.w	r2, r0, r8
 8000722:	eb64 040e 	sbc.w	r4, r4, lr
 8000726:	fa04 f707 	lsl.w	r7, r4, r7
 800072a:	40ca      	lsrs	r2, r1
 800072c:	40cc      	lsrs	r4, r1
 800072e:	4317      	orrs	r7, r2
 8000730:	e9c6 7400 	strd	r7, r4, [r6]
 8000734:	4618      	mov	r0, r3
 8000736:	2100      	movs	r1, #0
 8000738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073c:	f1c3 0120 	rsb	r1, r3, #32
 8000740:	fa02 fc03 	lsl.w	ip, r2, r3
 8000744:	fa20 f201 	lsr.w	r2, r0, r1
 8000748:	fa25 f101 	lsr.w	r1, r5, r1
 800074c:	409d      	lsls	r5, r3
 800074e:	432a      	orrs	r2, r5
 8000750:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000754:	fa1f fe8c 	uxth.w	lr, ip
 8000758:	fbb1 f0f7 	udiv	r0, r1, r7
 800075c:	fb07 1510 	mls	r5, r7, r0, r1
 8000760:	0c11      	lsrs	r1, r2, #16
 8000762:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000766:	fb00 f50e 	mul.w	r5, r0, lr
 800076a:	428d      	cmp	r5, r1
 800076c:	fa04 f403 	lsl.w	r4, r4, r3
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x258>
 8000772:	eb1c 0101 	adds.w	r1, ip, r1
 8000776:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800077a:	d22f      	bcs.n	80007dc <__udivmoddi4+0x2b0>
 800077c:	428d      	cmp	r5, r1
 800077e:	d92d      	bls.n	80007dc <__udivmoddi4+0x2b0>
 8000780:	3802      	subs	r0, #2
 8000782:	4461      	add	r1, ip
 8000784:	1b49      	subs	r1, r1, r5
 8000786:	b292      	uxth	r2, r2
 8000788:	fbb1 f5f7 	udiv	r5, r1, r7
 800078c:	fb07 1115 	mls	r1, r7, r5, r1
 8000790:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000794:	fb05 f10e 	mul.w	r1, r5, lr
 8000798:	4291      	cmp	r1, r2
 800079a:	d908      	bls.n	80007ae <__udivmoddi4+0x282>
 800079c:	eb1c 0202 	adds.w	r2, ip, r2
 80007a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80007a4:	d216      	bcs.n	80007d4 <__udivmoddi4+0x2a8>
 80007a6:	4291      	cmp	r1, r2
 80007a8:	d914      	bls.n	80007d4 <__udivmoddi4+0x2a8>
 80007aa:	3d02      	subs	r5, #2
 80007ac:	4462      	add	r2, ip
 80007ae:	1a52      	subs	r2, r2, r1
 80007b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80007b4:	e738      	b.n	8000628 <__udivmoddi4+0xfc>
 80007b6:	4631      	mov	r1, r6
 80007b8:	4630      	mov	r0, r6
 80007ba:	e708      	b.n	80005ce <__udivmoddi4+0xa2>
 80007bc:	4639      	mov	r1, r7
 80007be:	e6e6      	b.n	800058e <__udivmoddi4+0x62>
 80007c0:	4610      	mov	r0, r2
 80007c2:	e6fb      	b.n	80005bc <__udivmoddi4+0x90>
 80007c4:	4548      	cmp	r0, r9
 80007c6:	d2a9      	bcs.n	800071c <__udivmoddi4+0x1f0>
 80007c8:	ebb9 0802 	subs.w	r8, r9, r2
 80007cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80007d0:	3b01      	subs	r3, #1
 80007d2:	e7a3      	b.n	800071c <__udivmoddi4+0x1f0>
 80007d4:	4645      	mov	r5, r8
 80007d6:	e7ea      	b.n	80007ae <__udivmoddi4+0x282>
 80007d8:	462b      	mov	r3, r5
 80007da:	e794      	b.n	8000706 <__udivmoddi4+0x1da>
 80007dc:	4640      	mov	r0, r8
 80007de:	e7d1      	b.n	8000784 <__udivmoddi4+0x258>
 80007e0:	46d0      	mov	r8, sl
 80007e2:	e77b      	b.n	80006dc <__udivmoddi4+0x1b0>
 80007e4:	3d02      	subs	r5, #2
 80007e6:	4462      	add	r2, ip
 80007e8:	e732      	b.n	8000650 <__udivmoddi4+0x124>
 80007ea:	4608      	mov	r0, r1
 80007ec:	e70a      	b.n	8000604 <__udivmoddi4+0xd8>
 80007ee:	4464      	add	r4, ip
 80007f0:	3802      	subs	r0, #2
 80007f2:	e742      	b.n	800067a <__udivmoddi4+0x14e>

080007f4 <__aeabi_idiv0>:
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 80007f8:	b480      	push	{r7}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 8000804:	4b24      	ldr	r3, [pc, #144]	; (8000898 <PushTx8Bytes+0xa0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a24      	ldr	r2, [pc, #144]	; (800089c <PushTx8Bytes+0xa4>)
 800080a:	011b      	lsls	r3, r3, #4
 800080c:	4413      	add	r3, r2
 800080e:	3304      	adds	r3, #4
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000814:	4b20      	ldr	r3, [pc, #128]	; (8000898 <PushTx8Bytes+0xa0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a20      	ldr	r2, [pc, #128]	; (800089c <PushTx8Bytes+0xa4>)
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	4413      	add	r3, r2
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 8000822:	2300      	movs	r3, #0
 8000824:	75fb      	strb	r3, [r7, #23]
 8000826:	e010      	b.n	800084a <PushTx8Bytes+0x52>
 8000828:	7dfb      	ldrb	r3, [r7, #23]
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	18d1      	adds	r1, r2, r3
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <PushTx8Bytes+0xa0>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	7dfb      	ldrb	r3, [r7, #23]
 8000834:	7808      	ldrb	r0, [r1, #0]
 8000836:	4919      	ldr	r1, [pc, #100]	; (800089c <PushTx8Bytes+0xa4>)
 8000838:	0112      	lsls	r2, r2, #4
 800083a:	440a      	add	r2, r1
 800083c:	4413      	add	r3, r2
 800083e:	3308      	adds	r3, #8
 8000840:	4602      	mov	r2, r0
 8000842:	701a      	strb	r2, [r3, #0]
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	3301      	adds	r3, #1
 8000848:	75fb      	strb	r3, [r7, #23]
 800084a:	7dfb      	ldrb	r3, [r7, #23]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	429a      	cmp	r2, r3
 8000850:	d8ea      	bhi.n	8000828 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <PushTx8Bytes+0xa8>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d106      	bne.n	8000868 <PushTx8Bytes+0x70>
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <PushTx8Bytes+0xac>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000864:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <PushTx8Bytes+0xac>)
 8000866:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <PushTx8Bytes+0xa0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000872:	4a09      	ldr	r2, [pc, #36]	; (8000898 <PushTx8Bytes+0xa0>)
 8000874:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <PushTx8Bytes+0xa0>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <PushTx8Bytes+0xac>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	d102      	bne.n	8000888 <PushTx8Bytes+0x90>
		isfull = 1;
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <PushTx8Bytes+0xa8>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	371c      	adds	r7, #28
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	200025a4 	.word	0x200025a4
 800089c:	200005a0 	.word	0x200005a0
 80008a0:	200025a8 	.word	0x200025a8
 80008a4:	200025a0 	.word	0x200025a0

080008a8 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(CAN_HandleTypeDef* phcan){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 80008b4:	2304      	movs	r3, #4
 80008b6:	617b      	str	r3, [r7, #20]
	txHeader.TransmitGlobalTime = DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f887 3020 	strb.w	r3, [r7, #32]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 80008be:	e039      	b.n	8000934 <PopSendTx8Bytes+0x8c>
		if (isfull == 0 && readpoint == writepoint)break;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <PopSendTx8Bytes+0xa8>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d105      	bne.n	80008d4 <PopSendTx8Bytes+0x2c>
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <PopSendTx8Bytes+0xac>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b22      	ldr	r3, [pc, #136]	; (8000958 <PopSendTx8Bytes+0xb0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d036      	beq.n	8000942 <PopSendTx8Bytes+0x9a>

		txHeader.DLC = buffer[readpoint].DLC;
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <PopSendTx8Bytes+0xac>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a20      	ldr	r2, [pc, #128]	; (800095c <PopSendTx8Bytes+0xb4>)
 80008da:	011b      	lsls	r3, r3, #4
 80008dc:	4413      	add	r3, r2
 80008de:	3304      	adds	r3, #4
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	61fb      	str	r3, [r7, #28]
		txHeader.ExtId = buffer[readpoint].ExtId;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <PopSendTx8Bytes+0xac>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1c      	ldr	r2, [pc, #112]	; (800095c <PopSendTx8Bytes+0xb4>)
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	4413      	add	r3, r2
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	613b      	str	r3, [r7, #16]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <PopSendTx8Bytes+0xac>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	011b      	lsls	r3, r3, #4
 80008f8:	3308      	adds	r3, #8
 80008fa:	4a18      	ldr	r2, [pc, #96]	; (800095c <PopSendTx8Bytes+0xb4>)
 80008fc:	441a      	add	r2, r3
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	f107 010c 	add.w	r1, r7, #12
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f002 fedc 	bl	80036c4 <HAL_CAN_AddTxMessage>
 800090c:	4603      	mov	r3, r0
 800090e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (ret != HAL_OK)return ret;
 8000912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <PopSendTx8Bytes+0x78>
 800091a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800091e:	e012      	b.n	8000946 <PopSendTx8Bytes+0x9e>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <PopSendTx8Bytes+0xac>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <PopSendTx8Bytes+0xac>)
 800092c:	6013      	str	r3, [r2, #0]
		isfull = 0;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <PopSendTx8Bytes+0xa8>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f002 ff95 	bl	8003864 <HAL_CAN_GetTxMailboxesFreeLevel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1bf      	bne.n	80008c0 <PopSendTx8Bytes+0x18>
 8000940:	e000      	b.n	8000944 <PopSendTx8Bytes+0x9c>
		if (isfull == 0 && readpoint == writepoint)break;
 8000942:	bf00      	nop
	}

	return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200025a8 	.word	0x200025a8
 8000954:	200025a0 	.word	0x200025a0
 8000958:	200025a4 	.word	0x200025a4
 800095c:	200005a0 	.word	0x200005a0

08000960 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>:

void CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(CAN_HandleTypeDef *phcan){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	if(phcan != _canlib_phcan)return;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x28>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	429a      	cmp	r2, r3
 8000970:	d105      	bne.n	800097e <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x1e>
    PopSendTx8Bytes(_canlib_phcan);
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x28>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff96 	bl	80008a8 <PopSendTx8Bytes>
 800097c:	e000      	b.n	8000980 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled+0x20>
	if(phcan != _canlib_phcan)return;
 800097e:	bf00      	nop
}
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200002cc 	.word	0x200002cc

0800098c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>:

void CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(CAN_HandleTypeDef *phcan){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    if(phcan != _canlib_phcan)return;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x28>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	429a      	cmp	r2, r3
 800099c:	d105      	bne.n	80009aa <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x1e>
	PopSendTx8Bytes(_canlib_phcan);
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x28>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff80 	bl	80008a8 <PopSendTx8Bytes>
 80009a8:	e000      	b.n	80009ac <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled+0x20>
    if(phcan != _canlib_phcan)return;
 80009aa:	bf00      	nop
}
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200002cc 	.word	0x200002cc

080009b8 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 80009b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80009bc:	b08e      	sub	sp, #56	; 0x38
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6039      	str	r1, [r7, #0]
//	if(phcan != _canlib_phcan)return;
    CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(_canlib_phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 80009c4:	4b74      	ldr	r3, [pc, #464]	; (8000b98 <WhenCANRxFifo0MsgPending+0x1e0>)
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	f107 0218 	add.w	r2, r7, #24
 80009d0:	2100      	movs	r1, #0
 80009d2:	f002 ff7c 	bl	80038ce <HAL_CAN_GetRxMessage>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d004      	beq.n	80009e6 <WhenCANRxFifo0MsgPending+0x2e>
		// Reception Error
		printf("GetRxMessage error\n\r");
 80009dc:	486f      	ldr	r0, [pc, #444]	; (8000b9c <WhenCANRxFifo0MsgPending+0x1e4>)
 80009de:	f00f fddb 	bl	8010598 <iprintf>
		Error_Handler();
 80009e2:	f002 f80d 	bl	8002a00 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	2200      	movs	r2, #0
 80009ea:	4698      	mov	r8, r3
 80009ec:	4691      	mov	r9, r2
 80009ee:	4640      	mov	r0, r8
 80009f0:	4649      	mov	r1, r9
 80009f2:	f000 fd41 	bl	8001478 <Extract_CAN_Device>
 80009f6:	4603      	mov	r3, r0
 80009f8:	461a      	mov	r2, r3
 80009fa:	733a      	strb	r2, [r7, #12]
 80009fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000a00:	737a      	strb	r2, [r7, #13]
 8000a02:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000a06:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	461c      	mov	r4, r3
 8000a0e:	4615      	mov	r5, r2
 8000a10:	4620      	mov	r0, r4
 8000a12:	4629      	mov	r1, r5
 8000a14:	f000 fd7c 	bl	8001510 <Extract_CAN_CMD>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000a1e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d139      	bne.n	8000a9a <WhenCANRxFifo0MsgPending+0xe2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a2c:	e013      	b.n	8000a56 <WhenCANRxFifo0MsgPending+0x9e>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000a2e:	7b3b      	ldrb	r3, [r7, #12]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a36:	495a      	ldr	r1, [pc, #360]	; (8000ba0 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000a38:	4603      	mov	r3, r0
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	1a1b      	subs	r3, r3, r0
 8000a3e:	440b      	add	r3, r1
 8000a40:	4413      	add	r3, r2
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	7c3b      	ldrb	r3, [r7, #16]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	f000 80a0 	beq.w	8000b8c <WhenCANRxFifo0MsgPending+0x1d4>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a50:	3301      	adds	r3, #1
 8000a52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000a56:	7b3b      	ldrb	r3, [r7, #12]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b52      	ldr	r3, [pc, #328]	; (8000ba4 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000a5c:	5c9b      	ldrb	r3, [r3, r2]
 8000a5e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d3e3      	bcc.n	8000a2e <WhenCANRxFifo0MsgPending+0x76>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000a66:	7b3b      	ldrb	r3, [r7, #12]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	7b3b      	ldrb	r3, [r7, #12]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ba4 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000a70:	5c9b      	ldrb	r3, [r3, r2]
 8000a72:	461c      	mov	r4, r3
 8000a74:	7c38      	ldrb	r0, [r7, #16]
 8000a76:	4a4a      	ldr	r2, [pc, #296]	; (8000ba0 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000a78:	460b      	mov	r3, r1
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	1a5b      	subs	r3, r3, r1
 8000a7e:	4413      	add	r3, r2
 8000a80:	4423      	add	r3, r4
 8000a82:	4602      	mov	r2, r0
 8000a84:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000a86:	7b3b      	ldrb	r3, [r7, #12]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b46      	ldr	r3, [pc, #280]	; (8000ba4 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000a8c:	5c9b      	ldrb	r3, [r3, r2]
 8000a8e:	7b3a      	ldrb	r2, [r7, #12]
 8000a90:	3301      	adds	r3, #1
 8000a92:	b2d9      	uxtb	r1, r3
 8000a94:	4b43      	ldr	r3, [pc, #268]	; (8000ba4 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000a96:	5499      	strb	r1, [r3, r2]
 8000a98:	e04a      	b.n	8000b30 <WhenCANRxFifo0MsgPending+0x178>
	}else if(extracted_cmd == FB_CMD){
 8000a9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d146      	bne.n	8000b30 <WhenCANRxFifo0MsgPending+0x178>
		if (can_device.node_type == NODE_MCMD1){
 8000aa2:	7b3b      	ldrb	r3, [r7, #12]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d10d      	bne.n	8000ac4 <WhenCANRxFifo0MsgPending+0x10c>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 8000aa8:	7b7b      	ldrb	r3, [r7, #13]
 8000aaa:	7bba      	ldrb	r2, [r7, #14]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4a3d      	ldr	r2, [pc, #244]	; (8000ba8 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000ab4:	4413      	add	r3, r2
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	cb03      	ldmia	r3!, {r0, r1}
 8000abe:	6010      	str	r0, [r2, #0]
 8000ac0:	6051      	str	r1, [r2, #4]
 8000ac2:	e035      	b.n	8000b30 <WhenCANRxFifo0MsgPending+0x178>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000ac4:	7b3b      	ldrb	r3, [r7, #12]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d10d      	bne.n	8000ae6 <WhenCANRxFifo0MsgPending+0x12e>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000aca:	7b7b      	ldrb	r3, [r7, #13]
 8000acc:	7bba      	ldrb	r2, [r7, #14]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	4413      	add	r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	4a35      	ldr	r2, [pc, #212]	; (8000bac <WhenCANRxFifo0MsgPending+0x1f4>)
 8000ad6:	4413      	add	r3, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	cb03      	ldmia	r3!, {r0, r1}
 8000ae0:	6010      	str	r0, [r2, #0]
 8000ae2:	6051      	str	r1, [r2, #4]
 8000ae4:	e024      	b.n	8000b30 <WhenCANRxFifo0MsgPending+0x178>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000ae6:	7b3b      	ldrb	r3, [r7, #12]
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d10d      	bne.n	8000b08 <WhenCANRxFifo0MsgPending+0x150>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000aec:	7b7b      	ldrb	r3, [r7, #13]
 8000aee:	7bba      	ldrb	r2, [r7, #14]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	4413      	add	r3, r2
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	4a2e      	ldr	r2, [pc, #184]	; (8000bb0 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000af8:	4413      	add	r3, r2
 8000afa:	461a      	mov	r2, r3
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	cb03      	ldmia	r3!, {r0, r1}
 8000b02:	6010      	str	r0, [r2, #0]
 8000b04:	6051      	str	r1, [r2, #4]
 8000b06:	e013      	b.n	8000b30 <WhenCANRxFifo0MsgPending+0x178>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000b08:	7b3b      	ldrb	r3, [r7, #12]
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d10d      	bne.n	8000b2a <WhenCANRxFifo0MsgPending+0x172>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000b0e:	7b7b      	ldrb	r3, [r7, #13]
 8000b10:	7bba      	ldrb	r2, [r7, #14]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	4a26      	ldr	r2, [pc, #152]	; (8000bb4 <WhenCANRxFifo0MsgPending+0x1fc>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	cb03      	ldmia	r3!, {r0, r1}
 8000b24:	6010      	str	r0, [r2, #0]
 8000b26:	6051      	str	r1, [r2, #4]
 8000b28:	e002      	b.n	8000b30 <WhenCANRxFifo0MsgPending+0x178>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000b2a:	4823      	ldr	r0, [pc, #140]	; (8000bb8 <WhenCANRxFifo0MsgPending+0x200>)
 8000b2c:	f00f fd34 	bl	8010598 <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b32:	785a      	ldrb	r2, [r3, #1]
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d128      	bne.n	8000b8e <WhenCANRxFifo0MsgPending+0x1d6>
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b3e:	789a      	ldrb	r2, [r3, #2]
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	785b      	ldrb	r3, [r3, #1]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d122      	bne.n	8000b8e <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b4a:	78da      	ldrb	r2, [r3, #3]
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d11c      	bne.n	8000b8e <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b56:	791a      	ldrb	r2, [r3, #4]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	78db      	ldrb	r3, [r3, #3]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d116      	bne.n	8000b8e <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b62:	795a      	ldrb	r2, [r3, #5]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d110      	bne.n	8000b8e <WhenCANRxFifo0MsgPending+0x1d6>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b6e:	799a      	ldrb	r2, [r3, #6]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	795b      	ldrb	r3, [r3, #5]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d10a      	bne.n	8000b8e <WhenCANRxFifo0MsgPending+0x1d6>
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000b7a:	7a1a      	ldrb	r2, [r3, #8]
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	799b      	ldrb	r3, [r3, #6]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d104      	bne.n	8000b8e <WhenCANRxFifo0MsgPending+0x1d6>
		all_node_detected = 1;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <WhenCANRxFifo0MsgPending+0x204>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	e000      	b.n	8000b8e <WhenCANRxFifo0MsgPending+0x1d6>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000b8c:	bf00      	nop
	}
}
 8000b8e:	3738      	adds	r7, #56	; 0x38
 8000b90:	46bd      	mov	sp, r7
 8000b92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000b96:	bf00      	nop
 8000b98:	200002cc 	.word	0x200002cc
 8000b9c:	08011380 	.word	0x08011380
 8000ba0:	200002e0 	.word	0x200002e0
 8000ba4:	200002d4 	.word	0x200002d4
 8000ba8:	20000320 	.word	0x20000320
 8000bac:	200003c0 	.word	0x200003c0
 8000bb0:	20000460 	.word	0x20000460
 8000bb4:	20000500 	.word	0x20000500
 8000bb8:	08011398 	.word	0x08011398
 8000bbc:	200002d0 	.word	0x200002d0

08000bc0 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 8000bdc:	2300      	movs	r3, #0
 8000bde:	77fb      	strb	r3, [r7, #31]
 8000be0:	e015      	b.n	8000c0e <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000be2:	7ffb      	ldrb	r3, [r7, #31]
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	461a      	mov	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4413      	add	r3, r2
 8000bec:	2208      	movs	r2, #8
 8000bee:	4619      	mov	r1, r3
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f7ff fe01 	bl	80007f8 <PushTx8Bytes>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000bfa:	7cfb      	ldrb	r3, [r7, #19]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <SendBytes+0x48>
			Error_Handler();
 8000c00:	f001 fefe 	bl	8002a00 <Error_Handler>
			return ret;
 8000c04:	7cfb      	ldrb	r3, [r7, #19]
 8000c06:	e02a      	b.n	8000c5e <SendBytes+0x9e>
	for (uint8_t i = 0; i < quotient; i++){
 8000c08:	7ffb      	ldrb	r3, [r7, #31]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	77fb      	strb	r3, [r7, #31]
 8000c0e:	7ffb      	ldrb	r3, [r7, #31]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d8e5      	bhi.n	8000be2 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d011      	beq.n	8000c40 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	68ba      	ldr	r2, [r7, #8]
 8000c22:	4413      	add	r3, r2
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	4619      	mov	r1, r3
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff fde5 	bl	80007f8 <PushTx8Bytes>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000c32:	7cfb      	ldrb	r3, [r7, #19]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <SendBytes+0x80>
			Error_Handler();
 8000c38:	f001 fee2 	bl	8002a00 <Error_Handler>
			return ret;
 8000c3c:	7cfb      	ldrb	r3, [r7, #19]
 8000c3e:	e00e      	b.n	8000c5e <SendBytes+0x9e>
		}
	}

	ret = PopSendTx8Bytes(_canlib_phcan);
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <SendBytes+0xa8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fe2f 	bl	80008a8 <PopSendTx8Bytes>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 8000c4e:	7cfb      	ldrb	r3, [r7, #19]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <SendBytes+0x9c>
		Error_Handler();
 8000c54:	f001 fed4 	bl	8002a00 <Error_Handler>
		return ret;
 8000c58:	7cfb      	ldrb	r3, [r7, #19]
 8000c5a:	e000      	b.n	8000c5e <SendBytes+0x9e>
	}

	return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3720      	adds	r7, #32
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200002cc 	.word	0x200002cc

08000c6c <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08e      	sub	sp, #56	; 0x38
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
    _canlib_phcan = _hcan;
 8000c74:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <CAN_SystemInit+0x30>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <CAN_SystemInit+0x34>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c86:	e029      	b.n	8000cdc <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000c88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <CAN_SystemInit+0x38>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000c92:	2300      	movs	r3, #0
 8000c94:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000c98:	e017      	b.n	8000cca <CAN_SystemInit+0x5e>
 8000c9a:	bf00      	nop
 8000c9c:	200002cc 	.word	0x200002cc
 8000ca0:	200002d0 	.word	0x200002d0
 8000ca4:	200002d4 	.word	0x200002d4
			node_id_list[type][i] = 0xff;
 8000ca8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000cac:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000cb0:	48d7      	ldr	r0, [pc, #860]	; (8001010 <CAN_SystemInit+0x3a4>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	4403      	add	r3, r0
 8000cba:	440b      	add	r3, r1
 8000cbc:	22ff      	movs	r2, #255	; 0xff
 8000cbe:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000cc0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000cca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d9ea      	bls.n	8000ca8 <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000cd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000cdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d9d1      	bls.n	8000c88 <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000cf4:	230e      	movs	r3, #14
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
    // CAN2をつかうならSlaveStartFilterBank以上の値をFilterBankに設定する必要がある
	sFilterConfig.FilterBank = 15;
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2001      	movs	r0, #1
 8000d04:	f000 fb8b 	bl	800141e <Make_CAN_ID>
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	0b42      	lsrs	r2, r0, #13
 8000d12:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d16:	0b4b      	lsrs	r3, r1, #13
 8000d18:	4613      	mov	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000d1c:	231f      	movs	r3, #31
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2001      	movs	r0, #1
 8000d24:	f000 fb7b 	bl	800141e <Make_CAN_ID>
 8000d28:	f04f 0200 	mov.w	r2, #0
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	0b42      	lsrs	r2, r0, #13
 8000d32:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d36:	0b4b      	lsrs	r3, r1, #13
 8000d38:	4613      	mov	r3, r2
 8000d3a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2001      	movs	r0, #1
 8000d44:	f000 fb6b 	bl	800141e <Make_CAN_ID>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	00da      	lsls	r2, r3, #3
 8000d50:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d54:	4013      	ands	r3, r2
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000d5c:	231f      	movs	r3, #31
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2001      	movs	r0, #1
 8000d64:	f000 fb5b 	bl	800141e <Make_CAN_ID>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	00da      	lsls	r2, r3, #3
 8000d70:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000d74:	4013      	ands	r3, r2
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000d7c:	4ba5      	ldr	r3, [pc, #660]	; (8001014 <CAN_SystemInit+0x3a8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f107 020c 	add.w	r2, r7, #12
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 fb6c 	bl	8003464 <HAL_CAN_ConfigFilter>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000d92:	f001 fe35 	bl	8002a00 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 16;
 8000d96:	2310      	movs	r3, #16
 8000d98:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2002      	movs	r0, #2
 8000da2:	f000 fb3c 	bl	800141e <Make_CAN_ID>
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	f04f 0300 	mov.w	r3, #0
 8000dae:	0b42      	lsrs	r2, r0, #13
 8000db0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000db4:	0b4b      	lsrs	r3, r1, #13
 8000db6:	4613      	mov	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000dba:	231f      	movs	r3, #31
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f000 fb2c 	bl	800141e <Make_CAN_ID>
 8000dc6:	f04f 0200 	mov.w	r2, #0
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	0b42      	lsrs	r2, r0, #13
 8000dd0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dd4:	0b4b      	lsrs	r3, r1, #13
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000dda:	2300      	movs	r3, #0
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2002      	movs	r0, #2
 8000de2:	f000 fb1c 	bl	800141e <Make_CAN_ID>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	4613      	mov	r3, r2
 8000dec:	00da      	lsls	r2, r3, #3
 8000dee:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000df2:	4013      	ands	r3, r2
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000dfa:	231f      	movs	r3, #31
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2002      	movs	r0, #2
 8000e02:	f000 fb0c 	bl	800141e <Make_CAN_ID>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	00da      	lsls	r2, r3, #3
 8000e0e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e12:	4013      	ands	r3, r2
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000e1a:	4b7e      	ldr	r3, [pc, #504]	; (8001014 <CAN_SystemInit+0x3a8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f107 020c 	add.w	r2, r7, #12
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fb1d 	bl	8003464 <HAL_CAN_ConfigFilter>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8000e30:	f001 fde6 	bl	8002a00 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 17;
 8000e34:	2311      	movs	r3, #17
 8000e36:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 8000e38:	2300      	movs	r3, #0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f000 faed 	bl	800141e <Make_CAN_ID>
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	0b42      	lsrs	r2, r0, #13
 8000e4e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e52:	0b4b      	lsrs	r3, r1, #13
 8000e54:	4613      	mov	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 8000e58:	231f      	movs	r3, #31
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2003      	movs	r0, #3
 8000e60:	f000 fadd 	bl	800141e <Make_CAN_ID>
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	0b42      	lsrs	r2, r0, #13
 8000e6e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e72:	0b4b      	lsrs	r3, r1, #13
 8000e74:	4613      	mov	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000e78:	2300      	movs	r3, #0
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f000 facd 	bl	800141e <Make_CAN_ID>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4613      	mov	r3, r2
 8000e8a:	00da      	lsls	r2, r3, #3
 8000e8c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e90:	4013      	ands	r3, r2
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000e98:	231f      	movs	r3, #31
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2003      	movs	r0, #3
 8000ea0:	f000 fabd 	bl	800141e <Make_CAN_ID>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	00da      	lsls	r2, r3, #3
 8000eac:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000eb8:	4b56      	ldr	r3, [pc, #344]	; (8001014 <CAN_SystemInit+0x3a8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f107 020c 	add.w	r2, r7, #12
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f002 face 	bl	8003464 <HAL_CAN_ConfigFilter>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8000ece:	f001 fd97 	bl	8002a00 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 18;
 8000ed2:	2312      	movs	r3, #18
 8000ed4:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 fa9e 	bl	800141e <Make_CAN_ID>
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	0b42      	lsrs	r2, r0, #13
 8000eec:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ef0:	0b4b      	lsrs	r3, r1, #13
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 8000ef6:	231f      	movs	r3, #31
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	2000      	movs	r0, #0
 8000efe:	f000 fa8e 	bl	800141e <Make_CAN_ID>
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	0b42      	lsrs	r2, r0, #13
 8000f0c:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f10:	0b4b      	lsrs	r3, r1, #13
 8000f12:	4613      	mov	r3, r2
 8000f14:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000f16:	2301      	movs	r3, #1
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 fa7e 	bl	800141e <Make_CAN_ID>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4613      	mov	r3, r2
 8000f28:	00da      	lsls	r2, r3, #3
 8000f2a:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f2e:	4013      	ands	r3, r2
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000f36:	231f      	movs	r3, #31
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f000 fa6e 	bl	800141e <Make_CAN_ID>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4613      	mov	r3, r2
 8000f48:	00da      	lsls	r2, r3, #3
 8000f4a:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f4e:	4013      	ands	r3, r2
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000f56:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <CAN_SystemInit+0x3a8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f107 020c 	add.w	r2, r7, #12
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 fa7f 	bl	8003464 <HAL_CAN_ConfigFilter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 8000f6c:	f001 fd48 	bl	8002a00 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 19;
 8000f70:	2313      	movs	r3, #19
 8000f72:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 8000f74:	2300      	movs	r3, #0
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2004      	movs	r0, #4
 8000f7c:	f000 fa4f 	bl	800141e <Make_CAN_ID>
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	0b42      	lsrs	r2, r0, #13
 8000f8a:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f8e:	0b4b      	lsrs	r3, r1, #13
 8000f90:	4613      	mov	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 8000f94:	231f      	movs	r3, #31
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2004      	movs	r0, #4
 8000f9c:	f000 fa3f 	bl	800141e <Make_CAN_ID>
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	0b42      	lsrs	r2, r0, #13
 8000faa:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000fae:	0b4b      	lsrs	r3, r1, #13
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2004      	movs	r0, #4
 8000fbc:	f000 fa2f 	bl	800141e <Make_CAN_ID>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	00da      	lsls	r2, r3, #3
 8000fc8:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000fcc:	4013      	ands	r3, r2
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000fd4:	231f      	movs	r3, #31
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2004      	movs	r0, #4
 8000fdc:	f000 fa1f 	bl	800141e <Make_CAN_ID>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00da      	lsls	r2, r3, #3
 8000fe8:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000fec:	4013      	ands	r3, r2
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <CAN_SystemInit+0x3a8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f107 020c 	add.w	r2, r7, #12
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fa30 	bl	8003464 <HAL_CAN_ConfigFilter>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d006      	beq.n	8001018 <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 800100a:	f001 fcf9 	bl	8002a00 <Error_Handler>
 800100e:	e003      	b.n	8001018 <CAN_SystemInit+0x3ac>
 8001010:	200002e0 	.word	0x200002e0
 8001014:	200002cc 	.word	0x200002cc
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 20;
 8001018:	2314      	movs	r3, #20
 800101a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 800101c:	2300      	movs	r3, #0
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2005      	movs	r0, #5
 8001024:	f000 f9fb 	bl	800141e <Make_CAN_ID>
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	f04f 0300 	mov.w	r3, #0
 8001030:	0b42      	lsrs	r2, r0, #13
 8001032:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001036:	0b4b      	lsrs	r3, r1, #13
 8001038:	4613      	mov	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 800103c:	231f      	movs	r3, #31
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2005      	movs	r0, #5
 8001044:	f000 f9eb 	bl	800141e <Make_CAN_ID>
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	0b42      	lsrs	r2, r0, #13
 8001052:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001056:	0b4b      	lsrs	r3, r1, #13
 8001058:	4613      	mov	r3, r2
 800105a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800105c:	2300      	movs	r3, #0
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2005      	movs	r0, #5
 8001064:	f000 f9db 	bl	800141e <Make_CAN_ID>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4613      	mov	r3, r2
 800106e:	00da      	lsls	r2, r3, #3
 8001070:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001074:	4013      	ands	r3, r2
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800107c:	231f      	movs	r3, #31
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2005      	movs	r0, #5
 8001084:	f000 f9cb 	bl	800141e <Make_CAN_ID>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4613      	mov	r3, r2
 800108e:	00da      	lsls	r2, r3, #3
 8001090:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001094:	4013      	ands	r3, r2
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 800109c:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <CAN_SystemInit+0x544>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f107 020c 	add.w	r2, r7, #12
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 f9dc 	bl	8003464 <HAL_CAN_ConfigFilter>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 80010b2:	f001 fca5 	bl	8002a00 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 21;
 80010b6:	2315      	movs	r3, #21
 80010b8:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 80010ba:	2300      	movs	r3, #0
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	2006      	movs	r0, #6
 80010c2:	f000 f9ac 	bl	800141e <Make_CAN_ID>
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f04f 0300 	mov.w	r3, #0
 80010ce:	0b42      	lsrs	r2, r0, #13
 80010d0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80010d4:	0b4b      	lsrs	r3, r1, #13
 80010d6:	4613      	mov	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 80010da:	231f      	movs	r3, #31
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	2006      	movs	r0, #6
 80010e2:	f000 f99c 	bl	800141e <Make_CAN_ID>
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f04f 0300 	mov.w	r3, #0
 80010ee:	0b42      	lsrs	r2, r0, #13
 80010f0:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80010f4:	0b4b      	lsrs	r3, r1, #13
 80010f6:	4613      	mov	r3, r2
 80010f8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80010fa:	2300      	movs	r3, #0
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2006      	movs	r0, #6
 8001102:	f000 f98c 	bl	800141e <Make_CAN_ID>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4613      	mov	r3, r2
 800110c:	00da      	lsls	r2, r3, #3
 800110e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001112:	4013      	ands	r3, r2
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800111a:	231f      	movs	r3, #31
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2006      	movs	r0, #6
 8001122:	f000 f97c 	bl	800141e <Make_CAN_ID>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4613      	mov	r3, r2
 800112c:	00da      	lsls	r2, r3, #3
 800112e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001132:	4013      	ands	r3, r2
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(_canlib_phcan, &sFilterConfig) != HAL_OK){
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <CAN_SystemInit+0x544>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f107 020c 	add.w	r2, r7, #12
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f002 f98d 	bl	8003464 <HAL_CAN_ConfigFilter>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8001150:	f001 fc56 	bl	8002a00 <Error_Handler>
	}

	if (HAL_CAN_Start(_canlib_phcan) != HAL_OK){
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <CAN_SystemInit+0x544>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fa6f 	bl	800363c <HAL_CAN_Start>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <CAN_SystemInit+0x548>)
 8001166:	f00f fa7d 	bl	8010664 <puts>
		Error_Handler();
 800116a:	f001 fc49 	bl	8002a00 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(_canlib_phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <CAN_SystemInit+0x544>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2102      	movs	r1, #2
 8001174:	4618      	mov	r0, r3
 8001176:	f002 fcbc 	bl	8003af2 <HAL_CAN_ActivateNotification>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d004      	beq.n	800118a <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <CAN_SystemInit+0x54c>)
 8001182:	f00f fa09 	bl	8010598 <iprintf>
		Error_Handler();
 8001186:	f001 fc3b 	bl	8002a00 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(_canlib_phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <CAN_SystemInit+0x544>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2101      	movs	r1, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fcae 	bl	8003af2 <HAL_CAN_ActivateNotification>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d004      	beq.n	80011a6 <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 800119c:	4806      	ldr	r0, [pc, #24]	; (80011b8 <CAN_SystemInit+0x54c>)
 800119e:	f00f f9fb 	bl	8010598 <iprintf>
		Error_Handler();
 80011a2:	f001 fc2d 	bl	8002a00 <Error_Handler>
	}
}
 80011a6:	bf00      	nop
 80011a8:	3738      	adds	r7, #56	; 0x38
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200002cc 	.word	0x200002cc
 80011b4:	080113a0 	.word	0x080113a0
 80011b8:	080113b0 	.word	0x080113b0

080011bc <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	if(num_of->mcmd1 == 0 && num_of->mcmd2 == 0 && num_of->mcmd3 == 0 && num_of->mcmd4 == 0 && num_of->air == 0
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d122      	bne.n	8001212 <CAN_WaitConnect+0x56>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	785b      	ldrb	r3, [r3, #1]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d11e      	bne.n	8001212 <CAN_WaitConnect+0x56>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	789b      	ldrb	r3, [r3, #2]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d11a      	bne.n	8001212 <CAN_WaitConnect+0x56>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	795b      	ldrb	r3, [r3, #5]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d116      	bne.n	8001212 <CAN_WaitConnect+0x56>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	791b      	ldrb	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d112      	bne.n	8001212 <CAN_WaitConnect+0x56>
		&& num_of->servo == 0 && num_of->other == 0){
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	78db      	ldrb	r3, [r3, #3]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10e      	bne.n	8001212 <CAN_WaitConnect+0x56>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	799b      	ldrb	r3, [r3, #6]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10a      	bne.n	8001212 <CAN_WaitConnect+0x56>
		all_node_detected = 1;
 80011fc:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <CAN_WaitConnect+0x17c>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
	}
	while (all_node_detected == 0){
 8001202:	e006      	b.n	8001212 <CAN_WaitConnect+0x56>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 8001204:	484d      	ldr	r0, [pc, #308]	; (800133c <CAN_WaitConnect+0x180>)
 8001206:	f00f f9c7 	bl	8010598 <iprintf>
		HAL_Delay(500);
 800120a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800120e:	f002 f809 	bl	8003224 <HAL_Delay>
	while (all_node_detected == 0){
 8001212:	4b49      	ldr	r3, [pc, #292]	; (8001338 <CAN_WaitConnect+0x17c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f3      	beq.n	8001204 <CAN_WaitConnect+0x48>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e00a      	b.n	8001238 <CAN_WaitConnect+0x7c>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	4a46      	ldr	r2, [pc, #280]	; (8001340 <CAN_WaitConnect+0x184>)
 8001226:	4413      	add	r3, r2
 8001228:	79db      	ldrb	r3, [r3, #7]
 800122a:	4619      	mov	r1, r3
 800122c:	4845      	ldr	r0, [pc, #276]	; (8001344 <CAN_WaitConnect+0x188>)
 800122e:	f00f f9b3 	bl	8010598 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	3301      	adds	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	429a      	cmp	r2, r3
 8001240:	d3ef      	bcc.n	8001222 <CAN_WaitConnect+0x66>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001242:	2300      	movs	r3, #0
 8001244:	73bb      	strb	r3, [r7, #14]
 8001246:	e00a      	b.n	800125e <CAN_WaitConnect+0xa2>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 8001248:	7bbb      	ldrb	r3, [r7, #14]
 800124a:	4a3d      	ldr	r2, [pc, #244]	; (8001340 <CAN_WaitConnect+0x184>)
 800124c:	4413      	add	r3, r2
 800124e:	7b9b      	ldrb	r3, [r3, #14]
 8001250:	4619      	mov	r1, r3
 8001252:	483d      	ldr	r0, [pc, #244]	; (8001348 <CAN_WaitConnect+0x18c>)
 8001254:	f00f f9a0 	bl	8010598 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001258:	7bbb      	ldrb	r3, [r7, #14]
 800125a:	3301      	adds	r3, #1
 800125c:	73bb      	strb	r3, [r7, #14]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	785b      	ldrb	r3, [r3, #1]
 8001262:	7bba      	ldrb	r2, [r7, #14]
 8001264:	429a      	cmp	r2, r3
 8001266:	d3ef      	bcc.n	8001248 <CAN_WaitConnect+0x8c>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8001268:	2300      	movs	r3, #0
 800126a:	737b      	strb	r3, [r7, #13]
 800126c:	e00a      	b.n	8001284 <CAN_WaitConnect+0xc8>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 800126e:	7b7b      	ldrb	r3, [r7, #13]
 8001270:	4a33      	ldr	r2, [pc, #204]	; (8001340 <CAN_WaitConnect+0x184>)
 8001272:	4413      	add	r3, r2
 8001274:	7d5b      	ldrb	r3, [r3, #21]
 8001276:	4619      	mov	r1, r3
 8001278:	4834      	ldr	r0, [pc, #208]	; (800134c <CAN_WaitConnect+0x190>)
 800127a:	f00f f98d 	bl	8010598 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 800127e:	7b7b      	ldrb	r3, [r7, #13]
 8001280:	3301      	adds	r3, #1
 8001282:	737b      	strb	r3, [r7, #13]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	789b      	ldrb	r3, [r3, #2]
 8001288:	7b7a      	ldrb	r2, [r7, #13]
 800128a:	429a      	cmp	r2, r3
 800128c:	d3ef      	bcc.n	800126e <CAN_WaitConnect+0xb2>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 800128e:	2300      	movs	r3, #0
 8001290:	733b      	strb	r3, [r7, #12]
 8001292:	e00b      	b.n	80012ac <CAN_WaitConnect+0xf0>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 8001294:	7b3b      	ldrb	r3, [r7, #12]
 8001296:	4a2a      	ldr	r2, [pc, #168]	; (8001340 <CAN_WaitConnect+0x184>)
 8001298:	4413      	add	r3, r2
 800129a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800129e:	4619      	mov	r1, r3
 80012a0:	482b      	ldr	r0, [pc, #172]	; (8001350 <CAN_WaitConnect+0x194>)
 80012a2:	f00f f979 	bl	8010598 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 80012a6:	7b3b      	ldrb	r3, [r7, #12]
 80012a8:	3301      	adds	r3, #1
 80012aa:	733b      	strb	r3, [r7, #12]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	795b      	ldrb	r3, [r3, #5]
 80012b0:	7b3a      	ldrb	r2, [r7, #12]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d3ee      	bcc.n	8001294 <CAN_WaitConnect+0xd8>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	72fb      	strb	r3, [r7, #11]
 80012ba:	e00a      	b.n	80012d2 <CAN_WaitConnect+0x116>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 80012bc:	7afb      	ldrb	r3, [r7, #11]
 80012be:	4a20      	ldr	r2, [pc, #128]	; (8001340 <CAN_WaitConnect+0x184>)
 80012c0:	4413      	add	r3, r2
 80012c2:	7f1b      	ldrb	r3, [r3, #28]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4823      	ldr	r0, [pc, #140]	; (8001354 <CAN_WaitConnect+0x198>)
 80012c8:	f00f f966 	bl	8010598 <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	3301      	adds	r3, #1
 80012d0:	72fb      	strb	r3, [r7, #11]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	78db      	ldrb	r3, [r3, #3]
 80012d6:	7afa      	ldrb	r2, [r7, #11]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d3ef      	bcc.n	80012bc <CAN_WaitConnect+0x100>
	for (uint8_t i = 0; i < num_of->air; i++)
 80012dc:	2300      	movs	r3, #0
 80012de:	72bb      	strb	r3, [r7, #10]
 80012e0:	e00b      	b.n	80012fa <CAN_WaitConnect+0x13e>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 80012e2:	7abb      	ldrb	r3, [r7, #10]
 80012e4:	4a16      	ldr	r2, [pc, #88]	; (8001340 <CAN_WaitConnect+0x184>)
 80012e6:	4413      	add	r3, r2
 80012e8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80012ec:	4619      	mov	r1, r3
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <CAN_WaitConnect+0x19c>)
 80012f0:	f00f f952 	bl	8010598 <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 80012f4:	7abb      	ldrb	r3, [r7, #10]
 80012f6:	3301      	adds	r3, #1
 80012f8:	72bb      	strb	r3, [r7, #10]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	791b      	ldrb	r3, [r3, #4]
 80012fe:	7aba      	ldrb	r2, [r7, #10]
 8001300:	429a      	cmp	r2, r3
 8001302:	d3ee      	bcc.n	80012e2 <CAN_WaitConnect+0x126>
	for (uint8_t i = 0; i < num_of->other; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	727b      	strb	r3, [r7, #9]
 8001308:	e00b      	b.n	8001322 <CAN_WaitConnect+0x166>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 800130a:	7a7b      	ldrb	r3, [r7, #9]
 800130c:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <CAN_WaitConnect+0x184>)
 800130e:	4413      	add	r3, r2
 8001310:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001314:	4619      	mov	r1, r3
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <CAN_WaitConnect+0x1a0>)
 8001318:	f00f f93e 	bl	8010598 <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 800131c:	7a7b      	ldrb	r3, [r7, #9]
 800131e:	3301      	adds	r3, #1
 8001320:	727b      	strb	r3, [r7, #9]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	799b      	ldrb	r3, [r3, #6]
 8001326:	7a7a      	ldrb	r2, [r7, #9]
 8001328:	429a      	cmp	r2, r3
 800132a:	d3ee      	bcc.n	800130a <CAN_WaitConnect+0x14e>
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200002d0 	.word	0x200002d0
 800133c:	080113d4 	.word	0x080113d4
 8001340:	200002e0 	.word	0x200002e0
 8001344:	080113f4 	.word	0x080113f4
 8001348:	08011404 	.word	0x08011404
 800134c:	08011414 	.word	0x08011414
 8001350:	08011424 	.word	0x08011424
 8001354:	08011434 	.word	0x08011434
 8001358:	08011444 	.word	0x08011444
 800135c:	08011450 	.word	0x08011450

08001360 <AirCylinder_Init>:
 * 異なる関数名を用いて明示的にしてある.
 * また, AirCylinderの基板の方にも, 最初は必ず初期化処理(AIR_CMD_INIT)が来るものとして定義してある.
 */

////AirCylinder
void AirCylinder_Init(CAN_Device *can_device, Air_PortStatus_Typedef param){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 800136c:	2101      	movs	r1, #1
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f82c 	bl	80013cc <Make_CAN_ID_from_CAN_Device>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	1cfb      	adds	r3, r7, #3
 800137c:	2201      	movs	r2, #1
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff fc1e 	bl	8000bc0 <SendBytes>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <AirCylinder_Init+0x2e>
		Error_Handler();
 800138a:	f001 fb39 	bl	8002a00 <Error_Handler>
	}
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <AirCylinder_SendOutput>:

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 80013a2:	2102      	movs	r1, #2
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f811 	bl	80013cc <Make_CAN_ID_from_CAN_Device>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	1cfb      	adds	r3, r7, #3
 80013b2:	2201      	movs	r2, #1
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fc03 	bl	8000bc0 <SendBytes>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 80013c0:	f001 fb1e 	bl	8002a00 <Error_Handler>
	}
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 80013cc:	b4b0      	push	{r4, r5, r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	02db      	lsls	r3, r3, #11
 80013e6:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	789b      	ldrb	r3, [r3, #2]
 80013fa:	015b      	lsls	r3, r3, #5
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	4313      	orrs	r3, r2
 8001408:	17da      	asrs	r2, r3, #31
 800140a:	461c      	mov	r4, r3
 800140c:	4615      	mov	r5, r2
 800140e:	4622      	mov	r2, r4
 8001410:	462b      	mov	r3, r5
}
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bcb0      	pop	{r4, r5, r7}
 800141c:	4770      	bx	lr

0800141e <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 800141e:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4604      	mov	r4, r0
 8001428:	4608      	mov	r0, r1
 800142a:	4611      	mov	r1, r2
 800142c:	461a      	mov	r2, r3
 800142e:	4623      	mov	r3, r4
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	4603      	mov	r3, r0
 8001434:	71bb      	strb	r3, [r7, #6]
 8001436:	460b      	mov	r3, r1
 8001438:	717b      	strb	r3, [r7, #5]
 800143a:	4613      	mov	r3, r2
 800143c:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	02db      	lsls	r3, r3, #11
 8001442:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001446:	79bb      	ldrb	r3, [r7, #6]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800144e:	431a      	orrs	r2, r3
 8001450:	797b      	ldrb	r3, [r7, #5]
 8001452:	015b      	lsls	r3, r3, #5
 8001454:	b2db      	uxtb	r3, r3
 8001456:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 8001458:	793b      	ldrb	r3, [r7, #4]
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	4313      	orrs	r3, r2
 8001460:	17da      	asrs	r2, r3, #31
 8001462:	4698      	mov	r8, r3
 8001464:	4691      	mov	r9, r2
 8001466:	4642      	mov	r2, r8
 8001468:	464b      	mov	r3, r9
}
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 8001476:	4770      	bx	lr

08001478 <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 8001482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	0942      	lsrs	r2, r0, #5
 8001490:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 8001494:	094b      	lsrs	r3, r1, #5
 8001496:	b2d3      	uxtb	r3, r2
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	b2db      	uxtb	r3, r3
 800149e:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 80014a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	0a02      	lsrs	r2, r0, #8
 80014ae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80014b2:	0a0b      	lsrs	r3, r1, #8
 80014b4:	b2d3      	uxtb	r3, r2
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 80014be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	0ac2      	lsrs	r2, r0, #11
 80014cc:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 80014d0:	0acb      	lsrs	r3, r1, #11
 80014d2:	b2d3      	uxtb	r3, r2
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	723b      	strb	r3, [r7, #8]
    return ans;
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	f107 0208 	add.w	r2, r7, #8
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	4611      	mov	r1, r2
 80014e8:	8019      	strh	r1, [r3, #0]
 80014ea:	3302      	adds	r3, #2
 80014ec:	0c12      	lsrs	r2, r2, #16
 80014ee:	701a      	strb	r2, [r3, #0]
 80014f0:	2300      	movs	r3, #0
 80014f2:	7b3a      	ldrb	r2, [r7, #12]
 80014f4:	f362 0307 	bfi	r3, r2, #0, #8
 80014f8:	7b7a      	ldrb	r2, [r7, #13]
 80014fa:	f362 230f 	bfi	r3, r2, #8, #8
 80014fe:	7bba      	ldrb	r2, [r7, #14]
 8001500:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	e9c7 0100 	strd	r0, r1, [r7]
 800151a:	783b      	ldrb	r3, [r7, #0]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <C620_PID_Ctrl_init>:

float clip_f(float value, float min, float max){
    return fminf(max, fmaxf(value, min));
}

void C620_PID_Ctrl_init(C620_PID_StructTypedef *params) {
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
    params->_integral = 0.0f;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
    params->_prev_value = 0.0f;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <C620_Ctrl_Struct_init>:
int16_t c620_current_f2int(float current) {
    return (int16_t) (current * 16384.0f / 20.0f);
}


void C620_Ctrl_Struct_init(C620_Ctrl_StructTypedef *ctrl_struct) {
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
    ctrl_struct->_target_value = 0.0f;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	63da      	str	r2, [r3, #60]	; 0x3c
    ctrl_struct->_enable_flag = 0;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    C620_PID_Ctrl_init(&(ctrl_struct->pid));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ffde 	bl	800152e <C620_PID_Ctrl_init>
    C620_PID_Ctrl_init(&(ctrl_struct->pid_vel));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3318      	adds	r3, #24
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ffd9 	bl	800152e <C620_PID_Ctrl_init>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <C620_Init>:

void C620_Init(C620_DeviceInfo dev_info_array[], uint8_t size) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < size; i++) {
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e00c      	b.n	80015b0 <C620_Init+0x2c>
        C620_Ctrl_Struct_init(&(dev_info_array[i].ctrl_param));
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	224c      	movs	r2, #76	; 0x4c
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	3304      	adds	r3, #4
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ffd4 	bl	8001552 <C620_Ctrl_Struct_init>
    for (uint8_t i = 0; i < size; i++) {
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	3301      	adds	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d3ee      	bcc.n	8001596 <C620_Init+0x12>
    }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <C620_WaitForConnect>:
    }
    if (flag_1)C620_SendBytes(phcan, 0x200, (uint8_t *) data1, sizeof(data1));
    if (flag_2)C620_SendBytes(phcan, 0x1FF, (uint8_t *) data2, sizeof(data2));
}

void C620_WaitForConnect(C620_DeviceInfo dev_info_array[], uint8_t size) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
    uint8_t flag = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	77fb      	strb	r3, [r7, #31]
    printf("[C620] Wait for Connection...\n");
 80015d4:	4815      	ldr	r0, [pc, #84]	; (800162c <C620_WaitForConnect+0x68>)
 80015d6:	f00f f845 	bl	8010664 <puts>
    while (!flag) {
 80015da:	e01d      	b.n	8001618 <C620_WaitForConnect+0x54>
        flag = 1;
 80015dc:	2301      	movs	r3, #1
 80015de:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < size; i++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	77bb      	strb	r3, [r7, #30]
 80015e4:	e014      	b.n	8001610 <C620_WaitForConnect+0x4c>
            if (!Get_C620_FeedbackData(&dev_info_array[i]).get_flag) {
 80015e6:	7fbb      	ldrb	r3, [r7, #30]
 80015e8:	224c      	movs	r2, #76	; 0x4c
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	441a      	add	r2, r3
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fafb 	bl	8001bf4 <Get_C620_FeedbackData>
 80015fe:	7b7b      	ldrb	r3, [r7, #13]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <C620_WaitForConnect+0x46>
                flag = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	77fb      	strb	r3, [r7, #31]
                break;
 8001608:	e006      	b.n	8001618 <C620_WaitForConnect+0x54>
        for (uint8_t i = 0; i < size; i++) {
 800160a:	7fbb      	ldrb	r3, [r7, #30]
 800160c:	3301      	adds	r3, #1
 800160e:	77bb      	strb	r3, [r7, #30]
 8001610:	7fba      	ldrb	r2, [r7, #30]
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3e6      	bcc.n	80015e6 <C620_WaitForConnect+0x22>
    while (!flag) {
 8001618:	7ffb      	ldrb	r3, [r7, #31]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0de      	beq.n	80015dc <C620_WaitForConnect+0x18>
            }
        }
    }
    printf("[C620] All Connected!\n");
 800161e:	4804      	ldr	r0, [pc, #16]	; (8001630 <C620_WaitForConnect+0x6c>)
 8001620:	f00f f820 	bl	8010664 <puts>
}
 8001624:	bf00      	nop
 8001626:	3720      	adds	r7, #32
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	0801149c 	.word	0x0801149c
 8001630:	080114bc 	.word	0x080114bc

08001634 <C620_SetTarget>:
void C620_ChangeControl(C620_DeviceInfo *dev_info, C620_CTRL_TYPE new_ctrl_type) {
    C620_Ctrl_Struct_init(&(dev_info->ctrl_param));
    dev_info->ctrl_param.ctrl_type = new_ctrl_type;
}

void C620_SetTarget(C620_DeviceInfo *device_info, float target_value) {
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	ed87 0a00 	vstr	s0, [r7]
    device_info->ctrl_param._target_value = target_value;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <C620_ControlEnable>:

void C620_ControlEnable(C620_DeviceInfo *dev_info) {
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
    dev_info->ctrl_param._enable_flag = 1;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_C620_PopSendTx8Bytes>:
        p_can_ring->is_full = 1;
    }
    return HAL_OK;
}

HAL_StatusTypeDef _C620_PopSendTx8Bytes(CAN_HandleTypeDef *phcan, CAN_RingBuf *p_can_ring) {
 800166e:	b580      	push	{r7, lr}
 8001670:	b08a      	sub	sp, #40	; 0x28
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;

    txHeader.RTR = CAN_RTR_DATA;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
    txHeader.IDE = CAN_ID_STD;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
    txHeader.TransmitGlobalTime = DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3020 	strb.w	r3, [r7, #32]
    while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0) {
 8001686:	e04d      	b.n	8001724 <_C620_PopSendTx8Bytes+0xb6>
        if ((p_can_ring->is_full == 0) && (p_can_ring->read_point == p_can_ring->write_point))break;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800168e:	7a1b      	ldrb	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d109      	bne.n	80016a8 <_C620_PopSendTx8Bytes+0x3a>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d044      	beq.n	8001732 <_C620_PopSendTx8Bytes+0xc4>

        txHeader.DLC = p_can_ring->buffer[p_can_ring->read_point].DLC;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	4413      	add	r3, r2
 80016b6:	3304      	adds	r3, #4
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	61fb      	str	r3, [r7, #28]
        txHeader.StdId = p_can_ring->buffer[p_can_ring->read_point].StdId;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	4413      	add	r3, r2
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
        txHeader.ExtId = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]

        HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, p_can_ring->buffer[p_can_ring->read_point].bytes,
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	3308      	adds	r3, #8
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	441a      	add	r2, r3
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	f107 010c 	add.w	r1, r7, #12
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f001 ffea 	bl	80036c4 <HAL_CAN_AddTxMessage>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                     &txMailbox);
        if (ret != HAL_OK)return ret;
 80016f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <_C620_PopSendTx8Bytes+0x96>
 80016fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001702:	e018      	b.n	8001736 <_C620_PopSendTx8Bytes+0xc8>
        p_can_ring->read_point = ((p_can_ring->read_point) + 1) & (CAN_TXBUFFER_SIZE - 1);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001718:	6013      	str	r3, [r2, #0]
        p_can_ring->is_full = 0;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001720:	2200      	movs	r2, #0
 8001722:	721a      	strb	r2, [r3, #8]
    while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0) {
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f002 f89d 	bl	8003864 <HAL_CAN_GetTxMailboxesFreeLevel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1ab      	bne.n	8001688 <_C620_PopSendTx8Bytes+0x1a>
 8001730:	e000      	b.n	8001734 <_C620_PopSendTx8Bytes+0xc6>
        if ((p_can_ring->is_full == 0) && (p_can_ring->read_point == p_can_ring->write_point))break;
 8001732:	bf00      	nop
    }
    return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <C620_WhenTxMailboxCompleteCallbackCalled>:
    }
    return HAL_OK;
}


void C620_WhenTxMailboxCompleteCallbackCalled(CAN_HandleTypeDef *phcan) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
    if (_c620_phcan_global != phcan)return;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <C620_WhenTxMailboxCompleteCallbackCalled+0x24>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	d104      	bne.n	800175c <C620_WhenTxMailboxCompleteCallbackCalled+0x1c>
    _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 8001752:	4905      	ldr	r1, [pc, #20]	; (8001768 <C620_WhenTxMailboxCompleteCallbackCalled+0x28>)
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff8a 	bl	800166e <_C620_PopSendTx8Bytes>
 800175a:	e000      	b.n	800175e <C620_WhenTxMailboxCompleteCallbackCalled+0x1e>
    if (_c620_phcan_global != phcan)return;
 800175c:	bf00      	nop
}
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200025ac 	.word	0x200025ac
 8001768:	200025b0 	.word	0x200025b0

0800176c <C620_WhenTxMailboxAbortCallbackCalled>:

void C620_WhenTxMailboxAbortCallbackCalled(CAN_HandleTypeDef *phcan) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    if (_c620_phcan_global != phcan)return;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <C620_WhenTxMailboxAbortCallbackCalled+0x24>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	d104      	bne.n	8001788 <C620_WhenTxMailboxAbortCallbackCalled+0x1c>
    _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 800177e:	4905      	ldr	r1, [pc, #20]	; (8001794 <C620_WhenTxMailboxAbortCallbackCalled+0x28>)
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff74 	bl	800166e <_C620_PopSendTx8Bytes>
 8001786:	e000      	b.n	800178a <C620_WhenTxMailboxAbortCallbackCalled+0x1e>
    if (_c620_phcan_global != phcan)return;
 8001788:	bf00      	nop
}
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200025ac 	.word	0x200025ac
 8001794:	200025b0 	.word	0x200025b0

08001798 <_set_fb_data_raw>:


void _set_fb_data_raw(const uint8_t rxData[], uint8_t device_id) {
 8001798:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	70fb      	strb	r3, [r7, #3]
    if (device_id > 9 || device_id <= 0)return;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	2b09      	cmp	r3, #9
 80017aa:	f200 80f5 	bhi.w	8001998 <_set_fb_data_raw+0x200>
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80f1 	beq.w	8001998 <_set_fb_data_raw+0x200>

    _c620_feedback_data_raw_global[device_id]._get_counter += 1;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	4a7a      	ldr	r2, [pc, #488]	; (80019a4 <_set_fb_data_raw+0x20c>)
 80017ba:	015b      	lsls	r3, r3, #5
 80017bc:	4413      	add	r3, r2
 80017be:	781a      	ldrb	r2, [r3, #0]
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	3201      	adds	r2, #1
 80017c4:	b2d1      	uxtb	r1, r2
 80017c6:	4a77      	ldr	r2, [pc, #476]	; (80019a4 <_set_fb_data_raw+0x20c>)
 80017c8:	015b      	lsls	r3, r3, #5
 80017ca:	4413      	add	r3, r2
 80017cc:	460a      	mov	r2, r1
 80017ce:	701a      	strb	r2, [r3, #0]
    if (_c620_feedback_data_raw_global[device_id]._get_counter > 128) {
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	4a74      	ldr	r2, [pc, #464]	; (80019a4 <_set_fb_data_raw+0x20c>)
 80017d4:	015b      	lsls	r3, r3, #5
 80017d6:	4413      	add	r3, r2
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b80      	cmp	r3, #128	; 0x80
 80017dc:	d905      	bls.n	80017ea <_set_fb_data_raw+0x52>
        _c620_feedback_data_raw_global[device_id]._get_counter = 128;  // overflow対策
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	4a70      	ldr	r2, [pc, #448]	; (80019a4 <_set_fb_data_raw+0x20c>)
 80017e2:	015b      	lsls	r3, r3, #5
 80017e4:	4413      	add	r3, r2
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	701a      	strb	r2, [r3, #0]
    }

    if (_c620_feedback_data_raw_global[device_id]._get_counter < 50) {  // M3508のEncoderの初期位置を取得
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	4a6d      	ldr	r2, [pc, #436]	; (80019a4 <_set_fb_data_raw+0x20c>)
 80017ee:	015b      	lsls	r3, r3, #5
 80017f0:	4413      	add	r3, r2
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b31      	cmp	r3, #49	; 0x31
 80017f6:	d836      	bhi.n	8001866 <_set_fb_data_raw+0xce>
        _c620_feedback_data_raw_global[device_id]._internal_offset_pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	b21a      	sxth	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3301      	adds	r3, #1
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b21b      	sxth	r3, r3
 8001808:	4313      	orrs	r3, r2
 800180a:	b21a      	sxth	r2, r3
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	b291      	uxth	r1, r2
 8001810:	4a64      	ldr	r2, [pc, #400]	; (80019a4 <_set_fb_data_raw+0x20c>)
 8001812:	015b      	lsls	r3, r3, #5
 8001814:	4413      	add	r3, r2
 8001816:	3312      	adds	r3, #18
 8001818:	460a      	mov	r2, r1
 800181a:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[device_id].pos_pre = (uint16_t) (rxData[0] << 8 | rxData[1]);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	b21a      	sxth	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3301      	adds	r3, #1
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b21b      	sxth	r3, r3
 800182c:	4313      	orrs	r3, r2
 800182e:	b21a      	sxth	r2, r3
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	b291      	uxth	r1, r2
 8001834:	4a5b      	ldr	r2, [pc, #364]	; (80019a4 <_set_fb_data_raw+0x20c>)
 8001836:	015b      	lsls	r3, r3, #5
 8001838:	4413      	add	r3, r2
 800183a:	3314      	adds	r3, #20
 800183c:	460a      	mov	r2, r1
 800183e:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[device_id].pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	b21a      	sxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3301      	adds	r3, #1
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b21b      	sxth	r3, r3
 8001850:	4313      	orrs	r3, r2
 8001852:	b21a      	sxth	r2, r3
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	b291      	uxth	r1, r2
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <_set_fb_data_raw+0x20c>)
 800185a:	015b      	lsls	r3, r3, #5
 800185c:	4413      	add	r3, r2
 800185e:	3310      	adds	r3, #16
 8001860:	460a      	mov	r2, r1
 8001862:	801a      	strh	r2, [r3, #0]
        return;
 8001864:	e099      	b.n	800199a <_set_fb_data_raw+0x202>
    }

    // dataの設定
    _c620_feedback_data_raw_global[device_id].pos_pre = _c620_feedback_data_raw_global[device_id].pos;
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	494e      	ldr	r1, [pc, #312]	; (80019a4 <_set_fb_data_raw+0x20c>)
 800186c:	0152      	lsls	r2, r2, #5
 800186e:	440a      	add	r2, r1
 8001870:	3210      	adds	r2, #16
 8001872:	8811      	ldrh	r1, [r2, #0]
 8001874:	4a4b      	ldr	r2, [pc, #300]	; (80019a4 <_set_fb_data_raw+0x20c>)
 8001876:	015b      	lsls	r3, r3, #5
 8001878:	4413      	add	r3, r2
 800187a:	3314      	adds	r3, #20
 800187c:	460a      	mov	r2, r1
 800187e:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	b21a      	sxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3301      	adds	r3, #1
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b21b      	sxth	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b21a      	sxth	r2, r3
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	b291      	uxth	r1, r2
 8001898:	4a42      	ldr	r2, [pc, #264]	; (80019a4 <_set_fb_data_raw+0x20c>)
 800189a:	015b      	lsls	r3, r3, #5
 800189c:	4413      	add	r3, r2
 800189e:	3310      	adds	r3, #16
 80018a0:	460a      	mov	r2, r1
 80018a2:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].vel = (int16_t) (rxData[2] << 8 | rxData[3]);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3302      	adds	r3, #2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	b219      	sxth	r1, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3303      	adds	r3, #3
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	b211      	sxth	r1, r2
 80018bc:	4a39      	ldr	r2, [pc, #228]	; (80019a4 <_set_fb_data_raw+0x20c>)
 80018be:	015b      	lsls	r3, r3, #5
 80018c0:	4413      	add	r3, r2
 80018c2:	3316      	adds	r3, #22
 80018c4:	460a      	mov	r2, r1
 80018c6:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].cur = (int16_t) (rxData[4] << 8 | rxData[5]);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3304      	adds	r3, #4
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	b219      	sxth	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3305      	adds	r3, #5
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b21a      	sxth	r2, r3
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	430a      	orrs	r2, r1
 80018de:	b211      	sxth	r1, r2
 80018e0:	4a30      	ldr	r2, [pc, #192]	; (80019a4 <_set_fb_data_raw+0x20c>)
 80018e2:	015b      	lsls	r3, r3, #5
 80018e4:	4413      	add	r3, r2
 80018e6:	3318      	adds	r3, #24
 80018e8:	460a      	mov	r2, r1
 80018ea:	801a      	strh	r2, [r3, #0]

    // 回転数の計算
    int32_t diff_pos = (int32_t) (_c620_feedback_data_raw_global[device_id].pos) -
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	4a2d      	ldr	r2, [pc, #180]	; (80019a4 <_set_fb_data_raw+0x20c>)
 80018f0:	015b      	lsls	r3, r3, #5
 80018f2:	4413      	add	r3, r2
 80018f4:	3310      	adds	r3, #16
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
                       (int32_t) (_c620_feedback_data_raw_global[device_id].pos_pre);
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	4a29      	ldr	r2, [pc, #164]	; (80019a4 <_set_fb_data_raw+0x20c>)
 80018fe:	015b      	lsls	r3, r3, #5
 8001900:	4413      	add	r3, r2
 8001902:	3314      	adds	r3, #20
 8001904:	881b      	ldrh	r3, [r3, #0]
    int32_t diff_pos = (int32_t) (_c620_feedback_data_raw_global[device_id].pos) -
 8001906:	1acb      	subs	r3, r1, r3
 8001908:	60fb      	str	r3, [r7, #12]
    if (diff_pos > 4096) {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001910:	dd1f      	ble.n	8001952 <_set_fb_data_raw+0x1ba>
        if (_c620_feedback_data_raw_global[device_id]._rot_num != -(INT64_MAX / 10)) {
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	4a23      	ldr	r2, [pc, #140]	; (80019a4 <_set_fb_data_raw+0x20c>)
 8001916:	015b      	lsls	r3, r3, #5
 8001918:	4413      	add	r3, r2
 800191a:	3308      	adds	r3, #8
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	4921      	ldr	r1, [pc, #132]	; (80019a8 <_set_fb_data_raw+0x210>)
 8001922:	428b      	cmp	r3, r1
 8001924:	bf08      	it	eq
 8001926:	f112 3fcc 	cmneq.w	r2, #3435973836	; 0xcccccccc
 800192a:	d036      	beq.n	800199a <_set_fb_data_raw+0x202>
            _c620_feedback_data_raw_global[device_id]._rot_num -= 1;
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <_set_fb_data_raw+0x20c>)
 8001930:	015b      	lsls	r3, r3, #5
 8001932:	4413      	add	r3, r2
 8001934:	3308      	adds	r3, #8
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	78f9      	ldrb	r1, [r7, #3]
 800193c:	f112 38ff 	adds.w	r8, r2, #4294967295	; 0xffffffff
 8001940:	f143 39ff 	adc.w	r9, r3, #4294967295	; 0xffffffff
 8001944:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <_set_fb_data_raw+0x20c>)
 8001946:	014b      	lsls	r3, r1, #5
 8001948:	4413      	add	r3, r2
 800194a:	3308      	adds	r3, #8
 800194c:	e9c3 8900 	strd	r8, r9, [r3]
 8001950:	e023      	b.n	800199a <_set_fb_data_raw+0x202>
        }  // overflow対策
    } else if (diff_pos < -4096) {
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001958:	da1f      	bge.n	800199a <_set_fb_data_raw+0x202>
        if (_c620_feedback_data_raw_global[device_id]._rot_num != (INT64_MAX / 10)) {
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <_set_fb_data_raw+0x20c>)
 800195e:	015b      	lsls	r3, r3, #5
 8001960:	4413      	add	r3, r2
 8001962:	3308      	adds	r3, #8
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	4910      	ldr	r1, [pc, #64]	; (80019ac <_set_fb_data_raw+0x214>)
 800196a:	428b      	cmp	r3, r1
 800196c:	bf08      	it	eq
 800196e:	f1b2 3fcc 	cmpeq.w	r2, #3435973836	; 0xcccccccc
 8001972:	d012      	beq.n	800199a <_set_fb_data_raw+0x202>
            _c620_feedback_data_raw_global[device_id]._rot_num += 1;
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <_set_fb_data_raw+0x20c>)
 8001978:	015b      	lsls	r3, r3, #5
 800197a:	4413      	add	r3, r2
 800197c:	3308      	adds	r3, #8
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	78f9      	ldrb	r1, [r7, #3]
 8001984:	1c54      	adds	r4, r2, #1
 8001986:	f143 0500 	adc.w	r5, r3, #0
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <_set_fb_data_raw+0x20c>)
 800198c:	014b      	lsls	r3, r1, #5
 800198e:	4413      	add	r3, r2
 8001990:	3308      	adds	r3, #8
 8001992:	e9c3 4500 	strd	r4, r5, [r3]
 8001996:	e000      	b.n	800199a <_set_fb_data_raw+0x202>
    if (device_id > 9 || device_id <= 0)return;
 8001998:	bf00      	nop
        }  // overflow対策
    }
}
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80019a2:	4770      	bx	lr
 80019a4:	200045c0 	.word	0x200045c0
 80019a8:	f3333333 	.word	0xf3333333
 80019ac:	0ccccccc 	.word	0x0ccccccc

080019b0 <C620_WhenCANRxFifo1MsgPending>:

void C620_WhenCANRxFifo1MsgPending(CAN_HandleTypeDef *phcan) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08c      	sub	sp, #48	; 0x30
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
    // Fifo0はCANLibで使うので、Fifo1を使う事。
    if (_c620_phcan_global != phcan)return;
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <C620_WhenCANRxFifo1MsgPending+0x60>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d121      	bne.n	8001a06 <C620_WhenCANRxFifo1MsgPending+0x56>
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];
    if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO1, &rxHeader, rxData) != HAL_OK) {
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	f107 0214 	add.w	r2, r7, #20
 80019ca:	2101      	movs	r1, #1
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f001 ff7e 	bl	80038ce <HAL_CAN_GetRxMessage>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <C620_WhenCANRxFifo1MsgPending+0x32>
        // Reception Error
        printf("GetRxMessage error\n\r");
 80019d8:	480e      	ldr	r0, [pc, #56]	; (8001a14 <C620_WhenCANRxFifo1MsgPending+0x64>)
 80019da:	f00e fddd 	bl	8010598 <iprintf>
        Error_Handler();
 80019de:	f001 f80f 	bl	8002a00 <Error_Handler>
    }

    if (((rxHeader.StdId - 0x200) < 9) && ((rxHeader.StdId - 0x200) >= 1)) {
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d80d      	bhi.n	8001a08 <C620_WhenCANRxFifo1MsgPending+0x58>
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f2:	d009      	beq.n	8001a08 <C620_WhenCANRxFifo1MsgPending+0x58>
        _set_fb_data_raw(rxData, rxHeader.StdId - 0x200);  // fb_data_rawにデータを入力
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff feca 	bl	8001798 <_set_fb_data_raw>
 8001a04:	e000      	b.n	8001a08 <C620_WhenCANRxFifo1MsgPending+0x58>
    if (_c620_phcan_global != phcan)return;
 8001a06:	bf00      	nop
    }
}
 8001a08:	3730      	adds	r7, #48	; 0x30
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200025ac 	.word	0x200025ac
 8001a14:	080114d4 	.word	0x080114d4

08001a18 <Init_C620_CAN_System>:


void Init_C620_CAN_System(CAN_HandleTypeDef *phcan) {  //CAN初期化
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08e      	sub	sp, #56	; 0x38
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    _c620_phcan_global = phcan;
 8001a20:	4a6c      	ldr	r2, [pc, #432]	; (8001bd4 <Init_C620_CAN_System+0x1bc>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
    CAN_FilterTypeDef sFilterConfig;

    //フィルタバンク設定
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 8001a32:	2301      	movs	r3, #1
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFilterConfig.SlaveStartFilterBank = 14;
 8001a36:	230e      	movs	r3, #14
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30

    // CAN2をつかうならSlaveStartFilterBank以上の値をFilterBankに設定する必要がある
    // FIFO1に初期化用のフィルタを設定
    sFilterConfig.FilterBank = 10; // CANLibで6まで使ってる
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b1000) << 5;
 8001a3e:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001a42:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = ((1 << 12) - 1) << 5;
 8001a44:	4b64      	ldr	r3, [pc, #400]	; (8001bd8 <Init_C620_CAN_System+0x1c0>)
 8001a46:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 8001a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a50:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f001 fd03 	bl	8003464 <HAL_CAN_ConfigFilter>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <Init_C620_CAN_System+0x50>
        Error_Handler();
 8001a64:	f000 ffcc 	bl	8002a00 <Error_Handler>
    }

    sFilterConfig.FilterBank = 11; // CANLibで6まで使ってる
 8001a68:	230b      	movs	r3, #11
 8001a6a:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0001) << 5;
 8001a6c:	f244 0320 	movw	r3, #16416	; 0x4020
 8001a70:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = (((1 << 12) - 1) ^ 0b0110) << 5;
 8001a72:	4b5a      	ldr	r3, [pc, #360]	; (8001bdc <Init_C620_CAN_System+0x1c4>)
 8001a74:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 8001a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a7e:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4619      	mov	r1, r3
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f001 fcec 	bl	8003464 <HAL_CAN_ConfigFilter>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <Init_C620_CAN_System+0x7e>
        Error_Handler();
 8001a92:	f000 ffb5 	bl	8002a00 <Error_Handler>
    }

    sFilterConfig.FilterBank = 12; // CANLibで6まで使ってる
 8001a96:	230c      	movs	r3, #12
 8001a98:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0010) << 5;
 8001a9a:	f244 0340 	movw	r3, #16448	; 0x4040
 8001a9e:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = (((1 << 12) - 1) ^ 0b0100) << 5;
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <Init_C620_CAN_System+0x1c8>)
 8001aa2:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 8001aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aac:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f001 fcd5 	bl	8003464 <HAL_CAN_ConfigFilter>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <Init_C620_CAN_System+0xac>
        Error_Handler();
 8001ac0:	f000 ff9e 	bl	8002a00 <Error_Handler>
    }

    sFilterConfig.FilterBank = 13; // CANLibで6まで使ってる
 8001ac4:	230d      	movs	r3, #13
 8001ac6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0100) << 5;
 8001ac8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001acc:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = ((1 << 12) - 1) << 5;
 8001ace:	4b42      	ldr	r3, [pc, #264]	; (8001bd8 <Init_C620_CAN_System+0x1c0>)
 8001ad0:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 8001ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ada:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f001 fcbe 	bl	8003464 <HAL_CAN_ConfigFilter>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <Init_C620_CAN_System+0xda>
        Error_Handler();
 8001aee:	f000 ff87 	bl	8002a00 <Error_Handler>
    }

    if (HAL_CAN_Start(phcan) != HAL_OK) {
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f001 fda2 	bl	800363c <HAL_CAN_Start>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <Init_C620_CAN_System+0xf0>
        printf(" -> Start Error CAN_C620\n");
 8001afe:	4839      	ldr	r0, [pc, #228]	; (8001be4 <Init_C620_CAN_System+0x1cc>)
 8001b00:	f00e fdb0 	bl	8010664 <puts>
        Error_Handler();
 8001b04:	f000 ff7c 	bl	8002a00 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8001b08:	2110      	movs	r1, #16
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f001 fff1 	bl	8003af2 <HAL_CAN_ActivateNotification>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <Init_C620_CAN_System+0x108>
        printf(" -> FIFO1 CAN_Activation error1\n\r");
 8001b16:	4834      	ldr	r0, [pc, #208]	; (8001be8 <Init_C620_CAN_System+0x1d0>)
 8001b18:	f00e fd3e 	bl	8010598 <iprintf>
        Error_Handler();
 8001b1c:	f000 ff70 	bl	8002a00 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 8001b20:	2101      	movs	r1, #1
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f001 ffe5 	bl	8003af2 <HAL_CAN_ActivateNotification>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d004      	beq.n	8001b38 <Init_C620_CAN_System+0x120>
        printf(" -> CAN_Activation error2\n\r");
 8001b2e:	482f      	ldr	r0, [pc, #188]	; (8001bec <Init_C620_CAN_System+0x1d4>)
 8001b30:	f00e fd32 	bl	8010598 <iprintf>
        Error_Handler();
 8001b34:	f000 ff64 	bl	8002a00 <Error_Handler>
    }

    for (uint8_t i = 0; i < 9; i++) {  // init fb_data_raw
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b3e:	e040      	b.n	8001bc2 <Init_C620_CAN_System+0x1aa>
        _c620_feedback_data_raw_global[i].pos = 0;
 8001b40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b44:	4a2a      	ldr	r2, [pc, #168]	; (8001bf0 <Init_C620_CAN_System+0x1d8>)
 8001b46:	015b      	lsls	r3, r3, #5
 8001b48:	4413      	add	r3, r2
 8001b4a:	3310      	adds	r3, #16
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i].pos_pre = 0;
 8001b50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <Init_C620_CAN_System+0x1d8>)
 8001b56:	015b      	lsls	r3, r3, #5
 8001b58:	4413      	add	r3, r2
 8001b5a:	3314      	adds	r3, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._rot_num = 0;
 8001b60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b64:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <Init_C620_CAN_System+0x1d8>)
 8001b66:	015b      	lsls	r3, r3, #5
 8001b68:	4413      	add	r3, r2
 8001b6a:	f103 0108 	add.w	r1, r3, #8
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9c1 2300 	strd	r2, r3, [r1]
        _c620_feedback_data_raw_global[i].vel = 0;
 8001b7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <Init_C620_CAN_System+0x1d8>)
 8001b80:	015b      	lsls	r3, r3, #5
 8001b82:	4413      	add	r3, r2
 8001b84:	3316      	adds	r3, #22
 8001b86:	2200      	movs	r2, #0
 8001b88:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i].cur = 0;
 8001b8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b8e:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <Init_C620_CAN_System+0x1d8>)
 8001b90:	015b      	lsls	r3, r3, #5
 8001b92:	4413      	add	r3, r2
 8001b94:	3318      	adds	r3, #24
 8001b96:	2200      	movs	r2, #0
 8001b98:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._get_counter = 0;
 8001b9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b9e:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <Init_C620_CAN_System+0x1d8>)
 8001ba0:	015b      	lsls	r3, r3, #5
 8001ba2:	4413      	add	r3, r2
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._internal_offset_pos = 0;
 8001ba8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001bac:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <Init_C620_CAN_System+0x1d8>)
 8001bae:	015b      	lsls	r3, r3, #5
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3312      	adds	r3, #18
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 9; i++) {  // init fb_data_raw
 8001bb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001bc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d9ba      	bls.n	8001b40 <Init_C620_CAN_System+0x128>
    }
}
 8001bca:	bf00      	nop
 8001bcc:	bf00      	nop
 8001bce:	3738      	adds	r7, #56	; 0x38
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200025ac 	.word	0x200025ac
 8001bd8:	0001ffe0 	.word	0x0001ffe0
 8001bdc:	0001ff20 	.word	0x0001ff20
 8001be0:	0001ff60 	.word	0x0001ff60
 8001be4:	080114ec 	.word	0x080114ec
 8001be8:	08011508 	.word	0x08011508
 8001bec:	0801152c 	.word	0x0801152c
 8001bf0:	200045c0 	.word	0x200045c0

08001bf4 <Get_C620_FeedbackData>:


C620_FeedbackData Get_C620_FeedbackData(C620_DeviceInfo *device_info) {
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	ed2d 8b02 	vpush	{d8}
 8001bfa:	b08b      	sub	sp, #44	; 0x2c
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
    uint8_t device_id = device_info->device_id;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (device_id >= 9)device_id = 0;
 8001c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d902      	bls.n	8001c18 <Get_C620_FeedbackData+0x24>
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    C620_FeedbackData fb_data;
    fb_data.device_id = device_id;
 8001c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c1c:	733b      	strb	r3, [r7, #12]
    c620_feedback_data_raw *data = &(_c620_feedback_data_raw_global[device_id]);
 8001c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c22:	015b      	lsls	r3, r3, #5
 8001c24:	4a49      	ldr	r2, [pc, #292]	; (8001d4c <Get_C620_FeedbackData+0x158>)
 8001c26:	4413      	add	r3, r2
 8001c28:	623b      	str	r3, [r7, #32]

    int32_t offset_pos = (int32_t) (data->pos) - (int32_t) (data->_internal_offset_pos);
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	8a1b      	ldrh	r3, [r3, #16]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	8a5b      	ldrh	r3, [r3, #18]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	61fb      	str	r3, [r7, #28]
    if (device_info->ctrl_param.use_internal_offset != C620_USE_OFFSET_POS_DISABLE) {
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d016      	beq.n	8001c70 <Get_C620_FeedbackData+0x7c>
        fb_data.position = ((float)offset_pos) / 8192.0f + (float) (data->_rot_num);
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001d50 <Get_C620_FeedbackData+0x15c>
 8001c50:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe fc0f 	bl	8000480 <__aeabi_l2f>
 8001c62:	ee07 0a90 	vmov	s15, r0
 8001c66:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001c6a:	edc7 7a04 	vstr	s15, [r7, #16]
 8001c6e:	e016      	b.n	8001c9e <Get_C620_FeedbackData+0xaa>
    } else {
        fb_data.position = ((float)data->pos) / 8192.0f + (float) (data->_rot_num);
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	8a1b      	ldrh	r3, [r3, #16]
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c7c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001d50 <Get_C620_FeedbackData+0x15c>
 8001c80:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe fbf7 	bl	8000480 <__aeabi_l2f>
 8001c92:	ee07 0a90 	vmov	s15, r0
 8001c96:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001c9a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    fb_data.velocity = ((float) (data->vel)) / 60.0f;
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cac:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001d54 <Get_C620_FeedbackData+0x160>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	edc7 7a05 	vstr	s15, [r7, #20]
    fb_data.current = ((float) (data->cur * 20)) / 16384.0f;
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	ee07 3a90 	vmov	s15, r3
 8001ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001d58 <Get_C620_FeedbackData+0x164>
 8001cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd8:	edc7 7a06 	vstr	s15, [r7, #24]
    fb_data.get_flag = (data->_get_counter > 50);
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b32      	cmp	r3, #50	; 0x32
 8001ce2:	bf8c      	ite	hi
 8001ce4:	2301      	movhi	r3, #1
 8001ce6:	2300      	movls	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	737b      	strb	r3, [r7, #13]

    fb_data.velocity *= device_info->ctrl_param.quant_per_rot;
 8001cec:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfa:	edc7 7a05 	vstr	s15, [r7, #20]
    fb_data.position *= device_info->ctrl_param.quant_per_rot;
 8001cfe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0c:	edc7 7a04 	vstr	s15, [r7, #16]
    if(device_info->ctrl_param.rotation == C620_ROT_CW){  // TODO: 反転処理(確認)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d10b      	bne.n	8001d32 <Get_C620_FeedbackData+0x13e>
        fb_data.velocity *= -1.0f;
 8001d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d1e:	eef1 7a67 	vneg.f32	s15, s15
 8001d22:	edc7 7a05 	vstr	s15, [r7, #20]
        fb_data.position *= -1.0f;
 8001d26:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d2a:	eef1 7a67 	vneg.f32	s15, s15
 8001d2e:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    return fb_data;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	461c      	mov	r4, r3
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	372c      	adds	r7, #44	; 0x2c
 8001d44:	46bd      	mov	sp, r7
 8001d46:	ecbd 8b02 	vpop	{d8}
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	200045c0 	.word	0x200045c0
 8001d50:	46000000 	.word	0x46000000
 8001d54:	42700000 	.word	0x42700000
 8001d58:	46800000 	.word	0x46800000

08001d5c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <MX_CAN1_Init+0x64>)
 8001d62:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <MX_CAN1_Init+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <MX_CAN1_Init+0x64>)
 8001d68:	2206      	movs	r2, #6
 8001d6a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <MX_CAN1_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <MX_CAN1_Init+0x64>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_CAN1_Init+0x64>)
 8001d7a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001d7e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <MX_CAN1_Init+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <MX_CAN1_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <MX_CAN1_Init+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <MX_CAN1_Init+0x64>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <MX_CAN1_Init+0x64>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <MX_CAN1_Init+0x64>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_CAN1_Init+0x64>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_CAN1_Init+0x64>)
 8001dac:	f001 fa5e 	bl	800326c <HAL_CAN_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001db6:	f000 fe23 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200046e0 	.word	0x200046e0
 8001dc4:	40006400 	.word	0x40006400

08001dc8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001dcc:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <MX_CAN2_Init+0x64>)
 8001dce:	4a18      	ldr	r2, [pc, #96]	; (8001e30 <MX_CAN2_Init+0x68>)
 8001dd0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <MX_CAN2_Init+0x64>)
 8001dd4:	2206      	movs	r2, #6
 8001dd6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <MX_CAN2_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <MX_CAN2_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_CAN2_Init+0x64>)
 8001de6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001dea:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <MX_CAN2_Init+0x64>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_CAN2_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <MX_CAN2_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <MX_CAN2_Init+0x64>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <MX_CAN2_Init+0x64>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <MX_CAN2_Init+0x64>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <MX_CAN2_Init+0x64>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_CAN2_Init+0x64>)
 8001e18:	f001 fa28 	bl	800326c <HAL_CAN_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001e22:	f000 fded 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20004708 	.word	0x20004708
 8001e30:	40006800 	.word	0x40006800

08001e34 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	; 0x30
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a55      	ldr	r2, [pc, #340]	; (8001fa8 <HAL_CAN_MspInit+0x174>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d149      	bne.n	8001eea <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001e56:	4b55      	ldr	r3, [pc, #340]	; (8001fac <HAL_CAN_MspInit+0x178>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	4a53      	ldr	r2, [pc, #332]	; (8001fac <HAL_CAN_MspInit+0x178>)
 8001e5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001e60:	4b52      	ldr	r3, [pc, #328]	; (8001fac <HAL_CAN_MspInit+0x178>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d10b      	bne.n	8001e80 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001e68:	4b51      	ldr	r3, [pc, #324]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	4a50      	ldr	r2, [pc, #320]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e72:	6413      	str	r3, [r2, #64]	; 0x40
 8001e74:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e80:	4b4b      	ldr	r3, [pc, #300]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	4a4a      	ldr	r2, [pc, #296]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001e86:	f043 0308 	orr.w	r3, r3, #8
 8001e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8c:	4b48      	ldr	r3, [pc, #288]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ea8:	2309      	movs	r3, #9
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4840      	ldr	r0, [pc, #256]	; (8001fb4 <HAL_CAN_MspInit+0x180>)
 8001eb4:	f002 ffb0 	bl	8004e18 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2105      	movs	r1, #5
 8001ebc:	2013      	movs	r0, #19
 8001ebe:	f002 f8df 	bl	8004080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001ec2:	2013      	movs	r0, #19
 8001ec4:	f002 f8f8 	bl	80040b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2105      	movs	r1, #5
 8001ecc:	2014      	movs	r0, #20
 8001ece:	f002 f8d7 	bl	8004080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ed2:	2014      	movs	r0, #20
 8001ed4:	f002 f8f0 	bl	80040b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2105      	movs	r1, #5
 8001edc:	2015      	movs	r0, #21
 8001ede:	f002 f8cf 	bl	8004080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001ee2:	2015      	movs	r0, #21
 8001ee4:	f002 f8e8 	bl	80040b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001ee8:	e05a      	b.n	8001fa0 <HAL_CAN_MspInit+0x16c>
  else if(canHandle->Instance==CAN2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a32      	ldr	r2, [pc, #200]	; (8001fb8 <HAL_CAN_MspInit+0x184>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d155      	bne.n	8001fa0 <HAL_CAN_MspInit+0x16c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	4a2d      	ldr	r2, [pc, #180]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001efa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001efe:	6413      	str	r3, [r2, #64]	; 0x40
 8001f00:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_CAN_MspInit+0x178>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	3301      	adds	r3, #1
 8001f12:	4a26      	ldr	r2, [pc, #152]	; (8001fac <HAL_CAN_MspInit+0x178>)
 8001f14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_CAN_MspInit+0x178>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10b      	bne.n	8001f36 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001f1e:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a23      	ldr	r2, [pc, #140]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001f24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_CAN_MspInit+0x17c>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8001f4e:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8001f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001f60:	2309      	movs	r3, #9
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4814      	ldr	r0, [pc, #80]	; (8001fbc <HAL_CAN_MspInit+0x188>)
 8001f6c:	f002 ff54 	bl	8004e18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2105      	movs	r1, #5
 8001f74:	203f      	movs	r0, #63	; 0x3f
 8001f76:	f002 f883 	bl	8004080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001f7a:	203f      	movs	r0, #63	; 0x3f
 8001f7c:	f002 f89c 	bl	80040b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2105      	movs	r1, #5
 8001f84:	2040      	movs	r0, #64	; 0x40
 8001f86:	f002 f87b 	bl	8004080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001f8a:	2040      	movs	r0, #64	; 0x40
 8001f8c:	f002 f894 	bl	80040b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2105      	movs	r1, #5
 8001f94:	2041      	movs	r0, #65	; 0x41
 8001f96:	f002 f873 	bl	8004080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001f9a:	2041      	movs	r0, #65	; 0x41
 8001f9c:	f002 f88c 	bl	80040b8 <HAL_NVIC_EnableIRQ>
}
 8001fa0:	bf00      	nop
 8001fa2:	3730      	adds	r7, #48	; 0x30
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40006400 	.word	0x40006400
 8001fac:	20004730 	.word	0x20004730
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	40006800 	.word	0x40006800
 8001fbc:	40020400 	.word	0x40020400

08001fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <MX_DMA_Init+0x58>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a13      	ldr	r2, [pc, #76]	; (8002018 <MX_DMA_Init+0x58>)
 8001fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <MX_DMA_Init+0x58>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	200c      	movs	r0, #12
 8001fe4:	f002 f84c 	bl	8004080 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001fe8:	200c      	movs	r0, #12
 8001fea:	f002 f865 	bl	80040b8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	200e      	movs	r0, #14
 8001ff4:	f002 f844 	bl	8004080 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001ff8:	200e      	movs	r0, #14
 8001ffa:	f002 f85d 	bl	80040b8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2105      	movs	r1, #5
 8002002:	2011      	movs	r0, #17
 8002004:	f002 f83c 	bl	8004080 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002008:	2011      	movs	r0, #17
 800200a:	f002 f855 	bl	80040b8 <HAL_NVIC_EnableIRQ>

}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <MX_ETH_Init+0x84>)
 8002022:	4a20      	ldr	r2, [pc, #128]	; (80020a4 <MX_ETH_Init+0x88>)
 8002024:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <MX_ETH_Init+0x8c>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <MX_ETH_Init+0x8c>)
 800202e:	2280      	movs	r2, #128	; 0x80
 8002030:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <MX_ETH_Init+0x8c>)
 8002034:	22e1      	movs	r2, #225	; 0xe1
 8002036:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <MX_ETH_Init+0x8c>)
 800203a:	2200      	movs	r2, #0
 800203c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <MX_ETH_Init+0x8c>)
 8002040:	2200      	movs	r2, #0
 8002042:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <MX_ETH_Init+0x8c>)
 8002046:	2200      	movs	r2, #0
 8002048:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <MX_ETH_Init+0x84>)
 800204c:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <MX_ETH_Init+0x8c>)
 800204e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <MX_ETH_Init+0x84>)
 8002052:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002056:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <MX_ETH_Init+0x84>)
 800205a:	4a14      	ldr	r2, [pc, #80]	; (80020ac <MX_ETH_Init+0x90>)
 800205c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <MX_ETH_Init+0x84>)
 8002060:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <MX_ETH_Init+0x94>)
 8002062:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <MX_ETH_Init+0x84>)
 8002066:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800206a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <MX_ETH_Init+0x84>)
 800206e:	f002 fbad 	bl	80047cc <HAL_ETH_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8002078:	f000 fcc2 	bl	8002a00 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800207c:	2238      	movs	r2, #56	; 0x38
 800207e:	2100      	movs	r1, #0
 8002080:	480c      	ldr	r0, [pc, #48]	; (80020b4 <MX_ETH_Init+0x98>)
 8002082:	f00e fc85 	bl	8010990 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <MX_ETH_Init+0x98>)
 8002088:	2221      	movs	r2, #33	; 0x21
 800208a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_ETH_Init+0x98>)
 800208e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8002092:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <MX_ETH_Init+0x98>)
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200049d8 	.word	0x200049d8
 80020a4:	40028000 	.word	0x40028000
 80020a8:	20004a88 	.word	0x20004a88
 80020ac:	2000020c 	.word	0x2000020c
 80020b0:	2000016c 	.word	0x2000016c
 80020b4:	200049a0 	.word	0x200049a0

080020b8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08e      	sub	sp, #56	; 0x38
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a4e      	ldr	r2, [pc, #312]	; (8002210 <HAL_ETH_MspInit+0x158>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	f040 8096 	bne.w	8002208 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80020dc:	4b4d      	ldr	r3, [pc, #308]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	4a4c      	ldr	r2, [pc, #304]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 80020e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020e6:	6313      	str	r3, [r2, #48]	; 0x30
 80020e8:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	623b      	str	r3, [r7, #32]
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	4a46      	ldr	r2, [pc, #280]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 80020fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002100:	4b44      	ldr	r3, [pc, #272]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	4a40      	ldr	r2, [pc, #256]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 8002112:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002116:	6313      	str	r3, [r2, #48]	; 0x30
 8002118:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002124:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	4a3a      	ldr	r2, [pc, #232]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6313      	str	r3, [r2, #48]	; 0x30
 8002130:	4b38      	ldr	r3, [pc, #224]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213c:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	4a34      	ldr	r2, [pc, #208]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6313      	str	r3, [r2, #48]	; 0x30
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002154:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4a2e      	ldr	r2, [pc, #184]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 800215a:	f043 0302 	orr.w	r3, r3, #2
 800215e:	6313      	str	r3, [r2, #48]	; 0x30
 8002160:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800216c:	4b29      	ldr	r3, [pc, #164]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4a28      	ldr	r2, [pc, #160]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 8002172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002176:	6313      	str	r3, [r2, #48]	; 0x30
 8002178:	4b26      	ldr	r3, [pc, #152]	; (8002214 <HAL_ETH_MspInit+0x15c>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002184:	2332      	movs	r3, #50	; 0x32
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002194:	230b      	movs	r3, #11
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219c:	4619      	mov	r1, r3
 800219e:	481e      	ldr	r0, [pc, #120]	; (8002218 <HAL_ETH_MspInit+0x160>)
 80021a0:	f002 fe3a 	bl	8004e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80021a4:	2386      	movs	r3, #134	; 0x86
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021b4:	230b      	movs	r3, #11
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021bc:	4619      	mov	r1, r3
 80021be:	4817      	ldr	r0, [pc, #92]	; (800221c <HAL_ETH_MspInit+0x164>)
 80021c0:	f002 fe2a 	bl	8004e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80021c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021d6:	230b      	movs	r3, #11
 80021d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80021da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021de:	4619      	mov	r1, r3
 80021e0:	480f      	ldr	r0, [pc, #60]	; (8002220 <HAL_ETH_MspInit+0x168>)
 80021e2:	f002 fe19 	bl	8004e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80021e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021f8:	230b      	movs	r3, #11
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002200:	4619      	mov	r1, r3
 8002202:	4808      	ldr	r0, [pc, #32]	; (8002224 <HAL_ETH_MspInit+0x16c>)
 8002204:	f002 fe08 	bl	8004e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002208:	bf00      	nop
 800220a:	3738      	adds	r7, #56	; 0x38
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40028000 	.word	0x40028000
 8002214:	40023800 	.word	0x40023800
 8002218:	40020800 	.word	0x40020800
 800221c:	40020000 	.word	0x40020000
 8002220:	40020400 	.word	0x40020400
 8002224:	40021800 	.word	0x40021800

08002228 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Timer01 */
  Timer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &Timer01_attributes);
 800222c:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <MX_FREERTOS_Init+0x3c>)
 800222e:	2200      	movs	r2, #0
 8002230:	2101      	movs	r1, #1
 8002232:	480d      	ldr	r0, [pc, #52]	; (8002268 <MX_FREERTOS_Init+0x40>)
 8002234:	f00a fcec 	bl	800cc10 <osTimerNew>
 8002238:	4603      	mov	r3, r0
 800223a:	4a0c      	ldr	r2, [pc, #48]	; (800226c <MX_FREERTOS_Init+0x44>)
 800223c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800223e:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <MX_FREERTOS_Init+0x48>)
 8002240:	2100      	movs	r1, #0
 8002242:	480c      	ldr	r0, [pc, #48]	; (8002274 <MX_FREERTOS_Init+0x4c>)
 8002244:	f00a fbfa 	bl	800ca3c <osThreadNew>
 8002248:	4603      	mov	r3, r0
 800224a:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <MX_FREERTOS_Init+0x50>)
 800224c:	6013      	str	r3, [r2, #0]

  /* creation of LEDTask */
  LEDTaskHandle = osThreadNew(StartLEDTask, NULL, &LEDTask_attributes);
 800224e:	4a0b      	ldr	r2, [pc, #44]	; (800227c <MX_FREERTOS_Init+0x54>)
 8002250:	2100      	movs	r1, #0
 8002252:	480b      	ldr	r0, [pc, #44]	; (8002280 <MX_FREERTOS_Init+0x58>)
 8002254:	f00a fbf2 	bl	800ca3c <osThreadNew>
 8002258:	4603      	mov	r3, r0
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <MX_FREERTOS_Init+0x5c>)
 800225c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	08011658 	.word	0x08011658
 8002268:	080022ad 	.word	0x080022ad
 800226c:	20007c30 	.word	0x20007c30
 8002270:	08011610 	.word	0x08011610
 8002274:	08002289 	.word	0x08002289
 8002278:	20004a90 	.word	0x20004a90
 800227c:	08011634 	.word	0x08011634
 8002280:	0800229d 	.word	0x0800229d
 8002284:	200079d0 	.word	0x200079d0

08002288 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002290:	f00d fa94 	bl	800f7bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002294:	2001      	movs	r0, #1
 8002296:	f00a fc77 	bl	800cb88 <osDelay>
 800229a:	e7fb      	b.n	8002294 <StartDefaultTask+0xc>

0800229c <StartLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDTask */
void StartLEDTask(void *argument)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f00a fc6f 	bl	800cb88 <osDelay>
 80022aa:	e7fb      	b.n	80022a4 <StartLEDTask+0x8>

080022ac <Callback01>:
  /* USER CODE END StartLEDTask */
}

/* Callback01 function */
void Callback01(void *argument)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08c      	sub	sp, #48	; 0x30
 80022c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c6:	f107 031c 	add.w	r3, r7, #28
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
 80022d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <MX_GPIO_Init+0x134>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a46      	ldr	r2, [pc, #280]	; (80023f4 <MX_GPIO_Init+0x134>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b44      	ldr	r3, [pc, #272]	; (80023f4 <MX_GPIO_Init+0x134>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <MX_GPIO_Init+0x134>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a40      	ldr	r2, [pc, #256]	; (80023f4 <MX_GPIO_Init+0x134>)
 80022f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b3e      	ldr	r3, [pc, #248]	; (80023f4 <MX_GPIO_Init+0x134>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <MX_GPIO_Init+0x134>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <MX_GPIO_Init+0x134>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <MX_GPIO_Init+0x134>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <MX_GPIO_Init+0x134>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a34      	ldr	r2, [pc, #208]	; (80023f4 <MX_GPIO_Init+0x134>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <MX_GPIO_Init+0x134>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <MX_GPIO_Init+0x134>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a2e      	ldr	r2, [pc, #184]	; (80023f4 <MX_GPIO_Init+0x134>)
 800233c:	f043 0308 	orr.w	r3, r3, #8
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <MX_GPIO_Init+0x134>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <MX_GPIO_Init+0x134>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a28      	ldr	r2, [pc, #160]	; (80023f4 <MX_GPIO_Init+0x134>)
 8002354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <MX_GPIO_Init+0x134>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002366:	2200      	movs	r2, #0
 8002368:	f244 0181 	movw	r1, #16513	; 0x4081
 800236c:	4822      	ldr	r0, [pc, #136]	; (80023f8 <MX_GPIO_Init+0x138>)
 800236e:	f002 feff 	bl	8005170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002372:	2200      	movs	r2, #0
 8002374:	2140      	movs	r1, #64	; 0x40
 8002376:	4821      	ldr	r0, [pc, #132]	; (80023fc <MX_GPIO_Init+0x13c>)
 8002378:	f002 fefa 	bl	8005170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800237c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002382:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	4619      	mov	r1, r3
 8002392:	481b      	ldr	r0, [pc, #108]	; (8002400 <MX_GPIO_Init+0x140>)
 8002394:	f002 fd40 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002398:	f244 0381 	movw	r3, #16513	; 0x4081
 800239c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239e:	2301      	movs	r3, #1
 80023a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 031c 	add.w	r3, r7, #28
 80023ae:	4619      	mov	r1, r3
 80023b0:	4811      	ldr	r0, [pc, #68]	; (80023f8 <MX_GPIO_Init+0x138>)
 80023b2:	f002 fd31 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80023b6:	2340      	movs	r3, #64	; 0x40
 80023b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ba:	2301      	movs	r3, #1
 80023bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80023c6:	f107 031c 	add.w	r3, r7, #28
 80023ca:	4619      	mov	r1, r3
 80023cc:	480b      	ldr	r0, [pc, #44]	; (80023fc <MX_GPIO_Init+0x13c>)
 80023ce:	f002 fd23 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 031c 	add.w	r3, r7, #28
 80023e2:	4619      	mov	r1, r3
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_GPIO_Init+0x13c>)
 80023e6:	f002 fd17 	bl	8004e18 <HAL_GPIO_Init>

}
 80023ea:	bf00      	nop
 80023ec:	3730      	adds	r7, #48	; 0x30
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40021800 	.word	0x40021800
 8002400:	40020800 	.word	0x40020800

08002404 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart2, &ch, 1, 500);
 800240e:	1df9      	adds	r1, r7, #7
 8002410:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002414:	2201      	movs	r2, #1
 8002416:	4804      	ldr	r0, [pc, #16]	; (8002428 <__io_putchar+0x24>)
 8002418:	f005 fe52 	bl	80080c0 <HAL_UART_Transmit>
    return ch;
 800241c:	79fb      	ldrb	r3, [r7, #7]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20007cb0 	.word	0x20007cb0

0800242c <HAL_CAN_TxMailbox0CompleteCallback>:


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff f983 	bl	8001740 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe fa90 	bl	8000960 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff f98b 	bl	800176c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe fa98 	bl	800098c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff f967 	bl	8001740 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fa74 	bl	8000960 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff f96f 	bl	800176c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fa7c 	bl	800098c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff f94b 	bl	8001740 <C620_WhenTxMailboxCompleteCallbackCalled>
    CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fa58 	bl	8000960 <CANLib_WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff f953 	bl	800176c <C620_WhenTxMailboxAbortCallbackCalled>
    CANLib_WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7fe fa60 	bl	800098c <CANLib_WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 80024dc:	4903      	ldr	r1, [pc, #12]	; (80024ec <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fa6a 	bl	80009b8 <WhenCANRxFifo0MsgPending>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20004734 	.word	0x20004734

080024f0 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
    C620_WhenCANRxFifo1MsgPending(hcan);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff fa59 	bl	80019b0 <C620_WhenCANRxFifo1MsgPending>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800250e:	f000 fe5c 	bl	80031ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002512:	f000 f9f1 	bl	80028f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002516:	f7ff fed3 	bl	80022c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800251a:	f7ff fd51 	bl	8001fc0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800251e:	f000 fc8b 	bl	8002e38 <MX_USART3_UART_Init>
  MX_ETH_Init();
 8002522:	f7ff fd7b 	bl	800201c <MX_ETH_Init>
  MX_CAN1_Init();
 8002526:	f7ff fc19 	bl	8001d5c <MX_CAN1_Init>
  MX_CAN2_Init();
 800252a:	f7ff fc4d 	bl	8001dc8 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 800252e:	f000 fc53 	bl	8002dd8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <main+0xa0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f00e f89a 	bl	8010674 <setbuf>
  setbuf(stderr, NULL);
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <main+0xa0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f00e f893 	bl	8010674 <setbuf>

  /*
    * ===== CANLib Settings =====
    * */
   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // LD3 (RED) ON
 800254e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002552:	4816      	ldr	r0, [pc, #88]	; (80025ac <main+0xa4>)
 8002554:	f002 fe25 	bl	80051a2 <HAL_GPIO_TogglePin>
   printf("Start Initializing CAN System:Begin\n\r");
 8002558:	4815      	ldr	r0, [pc, #84]	; (80025b0 <main+0xa8>)
 800255a:	f00e f81d 	bl	8010598 <iprintf>

   num_of_devices.mcmd3 = NUM_OF_MCMD3; //0
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <main+0xac>)
 8002560:	2200      	movs	r2, #0
 8002562:	709a      	strb	r2, [r3, #2]
//   num_of_devices.mcmd4 = 0;
   num_of_devices.mcmd4 = NUM_OF_MCMD4;  // TODO: こっちが正しい -> 0
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <main+0xac>)
 8002566:	2200      	movs	r2, #0
 8002568:	715a      	strb	r2, [r3, #5]
   num_of_devices.air = 1;  // TODO: 1にする
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <main+0xac>)
 800256c:	2201      	movs	r2, #1
 800256e:	711a      	strb	r2, [r3, #4]

   CAN_SystemInit(&hcan2); // F7のCAN通信のinit
 8002570:	4811      	ldr	r0, [pc, #68]	; (80025b8 <main+0xb0>)
 8002572:	f7fe fb7b 	bl	8000c6c <CAN_SystemInit>
   printf("Start Initializing CAN System:End\n\r");
 8002576:	4811      	ldr	r0, [pc, #68]	; (80025bc <main+0xb4>)
 8002578:	f00e f80e 	bl	8010598 <iprintf>
   if(!DISABLE_CAN_WAIT_CONNECT)CAN_WaitConnect(&num_of_devices);
 800257c:	480d      	ldr	r0, [pc, #52]	; (80025b4 <main+0xac>)
 800257e:	f7fe fe1d 	bl	80011bc <CAN_WaitConnect>
   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // LD2 (Blue) ON
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	4809      	ldr	r0, [pc, #36]	; (80025ac <main+0xa4>)
 8002586:	f002 fe0c 	bl	80051a2 <HAL_GPIO_TogglePin>

   // air cylinder


   if(NUM_OF_AIR != 0) {
       air_devices[0].node_type = NODE_AIR;
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <main+0xb8>)
 800258c:	2205      	movs	r2, #5
 800258e:	701a      	strb	r2, [r3, #0]
       air_devices[0].node_id = 0;
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <main+0xb8>)
 8002592:	2200      	movs	r2, #0
 8002594:	705a      	strb	r2, [r3, #1]
       air_devices[0].device_num = PORT_1;
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <main+0xb8>)
 8002598:	2200      	movs	r2, #0
 800259a:	709a      	strb	r2, [r3, #2]

//       air_devices[1].node_type = NODE_AIR;
//       air_devices[1].node_id = 1;
//       air_devices[1].device_num = PORT_1;

       for (uint8_t j = 0; j < 1; j++) {
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e02c      	b.n	80025fc <main+0xf4>
           for (uint8_t i = 0; i <= (uint8_t) PORT_8; i++) {
 80025a2:	2300      	movs	r3, #0
 80025a4:	73bb      	strb	r3, [r7, #14]
 80025a6:	e023      	b.n	80025f0 <main+0xe8>
 80025a8:	20000168 	.word	0x20000168
 80025ac:	40020400 	.word	0x40020400
 80025b0:	08011564 	.word	0x08011564
 80025b4:	20004734 	.word	0x20004734
 80025b8:	20004708 	.word	0x20004708
 80025bc:	0801158c 	.word	0x0801158c
 80025c0:	2000473c 	.word	0x2000473c
               air_devices[j].device_num = i;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	49a8      	ldr	r1, [pc, #672]	; (8002868 <main+0x360>)
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	440b      	add	r3, r1
 80025d0:	3302      	adds	r3, #2
 80025d2:	7bba      	ldrb	r2, [r7, #14]
 80025d4:	701a      	strb	r2, [r3, #0]
               AirCylinder_Init(&air_devices[j], AIR_OFF);
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	4aa2      	ldr	r2, [pc, #648]	; (8002868 <main+0x360>)
 80025e0:	4413      	add	r3, r2
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe febb 	bl	8001360 <AirCylinder_Init>
           for (uint8_t i = 0; i <= (uint8_t) PORT_8; i++) {
 80025ea:	7bbb      	ldrb	r3, [r7, #14]
 80025ec:	3301      	adds	r3, #1
 80025ee:	73bb      	strb	r3, [r7, #14]
 80025f0:	7bbb      	ldrb	r3, [r7, #14]
 80025f2:	2b07      	cmp	r3, #7
 80025f4:	d9e6      	bls.n	80025c4 <main+0xbc>
       for (uint8_t j = 0; j < 1; j++) {
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	3301      	adds	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0cf      	beq.n	80025a2 <main+0x9a>
           }
       }
       air_devices[0].device_num = PORT_1;
 8002602:	4b99      	ldr	r3, [pc, #612]	; (8002868 <main+0x360>)
 8002604:	2200      	movs	r2, #0
 8002606:	709a      	strb	r2, [r3, #2]
 //      air_devices[1].device_num = PORT_1;
       AirCylinder_SendOutput(&air_devices[0], AIR_ON);
 8002608:	2101      	movs	r1, #1
 800260a:	4897      	ldr	r0, [pc, #604]	; (8002868 <main+0x360>)
 800260c:	f7fe fec3 	bl	8001396 <AirCylinder_SendOutput>
 //      AirCylinder_SendOutput(&air_devices[1], AIR_OFF);
   }

   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // LD1 (GREEN) ON
 8002610:	2101      	movs	r1, #1
 8002612:	4896      	ldr	r0, [pc, #600]	; (800286c <main+0x364>)
 8002614:	f002 fdc5 	bl	80051a2 <HAL_GPIO_TogglePin>
   Init_C620_CAN_System(&hcan1);  // Init CAN System for C620
 8002618:	4895      	ldr	r0, [pc, #596]	; (8002870 <main+0x368>)
 800261a:	f7ff f9fd 	bl	8001a18 <Init_C620_CAN_System>
   C620_Init(c620_dev_info_global, num_of_c620);
 800261e:	4b95      	ldr	r3, [pc, #596]	; (8002874 <main+0x36c>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	4619      	mov	r1, r3
 8002624:	4894      	ldr	r0, [pc, #592]	; (8002878 <main+0x370>)
 8002626:	f7fe ffad 	bl	8001584 <C620_Init>


   c620_dev_info_global[0].device_id = 1;  // 1スタートな事に注意
 800262a:	4b93      	ldr	r3, [pc, #588]	; (8002878 <main+0x370>)
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
   c620_dev_info_global[0].ctrl_param.accel_limit = C620_ACCEL_LIMIT_ENABLE;
 8002630:	4b91      	ldr	r3, [pc, #580]	; (8002878 <main+0x370>)
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
//    c620_dev_info_global[0].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_CALIB;
   c620_dev_info_global[0].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_INTERNAL;
 8002638:	4b8f      	ldr	r3, [pc, #572]	; (8002878 <main+0x370>)
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   c620_dev_info_global[0].ctrl_param.ctrl_type = C620_CTRL_POS;
 8002640:	4b8d      	ldr	r3, [pc, #564]	; (8002878 <main+0x370>)
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   c620_dev_info_global[0].ctrl_param.accel_limit_size = 15.0f;
 8002648:	4b8b      	ldr	r3, [pc, #556]	; (8002878 <main+0x370>)
 800264a:	4a8c      	ldr	r2, [pc, #560]	; (800287c <main+0x374>)
 800264c:	639a      	str	r2, [r3, #56]	; 0x38
//    c620_dev_info_global[0].ctrl_param.accel_limit_size = 5.0f;
   c620_dev_info_global[0].ctrl_param.quant_per_rot = 1.0f/19.0f / 3.0f * 3.141592f * 2.0f;  //M3508は19:1
 800264e:	4b8a      	ldr	r3, [pc, #552]	; (8002878 <main+0x370>)
 8002650:	4a8b      	ldr	r2, [pc, #556]	; (8002880 <main+0x378>)
 8002652:	63da      	str	r2, [r3, #60]	; 0x3c
   c620_dev_info_global[0].ctrl_param.rotation = C620_ROT_ACW;
 8002654:	4b88      	ldr	r3, [pc, #544]	; (8002878 <main+0x370>)
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

   c620_dev_info_global[0].ctrl_param.pid_vel.kp = 4.5f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する
 800265c:	4b86      	ldr	r3, [pc, #536]	; (8002878 <main+0x370>)
 800265e:	4a89      	ldr	r2, [pc, #548]	; (8002884 <main+0x37c>)
 8002660:	61da      	str	r2, [r3, #28]
   c620_dev_info_global[0].ctrl_param.pid_vel.ki = 0.0f;
 8002662:	4b85      	ldr	r3, [pc, #532]	; (8002878 <main+0x370>)
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	621a      	str	r2, [r3, #32]
   c620_dev_info_global[0].ctrl_param.pid_vel.kd = 0.0f;
 800266a:	4b83      	ldr	r3, [pc, #524]	; (8002878 <main+0x370>)
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
   c620_dev_info_global[0].ctrl_param.pid_vel.kff = 0.0f;
 8002672:	4b81      	ldr	r3, [pc, #516]	; (8002878 <main+0x370>)
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	629a      	str	r2, [r3, #40]	; 0x28

//    c620_dev_info_global[0].ctrl_param.pid.kp = 10.0f;  // 位置制御用
   c620_dev_info_global[0].ctrl_param.pid.kp = 12.3f;  // 位置制御用
 800267a:	4b7f      	ldr	r3, [pc, #508]	; (8002878 <main+0x370>)
 800267c:	4a82      	ldr	r2, [pc, #520]	; (8002888 <main+0x380>)
 800267e:	605a      	str	r2, [r3, #4]
   c620_dev_info_global[0].ctrl_param.pid.ki = 0.16f;
 8002680:	4b7d      	ldr	r3, [pc, #500]	; (8002878 <main+0x370>)
 8002682:	4a82      	ldr	r2, [pc, #520]	; (800288c <main+0x384>)
 8002684:	609a      	str	r2, [r3, #8]
//    c620_dev_info_global[0].ctrl_param.pid.ki = 0.0f;
   c620_dev_info_global[0].ctrl_param.pid.kd = 0.0f;
 8002686:	4b7c      	ldr	r3, [pc, #496]	; (8002878 <main+0x370>)
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
   c620_dev_info_global[0].ctrl_param.pid.kff = 0.0f;
 800268e:	4b7a      	ldr	r3, [pc, #488]	; (8002878 <main+0x370>)
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	611a      	str	r2, [r3, #16]



   c620_dev_info_global[1].device_id = 2;
 8002696:	4b78      	ldr	r3, [pc, #480]	; (8002878 <main+0x370>)
 8002698:	2202      	movs	r2, #2
 800269a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
   c620_dev_info_global[1].ctrl_param.accel_limit = C620_ACCEL_LIMIT_ENABLE;
 800269e:	4b76      	ldr	r3, [pc, #472]	; (8002878 <main+0x370>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
   c620_dev_info_global[1].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_INTERNAL;
 80026a6:	4b74      	ldr	r3, [pc, #464]	; (8002878 <main+0x370>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
   c620_dev_info_global[1].ctrl_param.ctrl_type = C620_CTRL_POS;
 80026ae:	4b72      	ldr	r3, [pc, #456]	; (8002878 <main+0x370>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
   c620_dev_info_global[1].ctrl_param.accel_limit_size = 1500.0f;
 80026b6:	4b70      	ldr	r3, [pc, #448]	; (8002878 <main+0x370>)
 80026b8:	4a75      	ldr	r2, [pc, #468]	; (8002890 <main+0x388>)
 80026ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
//    c620_dev_info_global[1].ctrl_param.accel_limit_size = 800.0f;
   c620_dev_info_global[1].ctrl_param.quant_per_rot = 1.0f/19.0f * 300.0f;  //M3508は19:1
 80026be:	4b6e      	ldr	r3, [pc, #440]	; (8002878 <main+0x370>)
 80026c0:	4a74      	ldr	r2, [pc, #464]	; (8002894 <main+0x38c>)
 80026c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   c620_dev_info_global[1].ctrl_param.rotation = C620_ROT_CW;
 80026c6:	4b6c      	ldr	r3, [pc, #432]	; (8002878 <main+0x370>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

//    c620_dev_info_global[1].ctrl_param.pid_vel.kp = 0.1f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する  // TODO: これまでのgain
   c620_dev_info_global[1].ctrl_param.pid_vel.kp = 0.15f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する
 80026ce:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <main+0x370>)
 80026d0:	4a71      	ldr	r2, [pc, #452]	; (8002898 <main+0x390>)
 80026d2:	669a      	str	r2, [r3, #104]	; 0x68
   c620_dev_info_global[1].ctrl_param.pid_vel.ki = 0.0f;
 80026d4:	4b68      	ldr	r3, [pc, #416]	; (8002878 <main+0x370>)
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	66da      	str	r2, [r3, #108]	; 0x6c
   c620_dev_info_global[1].ctrl_param.pid_vel.kd = 0.0f;
 80026dc:	4b66      	ldr	r3, [pc, #408]	; (8002878 <main+0x370>)
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	671a      	str	r2, [r3, #112]	; 0x70
   c620_dev_info_global[1].ctrl_param.pid_vel.kff = 0.0f;
 80026e4:	4b64      	ldr	r3, [pc, #400]	; (8002878 <main+0x370>)
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	675a      	str	r2, [r3, #116]	; 0x74

   c620_dev_info_global[1].ctrl_param.pid.kp = 10.0f;  // 位置制御用
 80026ec:	4b62      	ldr	r3, [pc, #392]	; (8002878 <main+0x370>)
 80026ee:	4a6b      	ldr	r2, [pc, #428]	; (800289c <main+0x394>)
 80026f0:	651a      	str	r2, [r3, #80]	; 0x50
//    c620_dev_info_global[1].ctrl_param.pid.kp = 9.0f;  // 位置制御用
   c620_dev_info_global[1].ctrl_param.pid.ki = 0.05f;
 80026f2:	4b61      	ldr	r3, [pc, #388]	; (8002878 <main+0x370>)
 80026f4:	4a6a      	ldr	r2, [pc, #424]	; (80028a0 <main+0x398>)
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
//    c620_dev_info_global[1].ctrl_param.pid.ki = 0.1f;
   c620_dev_info_global[1].ctrl_param.pid.kd = 0.0f;
 80026f8:	4b5f      	ldr	r3, [pc, #380]	; (8002878 <main+0x370>)
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	659a      	str	r2, [r3, #88]	; 0x58
   c620_dev_info_global[1].ctrl_param.pid.kff = 0.0f;
 8002700:	4b5d      	ldr	r3, [pc, #372]	; (8002878 <main+0x370>)
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	65da      	str	r2, [r3, #92]	; 0x5c

   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // LD1 (GREEN) ON
 8002708:	2101      	movs	r1, #1
 800270a:	4858      	ldr	r0, [pc, #352]	; (800286c <main+0x364>)
 800270c:	f002 fd49 	bl	80051a2 <HAL_GPIO_TogglePin>
   Init_C620_CAN_System(&hcan1);  // Init CAN System for C620
 8002710:	4857      	ldr	r0, [pc, #348]	; (8002870 <main+0x368>)
 8002712:	f7ff f981 	bl	8001a18 <Init_C620_CAN_System>
   C620_Init(c620_dev_info_global, num_of_c620);
 8002716:	4b57      	ldr	r3, [pc, #348]	; (8002874 <main+0x36c>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	4619      	mov	r1, r3
 800271c:	4856      	ldr	r0, [pc, #344]	; (8002878 <main+0x370>)
 800271e:	f7fe ff31 	bl	8001584 <C620_Init>


   c620_dev_info_global[2].device_id = 3;  // 1スタートな事に注意
 8002722:	4b55      	ldr	r3, [pc, #340]	; (8002878 <main+0x370>)
 8002724:	2203      	movs	r2, #3
 8002726:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
   c620_dev_info_global[2].ctrl_param.accel_limit = C620_ACCEL_LIMIT_ENABLE;
 800272a:	4b53      	ldr	r3, [pc, #332]	; (8002878 <main+0x370>)
 800272c:	2200      	movs	r2, #0
 800272e:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
//    c620_dev_info_global[2].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_CALIB;
   c620_dev_info_global[2].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_INTERNAL;
 8002732:	4b51      	ldr	r3, [pc, #324]	; (8002878 <main+0x370>)
 8002734:	2201      	movs	r2, #1
 8002736:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   c620_dev_info_global[2].ctrl_param.ctrl_type = C620_CTRL_POS;
 800273a:	4b4f      	ldr	r3, [pc, #316]	; (8002878 <main+0x370>)
 800273c:	2200      	movs	r2, #0
 800273e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
   c620_dev_info_global[2].ctrl_param.accel_limit_size = 15.0f;
 8002742:	4b4d      	ldr	r3, [pc, #308]	; (8002878 <main+0x370>)
 8002744:	4a4d      	ldr	r2, [pc, #308]	; (800287c <main+0x374>)
 8002746:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
//    c620_dev_info_global[2].ctrl_param.accel_limit_size = 5.0f;
   c620_dev_info_global[2].ctrl_param.quant_per_rot = 1.0f/19.0f / 3.0f * 3.141592f * 2.0f;  //M3508は19:1
 800274a:	4b4b      	ldr	r3, [pc, #300]	; (8002878 <main+0x370>)
 800274c:	4a4c      	ldr	r2, [pc, #304]	; (8002880 <main+0x378>)
 800274e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
   c620_dev_info_global[2].ctrl_param.rotation = C620_ROT_ACW;
 8002752:	4b49      	ldr	r3, [pc, #292]	; (8002878 <main+0x370>)
 8002754:	2200      	movs	r2, #0
 8002756:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf

   c620_dev_info_global[2].ctrl_param.pid_vel.kp = 4.5f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <main+0x370>)
 800275c:	4a49      	ldr	r2, [pc, #292]	; (8002884 <main+0x37c>)
 800275e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
   c620_dev_info_global[2].ctrl_param.pid_vel.ki = 0.0f;
 8002762:	4b45      	ldr	r3, [pc, #276]	; (8002878 <main+0x370>)
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   c620_dev_info_global[2].ctrl_param.pid_vel.kd = 0.0f;
 800276c:	4b42      	ldr	r3, [pc, #264]	; (8002878 <main+0x370>)
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
   c620_dev_info_global[2].ctrl_param.pid_vel.kff = 0.0f;
 8002776:	4b40      	ldr	r3, [pc, #256]	; (8002878 <main+0x370>)
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

//    c620_dev_info_global[2].ctrl_param.pid.kp = 10.0f;  // 位置制御用
   c620_dev_info_global[2].ctrl_param.pid.kp = 12.3f;  // 位置制御用
 8002780:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <main+0x370>)
 8002782:	4a41      	ldr	r2, [pc, #260]	; (8002888 <main+0x380>)
 8002784:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   c620_dev_info_global[2].ctrl_param.pid.ki = 0.16f;
 8002788:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <main+0x370>)
 800278a:	4a40      	ldr	r2, [pc, #256]	; (800288c <main+0x384>)
 800278c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
//    c620_dev_info_global[2].ctrl_param.pid.ki = 0.0f;
   c620_dev_info_global[2].ctrl_param.pid.kd = 0.0f;
 8002790:	4b39      	ldr	r3, [pc, #228]	; (8002878 <main+0x370>)
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
   c620_dev_info_global[2].ctrl_param.pid.kff = 0.0f;
 800279a:	4b37      	ldr	r3, [pc, #220]	; (8002878 <main+0x370>)
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8


   c620_dev_info_global[3].device_id = 4;
 80027a4:	4b34      	ldr	r3, [pc, #208]	; (8002878 <main+0x370>)
 80027a6:	2204      	movs	r2, #4
 80027a8:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
   c620_dev_info_global[3].ctrl_param.accel_limit = C620_ACCEL_LIMIT_ENABLE;
 80027ac:	4b32      	ldr	r3, [pc, #200]	; (8002878 <main+0x370>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
   c620_dev_info_global[3].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_INTERNAL;
 80027b4:	4b30      	ldr	r3, [pc, #192]	; (8002878 <main+0x370>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
   c620_dev_info_global[3].ctrl_param.ctrl_type = C620_CTRL_POS;
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <main+0x370>)
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
   c620_dev_info_global[3].ctrl_param.accel_limit_size = 1500.0f;
 80027c4:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <main+0x370>)
 80027c6:	4a32      	ldr	r2, [pc, #200]	; (8002890 <main+0x388>)
 80027c8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
//    c620_dev_info_global[3].ctrl_param.accel_limit_size = 800.0f;
   c620_dev_info_global[3].ctrl_param.quant_per_rot = 1.0f/19.0f * 300.0f;  //M3508は19:1
 80027cc:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <main+0x370>)
 80027ce:	4a31      	ldr	r2, [pc, #196]	; (8002894 <main+0x38c>)
 80027d0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   c620_dev_info_global[3].ctrl_param.rotation = C620_ROT_CW;
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <main+0x370>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

//    c620_dev_info_global[3].ctrl_param.pid_vel.kp = 0.1f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する  // TODO: これまでのgain
   c620_dev_info_global[3].ctrl_param.pid_vel.kp = 0.15f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する
 80027dc:	4b26      	ldr	r3, [pc, #152]	; (8002878 <main+0x370>)
 80027de:	4a2e      	ldr	r2, [pc, #184]	; (8002898 <main+0x390>)
 80027e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   c620_dev_info_global[3].ctrl_param.pid_vel.ki = 0.0f;
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <main+0x370>)
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   c620_dev_info_global[3].ctrl_param.pid_vel.kd = 0.0f;
 80027ee:	4b22      	ldr	r3, [pc, #136]	; (8002878 <main+0x370>)
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   c620_dev_info_global[3].ctrl_param.pid_vel.kff = 0.0f;
 80027f8:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <main+0x370>)
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

   c620_dev_info_global[3].ctrl_param.pid.kp = 10.0f;  // 位置制御用
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <main+0x370>)
 8002804:	4a25      	ldr	r2, [pc, #148]	; (800289c <main+0x394>)
 8002806:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
//    c620_dev_info_global[3].ctrl_param.pid.kp = 9.0f;  // 位置制御用
   c620_dev_info_global[3].ctrl_param.pid.ki = 0.05f;
 800280a:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <main+0x370>)
 800280c:	4a24      	ldr	r2, [pc, #144]	; (80028a0 <main+0x398>)
 800280e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
//    c620_dev_info_global[3].ctrl_param.pid.ki = 0.1f;
   c620_dev_info_global[3].ctrl_param.pid.kd = 0.0f;
 8002812:	4b19      	ldr	r3, [pc, #100]	; (8002878 <main+0x370>)
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   c620_dev_info_global[3].ctrl_param.pid.kff = 0.0f;
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <main+0x370>)
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
//   c620_dev_info_global[i].ctrl_param.pid.kd = 0.0f;
//   c620_dev_info_global[i].ctrl_param.pid.kff = 0.0f;
//
//   }

   for(int i=0; i<num_of_c620; i++)C620_SetTarget(&c620_dev_info_global[i], 0.0f);
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	e00d      	b.n	8002848 <main+0x340>
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	224c      	movs	r2, #76	; 0x4c
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	4a10      	ldr	r2, [pc, #64]	; (8002878 <main+0x370>)
 8002836:	4413      	add	r3, r2
 8002838:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80028a4 <main+0x39c>
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fef9 	bl	8001634 <C620_SetTarget>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	3301      	adds	r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <main+0x36c>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4293      	cmp	r3, r2
 8002852:	dbeb      	blt.n	800282c <main+0x324>
   if(!DISABLE_C620_WAIT_CONNECT)C620_WaitForConnect(c620_dev_info_global, num_of_c620);
 8002854:	4b07      	ldr	r3, [pc, #28]	; (8002874 <main+0x36c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	4807      	ldr	r0, [pc, #28]	; (8002878 <main+0x370>)
 800285c:	f7fe feb2 	bl	80015c4 <C620_WaitForConnect>
//    for(int i=0; i<num_of_c620; i++){
//        C620_Calibration(&c620_dev_info_global[i], -2.0f, SWITCH_NO, GPIOG, GPIO_PIN_1, &hcan1);
//        C620_ControlEnable(&(c620_dev_info_global[i]));
//    }
   for(int i=0; i<num_of_c620; i++)C620_ControlEnable(&(c620_dev_info_global[i]));
 8002860:	2300      	movs	r3, #0
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	e02c      	b.n	80028c0 <main+0x3b8>
 8002866:	bf00      	nop
 8002868:	2000473c 	.word	0x2000473c
 800286c:	40020400 	.word	0x40020400
 8002870:	200046e0 	.word	0x200046e0
 8002874:	0801160e 	.word	0x0801160e
 8002878:	20004740 	.word	0x20004740
 800287c:	41700000 	.word	0x41700000
 8002880:	3de1c0f3 	.word	0x3de1c0f3
 8002884:	40900000 	.word	0x40900000
 8002888:	4144cccd 	.word	0x4144cccd
 800288c:	3e23d70a 	.word	0x3e23d70a
 8002890:	44bb8000 	.word	0x44bb8000
 8002894:	417ca1af 	.word	0x417ca1af
 8002898:	3e19999a 	.word	0x3e19999a
 800289c:	41200000 	.word	0x41200000
 80028a0:	3d4ccccd 	.word	0x3d4ccccd
 80028a4:	00000000 	.word	0x00000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	224c      	movs	r2, #76	; 0x4c
 80028ac:	fb02 f303 	mul.w	r3, r2, r3
 80028b0:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <main+0x3e4>)
 80028b2:	4413      	add	r3, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fecc 	bl	8001652 <C620_ControlEnable>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3301      	adds	r3, #1
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <main+0x3e8>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4293      	cmp	r3, r2
 80028ca:	dbed      	blt.n	80028a8 <main+0x3a0>

   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // LD3 (RED) -> OFF
 80028cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028d0:	4808      	ldr	r0, [pc, #32]	; (80028f4 <main+0x3ec>)
 80028d2:	f002 fc66 	bl	80051a2 <HAL_GPIO_TogglePin>
   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // LD1 (GREEN) -> OFF
 80028d6:	2101      	movs	r1, #1
 80028d8:	4806      	ldr	r0, [pc, #24]	; (80028f4 <main+0x3ec>)
 80028da:	f002 fc62 	bl	80051a2 <HAL_GPIO_TogglePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80028de:	f00a f843 	bl	800c968 <osKernelInitialize>
  MX_FREERTOS_Init();
 80028e2:	f7ff fca1 	bl	8002228 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80028e6:	f00a f873 	bl	800c9d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028ea:	e7fe      	b.n	80028ea <main+0x3e2>
 80028ec:	20004740 	.word	0x20004740
 80028f0:	0801160e 	.word	0x0801160e
 80028f4:	40020400 	.word	0x40020400

080028f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b094      	sub	sp, #80	; 0x50
 80028fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028fe:	f107 031c 	add.w	r3, r7, #28
 8002902:	2234      	movs	r2, #52	; 0x34
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f00e f842 	bl	8010990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800290c:	f107 0308 	add.w	r3, r7, #8
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800291c:	f003 ff14 	bl	8006748 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002920:	4b2c      	ldr	r3, [pc, #176]	; (80029d4 <SystemClock_Config+0xdc>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	4a2b      	ldr	r2, [pc, #172]	; (80029d4 <SystemClock_Config+0xdc>)
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292a:	6413      	str	r3, [r2, #64]	; 0x40
 800292c:	4b29      	ldr	r3, [pc, #164]	; (80029d4 <SystemClock_Config+0xdc>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002938:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <SystemClock_Config+0xe0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002940:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <SystemClock_Config+0xe0>)
 8002942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <SystemClock_Config+0xe0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002954:	2301      	movs	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800295c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800295e:	2302      	movs	r3, #2
 8002960:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002966:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002968:	2304      	movs	r3, #4
 800296a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800296c:	2360      	movs	r3, #96	; 0x60
 800296e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002970:	2302      	movs	r3, #2
 8002972:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002974:	2304      	movs	r3, #4
 8002976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002978:	2302      	movs	r3, #2
 800297a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	4618      	mov	r0, r3
 8002982:	f003 ff41 	bl	8006808 <HAL_RCC_OscConfig>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800298c:	f000 f838 	bl	8002a00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002990:	f003 feea 	bl	8006768 <HAL_PWREx_EnableOverDrive>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800299a:	f000 f831 	bl	8002a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800299e:	230f      	movs	r3, #15
 80029a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029a2:	2302      	movs	r3, #2
 80029a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	2103      	movs	r1, #3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f004 f9d2 	bl	8006d64 <HAL_RCC_ClockConfig>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80029c6:	f000 f81b 	bl	8002a00 <Error_Handler>
  }
}
 80029ca:	bf00      	nop
 80029cc:	3750      	adds	r7, #80	; 0x50
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40007000 	.word	0x40007000

080029dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029ee:	f000 fbf9 	bl	80031e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40010000 	.word	0x40010000

08002a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a04:	b672      	cpsid	i
}
 8002a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <Error_Handler+0x8>
	...

08002a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_MspInit+0x4c>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <HAL_MspInit+0x4c>)
 8002a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <HAL_MspInit+0x4c>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_MspInit+0x4c>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <HAL_MspInit+0x4c>)
 8002a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a34:	6453      	str	r3, [r2, #68]	; 0x44
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_MspInit+0x4c>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	210f      	movs	r1, #15
 8002a46:	f06f 0001 	mvn.w	r0, #1
 8002a4a:	f001 fb19 	bl	8004080 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800

08002a5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	; 0x30
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <HAL_InitTick+0xcc>)
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	4a2d      	ldr	r2, [pc, #180]	; (8002b28 <HAL_InitTick+0xcc>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6453      	str	r3, [r2, #68]	; 0x44
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_InitTick+0xcc>)
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a84:	f107 020c 	add.w	r2, r7, #12
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f004 fb8e 	bl	80071b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002a94:	f004 fb78 	bl	8007188 <HAL_RCC_GetPCLK2Freq>
 8002a98:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <HAL_InitTick+0xd0>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	0c9b      	lsrs	r3, r3, #18
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002aa8:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <HAL_InitTick+0xd4>)
 8002aaa:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <HAL_InitTick+0xd8>)
 8002aac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <HAL_InitTick+0xd4>)
 8002ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ab4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ab6:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <HAL_InitTick+0xd4>)
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002abc:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <HAL_InitTick+0xd4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_InitTick+0xd4>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_InitTick+0xd4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002ace:	4818      	ldr	r0, [pc, #96]	; (8002b30 <HAL_InitTick+0xd4>)
 8002ad0:	f004 ffc8 	bl	8007a64 <HAL_TIM_Base_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11b      	bne.n	8002b1a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002ae2:	4813      	ldr	r0, [pc, #76]	; (8002b30 <HAL_InitTick+0xd4>)
 8002ae4:	f005 f820 	bl	8007b28 <HAL_TIM_Base_Start_IT>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d111      	bne.n	8002b1a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002af6:	2019      	movs	r0, #25
 8002af8:	f001 fade 	bl	80040b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	d808      	bhi.n	8002b14 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002b02:	2200      	movs	r2, #0
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	2019      	movs	r0, #25
 8002b08:	f001 faba 	bl	8004080 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <HAL_InitTick+0xdc>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e002      	b.n	8002b1a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3730      	adds	r7, #48	; 0x30
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	431bde83 	.word	0x431bde83
 8002b30:	20007c60 	.word	0x20007c60
 8002b34:	40010000 	.word	0x40010000
 8002b38:	20000004 	.word	0x20000004

08002b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <NMI_Handler+0x4>

08002b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b46:	e7fe      	b.n	8002b46 <HardFault_Handler+0x4>

08002b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b4c:	e7fe      	b.n	8002b4c <MemManage_Handler+0x4>

08002b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b52:	e7fe      	b.n	8002b52 <BusFault_Handler+0x4>

08002b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b58:	e7fe      	b.n	8002b58 <UsageFault_Handler+0x4>

08002b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <DMA1_Stream1_IRQHandler+0x10>)
 8002b6e:	f001 fbf1 	bl	8004354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20007e20 	.word	0x20007e20

08002b7c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <DMA1_Stream3_IRQHandler+0x10>)
 8002b82:	f001 fbe7 	bl	8004354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20007e80 	.word	0x20007e80

08002b90 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <DMA1_Stream6_IRQHandler+0x10>)
 8002b96:	f001 fbdd 	bl	8004354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20007dc0 	.word	0x20007dc0

08002ba4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ba8:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <CAN1_TX_IRQHandler+0x10>)
 8002baa:	f000 ffc8 	bl	8003b3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200046e0 	.word	0x200046e0

08002bb8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <CAN1_RX0_IRQHandler+0x10>)
 8002bbe:	f000 ffbe 	bl	8003b3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200046e0 	.word	0x200046e0

08002bcc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <CAN1_RX1_IRQHandler+0x10>)
 8002bd2:	f000 ffb4 	bl	8003b3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	200046e0 	.word	0x200046e0

08002be0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002be4:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002be6:	f005 f817 	bl	8007c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20007c60 	.word	0x20007c60

08002bf4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <USART2_IRQHandler+0x10>)
 8002bfa:	f005 fae5 	bl	80081c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20007cb0 	.word	0x20007cb0

08002c08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <USART3_IRQHandler+0x10>)
 8002c0e:	f005 fadb 	bl	80081c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20007d38 	.word	0x20007d38

08002c1c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002c20:	4802      	ldr	r0, [pc, #8]	; (8002c2c <CAN2_TX_IRQHandler+0x10>)
 8002c22:	f000 ff8c 	bl	8003b3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20004708 	.word	0x20004708

08002c30 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <CAN2_RX0_IRQHandler+0x10>)
 8002c36:	f000 ff82 	bl	8003b3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20004708 	.word	0x20004708

08002c44 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <CAN2_RX1_IRQHandler+0x10>)
 8002c4a:	f000 ff78 	bl	8003b3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20004708 	.word	0x20004708

08002c58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <OTG_FS_IRQHandler+0x10>)
 8002c5e:	f002 fc00 	bl	8005462 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	2000dd0c 	.word	0x2000dd0c

08002c6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e00a      	b.n	8002c94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c7e:	f3af 8000 	nop.w
 8002c82:	4601      	mov	r1, r0
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	60ba      	str	r2, [r7, #8]
 8002c8a:	b2ca      	uxtb	r2, r1
 8002c8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	3301      	adds	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	dbf0      	blt.n	8002c7e <_read+0x12>
  }

  return len;
 8002c9c:	687b      	ldr	r3, [r7, #4]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	e009      	b.n	8002ccc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	60ba      	str	r2, [r7, #8]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fb9f 	bl	8002404 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	dbf1      	blt.n	8002cb8 <_write+0x12>
  }
  return len;
 8002cd4:	687b      	ldr	r3, [r7, #4]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <_close>:

int _close(int file)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d06:	605a      	str	r2, [r3, #4]
  return 0;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <_isatty>:

int _isatty(int file)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d1e:	2301      	movs	r3, #1
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d50:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <_sbrk+0x5c>)
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <_sbrk+0x60>)
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <_sbrk+0x64>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d64:	4b11      	ldr	r3, [pc, #68]	; (8002dac <_sbrk+0x64>)
 8002d66:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <_sbrk+0x68>)
 8002d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <_sbrk+0x64>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d207      	bcs.n	8002d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d78:	f00d fe68 	bl	8010a4c <__errno>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	220c      	movs	r2, #12
 8002d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d86:	e009      	b.n	8002d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <_sbrk+0x64>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <_sbrk+0x64>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <_sbrk+0x64>)
 8002d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20080000 	.word	0x20080000
 8002da8:	00000400 	.word	0x00000400
 8002dac:	20007cac 	.word	0x20007cac
 8002db0:	2000e360 	.word	0x2000e360

08002db4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <SystemInit+0x20>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <SystemInit+0x20>)
 8002dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <MX_USART2_UART_Init+0x58>)
 8002dde:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <MX_USART2_UART_Init+0x5c>)
 8002de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002de2:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <MX_USART2_UART_Init+0x58>)
 8002de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <MX_USART2_UART_Init+0x58>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <MX_USART2_UART_Init+0x58>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002df6:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <MX_USART2_UART_Init+0x58>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <MX_USART2_UART_Init+0x58>)
 8002dfe:	220c      	movs	r2, #12
 8002e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <MX_USART2_UART_Init+0x58>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <MX_USART2_UART_Init+0x58>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <MX_USART2_UART_Init+0x58>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <MX_USART2_UART_Init+0x58>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e1a:	4805      	ldr	r0, [pc, #20]	; (8002e30 <MX_USART2_UART_Init+0x58>)
 8002e1c:	f005 f902 	bl	8008024 <HAL_UART_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e26:	f7ff fdeb 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20007cb0 	.word	0x20007cb0
 8002e34:	40004400 	.word	0x40004400

08002e38 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <MX_USART3_UART_Init+0x58>)
 8002e3e:	4a15      	ldr	r2, [pc, #84]	; (8002e94 <MX_USART3_UART_Init+0x5c>)
 8002e40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <MX_USART3_UART_Init+0x58>)
 8002e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <MX_USART3_UART_Init+0x58>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <MX_USART3_UART_Init+0x58>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <MX_USART3_UART_Init+0x58>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <MX_USART3_UART_Init+0x58>)
 8002e5e:	220c      	movs	r2, #12
 8002e60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <MX_USART3_UART_Init+0x58>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <MX_USART3_UART_Init+0x58>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <MX_USART3_UART_Init+0x58>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <MX_USART3_UART_Init+0x58>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e7a:	4805      	ldr	r0, [pc, #20]	; (8002e90 <MX_USART3_UART_Init+0x58>)
 8002e7c:	f005 f8d2 	bl	8008024 <HAL_UART_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002e86:	f7ff fdbb 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20007d38 	.word	0x20007d38
 8002e94:	40004800 	.word	0x40004800

08002e98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b0b0      	sub	sp, #192	; 0xc0
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002eb0:	f107 031c 	add.w	r3, r7, #28
 8002eb4:	2290      	movs	r2, #144	; 0x90
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f00d fd69 	bl	8010990 <memset>
  if(uartHandle->Instance==USART2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4aa2      	ldr	r2, [pc, #648]	; (800314c <HAL_UART_MspInit+0x2b4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	f040 8093 	bne.w	8002ff0 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ed2:	f107 031c 	add.w	r3, r7, #28
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f004 f99c 	bl	8007214 <HAL_RCCEx_PeriphCLKConfig>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ee2:	f7ff fd8d 	bl	8002a00 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ee6:	4b9a      	ldr	r3, [pc, #616]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	4a99      	ldr	r2, [pc, #612]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8002eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef2:	4b97      	ldr	r3, [pc, #604]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	4b94      	ldr	r3, [pc, #592]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a93      	ldr	r2, [pc, #588]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b91      	ldr	r3, [pc, #580]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f16:	4b8e      	ldr	r3, [pc, #568]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a8d      	ldr	r2, [pc, #564]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8002f1c:	f043 0308 	orr.w	r3, r3, #8
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b8b      	ldr	r3, [pc, #556]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f2e:	2308      	movs	r3, #8
 8002f30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	2303      	movs	r3, #3
 8002f42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f46:	2307      	movs	r3, #7
 8002f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f50:	4619      	mov	r1, r3
 8002f52:	4880      	ldr	r0, [pc, #512]	; (8003154 <HAL_UART_MspInit+0x2bc>)
 8002f54:	f001 ff60 	bl	8004e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f70:	2307      	movs	r3, #7
 8002f72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4876      	ldr	r0, [pc, #472]	; (8003158 <HAL_UART_MspInit+0x2c0>)
 8002f7e:	f001 ff4b 	bl	8004e18 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002f82:	4b76      	ldr	r3, [pc, #472]	; (800315c <HAL_UART_MspInit+0x2c4>)
 8002f84:	4a76      	ldr	r2, [pc, #472]	; (8003160 <HAL_UART_MspInit+0x2c8>)
 8002f86:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002f88:	4b74      	ldr	r3, [pc, #464]	; (800315c <HAL_UART_MspInit+0x2c4>)
 8002f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f8e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f90:	4b72      	ldr	r3, [pc, #456]	; (800315c <HAL_UART_MspInit+0x2c4>)
 8002f92:	2240      	movs	r2, #64	; 0x40
 8002f94:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f96:	4b71      	ldr	r3, [pc, #452]	; (800315c <HAL_UART_MspInit+0x2c4>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f9c:	4b6f      	ldr	r3, [pc, #444]	; (800315c <HAL_UART_MspInit+0x2c4>)
 8002f9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fa4:	4b6d      	ldr	r3, [pc, #436]	; (800315c <HAL_UART_MspInit+0x2c4>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002faa:	4b6c      	ldr	r3, [pc, #432]	; (800315c <HAL_UART_MspInit+0x2c4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002fb0:	4b6a      	ldr	r3, [pc, #424]	; (800315c <HAL_UART_MspInit+0x2c4>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fb6:	4b69      	ldr	r3, [pc, #420]	; (800315c <HAL_UART_MspInit+0x2c4>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fbc:	4b67      	ldr	r3, [pc, #412]	; (800315c <HAL_UART_MspInit+0x2c4>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002fc2:	4866      	ldr	r0, [pc, #408]	; (800315c <HAL_UART_MspInit+0x2c4>)
 8002fc4:	f001 f886 	bl	80040d4 <HAL_DMA_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002fce:	f7ff fd17 	bl	8002a00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a61      	ldr	r2, [pc, #388]	; (800315c <HAL_UART_MspInit+0x2c4>)
 8002fd6:	671a      	str	r2, [r3, #112]	; 0x70
 8002fd8:	4a60      	ldr	r2, [pc, #384]	; (800315c <HAL_UART_MspInit+0x2c4>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2105      	movs	r1, #5
 8002fe2:	2026      	movs	r0, #38	; 0x26
 8002fe4:	f001 f84c 	bl	8004080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fe8:	2026      	movs	r0, #38	; 0x26
 8002fea:	f001 f865 	bl	80040b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002fee:	e0a9      	b.n	8003144 <HAL_UART_MspInit+0x2ac>
  else if(uartHandle->Instance==USART3)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a5b      	ldr	r2, [pc, #364]	; (8003164 <HAL_UART_MspInit+0x2cc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	f040 80a4 	bne.w	8003144 <HAL_UART_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003000:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003002:	2300      	movs	r3, #0
 8003004:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003006:	f107 031c 	add.w	r3, r7, #28
 800300a:	4618      	mov	r0, r3
 800300c:	f004 f902 	bl	8007214 <HAL_RCCEx_PeriphCLKConfig>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8003016:	f7ff fcf3 	bl	8002a00 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800301a:	4b4d      	ldr	r3, [pc, #308]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a4c      	ldr	r2, [pc, #304]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8003020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
 8003026:	4b4a      	ldr	r3, [pc, #296]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003032:	4b47      	ldr	r3, [pc, #284]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	4a46      	ldr	r2, [pc, #280]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8003038:	f043 0308 	orr.w	r3, r3, #8
 800303c:	6313      	str	r3, [r2, #48]	; 0x30
 800303e:	4b44      	ldr	r3, [pc, #272]	; (8003150 <HAL_UART_MspInit+0x2b8>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800304a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800304e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305e:	2303      	movs	r3, #3
 8003060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003064:	2307      	movs	r3, #7
 8003066:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800306a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800306e:	4619      	mov	r1, r3
 8003070:	4839      	ldr	r0, [pc, #228]	; (8003158 <HAL_UART_MspInit+0x2c0>)
 8003072:	f001 fed1 	bl	8004e18 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003076:	4b3c      	ldr	r3, [pc, #240]	; (8003168 <HAL_UART_MspInit+0x2d0>)
 8003078:	4a3c      	ldr	r2, [pc, #240]	; (800316c <HAL_UART_MspInit+0x2d4>)
 800307a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800307c:	4b3a      	ldr	r3, [pc, #232]	; (8003168 <HAL_UART_MspInit+0x2d0>)
 800307e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003082:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003084:	4b38      	ldr	r3, [pc, #224]	; (8003168 <HAL_UART_MspInit+0x2d0>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800308a:	4b37      	ldr	r3, [pc, #220]	; (8003168 <HAL_UART_MspInit+0x2d0>)
 800308c:	2200      	movs	r2, #0
 800308e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003090:	4b35      	ldr	r3, [pc, #212]	; (8003168 <HAL_UART_MspInit+0x2d0>)
 8003092:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003096:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003098:	4b33      	ldr	r3, [pc, #204]	; (8003168 <HAL_UART_MspInit+0x2d0>)
 800309a:	2200      	movs	r2, #0
 800309c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800309e:	4b32      	ldr	r3, [pc, #200]	; (8003168 <HAL_UART_MspInit+0x2d0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80030a4:	4b30      	ldr	r3, [pc, #192]	; (8003168 <HAL_UART_MspInit+0x2d0>)
 80030a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030aa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80030ac:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <HAL_UART_MspInit+0x2d0>)
 80030ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80030b2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030b4:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <HAL_UART_MspInit+0x2d0>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80030ba:	482b      	ldr	r0, [pc, #172]	; (8003168 <HAL_UART_MspInit+0x2d0>)
 80030bc:	f001 f80a 	bl	80040d4 <HAL_DMA_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_UART_MspInit+0x232>
      Error_Handler();
 80030c6:	f7ff fc9b 	bl	8002a00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a26      	ldr	r2, [pc, #152]	; (8003168 <HAL_UART_MspInit+0x2d0>)
 80030ce:	675a      	str	r2, [r3, #116]	; 0x74
 80030d0:	4a25      	ldr	r2, [pc, #148]	; (8003168 <HAL_UART_MspInit+0x2d0>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80030d6:	4b26      	ldr	r3, [pc, #152]	; (8003170 <HAL_UART_MspInit+0x2d8>)
 80030d8:	4a26      	ldr	r2, [pc, #152]	; (8003174 <HAL_UART_MspInit+0x2dc>)
 80030da:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80030dc:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_UART_MspInit+0x2d8>)
 80030de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <HAL_UART_MspInit+0x2d8>)
 80030e6:	2240      	movs	r2, #64	; 0x40
 80030e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ea:	4b21      	ldr	r3, [pc, #132]	; (8003170 <HAL_UART_MspInit+0x2d8>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030f0:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <HAL_UART_MspInit+0x2d8>)
 80030f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030f6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030f8:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_UART_MspInit+0x2d8>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <HAL_UART_MspInit+0x2d8>)
 8003100:	2200      	movs	r2, #0
 8003102:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003104:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_UART_MspInit+0x2d8>)
 8003106:	2200      	movs	r2, #0
 8003108:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800310a:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_UART_MspInit+0x2d8>)
 800310c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003110:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_UART_MspInit+0x2d8>)
 8003114:	2200      	movs	r2, #0
 8003116:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003118:	4815      	ldr	r0, [pc, #84]	; (8003170 <HAL_UART_MspInit+0x2d8>)
 800311a:	f000 ffdb 	bl	80040d4 <HAL_DMA_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_UART_MspInit+0x290>
      Error_Handler();
 8003124:	f7ff fc6c 	bl	8002a00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a11      	ldr	r2, [pc, #68]	; (8003170 <HAL_UART_MspInit+0x2d8>)
 800312c:	671a      	str	r2, [r3, #112]	; 0x70
 800312e:	4a10      	ldr	r2, [pc, #64]	; (8003170 <HAL_UART_MspInit+0x2d8>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003134:	2200      	movs	r2, #0
 8003136:	2105      	movs	r1, #5
 8003138:	2027      	movs	r0, #39	; 0x27
 800313a:	f000 ffa1 	bl	8004080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800313e:	2027      	movs	r0, #39	; 0x27
 8003140:	f000 ffba 	bl	80040b8 <HAL_NVIC_EnableIRQ>
}
 8003144:	bf00      	nop
 8003146:	37c0      	adds	r7, #192	; 0xc0
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40004400 	.word	0x40004400
 8003150:	40023800 	.word	0x40023800
 8003154:	40020000 	.word	0x40020000
 8003158:	40020c00 	.word	0x40020c00
 800315c:	20007dc0 	.word	0x20007dc0
 8003160:	400260a0 	.word	0x400260a0
 8003164:	40004800 	.word	0x40004800
 8003168:	20007e20 	.word	0x20007e20
 800316c:	40026028 	.word	0x40026028
 8003170:	20007e80 	.word	0x20007e80
 8003174:	40026058 	.word	0x40026058

08003178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800317c:	480d      	ldr	r0, [pc, #52]	; (80031b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800317e:	490e      	ldr	r1, [pc, #56]	; (80031b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003180:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003184:	e002      	b.n	800318c <LoopCopyDataInit>

08003186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800318a:	3304      	adds	r3, #4

0800318c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800318c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800318e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003190:	d3f9      	bcc.n	8003186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003192:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003194:	4c0b      	ldr	r4, [pc, #44]	; (80031c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003198:	e001      	b.n	800319e <LoopFillZerobss>

0800319a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800319a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800319c:	3204      	adds	r2, #4

0800319e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800319e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031a0:	d3fb      	bcc.n	800319a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031a2:	f7ff fe07 	bl	8002db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031a6:	f00d fc57 	bl	8010a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031aa:	f7ff f9ad 	bl	8002508 <main>
  bx  lr    
 80031ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80031b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031b8:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80031bc:	080116cc 	.word	0x080116cc
  ldr r2, =_sbss
 80031c0:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 80031c4:	2000e360 	.word	0x2000e360

080031c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031c8:	e7fe      	b.n	80031c8 <ADC_IRQHandler>

080031ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ce:	2003      	movs	r0, #3
 80031d0:	f000 ff4b 	bl	800406a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d4:	200f      	movs	r0, #15
 80031d6:	f7ff fc41 	bl	8002a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031da:	f7ff fc17 	bl	8002a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_IncTick+0x20>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_IncTick+0x24>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	4a04      	ldr	r2, [pc, #16]	; (8003208 <HAL_IncTick+0x24>)
 80031f6:	6013      	str	r3, [r2, #0]
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000008 	.word	0x20000008
 8003208:	20007ee0 	.word	0x20007ee0

0800320c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return uwTick;
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <HAL_GetTick+0x14>)
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20007ee0 	.word	0x20007ee0

08003224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7ff ffee 	bl	800320c <HAL_GetTick>
 8003230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800323c:	d005      	beq.n	800324a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_Delay+0x44>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800324a:	bf00      	nop
 800324c:	f7ff ffde 	bl	800320c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d8f7      	bhi.n	800324c <HAL_Delay+0x28>
  {
  }
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000008 	.word	0x20000008

0800326c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0ed      	b.n	800345a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe fdd2 	bl	8001e34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a0:	f7ff ffb4 	bl	800320c <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032a6:	e012      	b.n	80032ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032a8:	f7ff ffb0 	bl	800320c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b0a      	cmp	r3, #10
 80032b4:	d90b      	bls.n	80032ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2205      	movs	r2, #5
 80032c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0c5      	b.n	800345a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0e5      	beq.n	80032a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0202 	bic.w	r2, r2, #2
 80032ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032ec:	f7ff ff8e 	bl	800320c <HAL_GetTick>
 80032f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032f2:	e012      	b.n	800331a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032f4:	f7ff ff8a 	bl	800320c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b0a      	cmp	r3, #10
 8003300:	d90b      	bls.n	800331a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2205      	movs	r2, #5
 8003312:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e09f      	b.n	800345a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1e5      	bne.n	80032f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7e1b      	ldrb	r3, [r3, #24]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d108      	bne.n	8003342 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e007      	b.n	8003352 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003350:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7e5b      	ldrb	r3, [r3, #25]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d108      	bne.n	800336c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e007      	b.n	800337c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7e9b      	ldrb	r3, [r3, #26]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d108      	bne.n	8003396 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0220 	orr.w	r2, r2, #32
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e007      	b.n	80033a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0220 	bic.w	r2, r2, #32
 80033a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7edb      	ldrb	r3, [r3, #27]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d108      	bne.n	80033c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0210 	bic.w	r2, r2, #16
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e007      	b.n	80033d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0210 	orr.w	r2, r2, #16
 80033ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	7f1b      	ldrb	r3, [r3, #28]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d108      	bne.n	80033ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0208 	orr.w	r2, r2, #8
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e007      	b.n	80033fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0208 	bic.w	r2, r2, #8
 80033f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	7f5b      	ldrb	r3, [r3, #29]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d108      	bne.n	8003414 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0204 	orr.w	r2, r2, #4
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	e007      	b.n	8003424 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0204 	bic.w	r2, r2, #4
 8003422:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	ea42 0103 	orr.w	r1, r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	1e5a      	subs	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800347a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d003      	beq.n	800348a <HAL_CAN_ConfigFilter+0x26>
 8003482:	7cfb      	ldrb	r3, [r7, #19]
 8003484:	2b02      	cmp	r3, #2
 8003486:	f040 80c7 	bne.w	8003618 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a69      	ldr	r2, [pc, #420]	; (8003634 <HAL_CAN_ConfigFilter+0x1d0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d001      	beq.n	8003498 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003494:	4b68      	ldr	r3, [pc, #416]	; (8003638 <HAL_CAN_ConfigFilter+0x1d4>)
 8003496:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	4a63      	ldr	r2, [pc, #396]	; (8003638 <HAL_CAN_ConfigFilter+0x1d4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d111      	bne.n	80034d4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034b6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	431a      	orrs	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2201      	movs	r2, #1
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	401a      	ands	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d123      	bne.n	8003546 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43db      	mvns	r3, r3
 8003508:	401a      	ands	r2, r3
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003520:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	3248      	adds	r2, #72	; 0x48
 8003526:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800353a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800353c:	6979      	ldr	r1, [r7, #20]
 800353e:	3348      	adds	r3, #72	; 0x48
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	440b      	add	r3, r1
 8003544:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d122      	bne.n	8003594 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	431a      	orrs	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800356e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3248      	adds	r2, #72	; 0x48
 8003574:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003588:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800358a:	6979      	ldr	r1, [r7, #20]
 800358c:	3348      	adds	r3, #72	; 0x48
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	440b      	add	r3, r1
 8003592:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	401a      	ands	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80035ae:	e007      	b.n	80035c0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d109      	bne.n	80035dc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	401a      	ands	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80035da:	e007      	b.n	80035ec <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d107      	bne.n	8003604 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800360a:	f023 0201 	bic.w	r2, r3, #1
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	e006      	b.n	8003626 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40003400 	.word	0x40003400
 8003638:	40006400 	.word	0x40006400

0800363c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	d12e      	bne.n	80036ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003668:	f7ff fdd0 	bl	800320c <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800366e:	e012      	b.n	8003696 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003670:	f7ff fdcc 	bl	800320c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b0a      	cmp	r3, #10
 800367c:	d90b      	bls.n	8003696 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2205      	movs	r2, #5
 800368e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e012      	b.n	80036bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e5      	bne.n	8003670 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e006      	b.n	80036bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
  }
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80036e2:	7ffb      	ldrb	r3, [r7, #31]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d003      	beq.n	80036f0 <HAL_CAN_AddTxMessage+0x2c>
 80036e8:	7ffb      	ldrb	r3, [r7, #31]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	f040 80ad 	bne.w	800384a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8095 	beq.w	800383a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	0e1b      	lsrs	r3, r3, #24
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800371a:	2201      	movs	r2, #1
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	409a      	lsls	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10d      	bne.n	8003748 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003736:	68f9      	ldr	r1, [r7, #12]
 8003738:	6809      	ldr	r1, [r1, #0]
 800373a:	431a      	orrs	r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3318      	adds	r3, #24
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	440b      	add	r3, r1
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e00f      	b.n	8003768 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003752:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003758:	68f9      	ldr	r1, [r7, #12]
 800375a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800375c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	3318      	adds	r3, #24
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	440b      	add	r3, r1
 8003766:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6819      	ldr	r1, [r3, #0]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	3318      	adds	r3, #24
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	440b      	add	r3, r1
 8003778:	3304      	adds	r3, #4
 800377a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	7d1b      	ldrb	r3, [r3, #20]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d111      	bne.n	80037a8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	3318      	adds	r3, #24
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	4413      	add	r3, r2
 8003790:	3304      	adds	r3, #4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	6811      	ldr	r1, [r2, #0]
 8003798:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	3318      	adds	r3, #24
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	440b      	add	r3, r1
 80037a4:	3304      	adds	r3, #4
 80037a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3307      	adds	r3, #7
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	061a      	lsls	r2, r3, #24
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3306      	adds	r3, #6
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3305      	adds	r3, #5
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	4313      	orrs	r3, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	3204      	adds	r2, #4
 80037c8:	7812      	ldrb	r2, [r2, #0]
 80037ca:	4610      	mov	r0, r2
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	6811      	ldr	r1, [r2, #0]
 80037d0:	ea43 0200 	orr.w	r2, r3, r0
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	440b      	add	r3, r1
 80037da:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80037de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3303      	adds	r3, #3
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	061a      	lsls	r2, r3, #24
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3302      	adds	r3, #2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	041b      	lsls	r3, r3, #16
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3301      	adds	r3, #1
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	4313      	orrs	r3, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	7812      	ldrb	r2, [r2, #0]
 8003800:	4610      	mov	r0, r2
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	6811      	ldr	r1, [r2, #0]
 8003806:	ea43 0200 	orr.w	r2, r3, r0
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	440b      	add	r3, r1
 8003810:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003814:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	3318      	adds	r3, #24
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	4413      	add	r3, r2
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	6811      	ldr	r1, [r2, #0]
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	3318      	adds	r3, #24
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	440b      	add	r3, r1
 8003834:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e00e      	b.n	8003858 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e006      	b.n	8003858 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
  }
}
 8003858:	4618      	mov	r0, r3
 800385a:	3724      	adds	r7, #36	; 0x24
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003876:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003878:	7afb      	ldrb	r3, [r7, #11]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d002      	beq.n	8003884 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800387e:	7afb      	ldrb	r3, [r7, #11]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d11d      	bne.n	80038c0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3301      	adds	r3, #1
 8003896:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3301      	adds	r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3301      	adds	r3, #1
 80038be:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80038c0:	68fb      	ldr	r3, [r7, #12]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80038ce:	b480      	push	{r7}
 80038d0:	b087      	sub	sp, #28
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038e2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d003      	beq.n	80038f2 <HAL_CAN_GetRxMessage+0x24>
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	f040 80f3 	bne.w	8003ad8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10e      	bne.n	8003916 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d116      	bne.n	8003934 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0e7      	b.n	8003ae6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0d8      	b.n	8003ae6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	331b      	adds	r3, #27
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	4413      	add	r3, r2
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0204 	and.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10c      	bne.n	800396c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	331b      	adds	r3, #27
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	4413      	add	r3, r2
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0d5b      	lsrs	r3, r3, #21
 8003962:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e00b      	b.n	8003984 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	331b      	adds	r3, #27
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	4413      	add	r3, r2
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	08db      	lsrs	r3, r3, #3
 800397c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	331b      	adds	r3, #27
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	4413      	add	r3, r2
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0202 	and.w	r2, r3, #2
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	331b      	adds	r3, #27
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	4413      	add	r3, r2
 80039a6:	3304      	adds	r3, #4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 020f 	and.w	r2, r3, #15
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	331b      	adds	r3, #27
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	4413      	add	r3, r2
 80039be:	3304      	adds	r3, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	331b      	adds	r3, #27
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	4413      	add	r3, r2
 80039d6:	3304      	adds	r3, #4
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	0c1b      	lsrs	r3, r3, #16
 80039dc:	b29a      	uxth	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0a1a      	lsrs	r2, r3, #8
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	0c1a      	lsrs	r2, r3, #16
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	3302      	adds	r3, #2
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	0e1a      	lsrs	r2, r3, #24
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	3303      	adds	r3, #3
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	0a1a      	lsrs	r2, r3, #8
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	3305      	adds	r3, #5
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	0c1a      	lsrs	r2, r3, #16
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	3306      	adds	r3, #6
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	0e1a      	lsrs	r2, r3, #24
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	3307      	adds	r3, #7
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d108      	bne.n	8003ac4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0220 	orr.w	r2, r2, #32
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	e007      	b.n	8003ad4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0220 	orr.w	r2, r2, #32
 8003ad2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e006      	b.n	8003ae6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b085      	sub	sp, #20
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b02:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d002      	beq.n	8003b10 <HAL_CAN_ActivateNotification+0x1e>
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d109      	bne.n	8003b24 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6959      	ldr	r1, [r3, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e006      	b.n	8003b32 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b08a      	sub	sp, #40	; 0x28
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d07c      	beq.n	8003c7e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d023      	beq.n	8003bd6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2201      	movs	r2, #1
 8003b94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7fe fc43 	bl	800242c <HAL_CAN_TxMailbox0CompleteCallback>
 8003ba6:	e016      	b.n	8003bd6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d004      	beq.n	8003bbc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bba:	e00c      	b.n	8003bd6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d004      	beq.n	8003bd0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bce:	e002      	b.n	8003bd6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fe fc39 	bl	8002448 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d024      	beq.n	8003c2a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003be8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7fe fc35 	bl	8002464 <HAL_CAN_TxMailbox1CompleteCallback>
 8003bfa:	e016      	b.n	8003c2a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0e:	e00c      	b.n	8003c2a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
 8003c22:	e002      	b.n	8003c2a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7fe fc2b 	bl	8002480 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d024      	beq.n	8003c7e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7fe fc27 	bl	800249c <HAL_CAN_TxMailbox2CompleteCallback>
 8003c4e:	e016      	b.n	8003c7e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d004      	beq.n	8003c64 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
 8003c62:	e00c      	b.n	8003c7e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
 8003c76:	e002      	b.n	8003c7e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7fe fc1d 	bl	80024b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00c      	beq.n	8003ca2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00b      	beq.n	8003cc4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2208      	movs	r2, #8
 8003cbc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f8f4 	bl	8003eac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fe fbf9 	bl	80024d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00c      	beq.n	8003d06 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2210      	movs	r2, #16
 8003d04:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d006      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2208      	movs	r2, #8
 8003d20:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8cc 	bl	8003ec0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fe fbd5 	bl	80024f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d006      	beq.n	8003d68 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2210      	movs	r2, #16
 8003d60:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8b6 	bl	8003ed4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d006      	beq.n	8003d8a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2208      	movs	r2, #8
 8003d82:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f8af 	bl	8003ee8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d07b      	beq.n	8003e8c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d072      	beq.n	8003e84 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	f043 0304 	orr.w	r3, r3, #4
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d043      	beq.n	8003e84 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d03e      	beq.n	8003e84 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e0c:	2b60      	cmp	r3, #96	; 0x60
 8003e0e:	d02b      	beq.n	8003e68 <HAL_CAN_IRQHandler+0x32a>
 8003e10:	2b60      	cmp	r3, #96	; 0x60
 8003e12:	d82e      	bhi.n	8003e72 <HAL_CAN_IRQHandler+0x334>
 8003e14:	2b50      	cmp	r3, #80	; 0x50
 8003e16:	d022      	beq.n	8003e5e <HAL_CAN_IRQHandler+0x320>
 8003e18:	2b50      	cmp	r3, #80	; 0x50
 8003e1a:	d82a      	bhi.n	8003e72 <HAL_CAN_IRQHandler+0x334>
 8003e1c:	2b40      	cmp	r3, #64	; 0x40
 8003e1e:	d019      	beq.n	8003e54 <HAL_CAN_IRQHandler+0x316>
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d826      	bhi.n	8003e72 <HAL_CAN_IRQHandler+0x334>
 8003e24:	2b30      	cmp	r3, #48	; 0x30
 8003e26:	d010      	beq.n	8003e4a <HAL_CAN_IRQHandler+0x30c>
 8003e28:	2b30      	cmp	r3, #48	; 0x30
 8003e2a:	d822      	bhi.n	8003e72 <HAL_CAN_IRQHandler+0x334>
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d002      	beq.n	8003e36 <HAL_CAN_IRQHandler+0x2f8>
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d005      	beq.n	8003e40 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003e34:	e01d      	b.n	8003e72 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	f043 0308 	orr.w	r3, r3, #8
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e3e:	e019      	b.n	8003e74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	f043 0310 	orr.w	r3, r3, #16
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e48:	e014      	b.n	8003e74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	f043 0320 	orr.w	r3, r3, #32
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e52:	e00f      	b.n	8003e74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e5c:	e00a      	b.n	8003e74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e66:	e005      	b.n	8003e74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e70:	e000      	b.n	8003e74 <HAL_CAN_IRQHandler+0x336>
            break;
 8003e72:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e82:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2204      	movs	r2, #4
 8003e8a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f82c 	bl	8003efc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <__NVIC_SetPriorityGrouping+0x40>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <__NVIC_SetPriorityGrouping+0x44>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f3e:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <__NVIC_SetPriorityGrouping+0x40>)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	60d3      	str	r3, [r2, #12]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	e000ed00 	.word	0xe000ed00
 8003f54:	05fa0000 	.word	0x05fa0000

08003f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <__NVIC_GetPriorityGrouping+0x18>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	0a1b      	lsrs	r3, r3, #8
 8003f62:	f003 0307 	and.w	r3, r3, #7
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	db0b      	blt.n	8003f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	f003 021f 	and.w	r2, r3, #31
 8003f8c:	4907      	ldr	r1, [pc, #28]	; (8003fac <__NVIC_EnableIRQ+0x38>)
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	2001      	movs	r0, #1
 8003f96:	fa00 f202 	lsl.w	r2, r0, r2
 8003f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	e000e100 	.word	0xe000e100

08003fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	6039      	str	r1, [r7, #0]
 8003fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	db0a      	blt.n	8003fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	490c      	ldr	r1, [pc, #48]	; (8003ffc <__NVIC_SetPriority+0x4c>)
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	0112      	lsls	r2, r2, #4
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fd8:	e00a      	b.n	8003ff0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	4908      	ldr	r1, [pc, #32]	; (8004000 <__NVIC_SetPriority+0x50>)
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	3b04      	subs	r3, #4
 8003fe8:	0112      	lsls	r2, r2, #4
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	440b      	add	r3, r1
 8003fee:	761a      	strb	r2, [r3, #24]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000e100 	.word	0xe000e100
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004004:	b480      	push	{r7}
 8004006:	b089      	sub	sp, #36	; 0x24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f1c3 0307 	rsb	r3, r3, #7
 800401e:	2b04      	cmp	r3, #4
 8004020:	bf28      	it	cs
 8004022:	2304      	movcs	r3, #4
 8004024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3304      	adds	r3, #4
 800402a:	2b06      	cmp	r3, #6
 800402c:	d902      	bls.n	8004034 <NVIC_EncodePriority+0x30>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3b03      	subs	r3, #3
 8004032:	e000      	b.n	8004036 <NVIC_EncodePriority+0x32>
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43da      	mvns	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	401a      	ands	r2, r3
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800404c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	fa01 f303 	lsl.w	r3, r1, r3
 8004056:	43d9      	mvns	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800405c:	4313      	orrs	r3, r2
         );
}
 800405e:	4618      	mov	r0, r3
 8004060:	3724      	adds	r7, #36	; 0x24
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff ff4c 	bl	8003f10 <__NVIC_SetPriorityGrouping>
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004092:	f7ff ff61 	bl	8003f58 <__NVIC_GetPriorityGrouping>
 8004096:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	6978      	ldr	r0, [r7, #20]
 800409e:	f7ff ffb1 	bl	8004004 <NVIC_EncodePriority>
 80040a2:	4602      	mov	r2, r0
 80040a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040a8:	4611      	mov	r1, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff ff80 	bl	8003fb0 <__NVIC_SetPriority>
}
 80040b0:	bf00      	nop
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff ff54 	bl	8003f74 <__NVIC_EnableIRQ>
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040e0:	f7ff f894 	bl	800320c <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e099      	b.n	8004224 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004110:	e00f      	b.n	8004132 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004112:	f7ff f87b 	bl	800320c <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b05      	cmp	r3, #5
 800411e:	d908      	bls.n	8004132 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2203      	movs	r2, #3
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e078      	b.n	8004224 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e8      	bne.n	8004112 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4b38      	ldr	r3, [pc, #224]	; (800422c <HAL_DMA_Init+0x158>)
 800414c:	4013      	ands	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800415e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800416a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	2b04      	cmp	r3, #4
 800418a:	d107      	bne.n	800419c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	4313      	orrs	r3, r2
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f023 0307 	bic.w	r3, r3, #7
 80041b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d117      	bne.n	80041f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00e      	beq.n	80041f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fa7b 	bl	80046d4 <DMA_CheckFifoParam>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2240      	movs	r2, #64	; 0x40
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041f2:	2301      	movs	r3, #1
 80041f4:	e016      	b.n	8004224 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fa32 	bl	8004668 <DMA_CalcBaseAndBitshift>
 8004204:	4603      	mov	r3, r0
 8004206:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420c:	223f      	movs	r2, #63	; 0x3f
 800420e:	409a      	lsls	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	e010803f 	.word	0xe010803f

08004230 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800423e:	f7fe ffe5 	bl	800320c <HAL_GetTick>
 8004242:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d008      	beq.n	8004262 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e052      	b.n	8004308 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0216 	bic.w	r2, r2, #22
 8004270:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004280:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <HAL_DMA_Abort+0x62>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428e:	2b00      	cmp	r3, #0
 8004290:	d007      	beq.n	80042a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0208 	bic.w	r2, r2, #8
 80042a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0201 	bic.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042b2:	e013      	b.n	80042dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042b4:	f7fe ffaa 	bl	800320c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b05      	cmp	r3, #5
 80042c0:	d90c      	bls.n	80042dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2203      	movs	r2, #3
 80042cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e015      	b.n	8004308 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e4      	bne.n	80042b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ee:	223f      	movs	r2, #63	; 0x3f
 80042f0:	409a      	lsls	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d004      	beq.n	800432e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2280      	movs	r2, #128	; 0x80
 8004328:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e00c      	b.n	8004348 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2205      	movs	r2, #5
 8004332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004360:	4b8e      	ldr	r3, [pc, #568]	; (800459c <HAL_DMA_IRQHandler+0x248>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a8e      	ldr	r2, [pc, #568]	; (80045a0 <HAL_DMA_IRQHandler+0x24c>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	0a9b      	lsrs	r3, r3, #10
 800436c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	2208      	movs	r2, #8
 8004380:	409a      	lsls	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01a      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d013      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0204 	bic.w	r2, r2, #4
 80043a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ac:	2208      	movs	r2, #8
 80043ae:	409a      	lsls	r2, r3
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	f043 0201 	orr.w	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c4:	2201      	movs	r2, #1
 80043c6:	409a      	lsls	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d012      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e2:	2201      	movs	r2, #1
 80043e4:	409a      	lsls	r2, r3
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f043 0202 	orr.w	r2, r3, #2
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fa:	2204      	movs	r2, #4
 80043fc:	409a      	lsls	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4013      	ands	r3, r2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d012      	beq.n	800442c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00b      	beq.n	800442c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004418:	2204      	movs	r2, #4
 800441a:	409a      	lsls	r2, r3
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004424:	f043 0204 	orr.w	r2, r3, #4
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004430:	2210      	movs	r2, #16
 8004432:	409a      	lsls	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d043      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d03c      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444e:	2210      	movs	r2, #16
 8004450:	409a      	lsls	r2, r3
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d018      	beq.n	8004496 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d108      	bne.n	8004484 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d024      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	4798      	blx	r3
 8004482:	e01f      	b.n	80044c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01b      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4798      	blx	r3
 8004494:	e016      	b.n	80044c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d107      	bne.n	80044b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0208 	bic.w	r2, r2, #8
 80044b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c8:	2220      	movs	r2, #32
 80044ca:	409a      	lsls	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 808f 	beq.w	80045f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8087 	beq.w	80045f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	2220      	movs	r2, #32
 80044ec:	409a      	lsls	r2, r3
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d136      	bne.n	800456c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0216 	bic.w	r2, r2, #22
 800450c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800451c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <HAL_DMA_IRQHandler+0x1da>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452a:	2b00      	cmp	r3, #0
 800452c:	d007      	beq.n	800453e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0208 	bic.w	r2, r2, #8
 800453c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	223f      	movs	r2, #63	; 0x3f
 8004544:	409a      	lsls	r2, r3
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455e:	2b00      	cmp	r3, #0
 8004560:	d07e      	beq.n	8004660 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
        }
        return;
 800456a:	e079      	b.n	8004660 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01d      	beq.n	80045b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10d      	bne.n	80045a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458c:	2b00      	cmp	r3, #0
 800458e:	d031      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
 8004598:	e02c      	b.n	80045f4 <HAL_DMA_IRQHandler+0x2a0>
 800459a:	bf00      	nop
 800459c:	20000000 	.word	0x20000000
 80045a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d023      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	4798      	blx	r3
 80045b4:	e01e      	b.n	80045f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10f      	bne.n	80045e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0210 	bic.w	r2, r2, #16
 80045d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d032      	beq.n	8004662 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d022      	beq.n	800464e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2205      	movs	r2, #5
 800460c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	3301      	adds	r3, #1
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	429a      	cmp	r2, r3
 800462a:	d307      	bcc.n	800463c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f2      	bne.n	8004620 <HAL_DMA_IRQHandler+0x2cc>
 800463a:	e000      	b.n	800463e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800463c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	4798      	blx	r3
 800465e:	e000      	b.n	8004662 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004660:	bf00      	nop
    }
  }
}
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	3b10      	subs	r3, #16
 8004678:	4a13      	ldr	r2, [pc, #76]	; (80046c8 <DMA_CalcBaseAndBitshift+0x60>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004682:	4a12      	ldr	r2, [pc, #72]	; (80046cc <DMA_CalcBaseAndBitshift+0x64>)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4413      	add	r3, r2
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b03      	cmp	r3, #3
 8004694:	d908      	bls.n	80046a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <DMA_CalcBaseAndBitshift+0x68>)
 800469e:	4013      	ands	r3, r2
 80046a0:	1d1a      	adds	r2, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	659a      	str	r2, [r3, #88]	; 0x58
 80046a6:	e006      	b.n	80046b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <DMA_CalcBaseAndBitshift+0x68>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	aaaaaaab 	.word	0xaaaaaaab
 80046cc:	08011680 	.word	0x08011680
 80046d0:	fffffc00 	.word	0xfffffc00

080046d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d11f      	bne.n	800472e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d856      	bhi.n	80047a2 <DMA_CheckFifoParam+0xce>
 80046f4:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <DMA_CheckFifoParam+0x28>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	0800470d 	.word	0x0800470d
 8004700:	0800471f 	.word	0x0800471f
 8004704:	0800470d 	.word	0x0800470d
 8004708:	080047a3 	.word	0x080047a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d046      	beq.n	80047a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800471c:	e043      	b.n	80047a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004726:	d140      	bne.n	80047aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800472c:	e03d      	b.n	80047aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004736:	d121      	bne.n	800477c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b03      	cmp	r3, #3
 800473c:	d837      	bhi.n	80047ae <DMA_CheckFifoParam+0xda>
 800473e:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <DMA_CheckFifoParam+0x70>)
 8004740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004744:	08004755 	.word	0x08004755
 8004748:	0800475b 	.word	0x0800475b
 800474c:	08004755 	.word	0x08004755
 8004750:	0800476d 	.word	0x0800476d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
      break;
 8004758:	e030      	b.n	80047bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d025      	beq.n	80047b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800476a:	e022      	b.n	80047b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004774:	d11f      	bne.n	80047b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800477a:	e01c      	b.n	80047b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d903      	bls.n	800478a <DMA_CheckFifoParam+0xb6>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b03      	cmp	r3, #3
 8004786:	d003      	beq.n	8004790 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004788:	e018      	b.n	80047bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	73fb      	strb	r3, [r7, #15]
      break;
 800478e:	e015      	b.n	80047bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00e      	beq.n	80047ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      break;
 80047a0:	e00b      	b.n	80047ba <DMA_CheckFifoParam+0xe6>
      break;
 80047a2:	bf00      	nop
 80047a4:	e00a      	b.n	80047bc <DMA_CheckFifoParam+0xe8>
      break;
 80047a6:	bf00      	nop
 80047a8:	e008      	b.n	80047bc <DMA_CheckFifoParam+0xe8>
      break;
 80047aa:	bf00      	nop
 80047ac:	e006      	b.n	80047bc <DMA_CheckFifoParam+0xe8>
      break;
 80047ae:	bf00      	nop
 80047b0:	e004      	b.n	80047bc <DMA_CheckFifoParam+0xe8>
      break;
 80047b2:	bf00      	nop
 80047b4:	e002      	b.n	80047bc <DMA_CheckFifoParam+0xe8>
      break;   
 80047b6:	bf00      	nop
 80047b8:	e000      	b.n	80047bc <DMA_CheckFifoParam+0xe8>
      break;
 80047ba:	bf00      	nop
    }
  } 
  
  return status; 
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop

080047cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e06a      	b.n	80048b4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2223      	movs	r2, #35	; 0x23
 80047ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fd fc61 	bl	80020b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047f6:	4b31      	ldr	r3, [pc, #196]	; (80048bc <HAL_ETH_Init+0xf0>)
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	4a30      	ldr	r2, [pc, #192]	; (80048bc <HAL_ETH_Init+0xf0>)
 80047fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004800:	6453      	str	r3, [r2, #68]	; 0x44
 8004802:	4b2e      	ldr	r3, [pc, #184]	; (80048bc <HAL_ETH_Init+0xf0>)
 8004804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800480e:	4b2c      	ldr	r3, [pc, #176]	; (80048c0 <HAL_ETH_Init+0xf4>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	4a2b      	ldr	r2, [pc, #172]	; (80048c0 <HAL_ETH_Init+0xf4>)
 8004814:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004818:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800481a:	4b29      	ldr	r3, [pc, #164]	; (80048c0 <HAL_ETH_Init+0xf4>)
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	4927      	ldr	r1, [pc, #156]	; (80048c0 <HAL_ETH_Init+0xf4>)
 8004824:	4313      	orrs	r3, r2
 8004826:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004828:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <HAL_ETH_Init+0xf4>)
 800482a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004842:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004844:	f7fe fce2 	bl	800320c <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800484a:	e011      	b.n	8004870 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800484c:	f7fe fcde 	bl	800320c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800485a:	d909      	bls.n	8004870 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2204      	movs	r2, #4
 8004860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	22e0      	movs	r2, #224	; 0xe0
 8004868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e021      	b.n	80048b4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e4      	bne.n	800484c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f958 	bl	8004b38 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f9ff 	bl	8004c8c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fa55 	bl	8004d3e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	461a      	mov	r2, r3
 800489a:	2100      	movs	r1, #0
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f9bd 	bl	8004c1c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2210      	movs	r2, #16
 80048ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40023800 	.word	0x40023800
 80048c0:	40013800 	.word	0x40013800

080048c4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4b51      	ldr	r3, [pc, #324]	; (8004a20 <ETH_SetMACConfig+0x15c>)
 80048da:	4013      	ands	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	7c1b      	ldrb	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d102      	bne.n	80048ec <ETH_SetMACConfig+0x28>
 80048e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048ea:	e000      	b.n	80048ee <ETH_SetMACConfig+0x2a>
 80048ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	7c5b      	ldrb	r3, [r3, #17]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <ETH_SetMACConfig+0x38>
 80048f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048fa:	e000      	b.n	80048fe <ETH_SetMACConfig+0x3a>
 80048fc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048fe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004904:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	7fdb      	ldrb	r3, [r3, #31]
 800490a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800490c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004912:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	7f92      	ldrb	r2, [r2, #30]
 8004918:	2a00      	cmp	r2, #0
 800491a:	d102      	bne.n	8004922 <ETH_SetMACConfig+0x5e>
 800491c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004920:	e000      	b.n	8004924 <ETH_SetMACConfig+0x60>
 8004922:	2200      	movs	r2, #0
                        macconf->Speed |
 8004924:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	7f1b      	ldrb	r3, [r3, #28]
 800492a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800492c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004932:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	791b      	ldrb	r3, [r3, #4]
 8004938:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800493a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004942:	2a00      	cmp	r2, #0
 8004944:	d102      	bne.n	800494c <ETH_SetMACConfig+0x88>
 8004946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800494a:	e000      	b.n	800494e <ETH_SetMACConfig+0x8a>
 800494c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800494e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	7bdb      	ldrb	r3, [r3, #15]
 8004954:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004956:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800495c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004964:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004966:	4313      	orrs	r3, r2
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800497e:	2001      	movs	r0, #1
 8004980:	f7fe fc50 	bl	8003224 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	f64f 7341 	movw	r3, #65345	; 0xff41
 800499a:	4013      	ands	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80049aa:	2a00      	cmp	r2, #0
 80049ac:	d101      	bne.n	80049b2 <ETH_SetMACConfig+0xee>
 80049ae:	2280      	movs	r2, #128	; 0x80
 80049b0:	e000      	b.n	80049b4 <ETH_SetMACConfig+0xf0>
 80049b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049b4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80049ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80049c2:	2a01      	cmp	r2, #1
 80049c4:	d101      	bne.n	80049ca <ETH_SetMACConfig+0x106>
 80049c6:	2208      	movs	r2, #8
 80049c8:	e000      	b.n	80049cc <ETH_SetMACConfig+0x108>
 80049ca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80049cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80049d4:	2a01      	cmp	r2, #1
 80049d6:	d101      	bne.n	80049dc <ETH_SetMACConfig+0x118>
 80049d8:	2204      	movs	r2, #4
 80049da:	e000      	b.n	80049de <ETH_SetMACConfig+0x11a>
 80049dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80049e6:	2a01      	cmp	r2, #1
 80049e8:	d101      	bne.n	80049ee <ETH_SetMACConfig+0x12a>
 80049ea:	2202      	movs	r2, #2
 80049ec:	e000      	b.n	80049f0 <ETH_SetMACConfig+0x12c>
 80049ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049f0:	4313      	orrs	r3, r2
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f7fe fc0b 	bl	8003224 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	619a      	str	r2, [r3, #24]
}
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	ff20810f 	.word	0xff20810f

08004a24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4b3d      	ldr	r3, [pc, #244]	; (8004b34 <ETH_SetDMAConfig+0x110>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	7b1b      	ldrb	r3, [r3, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <ETH_SetDMAConfig+0x2c>
 8004a4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a4e:	e000      	b.n	8004a52 <ETH_SetDMAConfig+0x2e>
 8004a50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	7b5b      	ldrb	r3, [r3, #13]
 8004a56:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a58:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	7f52      	ldrb	r2, [r2, #29]
 8004a5e:	2a00      	cmp	r2, #0
 8004a60:	d102      	bne.n	8004a68 <ETH_SetDMAConfig+0x44>
 8004a62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a66:	e000      	b.n	8004a6a <ETH_SetDMAConfig+0x46>
 8004a68:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a6a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	7b9b      	ldrb	r3, [r3, #14]
 8004a70:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a72:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	7f1b      	ldrb	r3, [r3, #28]
 8004a7e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004a80:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	7f9b      	ldrb	r3, [r3, #30]
 8004a86:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a88:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a8e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a96:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004aba:	2001      	movs	r0, #1
 8004abc:	f7fe fbb2 	bl	8003224 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	791b      	ldrb	r3, [r3, #4]
 8004ad2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004ad8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004ade:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004ae4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004aec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004aee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004af6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004afc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b0a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b18:	2001      	movs	r0, #1
 8004b1a:	f7fe fb83 	bl	8003224 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b26:	461a      	mov	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6013      	str	r3, [r2, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	f8de3f23 	.word	0xf8de3f23

08004b38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b0a6      	sub	sp, #152	; 0x98
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b74:	2300      	movs	r3, #0
 8004b76:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004b9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004ba0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004bac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff fe86 	bl	80048c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004be4:	2301      	movs	r3, #1
 8004be6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bec:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004bee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bf2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bf8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c08:	f107 0308 	add.w	r3, r7, #8
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff ff08 	bl	8004a24 <ETH_SetDMAConfig>
}
 8004c14:	bf00      	nop
 8004c16:	3798      	adds	r7, #152	; 0x98
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3305      	adds	r3, #5
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	3204      	adds	r2, #4
 8004c34:	7812      	ldrb	r2, [r2, #0]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <ETH_MACAddressConfig+0x68>)
 8004c3e:	4413      	add	r3, r2
 8004c40:	461a      	mov	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3303      	adds	r3, #3
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	061a      	lsls	r2, r3, #24
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3302      	adds	r3, #2
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	4313      	orrs	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	7812      	ldrb	r2, [r2, #0]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <ETH_MACAddressConfig+0x6c>)
 8004c6e:	4413      	add	r3, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	6013      	str	r3, [r2, #0]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40028040 	.word	0x40028040
 8004c88:	40028044 	.word	0x40028044

08004c8c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e03e      	b.n	8004d18 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68d9      	ldr	r1, [r3, #12]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	440b      	add	r3, r1
 8004caa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	3206      	adds	r2, #6
 8004ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d80c      	bhi.n	8004cfc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68d9      	ldr	r1, [r3, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	440b      	add	r3, r1
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	e004      	b.n	8004d06 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	461a      	mov	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3301      	adds	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d9bd      	bls.n	8004c9a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d30:	611a      	str	r2, [r3, #16]
}
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e046      	b.n	8004dda <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6919      	ldr	r1, [r3, #16]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	440b      	add	r3, r1
 8004d5c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2200      	movs	r2, #0
 8004d68:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2200      	movs	r2, #0
 8004d74:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d88:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004d90:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	3212      	adds	r2, #18
 8004da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d80c      	bhi.n	8004dca <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6919      	ldr	r1, [r3, #16]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	440b      	add	r3, r1
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	60da      	str	r2, [r3, #12]
 8004dc8:	e004      	b.n	8004dd4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d9b5      	bls.n	8004d4c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e0a:	60da      	str	r2, [r3, #12]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b089      	sub	sp, #36	; 0x24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	e175      	b.n	8005124 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004e38:	2201      	movs	r2, #1
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	f040 8164 	bne.w	800511e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d005      	beq.n	8004e6e <HAL_GPIO_Init+0x56>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d130      	bne.n	8004ed0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	2203      	movs	r2, #3
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4013      	ands	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	091b      	lsrs	r3, r3, #4
 8004eba:	f003 0201 	and.w	r2, r3, #1
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d017      	beq.n	8004f0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d123      	bne.n	8004f60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	08da      	lsrs	r2, r3, #3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3208      	adds	r2, #8
 8004f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	220f      	movs	r2, #15
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	08da      	lsrs	r2, r3, #3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3208      	adds	r2, #8
 8004f5a:	69b9      	ldr	r1, [r7, #24]
 8004f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f003 0203 	and.w	r2, r3, #3
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80be 	beq.w	800511e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fa2:	4b66      	ldr	r3, [pc, #408]	; (800513c <HAL_GPIO_Init+0x324>)
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa6:	4a65      	ldr	r2, [pc, #404]	; (800513c <HAL_GPIO_Init+0x324>)
 8004fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fac:	6453      	str	r3, [r2, #68]	; 0x44
 8004fae:	4b63      	ldr	r3, [pc, #396]	; (800513c <HAL_GPIO_Init+0x324>)
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004fba:	4a61      	ldr	r2, [pc, #388]	; (8005140 <HAL_GPIO_Init+0x328>)
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	089b      	lsrs	r3, r3, #2
 8004fc0:	3302      	adds	r3, #2
 8004fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	220f      	movs	r2, #15
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a58      	ldr	r2, [pc, #352]	; (8005144 <HAL_GPIO_Init+0x32c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d037      	beq.n	8005056 <HAL_GPIO_Init+0x23e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a57      	ldr	r2, [pc, #348]	; (8005148 <HAL_GPIO_Init+0x330>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d031      	beq.n	8005052 <HAL_GPIO_Init+0x23a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a56      	ldr	r2, [pc, #344]	; (800514c <HAL_GPIO_Init+0x334>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d02b      	beq.n	800504e <HAL_GPIO_Init+0x236>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a55      	ldr	r2, [pc, #340]	; (8005150 <HAL_GPIO_Init+0x338>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d025      	beq.n	800504a <HAL_GPIO_Init+0x232>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a54      	ldr	r2, [pc, #336]	; (8005154 <HAL_GPIO_Init+0x33c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01f      	beq.n	8005046 <HAL_GPIO_Init+0x22e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a53      	ldr	r2, [pc, #332]	; (8005158 <HAL_GPIO_Init+0x340>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d019      	beq.n	8005042 <HAL_GPIO_Init+0x22a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a52      	ldr	r2, [pc, #328]	; (800515c <HAL_GPIO_Init+0x344>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <HAL_GPIO_Init+0x226>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a51      	ldr	r2, [pc, #324]	; (8005160 <HAL_GPIO_Init+0x348>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00d      	beq.n	800503a <HAL_GPIO_Init+0x222>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a50      	ldr	r2, [pc, #320]	; (8005164 <HAL_GPIO_Init+0x34c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d007      	beq.n	8005036 <HAL_GPIO_Init+0x21e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a4f      	ldr	r2, [pc, #316]	; (8005168 <HAL_GPIO_Init+0x350>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d101      	bne.n	8005032 <HAL_GPIO_Init+0x21a>
 800502e:	2309      	movs	r3, #9
 8005030:	e012      	b.n	8005058 <HAL_GPIO_Init+0x240>
 8005032:	230a      	movs	r3, #10
 8005034:	e010      	b.n	8005058 <HAL_GPIO_Init+0x240>
 8005036:	2308      	movs	r3, #8
 8005038:	e00e      	b.n	8005058 <HAL_GPIO_Init+0x240>
 800503a:	2307      	movs	r3, #7
 800503c:	e00c      	b.n	8005058 <HAL_GPIO_Init+0x240>
 800503e:	2306      	movs	r3, #6
 8005040:	e00a      	b.n	8005058 <HAL_GPIO_Init+0x240>
 8005042:	2305      	movs	r3, #5
 8005044:	e008      	b.n	8005058 <HAL_GPIO_Init+0x240>
 8005046:	2304      	movs	r3, #4
 8005048:	e006      	b.n	8005058 <HAL_GPIO_Init+0x240>
 800504a:	2303      	movs	r3, #3
 800504c:	e004      	b.n	8005058 <HAL_GPIO_Init+0x240>
 800504e:	2302      	movs	r3, #2
 8005050:	e002      	b.n	8005058 <HAL_GPIO_Init+0x240>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <HAL_GPIO_Init+0x240>
 8005056:	2300      	movs	r3, #0
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	f002 0203 	and.w	r2, r2, #3
 800505e:	0092      	lsls	r2, r2, #2
 8005060:	4093      	lsls	r3, r2
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4313      	orrs	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005068:	4935      	ldr	r1, [pc, #212]	; (8005140 <HAL_GPIO_Init+0x328>)
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	089b      	lsrs	r3, r3, #2
 800506e:	3302      	adds	r3, #2
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005076:	4b3d      	ldr	r3, [pc, #244]	; (800516c <HAL_GPIO_Init+0x354>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800509a:	4a34      	ldr	r2, [pc, #208]	; (800516c <HAL_GPIO_Init+0x354>)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050a0:	4b32      	ldr	r3, [pc, #200]	; (800516c <HAL_GPIO_Init+0x354>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050c4:	4a29      	ldr	r2, [pc, #164]	; (800516c <HAL_GPIO_Init+0x354>)
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050ca:	4b28      	ldr	r3, [pc, #160]	; (800516c <HAL_GPIO_Init+0x354>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050ee:	4a1f      	ldr	r2, [pc, #124]	; (800516c <HAL_GPIO_Init+0x354>)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050f4:	4b1d      	ldr	r3, [pc, #116]	; (800516c <HAL_GPIO_Init+0x354>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005118:	4a14      	ldr	r2, [pc, #80]	; (800516c <HAL_GPIO_Init+0x354>)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	3301      	adds	r3, #1
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	2b0f      	cmp	r3, #15
 8005128:	f67f ae86 	bls.w	8004e38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	3724      	adds	r7, #36	; 0x24
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40023800 	.word	0x40023800
 8005140:	40013800 	.word	0x40013800
 8005144:	40020000 	.word	0x40020000
 8005148:	40020400 	.word	0x40020400
 800514c:	40020800 	.word	0x40020800
 8005150:	40020c00 	.word	0x40020c00
 8005154:	40021000 	.word	0x40021000
 8005158:	40021400 	.word	0x40021400
 800515c:	40021800 	.word	0x40021800
 8005160:	40021c00 	.word	0x40021c00
 8005164:	40022000 	.word	0x40022000
 8005168:	40022400 	.word	0x40022400
 800516c:	40013c00 	.word	0x40013c00

08005170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	807b      	strh	r3, [r7, #2]
 800517c:	4613      	mov	r3, r2
 800517e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005180:	787b      	ldrb	r3, [r7, #1]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005186:	887a      	ldrh	r2, [r7, #2]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800518c:	e003      	b.n	8005196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800518e:	887b      	ldrh	r3, [r7, #2]
 8005190:	041a      	lsls	r2, r3, #16
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	619a      	str	r2, [r3, #24]
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b085      	sub	sp, #20
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	460b      	mov	r3, r1
 80051ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051b4:	887a      	ldrh	r2, [r7, #2]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4013      	ands	r3, r2
 80051ba:	041a      	lsls	r2, r3, #16
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	43d9      	mvns	r1, r3
 80051c0:	887b      	ldrh	r3, [r7, #2]
 80051c2:	400b      	ands	r3, r1
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	619a      	str	r2, [r3, #24]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051d8:	b08f      	sub	sp, #60	; 0x3c
 80051da:	af0a      	add	r7, sp, #40	; 0x28
 80051dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e116      	b.n	8005416 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f00a fccc 	bl	800fba0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2203      	movs	r2, #3
 800520c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f004 f8a9 	bl	800937e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	687e      	ldr	r6, [r7, #4]
 8005234:	466d      	mov	r5, sp
 8005236:	f106 0410 	add.w	r4, r6, #16
 800523a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800523c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800523e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005242:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005246:	e885 0003 	stmia.w	r5, {r0, r1}
 800524a:	1d33      	adds	r3, r6, #4
 800524c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800524e:	6838      	ldr	r0, [r7, #0]
 8005250:	f003 ff8a 	bl	8009168 <USB_CoreInit>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e0d7      	b.n	8005416 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2100      	movs	r1, #0
 800526c:	4618      	mov	r0, r3
 800526e:	f004 f897 	bl	80093a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	e04a      	b.n	800530e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005278:	7bfa      	ldrb	r2, [r7, #15]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	333d      	adds	r3, #61	; 0x3d
 8005288:	2201      	movs	r2, #1
 800528a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	333c      	adds	r3, #60	; 0x3c
 800529c:	7bfa      	ldrb	r2, [r7, #15]
 800529e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052a0:	7bfa      	ldrb	r2, [r7, #15]
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	b298      	uxth	r0, r3
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	3344      	adds	r3, #68	; 0x44
 80052b4:	4602      	mov	r2, r0
 80052b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052b8:	7bfa      	ldrb	r2, [r7, #15]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	3340      	adds	r3, #64	; 0x40
 80052c8:	2200      	movs	r2, #0
 80052ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052cc:	7bfa      	ldrb	r2, [r7, #15]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	3348      	adds	r3, #72	; 0x48
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052e0:	7bfa      	ldrb	r2, [r7, #15]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	334c      	adds	r3, #76	; 0x4c
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052f4:	7bfa      	ldrb	r2, [r7, #15]
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	3354      	adds	r3, #84	; 0x54
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	3301      	adds	r3, #1
 800530c:	73fb      	strb	r3, [r7, #15]
 800530e:	7bfa      	ldrb	r2, [r7, #15]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	d3af      	bcc.n	8005278 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005318:	2300      	movs	r3, #0
 800531a:	73fb      	strb	r3, [r7, #15]
 800531c:	e044      	b.n	80053a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005346:	7bfa      	ldrb	r2, [r7, #15]
 8005348:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800534a:	7bfa      	ldrb	r2, [r7, #15]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800535c:	2200      	movs	r2, #0
 800535e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005360:	7bfa      	ldrb	r2, [r7, #15]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005376:	7bfa      	ldrb	r2, [r7, #15]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800538c:	7bfa      	ldrb	r2, [r7, #15]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	3301      	adds	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]
 80053a8:	7bfa      	ldrb	r2, [r7, #15]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d3b5      	bcc.n	800531e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	687e      	ldr	r6, [r7, #4]
 80053ba:	466d      	mov	r5, sp
 80053bc:	f106 0410 	add.w	r4, r6, #16
 80053c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80053d0:	1d33      	adds	r3, r6, #4
 80053d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053d4:	6838      	ldr	r0, [r7, #0]
 80053d6:	f004 f82f 	bl	8009438 <USB_DevInit>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e014      	b.n	8005416 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2b01      	cmp	r3, #1
 8005402:	d102      	bne.n	800540a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f001 f97b 	bl	8006700 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f005 f97d 	bl	800a70e <USB_DevDisconnect>

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800541e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_PCD_Start+0x16>
 8005430:	2302      	movs	r3, #2
 8005432:	e012      	b.n	800545a <HAL_PCD_Start+0x3c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f003 ff8b 	bl	800935c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f005 f93e 	bl	800a6cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005462:	b590      	push	{r4, r7, lr}
 8005464:	b08d      	sub	sp, #52	; 0x34
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f005 f9fc 	bl	800a876 <USB_GetMode>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	f040 84b7 	bne.w	8005df4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f005 f960 	bl	800a750 <USB_ReadInterrupts>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 84ad 	beq.w	8005df2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	0a1b      	lsrs	r3, r3, #8
 80054a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f005 f94d 	bl	800a750 <USB_ReadInterrupts>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d107      	bne.n	80054d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f002 0202 	and.w	r2, r2, #2
 80054ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f005 f93b 	bl	800a750 <USB_ReadInterrupts>
 80054da:	4603      	mov	r3, r0
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b10      	cmp	r3, #16
 80054e2:	d161      	bne.n	80055a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0210 	bic.w	r2, r2, #16
 80054f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f003 020f 	and.w	r2, r3, #15
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	4413      	add	r3, r2
 8005510:	3304      	adds	r3, #4
 8005512:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	0c5b      	lsrs	r3, r3, #17
 8005518:	f003 030f 	and.w	r3, r3, #15
 800551c:	2b02      	cmp	r3, #2
 800551e:	d124      	bne.n	800556a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d035      	beq.n	8005598 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	091b      	lsrs	r3, r3, #4
 8005534:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800553a:	b29b      	uxth	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	6a38      	ldr	r0, [r7, #32]
 8005540:	f004 ff72 	bl	800a428 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	091b      	lsrs	r3, r3, #4
 800554c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005550:	441a      	add	r2, r3
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	091b      	lsrs	r3, r3, #4
 800555e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005562:	441a      	add	r2, r3
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	621a      	str	r2, [r3, #32]
 8005568:	e016      	b.n	8005598 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	0c5b      	lsrs	r3, r3, #17
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	2b06      	cmp	r3, #6
 8005574:	d110      	bne.n	8005598 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800557c:	2208      	movs	r2, #8
 800557e:	4619      	mov	r1, r3
 8005580:	6a38      	ldr	r0, [r7, #32]
 8005582:	f004 ff51 	bl	800a428 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	6a1a      	ldr	r2, [r3, #32]
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005592:	441a      	add	r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0210 	orr.w	r2, r2, #16
 80055a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f005 f8cf 	bl	800a750 <USB_ReadInterrupts>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055bc:	f040 80a7 	bne.w	800570e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f005 f8d4 	bl	800a776 <USB_ReadDevAllOutEpInterrupt>
 80055ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80055d0:	e099      	b.n	8005706 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 808e 	beq.w	80056fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	4611      	mov	r1, r2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f005 f8f8 	bl	800a7de <USB_ReadDevOutEPInterrupt>
 80055ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00c      	beq.n	8005614 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	461a      	mov	r2, r3
 8005608:	2301      	movs	r3, #1
 800560a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800560c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fef0 	bl	80063f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00c      	beq.n	8005638 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562a:	461a      	mov	r2, r3
 800562c:	2308      	movs	r3, #8
 800562e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 ffc6 	bl	80065c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f003 0310 	and.w	r3, r3, #16
 800563e:	2b00      	cmp	r3, #0
 8005640:	d008      	beq.n	8005654 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564e:	461a      	mov	r2, r3
 8005650:	2310      	movs	r3, #16
 8005652:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d030      	beq.n	80056c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005666:	2b80      	cmp	r3, #128	; 0x80
 8005668:	d109      	bne.n	800567e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005678:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800567c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800567e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4413      	add	r3, r2
 8005690:	3304      	adds	r3, #4
 8005692:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	78db      	ldrb	r3, [r3, #3]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d108      	bne.n	80056ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2200      	movs	r2, #0
 80056a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f00a fbad 	bl	800fe08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	461a      	mov	r2, r3
 80056bc:	2302      	movs	r3, #2
 80056be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d008      	beq.n	80056dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	461a      	mov	r2, r3
 80056d8:	2320      	movs	r3, #32
 80056da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f2:	461a      	mov	r2, r3
 80056f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	3301      	adds	r3, #1
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	2b00      	cmp	r3, #0
 800570a:	f47f af62 	bne.w	80055d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f005 f81c 	bl	800a750 <USB_ReadInterrupts>
 8005718:	4603      	mov	r3, r0
 800571a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800571e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005722:	f040 80db 	bne.w	80058dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f005 f83d 	bl	800a7aa <USB_ReadDevAllInEpInterrupt>
 8005730:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005736:	e0cd      	b.n	80058d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 80c2 	beq.w	80058c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	4611      	mov	r1, r2
 800574e:	4618      	mov	r0, r3
 8005750:	f005 f863 	bl	800a81a <USB_ReadDevInEPInterrupt>
 8005754:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d057      	beq.n	8005810 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	2201      	movs	r2, #1
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	43db      	mvns	r3, r3
 800577a:	69f9      	ldr	r1, [r7, #28]
 800577c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005780:	4013      	ands	r3, r2
 8005782:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005790:	461a      	mov	r2, r3
 8005792:	2301      	movs	r3, #1
 8005794:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d132      	bne.n	8005804 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a2:	4613      	mov	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	334c      	adds	r3, #76	; 0x4c
 80057ae:	6819      	ldr	r1, [r3, #0]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4403      	add	r3, r0
 80057be:	3348      	adds	r3, #72	; 0x48
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4419      	add	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c8:	4613      	mov	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4403      	add	r3, r0
 80057d2:	334c      	adds	r3, #76	; 0x4c
 80057d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d113      	bne.n	8005804 <HAL_PCD_IRQHandler+0x3a2>
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e0:	4613      	mov	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	3354      	adds	r3, #84	; 0x54
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d108      	bne.n	8005804 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057fc:	461a      	mov	r2, r3
 80057fe:	2101      	movs	r1, #1
 8005800:	f005 f86c 	bl	800a8dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	b2db      	uxtb	r3, r3
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f00a fa77 	bl	800fcfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d008      	beq.n	800582c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005826:	461a      	mov	r2, r3
 8005828:	2308      	movs	r3, #8
 800582a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2b00      	cmp	r3, #0
 8005834:	d008      	beq.n	8005848 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	461a      	mov	r2, r3
 8005844:	2310      	movs	r3, #16
 8005846:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d008      	beq.n	8005864 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	461a      	mov	r2, r3
 8005860:	2340      	movs	r3, #64	; 0x40
 8005862:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d023      	beq.n	80058b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800586e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005870:	6a38      	ldr	r0, [r7, #32]
 8005872:	f003 ff3f 	bl	80096f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005878:	4613      	mov	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	3338      	adds	r3, #56	; 0x38
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	4413      	add	r3, r2
 8005886:	3304      	adds	r3, #4
 8005888:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	78db      	ldrb	r3, [r3, #3]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d108      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2200      	movs	r2, #0
 8005896:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	b2db      	uxtb	r3, r3
 800589c:	4619      	mov	r1, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f00a fac4 	bl	800fe2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	461a      	mov	r2, r3
 80058b2:	2302      	movs	r3, #2
 80058b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80058c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fd08 	bl	80062d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	3301      	adds	r3, #1
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	085b      	lsrs	r3, r3, #1
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f47f af2e 	bne.w	8005738 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f004 ff35 	bl	800a750 <USB_ReadInterrupts>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058f0:	d122      	bne.n	8005938 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800590c:	2b01      	cmp	r3, #1
 800590e:	d108      	bne.n	8005922 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005918:	2100      	movs	r1, #0
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f00a fc3e 	bl	801019c <HAL_PCDEx_LPM_Callback>
 8005920:	e002      	b.n	8005928 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f00a fa62 	bl	800fdec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695a      	ldr	r2, [r3, #20]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f004 ff07 	bl	800a750 <USB_ReadInterrupts>
 8005942:	4603      	mov	r3, r0
 8005944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594c:	d112      	bne.n	8005974 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b01      	cmp	r3, #1
 800595c:	d102      	bne.n	8005964 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f00a fa1e 	bl	800fda0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695a      	ldr	r2, [r3, #20]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005972:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f004 fee9 	bl	800a750 <USB_ReadInterrupts>
 800597e:	4603      	mov	r3, r0
 8005980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005988:	d121      	bne.n	80059ce <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695a      	ldr	r2, [r3, #20]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005998:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d111      	bne.n	80059c8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b2:	089b      	lsrs	r3, r3, #2
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80059be:	2101      	movs	r1, #1
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f00a fbeb 	bl	801019c <HAL_PCDEx_LPM_Callback>
 80059c6:	e002      	b.n	80059ce <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f00a f9e9 	bl	800fda0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f004 febc 	bl	800a750 <USB_ReadInterrupts>
 80059d8:	4603      	mov	r3, r0
 80059da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e2:	f040 80b7 	bne.w	8005b54 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059f4:	f023 0301 	bic.w	r3, r3, #1
 80059f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2110      	movs	r1, #16
 8005a00:	4618      	mov	r0, r3
 8005a02:	f003 fe77 	bl	80096f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a06:	2300      	movs	r3, #0
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a0a:	e046      	b.n	8005a9a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a1e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a52:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a84:	0151      	lsls	r1, r2, #5
 8005a86:	69fa      	ldr	r2, [r7, #28]
 8005a88:	440a      	add	r2, r1
 8005a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a92:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	3301      	adds	r3, #1
 8005a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d3b3      	bcc.n	8005a0c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ab2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005ab6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d016      	beq.n	8005aee <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ad0:	f043 030b 	orr.w	r3, r3, #11
 8005ad4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae6:	f043 030b 	orr.w	r3, r3, #11
 8005aea:	6453      	str	r3, [r2, #68]	; 0x44
 8005aec:	e015      	b.n	8005b1a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af4:	695a      	ldr	r2, [r3, #20]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afc:	4619      	mov	r1, r3
 8005afe:	f242 032b 	movw	r3, #8235	; 0x202b
 8005b02:	4313      	orrs	r3, r2
 8005b04:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b14:	f043 030b 	orr.w	r3, r3, #11
 8005b18:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b2c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6818      	ldr	r0, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f004 fecc 	bl	800a8dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695a      	ldr	r2, [r3, #20]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f004 fdf9 	bl	800a750 <USB_ReadInterrupts>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b68:	d124      	bne.n	8005bb4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f004 fe90 	bl	800a894 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f003 fe38 	bl	80097ee <USB_GetDevSpeed>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	461a      	mov	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681c      	ldr	r4, [r3, #0]
 8005b8a:	f001 fadd 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 8005b8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f003 fb3d 	bl	8009218 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f00a f8d5 	bl	800fd4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695a      	ldr	r2, [r3, #20]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f004 fdc9 	bl	800a750 <USB_ReadInterrupts>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d10a      	bne.n	8005bde <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f00a f8b2 	bl	800fd32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695a      	ldr	r2, [r3, #20]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f002 0208 	and.w	r2, r2, #8
 8005bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f004 fdb4 	bl	800a750 <USB_ReadInterrupts>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bee:	2b80      	cmp	r3, #128	; 0x80
 8005bf0:	d122      	bne.n	8005c38 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bfe:	2301      	movs	r3, #1
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
 8005c02:	e014      	b.n	8005c2e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005c04:	6879      	ldr	r1, [r7, #4]
 8005c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c08:	4613      	mov	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d105      	bne.n	8005c28 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fb27 	bl	8006276 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d3e5      	bcc.n	8005c04 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f004 fd87 	bl	800a750 <USB_ReadInterrupts>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c4c:	d13b      	bne.n	8005cc6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c4e:	2301      	movs	r3, #1
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
 8005c52:	e02b      	b.n	8005cac <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c68:	4613      	mov	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	3340      	adds	r3, #64	; 0x40
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d115      	bne.n	8005ca6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005c7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da12      	bge.n	8005ca6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c84:	4613      	mov	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	333f      	adds	r3, #63	; 0x3f
 8005c90:	2201      	movs	r2, #1
 8005c92:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fae8 	bl	8006276 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	3301      	adds	r3, #1
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d3ce      	bcc.n	8005c54 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f004 fd40 	bl	800a750 <USB_ReadInterrupts>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cda:	d155      	bne.n	8005d88 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cdc:	2301      	movs	r3, #1
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce0:	e045      	b.n	8005d6e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	440b      	add	r3, r1
 8005d00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d12e      	bne.n	8005d68 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	da2b      	bge.n	8005d68 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005d1c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d121      	bne.n	8005d68 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d28:	4613      	mov	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005d36:	2201      	movs	r2, #1
 8005d38:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d64:	6053      	str	r3, [r2, #4]
            break;
 8005d66:	e007      	b.n	8005d78 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d3b4      	bcc.n	8005ce2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695a      	ldr	r2, [r3, #20]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f004 fcdf 	bl	800a750 <USB_ReadInterrupts>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9c:	d10a      	bne.n	8005db4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f00a f856 	bl	800fe50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f004 fcc9 	bl	800a750 <USB_ReadInterrupts>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d115      	bne.n	8005df4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f00a f846 	bl	800fe6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6859      	ldr	r1, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	605a      	str	r2, [r3, #4]
 8005df0:	e000      	b.n	8005df4 <HAL_PCD_IRQHandler+0x992>
      return;
 8005df2:	bf00      	nop
    }
  }
}
 8005df4:	3734      	adds	r7, #52	; 0x34
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd90      	pop	{r4, r7, pc}

08005dfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_PCD_SetAddress+0x1a>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e013      	b.n	8005e3c <HAL_PCD_SetAddress+0x42>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	78fa      	ldrb	r2, [r7, #3]
 8005e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	78fa      	ldrb	r2, [r7, #3]
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f004 fc27 	bl	800a680 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	4611      	mov	r1, r2
 8005e50:	461a      	mov	r2, r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	70fb      	strb	r3, [r7, #3]
 8005e56:	460b      	mov	r3, r1
 8005e58:	803b      	strh	r3, [r7, #0]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	da0f      	bge.n	8005e8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	f003 020f 	and.w	r2, r3, #15
 8005e70:	4613      	mov	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	3338      	adds	r3, #56	; 0x38
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3304      	adds	r3, #4
 8005e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	705a      	strb	r2, [r3, #1]
 8005e88:	e00f      	b.n	8005eaa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	f003 020f 	and.w	r2, r3, #15
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005eb6:	883a      	ldrh	r2, [r7, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	78ba      	ldrb	r2, [r7, #2]
 8005ec0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d004      	beq.n	8005ed4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005ed4:	78bb      	ldrb	r3, [r7, #2]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d102      	bne.n	8005ee0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <HAL_PCD_EP_Open+0xaa>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e00e      	b.n	8005f0c <HAL_PCD_EP_Open+0xc8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f003 fc9b 	bl	8009838 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005f0a:	7afb      	ldrb	r3, [r7, #11]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	da0f      	bge.n	8005f48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	f003 020f 	and.w	r2, r3, #15
 8005f2e:	4613      	mov	r3, r2
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	3338      	adds	r3, #56	; 0x38
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2201      	movs	r2, #1
 8005f44:	705a      	strb	r2, [r3, #1]
 8005f46:	e00f      	b.n	8005f68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	f003 020f 	and.w	r2, r3, #15
 8005f4e:	4613      	mov	r3, r2
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	3304      	adds	r3, #4
 8005f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_PCD_EP_Close+0x6e>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e00e      	b.n	8005fa0 <HAL_PCD_EP_Close+0x8c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68f9      	ldr	r1, [r7, #12]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f003 fcd9 	bl	8009948 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	607a      	str	r2, [r7, #4]
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fb8:	7afb      	ldrb	r3, [r7, #11]
 8005fba:	f003 020f 	and.w	r2, r3, #15
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4413      	add	r3, r2
 8005fce:	3304      	adds	r3, #4
 8005fd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fea:	7afb      	ldrb	r3, [r7, #11]
 8005fec:	f003 030f 	and.w	r3, r3, #15
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d102      	bne.n	8006004 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006004:	7afb      	ldrb	r3, [r7, #11]
 8006006:	f003 030f 	and.w	r3, r3, #15
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	b2db      	uxtb	r3, r3
 8006018:	461a      	mov	r2, r3
 800601a:	6979      	ldr	r1, [r7, #20]
 800601c:	f003 ffc0 	bl	8009fa0 <USB_EP0StartXfer>
 8006020:	e008      	b.n	8006034 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	b2db      	uxtb	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	6979      	ldr	r1, [r7, #20]
 8006030:	f003 fd66 	bl	8009b00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	460b      	mov	r3, r1
 8006048:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	f003 020f 	and.w	r2, r3, #15
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006060:	681b      	ldr	r3, [r3, #0]
}
 8006062:	4618      	mov	r0, r3
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b086      	sub	sp, #24
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	460b      	mov	r3, r1
 800607c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	f003 020f 	and.w	r2, r3, #15
 8006084:	4613      	mov	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	3338      	adds	r3, #56	; 0x38
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4413      	add	r3, r2
 8006092:	3304      	adds	r3, #4
 8006094:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2200      	movs	r2, #0
 80060a6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2201      	movs	r2, #1
 80060ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060ae:	7afb      	ldrb	r3, [r7, #11]
 80060b0:	f003 030f 	and.w	r3, r3, #15
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d102      	bne.n	80060c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060c8:	7afb      	ldrb	r3, [r7, #11]
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	461a      	mov	r2, r3
 80060de:	6979      	ldr	r1, [r7, #20]
 80060e0:	f003 ff5e 	bl	8009fa0 <USB_EP0StartXfer>
 80060e4:	e008      	b.n	80060f8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	6979      	ldr	r1, [r7, #20]
 80060f4:	f003 fd04 	bl	8009b00 <USB_EPStartXfer>
  }

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	460b      	mov	r3, r1
 800610c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	f003 020f 	and.w	r2, r3, #15
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	429a      	cmp	r2, r3
 800611a:	d901      	bls.n	8006120 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e050      	b.n	80061c2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006124:	2b00      	cmp	r3, #0
 8006126:	da0f      	bge.n	8006148 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	f003 020f 	and.w	r2, r3, #15
 800612e:	4613      	mov	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	3338      	adds	r3, #56	; 0x38
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	4413      	add	r3, r2
 800613c:	3304      	adds	r3, #4
 800613e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	705a      	strb	r2, [r3, #1]
 8006146:	e00d      	b.n	8006164 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006148:	78fa      	ldrb	r2, [r7, #3]
 800614a:	4613      	mov	r3, r2
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	4413      	add	r3, r2
 800615a:	3304      	adds	r3, #4
 800615c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2201      	movs	r2, #1
 8006168:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	b2da      	uxtb	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_PCD_EP_SetStall+0x82>
 8006180:	2302      	movs	r3, #2
 8006182:	e01e      	b.n	80061c2 <HAL_PCD_EP_SetStall+0xc0>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68f9      	ldr	r1, [r7, #12]
 8006192:	4618      	mov	r0, r3
 8006194:	f004 f9a0 	bl	800a4d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10a      	bne.n	80061b8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	b2d9      	uxtb	r1, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061b2:	461a      	mov	r2, r3
 80061b4:	f004 fb92 	bl	800a8dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	460b      	mov	r3, r1
 80061d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	f003 020f 	and.w	r2, r3, #15
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d901      	bls.n	80061e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e042      	b.n	800626e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	da0f      	bge.n	8006210 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	f003 020f 	and.w	r2, r3, #15
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	3338      	adds	r3, #56	; 0x38
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	4413      	add	r3, r2
 8006204:	3304      	adds	r3, #4
 8006206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	705a      	strb	r2, [r3, #1]
 800620e:	e00f      	b.n	8006230 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	f003 020f 	and.w	r2, r3, #15
 8006216:	4613      	mov	r3, r2
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	4413      	add	r3, r2
 8006226:	3304      	adds	r3, #4
 8006228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	b2da      	uxtb	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_PCD_EP_ClrStall+0x86>
 800624c:	2302      	movs	r3, #2
 800624e:	e00e      	b.n	800626e <HAL_PCD_EP_ClrStall+0xa4>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68f9      	ldr	r1, [r7, #12]
 800625e:	4618      	mov	r0, r3
 8006260:	f004 f9a8 	bl	800a5b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006286:	2b00      	cmp	r3, #0
 8006288:	da0c      	bge.n	80062a4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	f003 020f 	and.w	r2, r3, #15
 8006290:	4613      	mov	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	3338      	adds	r3, #56	; 0x38
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4413      	add	r3, r2
 800629e:	3304      	adds	r3, #4
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	e00c      	b.n	80062be <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	f003 020f 	and.w	r2, r3, #15
 80062aa:	4613      	mov	r3, r2
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	4413      	add	r3, r2
 80062ba:	3304      	adds	r3, #4
 80062bc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68f9      	ldr	r1, [r7, #12]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f003 ffc7 	bl	800a258 <USB_EPStopXfer>
 80062ca:	4603      	mov	r3, r0
 80062cc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80062ce:	7afb      	ldrb	r3, [r7, #11]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08a      	sub	sp, #40	; 0x28
 80062dc:	af02      	add	r7, sp, #8
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	4613      	mov	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	3338      	adds	r3, #56	; 0x38
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	4413      	add	r3, r2
 80062fc:	3304      	adds	r3, #4
 80062fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a1a      	ldr	r2, [r3, #32]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	429a      	cmp	r2, r3
 800630a:	d901      	bls.n	8006310 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e06c      	b.n	80063ea <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	699a      	ldr	r2, [r3, #24]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	69fa      	ldr	r2, [r7, #28]
 8006322:	429a      	cmp	r2, r3
 8006324:	d902      	bls.n	800632c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	3303      	adds	r3, #3
 8006330:	089b      	lsrs	r3, r3, #2
 8006332:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006334:	e02b      	b.n	800638e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	429a      	cmp	r2, r3
 800634a:	d902      	bls.n	8006352 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	3303      	adds	r3, #3
 8006356:	089b      	lsrs	r3, r3, #2
 8006358:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6919      	ldr	r1, [r3, #16]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	b2da      	uxtb	r2, r3
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800636a:	b2db      	uxtb	r3, r3
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	4603      	mov	r3, r0
 8006370:	6978      	ldr	r0, [r7, #20]
 8006372:	f004 f81b 	bl	800a3ac <USB_WritePacket>

    ep->xfer_buff  += len;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	691a      	ldr	r2, [r3, #16]
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	441a      	add	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a1a      	ldr	r2, [r3, #32]
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	441a      	add	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d809      	bhi.n	80063b8 <PCD_WriteEmptyTxFifo+0xe0>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1a      	ldr	r2, [r3, #32]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d203      	bcs.n	80063b8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1be      	bne.n	8006336 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	699a      	ldr	r2, [r3, #24]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d811      	bhi.n	80063e8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	2201      	movs	r2, #1
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	43db      	mvns	r3, r3
 80063de:	6939      	ldr	r1, [r7, #16]
 80063e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063e4:	4013      	ands	r3, r2
 80063e6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3720      	adds	r7, #32
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	333c      	adds	r3, #60	; 0x3c
 800640c:	3304      	adds	r3, #4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d17b      	bne.n	8006522 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d015      	beq.n	8006460 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	4a61      	ldr	r2, [pc, #388]	; (80065bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	f240 80b9 	bls.w	80065b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80b3 	beq.w	80065b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006456:	461a      	mov	r2, r3
 8006458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645c:	6093      	str	r3, [r2, #8]
 800645e:	e0a7      	b.n	80065b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d009      	beq.n	800647e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006476:	461a      	mov	r2, r3
 8006478:	2320      	movs	r3, #32
 800647a:	6093      	str	r3, [r2, #8]
 800647c:	e098      	b.n	80065b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 8093 	bne.w	80065b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4a4b      	ldr	r2, [pc, #300]	; (80065bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d90f      	bls.n	80064b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a8:	461a      	mov	r2, r3
 80064aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ae:	6093      	str	r3, [r2, #8]
 80064b0:	e07e      	b.n	80065b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	4613      	mov	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	3304      	adds	r3, #4
 80064c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	0159      	lsls	r1, r3, #5
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	440b      	add	r3, r1
 80064d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064de:	1ad2      	subs	r2, r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d114      	bne.n	8006514 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064fc:	461a      	mov	r2, r3
 80064fe:	2101      	movs	r1, #1
 8006500:	f004 f9ec 	bl	800a8dc <USB_EP0_OutStart>
 8006504:	e006      	b.n	8006514 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	441a      	add	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f009 fbd4 	bl	800fcc8 <HAL_PCD_DataOutStageCallback>
 8006520:	e046      	b.n	80065b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	4a26      	ldr	r2, [pc, #152]	; (80065c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d124      	bne.n	8006574 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	461a      	mov	r2, r3
 8006542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006546:	6093      	str	r3, [r2, #8]
 8006548:	e032      	b.n	80065b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f003 0320 	and.w	r3, r3, #32
 8006550:	2b00      	cmp	r3, #0
 8006552:	d008      	beq.n	8006566 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006560:	461a      	mov	r2, r3
 8006562:	2320      	movs	r3, #32
 8006564:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	b2db      	uxtb	r3, r3
 800656a:	4619      	mov	r1, r3
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f009 fbab 	bl	800fcc8 <HAL_PCD_DataOutStageCallback>
 8006572:	e01d      	b.n	80065b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d114      	bne.n	80065a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	4613      	mov	r3, r2
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	440b      	add	r3, r1
 8006588:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d108      	bne.n	80065a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800659c:	461a      	mov	r2, r3
 800659e:	2100      	movs	r1, #0
 80065a0:	f004 f99c 	bl	800a8dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f009 fb8c 	bl	800fcc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	4f54300a 	.word	0x4f54300a
 80065c0:	4f54310a 	.word	0x4f54310a

080065c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	333c      	adds	r3, #60	; 0x3c
 80065dc:	3304      	adds	r3, #4
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4a15      	ldr	r2, [pc, #84]	; (800664c <PCD_EP_OutSetupPacket_int+0x88>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d90e      	bls.n	8006618 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006600:	2b00      	cmp	r3, #0
 8006602:	d009      	beq.n	8006618 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	461a      	mov	r2, r3
 8006612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006616:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f009 fb43 	bl	800fca4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4a0a      	ldr	r2, [pc, #40]	; (800664c <PCD_EP_OutSetupPacket_int+0x88>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d90c      	bls.n	8006640 <PCD_EP_OutSetupPacket_int+0x7c>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d108      	bne.n	8006640 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006638:	461a      	mov	r2, r3
 800663a:	2101      	movs	r1, #1
 800663c:	f004 f94e 	bl	800a8dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	4f54300a 	.word	0x4f54300a

08006650 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	70fb      	strb	r3, [r7, #3]
 800665c:	4613      	mov	r3, r2
 800665e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d107      	bne.n	800667e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800666e:	883b      	ldrh	r3, [r7, #0]
 8006670:	0419      	lsls	r1, r3, #16
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	430a      	orrs	r2, r1
 800667a:	629a      	str	r2, [r3, #40]	; 0x28
 800667c:	e028      	b.n	80066d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	0c1b      	lsrs	r3, r3, #16
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	4413      	add	r3, r2
 800668a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800668c:	2300      	movs	r3, #0
 800668e:	73fb      	strb	r3, [r7, #15]
 8006690:	e00d      	b.n	80066ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	3340      	adds	r3, #64	; 0x40
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	0c1b      	lsrs	r3, r3, #16
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	4413      	add	r3, r2
 80066a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	3301      	adds	r3, #1
 80066ac:	73fb      	strb	r3, [r7, #15]
 80066ae:	7bfa      	ldrb	r2, [r7, #15]
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d3ec      	bcc.n	8006692 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80066b8:	883b      	ldrh	r3, [r7, #0]
 80066ba:	0418      	lsls	r0, r3, #16
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6819      	ldr	r1, [r3, #0]
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	4302      	orrs	r2, r0
 80066c8:	3340      	adds	r3, #64	; 0x40
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	440b      	add	r3, r1
 80066ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	887a      	ldrh	r2, [r7, #2]
 80066f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800672e:	4b05      	ldr	r3, [pc, #20]	; (8006744 <HAL_PCDEx_ActivateLPM+0x44>)
 8006730:	4313      	orrs	r3, r2
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	10000003 	.word	0x10000003

08006748 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006748:	b480      	push	{r7}
 800674a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800674c:	4b05      	ldr	r3, [pc, #20]	; (8006764 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a04      	ldr	r2, [pc, #16]	; (8006764 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006756:	6013      	str	r3, [r2, #0]
}
 8006758:	bf00      	nop
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40007000 	.word	0x40007000

08006768 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006772:	4b23      	ldr	r3, [pc, #140]	; (8006800 <HAL_PWREx_EnableOverDrive+0x98>)
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	4a22      	ldr	r2, [pc, #136]	; (8006800 <HAL_PWREx_EnableOverDrive+0x98>)
 8006778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800677c:	6413      	str	r3, [r2, #64]	; 0x40
 800677e:	4b20      	ldr	r3, [pc, #128]	; (8006800 <HAL_PWREx_EnableOverDrive+0x98>)
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800678a:	4b1e      	ldr	r3, [pc, #120]	; (8006804 <HAL_PWREx_EnableOverDrive+0x9c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1d      	ldr	r2, [pc, #116]	; (8006804 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006794:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006796:	f7fc fd39 	bl	800320c <HAL_GetTick>
 800679a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800679c:	e009      	b.n	80067b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800679e:	f7fc fd35 	bl	800320c <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ac:	d901      	bls.n	80067b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e022      	b.n	80067f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067b2:	4b14      	ldr	r3, [pc, #80]	; (8006804 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067be:	d1ee      	bne.n	800679e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80067c0:	4b10      	ldr	r3, [pc, #64]	; (8006804 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a0f      	ldr	r2, [pc, #60]	; (8006804 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067cc:	f7fc fd1e 	bl	800320c <HAL_GetTick>
 80067d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067d2:	e009      	b.n	80067e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067d4:	f7fc fd1a 	bl	800320c <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067e2:	d901      	bls.n	80067e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e007      	b.n	80067f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067e8:	4b06      	ldr	r3, [pc, #24]	; (8006804 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067f4:	d1ee      	bne.n	80067d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40023800 	.word	0x40023800
 8006804:	40007000 	.word	0x40007000

08006808 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006810:	2300      	movs	r3, #0
 8006812:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e29b      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8087 	beq.w	800693a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800682c:	4b96      	ldr	r3, [pc, #600]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 030c 	and.w	r3, r3, #12
 8006834:	2b04      	cmp	r3, #4
 8006836:	d00c      	beq.n	8006852 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006838:	4b93      	ldr	r3, [pc, #588]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f003 030c 	and.w	r3, r3, #12
 8006840:	2b08      	cmp	r3, #8
 8006842:	d112      	bne.n	800686a <HAL_RCC_OscConfig+0x62>
 8006844:	4b90      	ldr	r3, [pc, #576]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800684c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006850:	d10b      	bne.n	800686a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006852:	4b8d      	ldr	r3, [pc, #564]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d06c      	beq.n	8006938 <HAL_RCC_OscConfig+0x130>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d168      	bne.n	8006938 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e275      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006872:	d106      	bne.n	8006882 <HAL_RCC_OscConfig+0x7a>
 8006874:	4b84      	ldr	r3, [pc, #528]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a83      	ldr	r2, [pc, #524]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 800687a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	e02e      	b.n	80068e0 <HAL_RCC_OscConfig+0xd8>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10c      	bne.n	80068a4 <HAL_RCC_OscConfig+0x9c>
 800688a:	4b7f      	ldr	r3, [pc, #508]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a7e      	ldr	r2, [pc, #504]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	4b7c      	ldr	r3, [pc, #496]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a7b      	ldr	r2, [pc, #492]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 800689c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	e01d      	b.n	80068e0 <HAL_RCC_OscConfig+0xd8>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068ac:	d10c      	bne.n	80068c8 <HAL_RCC_OscConfig+0xc0>
 80068ae:	4b76      	ldr	r3, [pc, #472]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a75      	ldr	r2, [pc, #468]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	4b73      	ldr	r3, [pc, #460]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a72      	ldr	r2, [pc, #456]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e00b      	b.n	80068e0 <HAL_RCC_OscConfig+0xd8>
 80068c8:	4b6f      	ldr	r3, [pc, #444]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a6e      	ldr	r2, [pc, #440]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	4b6c      	ldr	r3, [pc, #432]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a6b      	ldr	r2, [pc, #428]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d013      	beq.n	8006910 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e8:	f7fc fc90 	bl	800320c <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068f0:	f7fc fc8c 	bl	800320c <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b64      	cmp	r3, #100	; 0x64
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e229      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006902:	4b61      	ldr	r3, [pc, #388]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0f0      	beq.n	80068f0 <HAL_RCC_OscConfig+0xe8>
 800690e:	e014      	b.n	800693a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006910:	f7fc fc7c 	bl	800320c <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006918:	f7fc fc78 	bl	800320c <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b64      	cmp	r3, #100	; 0x64
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e215      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800692a:	4b57      	ldr	r3, [pc, #348]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1f0      	bne.n	8006918 <HAL_RCC_OscConfig+0x110>
 8006936:	e000      	b.n	800693a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d069      	beq.n	8006a1a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006946:	4b50      	ldr	r3, [pc, #320]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 030c 	and.w	r3, r3, #12
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00b      	beq.n	800696a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006952:	4b4d      	ldr	r3, [pc, #308]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 030c 	and.w	r3, r3, #12
 800695a:	2b08      	cmp	r3, #8
 800695c:	d11c      	bne.n	8006998 <HAL_RCC_OscConfig+0x190>
 800695e:	4b4a      	ldr	r3, [pc, #296]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d116      	bne.n	8006998 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800696a:	4b47      	ldr	r3, [pc, #284]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d005      	beq.n	8006982 <HAL_RCC_OscConfig+0x17a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d001      	beq.n	8006982 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e1e9      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006982:	4b41      	ldr	r3, [pc, #260]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	493d      	ldr	r1, [pc, #244]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006992:	4313      	orrs	r3, r2
 8006994:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006996:	e040      	b.n	8006a1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d023      	beq.n	80069e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069a0:	4b39      	ldr	r3, [pc, #228]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a38      	ldr	r2, [pc, #224]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80069a6:	f043 0301 	orr.w	r3, r3, #1
 80069aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ac:	f7fc fc2e 	bl	800320c <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069b2:	e008      	b.n	80069c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069b4:	f7fc fc2a 	bl	800320c <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e1c7      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069c6:	4b30      	ldr	r3, [pc, #192]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0f0      	beq.n	80069b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069d2:	4b2d      	ldr	r3, [pc, #180]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	4929      	ldr	r1, [pc, #164]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	600b      	str	r3, [r1, #0]
 80069e6:	e018      	b.n	8006a1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069e8:	4b27      	ldr	r3, [pc, #156]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a26      	ldr	r2, [pc, #152]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 80069ee:	f023 0301 	bic.w	r3, r3, #1
 80069f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f4:	f7fc fc0a 	bl	800320c <HAL_GetTick>
 80069f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069fa:	e008      	b.n	8006a0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069fc:	f7fc fc06 	bl	800320c <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d901      	bls.n	8006a0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e1a3      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a0e:	4b1e      	ldr	r3, [pc, #120]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1f0      	bne.n	80069fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d038      	beq.n	8006a98 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d019      	beq.n	8006a62 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a2e:	4b16      	ldr	r3, [pc, #88]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a32:	4a15      	ldr	r2, [pc, #84]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a34:	f043 0301 	orr.w	r3, r3, #1
 8006a38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a3a:	f7fc fbe7 	bl	800320c <HAL_GetTick>
 8006a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a40:	e008      	b.n	8006a54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a42:	f7fc fbe3 	bl	800320c <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e180      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a54:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0f0      	beq.n	8006a42 <HAL_RCC_OscConfig+0x23a>
 8006a60:	e01a      	b.n	8006a98 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a62:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a66:	4a08      	ldr	r2, [pc, #32]	; (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a68:	f023 0301 	bic.w	r3, r3, #1
 8006a6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a6e:	f7fc fbcd 	bl	800320c <HAL_GetTick>
 8006a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a74:	e00a      	b.n	8006a8c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a76:	f7fc fbc9 	bl	800320c <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d903      	bls.n	8006a8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e166      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
 8006a88:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a8c:	4b92      	ldr	r3, [pc, #584]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1ee      	bne.n	8006a76 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 80a4 	beq.w	8006bee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aa6:	4b8c      	ldr	r3, [pc, #560]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10d      	bne.n	8006ace <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ab2:	4b89      	ldr	r3, [pc, #548]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	4a88      	ldr	r2, [pc, #544]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006abc:	6413      	str	r3, [r2, #64]	; 0x40
 8006abe:	4b86      	ldr	r3, [pc, #536]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	60bb      	str	r3, [r7, #8]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aca:	2301      	movs	r3, #1
 8006acc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ace:	4b83      	ldr	r3, [pc, #524]	; (8006cdc <HAL_RCC_OscConfig+0x4d4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d118      	bne.n	8006b0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006ada:	4b80      	ldr	r3, [pc, #512]	; (8006cdc <HAL_RCC_OscConfig+0x4d4>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a7f      	ldr	r2, [pc, #508]	; (8006cdc <HAL_RCC_OscConfig+0x4d4>)
 8006ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ae6:	f7fc fb91 	bl	800320c <HAL_GetTick>
 8006aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aec:	e008      	b.n	8006b00 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aee:	f7fc fb8d 	bl	800320c <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b64      	cmp	r3, #100	; 0x64
 8006afa:	d901      	bls.n	8006b00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e12a      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b00:	4b76      	ldr	r3, [pc, #472]	; (8006cdc <HAL_RCC_OscConfig+0x4d4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0f0      	beq.n	8006aee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d106      	bne.n	8006b22 <HAL_RCC_OscConfig+0x31a>
 8006b14:	4b70      	ldr	r3, [pc, #448]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b18:	4a6f      	ldr	r2, [pc, #444]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
 8006b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b20:	e02d      	b.n	8006b7e <HAL_RCC_OscConfig+0x376>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10c      	bne.n	8006b44 <HAL_RCC_OscConfig+0x33c>
 8006b2a:	4b6b      	ldr	r3, [pc, #428]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2e:	4a6a      	ldr	r2, [pc, #424]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b30:	f023 0301 	bic.w	r3, r3, #1
 8006b34:	6713      	str	r3, [r2, #112]	; 0x70
 8006b36:	4b68      	ldr	r3, [pc, #416]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3a:	4a67      	ldr	r2, [pc, #412]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b3c:	f023 0304 	bic.w	r3, r3, #4
 8006b40:	6713      	str	r3, [r2, #112]	; 0x70
 8006b42:	e01c      	b.n	8006b7e <HAL_RCC_OscConfig+0x376>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	2b05      	cmp	r3, #5
 8006b4a:	d10c      	bne.n	8006b66 <HAL_RCC_OscConfig+0x35e>
 8006b4c:	4b62      	ldr	r3, [pc, #392]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b50:	4a61      	ldr	r2, [pc, #388]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b52:	f043 0304 	orr.w	r3, r3, #4
 8006b56:	6713      	str	r3, [r2, #112]	; 0x70
 8006b58:	4b5f      	ldr	r3, [pc, #380]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5c:	4a5e      	ldr	r2, [pc, #376]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b5e:	f043 0301 	orr.w	r3, r3, #1
 8006b62:	6713      	str	r3, [r2, #112]	; 0x70
 8006b64:	e00b      	b.n	8006b7e <HAL_RCC_OscConfig+0x376>
 8006b66:	4b5c      	ldr	r3, [pc, #368]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6a:	4a5b      	ldr	r2, [pc, #364]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	6713      	str	r3, [r2, #112]	; 0x70
 8006b72:	4b59      	ldr	r3, [pc, #356]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b76:	4a58      	ldr	r2, [pc, #352]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006b78:	f023 0304 	bic.w	r3, r3, #4
 8006b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d015      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b86:	f7fc fb41 	bl	800320c <HAL_GetTick>
 8006b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b8c:	e00a      	b.n	8006ba4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b8e:	f7fc fb3d 	bl	800320c <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d901      	bls.n	8006ba4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e0d8      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba4:	4b4c      	ldr	r3, [pc, #304]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0ee      	beq.n	8006b8e <HAL_RCC_OscConfig+0x386>
 8006bb0:	e014      	b.n	8006bdc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb2:	f7fc fb2b 	bl	800320c <HAL_GetTick>
 8006bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bb8:	e00a      	b.n	8006bd0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bba:	f7fc fb27 	bl	800320c <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e0c2      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bd0:	4b41      	ldr	r3, [pc, #260]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1ee      	bne.n	8006bba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d105      	bne.n	8006bee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006be2:	4b3d      	ldr	r3, [pc, #244]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	4a3c      	ldr	r2, [pc, #240]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 80ae 	beq.w	8006d54 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bf8:	4b37      	ldr	r3, [pc, #220]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f003 030c 	and.w	r3, r3, #12
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d06d      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d14b      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c0c:	4b32      	ldr	r3, [pc, #200]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a31      	ldr	r2, [pc, #196]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c18:	f7fc faf8 	bl	800320c <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c20:	f7fc faf4 	bl	800320c <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e091      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c32:	4b29      	ldr	r3, [pc, #164]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f0      	bne.n	8006c20 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69da      	ldr	r2, [r3, #28]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	019b      	lsls	r3, r3, #6
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c54:	085b      	lsrs	r3, r3, #1
 8006c56:	3b01      	subs	r3, #1
 8006c58:	041b      	lsls	r3, r3, #16
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	061b      	lsls	r3, r3, #24
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	071b      	lsls	r3, r3, #28
 8006c6a:	491b      	ldr	r1, [pc, #108]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c70:	4b19      	ldr	r3, [pc, #100]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a18      	ldr	r2, [pc, #96]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7c:	f7fc fac6 	bl	800320c <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c84:	f7fc fac2 	bl	800320c <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e05f      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c96:	4b10      	ldr	r3, [pc, #64]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0f0      	beq.n	8006c84 <HAL_RCC_OscConfig+0x47c>
 8006ca2:	e057      	b.n	8006d54 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a0b      	ldr	r2, [pc, #44]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb0:	f7fc faac 	bl	800320c <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cb8:	f7fc faa8 	bl	800320c <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e045      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cca:	4b03      	ldr	r3, [pc, #12]	; (8006cd8 <HAL_RCC_OscConfig+0x4d0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f0      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x4b0>
 8006cd6:	e03d      	b.n	8006d54 <HAL_RCC_OscConfig+0x54c>
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006ce0:	4b1f      	ldr	r3, [pc, #124]	; (8006d60 <HAL_RCC_OscConfig+0x558>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d030      	beq.n	8006d50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d129      	bne.n	8006d50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d122      	bne.n	8006d50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d10:	4013      	ands	r3, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d119      	bne.n	8006d50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d26:	085b      	lsrs	r3, r3, #1
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d10f      	bne.n	8006d50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d107      	bne.n	8006d50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d001      	beq.n	8006d54 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e000      	b.n	8006d56 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	40023800 	.word	0x40023800

08006d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e0d0      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d7c:	4b6a      	ldr	r3, [pc, #424]	; (8006f28 <HAL_RCC_ClockConfig+0x1c4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 030f 	and.w	r3, r3, #15
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d910      	bls.n	8006dac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d8a:	4b67      	ldr	r3, [pc, #412]	; (8006f28 <HAL_RCC_ClockConfig+0x1c4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f023 020f 	bic.w	r2, r3, #15
 8006d92:	4965      	ldr	r1, [pc, #404]	; (8006f28 <HAL_RCC_ClockConfig+0x1c4>)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d9a:	4b63      	ldr	r3, [pc, #396]	; (8006f28 <HAL_RCC_ClockConfig+0x1c4>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d001      	beq.n	8006dac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e0b8      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d020      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dc4:	4b59      	ldr	r3, [pc, #356]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	4a58      	ldr	r2, [pc, #352]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0308 	and.w	r3, r3, #8
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ddc:	4b53      	ldr	r3, [pc, #332]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	4a52      	ldr	r2, [pc, #328]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006de6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006de8:	4b50      	ldr	r3, [pc, #320]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	494d      	ldr	r1, [pc, #308]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d040      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d107      	bne.n	8006e1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e0e:	4b47      	ldr	r3, [pc, #284]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d115      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e07f      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d107      	bne.n	8006e36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e26:	4b41      	ldr	r3, [pc, #260]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d109      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e073      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e36:	4b3d      	ldr	r3, [pc, #244]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e06b      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e46:	4b39      	ldr	r3, [pc, #228]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f023 0203 	bic.w	r2, r3, #3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	4936      	ldr	r1, [pc, #216]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e58:	f7fc f9d8 	bl	800320c <HAL_GetTick>
 8006e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e5e:	e00a      	b.n	8006e76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e60:	f7fc f9d4 	bl	800320c <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e053      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e76:	4b2d      	ldr	r3, [pc, #180]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 020c 	and.w	r2, r3, #12
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d1eb      	bne.n	8006e60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e88:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <HAL_RCC_ClockConfig+0x1c4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 030f 	and.w	r3, r3, #15
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d210      	bcs.n	8006eb8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e96:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <HAL_RCC_ClockConfig+0x1c4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f023 020f 	bic.w	r2, r3, #15
 8006e9e:	4922      	ldr	r1, [pc, #136]	; (8006f28 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ea6:	4b20      	ldr	r3, [pc, #128]	; (8006f28 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d001      	beq.n	8006eb8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e032      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d008      	beq.n	8006ed6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ec4:	4b19      	ldr	r3, [pc, #100]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	4916      	ldr	r1, [pc, #88]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d009      	beq.n	8006ef6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	490e      	ldr	r1, [pc, #56]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ef6:	f000 f821 	bl	8006f3c <HAL_RCC_GetSysClockFreq>
 8006efa:	4602      	mov	r2, r0
 8006efc:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <HAL_RCC_ClockConfig+0x1c8>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	091b      	lsrs	r3, r3, #4
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	490a      	ldr	r1, [pc, #40]	; (8006f30 <HAL_RCC_ClockConfig+0x1cc>)
 8006f08:	5ccb      	ldrb	r3, [r1, r3]
 8006f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0e:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <HAL_RCC_ClockConfig+0x1d0>)
 8006f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f12:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <HAL_RCC_ClockConfig+0x1d4>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fb fda0 	bl	8002a5c <HAL_InitTick>

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	40023c00 	.word	0x40023c00
 8006f2c:	40023800 	.word	0x40023800
 8006f30:	08011668 	.word	0x08011668
 8006f34:	20000000 	.word	0x20000000
 8006f38:	20000004 	.word	0x20000004

08006f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f40:	b094      	sub	sp, #80	; 0x50
 8006f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006f44:	2300      	movs	r3, #0
 8006f46:	647b      	str	r3, [r7, #68]	; 0x44
 8006f48:	2300      	movs	r3, #0
 8006f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006f50:	2300      	movs	r3, #0
 8006f52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f54:	4b79      	ldr	r3, [pc, #484]	; (800713c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 030c 	and.w	r3, r3, #12
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d00d      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0x40>
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	f200 80e1 	bhi.w	8007128 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <HAL_RCC_GetSysClockFreq+0x34>
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d003      	beq.n	8006f76 <HAL_RCC_GetSysClockFreq+0x3a>
 8006f6e:	e0db      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f70:	4b73      	ldr	r3, [pc, #460]	; (8007140 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f74:	e0db      	b.n	800712e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f76:	4b73      	ldr	r3, [pc, #460]	; (8007144 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f7a:	e0d8      	b.n	800712e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f7c:	4b6f      	ldr	r3, [pc, #444]	; (800713c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f84:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006f86:	4b6d      	ldr	r3, [pc, #436]	; (800713c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d063      	beq.n	800705a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f92:	4b6a      	ldr	r3, [pc, #424]	; (800713c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	099b      	lsrs	r3, r3, #6
 8006f98:	2200      	movs	r2, #0
 8006f9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8006faa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006fae:	4622      	mov	r2, r4
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f04f 0100 	mov.w	r1, #0
 8006fba:	0159      	lsls	r1, r3, #5
 8006fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fc0:	0150      	lsls	r0, r2, #5
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	1a51      	subs	r1, r2, r1
 8006fca:	6139      	str	r1, [r7, #16]
 8006fcc:	4629      	mov	r1, r5
 8006fce:	eb63 0301 	sbc.w	r3, r3, r1
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fe0:	4659      	mov	r1, fp
 8006fe2:	018b      	lsls	r3, r1, #6
 8006fe4:	4651      	mov	r1, sl
 8006fe6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fea:	4651      	mov	r1, sl
 8006fec:	018a      	lsls	r2, r1, #6
 8006fee:	4651      	mov	r1, sl
 8006ff0:	ebb2 0801 	subs.w	r8, r2, r1
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	eb63 0901 	sbc.w	r9, r3, r1
 8006ffa:	f04f 0200 	mov.w	r2, #0
 8006ffe:	f04f 0300 	mov.w	r3, #0
 8007002:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800700a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800700e:	4690      	mov	r8, r2
 8007010:	4699      	mov	r9, r3
 8007012:	4623      	mov	r3, r4
 8007014:	eb18 0303 	adds.w	r3, r8, r3
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	462b      	mov	r3, r5
 800701c:	eb49 0303 	adc.w	r3, r9, r3
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800702e:	4629      	mov	r1, r5
 8007030:	024b      	lsls	r3, r1, #9
 8007032:	4621      	mov	r1, r4
 8007034:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007038:	4621      	mov	r1, r4
 800703a:	024a      	lsls	r2, r1, #9
 800703c:	4610      	mov	r0, r2
 800703e:	4619      	mov	r1, r3
 8007040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007042:	2200      	movs	r2, #0
 8007044:	62bb      	str	r3, [r7, #40]	; 0x28
 8007046:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007048:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800704c:	f7f9 fa56 	bl	80004fc <__aeabi_uldivmod>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4613      	mov	r3, r2
 8007056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007058:	e058      	b.n	800710c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800705a:	4b38      	ldr	r3, [pc, #224]	; (800713c <HAL_RCC_GetSysClockFreq+0x200>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	099b      	lsrs	r3, r3, #6
 8007060:	2200      	movs	r2, #0
 8007062:	4618      	mov	r0, r3
 8007064:	4611      	mov	r1, r2
 8007066:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800706a:	623b      	str	r3, [r7, #32]
 800706c:	2300      	movs	r3, #0
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
 8007070:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007074:	4642      	mov	r2, r8
 8007076:	464b      	mov	r3, r9
 8007078:	f04f 0000 	mov.w	r0, #0
 800707c:	f04f 0100 	mov.w	r1, #0
 8007080:	0159      	lsls	r1, r3, #5
 8007082:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007086:	0150      	lsls	r0, r2, #5
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4641      	mov	r1, r8
 800708e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007092:	4649      	mov	r1, r9
 8007094:	eb63 0b01 	sbc.w	fp, r3, r1
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80070a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80070a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80070ac:	ebb2 040a 	subs.w	r4, r2, sl
 80070b0:	eb63 050b 	sbc.w	r5, r3, fp
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	00eb      	lsls	r3, r5, #3
 80070be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070c2:	00e2      	lsls	r2, r4, #3
 80070c4:	4614      	mov	r4, r2
 80070c6:	461d      	mov	r5, r3
 80070c8:	4643      	mov	r3, r8
 80070ca:	18e3      	adds	r3, r4, r3
 80070cc:	603b      	str	r3, [r7, #0]
 80070ce:	464b      	mov	r3, r9
 80070d0:	eb45 0303 	adc.w	r3, r5, r3
 80070d4:	607b      	str	r3, [r7, #4]
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	f04f 0300 	mov.w	r3, #0
 80070de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070e2:	4629      	mov	r1, r5
 80070e4:	028b      	lsls	r3, r1, #10
 80070e6:	4621      	mov	r1, r4
 80070e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070ec:	4621      	mov	r1, r4
 80070ee:	028a      	lsls	r2, r1, #10
 80070f0:	4610      	mov	r0, r2
 80070f2:	4619      	mov	r1, r3
 80070f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070f6:	2200      	movs	r2, #0
 80070f8:	61bb      	str	r3, [r7, #24]
 80070fa:	61fa      	str	r2, [r7, #28]
 80070fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007100:	f7f9 f9fc 	bl	80004fc <__aeabi_uldivmod>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4613      	mov	r3, r2
 800710a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800710c:	4b0b      	ldr	r3, [pc, #44]	; (800713c <HAL_RCC_GetSysClockFreq+0x200>)
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	0c1b      	lsrs	r3, r3, #16
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	3301      	adds	r3, #1
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800711c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800711e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007120:	fbb2 f3f3 	udiv	r3, r2, r3
 8007124:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007126:	e002      	b.n	800712e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007128:	4b05      	ldr	r3, [pc, #20]	; (8007140 <HAL_RCC_GetSysClockFreq+0x204>)
 800712a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800712c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800712e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007130:	4618      	mov	r0, r3
 8007132:	3750      	adds	r7, #80	; 0x50
 8007134:	46bd      	mov	sp, r7
 8007136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800713a:	bf00      	nop
 800713c:	40023800 	.word	0x40023800
 8007140:	00f42400 	.word	0x00f42400
 8007144:	007a1200 	.word	0x007a1200

08007148 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800714c:	4b03      	ldr	r3, [pc, #12]	; (800715c <HAL_RCC_GetHCLKFreq+0x14>)
 800714e:	681b      	ldr	r3, [r3, #0]
}
 8007150:	4618      	mov	r0, r3
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	20000000 	.word	0x20000000

08007160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007164:	f7ff fff0 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 8007168:	4602      	mov	r2, r0
 800716a:	4b05      	ldr	r3, [pc, #20]	; (8007180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	0a9b      	lsrs	r3, r3, #10
 8007170:	f003 0307 	and.w	r3, r3, #7
 8007174:	4903      	ldr	r1, [pc, #12]	; (8007184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007176:	5ccb      	ldrb	r3, [r1, r3]
 8007178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800717c:	4618      	mov	r0, r3
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40023800 	.word	0x40023800
 8007184:	08011678 	.word	0x08011678

08007188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800718c:	f7ff ffdc 	bl	8007148 <HAL_RCC_GetHCLKFreq>
 8007190:	4602      	mov	r2, r0
 8007192:	4b05      	ldr	r3, [pc, #20]	; (80071a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	0b5b      	lsrs	r3, r3, #13
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	4903      	ldr	r1, [pc, #12]	; (80071ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800719e:	5ccb      	ldrb	r3, [r1, r3]
 80071a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	40023800 	.word	0x40023800
 80071ac:	08011678 	.word	0x08011678

080071b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	220f      	movs	r2, #15
 80071be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80071c0:	4b12      	ldr	r3, [pc, #72]	; (800720c <HAL_RCC_GetClockConfig+0x5c>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 0203 	and.w	r2, r3, #3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80071cc:	4b0f      	ldr	r3, [pc, #60]	; (800720c <HAL_RCC_GetClockConfig+0x5c>)
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80071d8:	4b0c      	ldr	r3, [pc, #48]	; (800720c <HAL_RCC_GetClockConfig+0x5c>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80071e4:	4b09      	ldr	r3, [pc, #36]	; (800720c <HAL_RCC_GetClockConfig+0x5c>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	08db      	lsrs	r3, r3, #3
 80071ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80071f2:	4b07      	ldr	r3, [pc, #28]	; (8007210 <HAL_RCC_GetClockConfig+0x60>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 020f 	and.w	r2, r3, #15
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	601a      	str	r2, [r3, #0]
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	40023800 	.word	0x40023800
 8007210:	40023c00 	.word	0x40023c00

08007214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007228:	2300      	movs	r3, #0
 800722a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d012      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800723c:	4b69      	ldr	r3, [pc, #420]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	4a68      	ldr	r2, [pc, #416]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007242:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007246:	6093      	str	r3, [r2, #8]
 8007248:	4b66      	ldr	r3, [pc, #408]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007250:	4964      	ldr	r1, [pc, #400]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007252:	4313      	orrs	r3, r2
 8007254:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800725e:	2301      	movs	r3, #1
 8007260:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d017      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800726e:	4b5d      	ldr	r3, [pc, #372]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727c:	4959      	ldr	r1, [pc, #356]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800728c:	d101      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800729a:	2301      	movs	r3, #1
 800729c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d017      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80072aa:	4b4e      	ldr	r3, [pc, #312]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b8:	494a      	ldr	r1, [pc, #296]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072c8:	d101      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80072ca:	2301      	movs	r3, #1
 80072cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80072d6:	2301      	movs	r3, #1
 80072d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80072e6:	2301      	movs	r3, #1
 80072e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 808b 	beq.w	800740e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072f8:	4b3a      	ldr	r3, [pc, #232]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fc:	4a39      	ldr	r2, [pc, #228]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007302:	6413      	str	r3, [r2, #64]	; 0x40
 8007304:	4b37      	ldr	r3, [pc, #220]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800730c:	60bb      	str	r3, [r7, #8]
 800730e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007310:	4b35      	ldr	r3, [pc, #212]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a34      	ldr	r2, [pc, #208]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800731a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800731c:	f7fb ff76 	bl	800320c <HAL_GetTick>
 8007320:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007322:	e008      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007324:	f7fb ff72 	bl	800320c <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b64      	cmp	r3, #100	; 0x64
 8007330:	d901      	bls.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e38f      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007336:	4b2c      	ldr	r3, [pc, #176]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0f0      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007342:	4b28      	ldr	r3, [pc, #160]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800734a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d035      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	429a      	cmp	r2, r3
 800735e:	d02e      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007360:	4b20      	ldr	r3, [pc, #128]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007368:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800736a:	4b1e      	ldr	r3, [pc, #120]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800736c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736e:	4a1d      	ldr	r2, [pc, #116]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007374:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007376:	4b1b      	ldr	r3, [pc, #108]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	4a1a      	ldr	r2, [pc, #104]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800737c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007380:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007382:	4a18      	ldr	r2, [pc, #96]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007388:	4b16      	ldr	r3, [pc, #88]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b01      	cmp	r3, #1
 8007392:	d114      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007394:	f7fb ff3a 	bl	800320c <HAL_GetTick>
 8007398:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800739a:	e00a      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800739c:	f7fb ff36 	bl	800320c <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e351      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b2:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0ee      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ca:	d111      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80073cc:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80073d8:	4b04      	ldr	r3, [pc, #16]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80073da:	400b      	ands	r3, r1
 80073dc:	4901      	ldr	r1, [pc, #4]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	608b      	str	r3, [r1, #8]
 80073e2:	e00b      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80073e4:	40023800 	.word	0x40023800
 80073e8:	40007000 	.word	0x40007000
 80073ec:	0ffffcff 	.word	0x0ffffcff
 80073f0:	4bac      	ldr	r3, [pc, #688]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	4aab      	ldr	r2, [pc, #684]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073fa:	6093      	str	r3, [r2, #8]
 80073fc:	4ba9      	ldr	r3, [pc, #676]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007408:	49a6      	ldr	r1, [pc, #664]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800740a:	4313      	orrs	r3, r2
 800740c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0310 	and.w	r3, r3, #16
 8007416:	2b00      	cmp	r3, #0
 8007418:	d010      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800741a:	4ba2      	ldr	r3, [pc, #648]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800741c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007420:	4aa0      	ldr	r2, [pc, #640]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007426:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800742a:	4b9e      	ldr	r3, [pc, #632]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800742c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	499b      	ldr	r1, [pc, #620]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007448:	4b96      	ldr	r3, [pc, #600]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800744a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007456:	4993      	ldr	r1, [pc, #588]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800746a:	4b8e      	ldr	r3, [pc, #568]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800746c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007470:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007478:	498a      	ldr	r1, [pc, #552]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800747a:	4313      	orrs	r3, r2
 800747c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800748c:	4b85      	ldr	r3, [pc, #532]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800748e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007492:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800749a:	4982      	ldr	r1, [pc, #520]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800749c:	4313      	orrs	r3, r2
 800749e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074ae:	4b7d      	ldr	r3, [pc, #500]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074bc:	4979      	ldr	r1, [pc, #484]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074d0:	4b74      	ldr	r3, [pc, #464]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d6:	f023 0203 	bic.w	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074de:	4971      	ldr	r1, [pc, #452]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074f2:	4b6c      	ldr	r3, [pc, #432]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f8:	f023 020c 	bic.w	r2, r3, #12
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007500:	4968      	ldr	r1, [pc, #416]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007502:	4313      	orrs	r3, r2
 8007504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007514:	4b63      	ldr	r3, [pc, #396]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007522:	4960      	ldr	r1, [pc, #384]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007536:	4b5b      	ldr	r3, [pc, #364]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800753c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007544:	4957      	ldr	r1, [pc, #348]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00a      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007558:	4b52      	ldr	r3, [pc, #328]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800755a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007566:	494f      	ldr	r1, [pc, #316]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007568:	4313      	orrs	r3, r2
 800756a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800757a:	4b4a      	ldr	r3, [pc, #296]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800757c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007580:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007588:	4946      	ldr	r1, [pc, #280]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800758a:	4313      	orrs	r3, r2
 800758c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800759c:	4b41      	ldr	r3, [pc, #260]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075aa:	493e      	ldr	r1, [pc, #248]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80075be:	4b39      	ldr	r3, [pc, #228]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075cc:	4935      	ldr	r1, [pc, #212]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80075e0:	4b30      	ldr	r3, [pc, #192]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ee:	492d      	ldr	r1, [pc, #180]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d011      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007602:	4b28      	ldr	r3, [pc, #160]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007608:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007610:	4924      	ldr	r1, [pc, #144]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007612:	4313      	orrs	r3, r2
 8007614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800761c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007620:	d101      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007622:	2301      	movs	r3, #1
 8007624:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0308 	and.w	r3, r3, #8
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007632:	2301      	movs	r3, #1
 8007634:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007642:	4b18      	ldr	r3, [pc, #96]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007648:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007650:	4914      	ldr	r1, [pc, #80]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007652:	4313      	orrs	r3, r2
 8007654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007664:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800766a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007674:	490b      	ldr	r1, [pc, #44]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007676:	4313      	orrs	r3, r2
 8007678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00f      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007688:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800768a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007698:	4902      	ldr	r1, [pc, #8]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800769a:	4313      	orrs	r3, r2
 800769c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80076a0:	e002      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80076a2:	bf00      	nop
 80076a4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076b4:	4b8a      	ldr	r3, [pc, #552]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c4:	4986      	ldr	r1, [pc, #536]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80076d8:	4b81      	ldr	r3, [pc, #516]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e8:	497d      	ldr	r1, [pc, #500]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d006      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 80d6 	beq.w	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007704:	4b76      	ldr	r3, [pc, #472]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a75      	ldr	r2, [pc, #468]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800770a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800770e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007710:	f7fb fd7c 	bl	800320c <HAL_GetTick>
 8007714:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007716:	e008      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007718:	f7fb fd78 	bl	800320c <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b64      	cmp	r3, #100	; 0x64
 8007724:	d901      	bls.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e195      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800772a:	4b6d      	ldr	r3, [pc, #436]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f0      	bne.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d021      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007746:	2b00      	cmp	r3, #0
 8007748:	d11d      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800774a:	4b65      	ldr	r3, [pc, #404]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800774c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007750:	0c1b      	lsrs	r3, r3, #16
 8007752:	f003 0303 	and.w	r3, r3, #3
 8007756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007758:	4b61      	ldr	r3, [pc, #388]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800775a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800775e:	0e1b      	lsrs	r3, r3, #24
 8007760:	f003 030f 	and.w	r3, r3, #15
 8007764:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	019a      	lsls	r2, r3, #6
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	041b      	lsls	r3, r3, #16
 8007770:	431a      	orrs	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	061b      	lsls	r3, r3, #24
 8007776:	431a      	orrs	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	071b      	lsls	r3, r3, #28
 800777e:	4958      	ldr	r1, [pc, #352]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007780:	4313      	orrs	r3, r2
 8007782:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d004      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800779a:	d00a      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d02e      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077b0:	d129      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80077b2:	4b4b      	ldr	r3, [pc, #300]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077b8:	0c1b      	lsrs	r3, r3, #16
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80077c0:	4b47      	ldr	r3, [pc, #284]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077c6:	0f1b      	lsrs	r3, r3, #28
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	019a      	lsls	r2, r3, #6
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	041b      	lsls	r3, r3, #16
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	061b      	lsls	r3, r3, #24
 80077e0:	431a      	orrs	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	071b      	lsls	r3, r3, #28
 80077e6:	493e      	ldr	r1, [pc, #248]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80077ee:	4b3c      	ldr	r3, [pc, #240]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077f4:	f023 021f 	bic.w	r2, r3, #31
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	3b01      	subs	r3, #1
 80077fe:	4938      	ldr	r1, [pc, #224]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007800:	4313      	orrs	r3, r2
 8007802:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d01d      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007812:	4b33      	ldr	r3, [pc, #204]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007818:	0e1b      	lsrs	r3, r3, #24
 800781a:	f003 030f 	and.w	r3, r3, #15
 800781e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007820:	4b2f      	ldr	r3, [pc, #188]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007826:	0f1b      	lsrs	r3, r3, #28
 8007828:	f003 0307 	and.w	r3, r3, #7
 800782c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	019a      	lsls	r2, r3, #6
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	041b      	lsls	r3, r3, #16
 800783a:	431a      	orrs	r2, r3
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	061b      	lsls	r3, r3, #24
 8007840:	431a      	orrs	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	071b      	lsls	r3, r3, #28
 8007846:	4926      	ldr	r1, [pc, #152]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007848:	4313      	orrs	r3, r2
 800784a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d011      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	019a      	lsls	r2, r3, #6
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	041b      	lsls	r3, r3, #16
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	061b      	lsls	r3, r3, #24
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	071b      	lsls	r3, r3, #28
 8007876:	491a      	ldr	r1, [pc, #104]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007878:	4313      	orrs	r3, r2
 800787a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800787e:	4b18      	ldr	r3, [pc, #96]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a17      	ldr	r2, [pc, #92]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007884:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800788a:	f7fb fcbf 	bl	800320c <HAL_GetTick>
 800788e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007890:	e008      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007892:	f7fb fcbb 	bl	800320c <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	2b64      	cmp	r3, #100	; 0x64
 800789e:	d901      	bls.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e0d8      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80078a4:	4b0e      	ldr	r3, [pc, #56]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0f0      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	f040 80ce 	bne.w	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80078b8:	4b09      	ldr	r3, [pc, #36]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a08      	ldr	r2, [pc, #32]	; (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c4:	f7fb fca2 	bl	800320c <HAL_GetTick>
 80078c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078ca:	e00b      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80078cc:	f7fb fc9e 	bl	800320c <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b64      	cmp	r3, #100	; 0x64
 80078d8:	d904      	bls.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e0bb      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80078de:	bf00      	nop
 80078e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078e4:	4b5e      	ldr	r3, [pc, #376]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078f0:	d0ec      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d009      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800790e:	2b00      	cmp	r3, #0
 8007910:	d02e      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d12a      	bne.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800791a:	4b51      	ldr	r3, [pc, #324]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800791c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007920:	0c1b      	lsrs	r3, r3, #16
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007928:	4b4d      	ldr	r3, [pc, #308]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800792a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792e:	0f1b      	lsrs	r3, r3, #28
 8007930:	f003 0307 	and.w	r3, r3, #7
 8007934:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	019a      	lsls	r2, r3, #6
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	041b      	lsls	r3, r3, #16
 8007940:	431a      	orrs	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	061b      	lsls	r3, r3, #24
 8007948:	431a      	orrs	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	071b      	lsls	r3, r3, #28
 800794e:	4944      	ldr	r1, [pc, #272]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007950:	4313      	orrs	r3, r2
 8007952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007956:	4b42      	ldr	r3, [pc, #264]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800795c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	3b01      	subs	r3, #1
 8007966:	021b      	lsls	r3, r3, #8
 8007968:	493d      	ldr	r1, [pc, #244]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800796a:	4313      	orrs	r3, r2
 800796c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d022      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007984:	d11d      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007986:	4b36      	ldr	r3, [pc, #216]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800798c:	0e1b      	lsrs	r3, r3, #24
 800798e:	f003 030f 	and.w	r3, r3, #15
 8007992:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007994:	4b32      	ldr	r3, [pc, #200]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799a:	0f1b      	lsrs	r3, r3, #28
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	019a      	lsls	r2, r3, #6
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	041b      	lsls	r3, r3, #16
 80079ae:	431a      	orrs	r2, r3
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	061b      	lsls	r3, r3, #24
 80079b4:	431a      	orrs	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	071b      	lsls	r3, r3, #28
 80079ba:	4929      	ldr	r1, [pc, #164]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0308 	and.w	r3, r3, #8
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d028      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80079ce:	4b24      	ldr	r3, [pc, #144]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80079d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d4:	0e1b      	lsrs	r3, r3, #24
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80079dc:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80079de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e2:	0c1b      	lsrs	r3, r3, #16
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	019a      	lsls	r2, r3, #6
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	041b      	lsls	r3, r3, #16
 80079f4:	431a      	orrs	r2, r3
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	061b      	lsls	r3, r3, #24
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	071b      	lsls	r3, r3, #28
 8007a02:	4917      	ldr	r1, [pc, #92]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007a0a:	4b15      	ldr	r3, [pc, #84]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	4911      	ldr	r1, [pc, #68]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007a20:	4b0f      	ldr	r3, [pc, #60]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a0e      	ldr	r2, [pc, #56]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a2c:	f7fb fbee 	bl	800320c <HAL_GetTick>
 8007a30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a32:	e008      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a34:	f7fb fbea 	bl	800320c <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b64      	cmp	r3, #100	; 0x64
 8007a40:	d901      	bls.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e007      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a46:	4b06      	ldr	r3, [pc, #24]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a52:	d1ef      	bne.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	40023800 	.word	0x40023800

08007a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e049      	b.n	8007b0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f841 	bl	8007b12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	f000 fa00 	bl	8007ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
	...

08007b28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d001      	beq.n	8007b40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e054      	b.n	8007bea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 0201 	orr.w	r2, r2, #1
 8007b56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a26      	ldr	r2, [pc, #152]	; (8007bf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d022      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0x80>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b6a:	d01d      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0x80>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a22      	ldr	r2, [pc, #136]	; (8007bfc <HAL_TIM_Base_Start_IT+0xd4>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d018      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0x80>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a21      	ldr	r2, [pc, #132]	; (8007c00 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d013      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0x80>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a1f      	ldr	r2, [pc, #124]	; (8007c04 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d00e      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0x80>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a1e      	ldr	r2, [pc, #120]	; (8007c08 <HAL_TIM_Base_Start_IT+0xe0>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d009      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0x80>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a1c      	ldr	r2, [pc, #112]	; (8007c0c <HAL_TIM_Base_Start_IT+0xe4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d004      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0x80>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a1b      	ldr	r2, [pc, #108]	; (8007c10 <HAL_TIM_Base_Start_IT+0xe8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d115      	bne.n	8007bd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689a      	ldr	r2, [r3, #8]
 8007bae:	4b19      	ldr	r3, [pc, #100]	; (8007c14 <HAL_TIM_Base_Start_IT+0xec>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b06      	cmp	r3, #6
 8007bb8:	d015      	beq.n	8007be6 <HAL_TIM_Base_Start_IT+0xbe>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc0:	d011      	beq.n	8007be6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 0201 	orr.w	r2, r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd2:	e008      	b.n	8007be6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f042 0201 	orr.w	r2, r2, #1
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	e000      	b.n	8007be8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40000400 	.word	0x40000400
 8007c00:	40000800 	.word	0x40000800
 8007c04:	40000c00 	.word	0x40000c00
 8007c08:	40010400 	.word	0x40010400
 8007c0c:	40014000 	.word	0x40014000
 8007c10:	40001800 	.word	0x40001800
 8007c14:	00010007 	.word	0x00010007

08007c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d122      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d11b      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f06f 0202 	mvn.w	r2, #2
 8007c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f905 	bl	8007e6a <HAL_TIM_IC_CaptureCallback>
 8007c60:	e005      	b.n	8007c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f8f7 	bl	8007e56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f908 	bl	8007e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d122      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d11b      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f06f 0204 	mvn.w	r2, #4
 8007c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f8db 	bl	8007e6a <HAL_TIM_IC_CaptureCallback>
 8007cb4:	e005      	b.n	8007cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f8cd 	bl	8007e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f8de 	bl	8007e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 0308 	and.w	r3, r3, #8
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	d122      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f003 0308 	and.w	r3, r3, #8
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d11b      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f06f 0208 	mvn.w	r2, #8
 8007cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2204      	movs	r2, #4
 8007cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f8b1 	bl	8007e6a <HAL_TIM_IC_CaptureCallback>
 8007d08:	e005      	b.n	8007d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f8a3 	bl	8007e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f8b4 	bl	8007e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f003 0310 	and.w	r3, r3, #16
 8007d26:	2b10      	cmp	r3, #16
 8007d28:	d122      	bne.n	8007d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	f003 0310 	and.w	r3, r3, #16
 8007d34:	2b10      	cmp	r3, #16
 8007d36:	d11b      	bne.n	8007d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f06f 0210 	mvn.w	r2, #16
 8007d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2208      	movs	r2, #8
 8007d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f887 	bl	8007e6a <HAL_TIM_IC_CaptureCallback>
 8007d5c:	e005      	b.n	8007d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f879 	bl	8007e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f88a 	bl	8007e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d10e      	bne.n	8007d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d107      	bne.n	8007d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f06f 0201 	mvn.w	r2, #1
 8007d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7fa fe20 	bl	80029dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da6:	2b80      	cmp	r3, #128	; 0x80
 8007da8:	d10e      	bne.n	8007dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db4:	2b80      	cmp	r3, #128	; 0x80
 8007db6:	d107      	bne.n	8007dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f91a 	bl	8007ffc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd6:	d10e      	bne.n	8007df6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de2:	2b80      	cmp	r3, #128	; 0x80
 8007de4:	d107      	bne.n	8007df6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f90d 	bl	8008010 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e00:	2b40      	cmp	r3, #64	; 0x40
 8007e02:	d10e      	bne.n	8007e22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0e:	2b40      	cmp	r3, #64	; 0x40
 8007e10:	d107      	bne.n	8007e22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f838 	bl	8007e92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b20      	cmp	r3, #32
 8007e2e:	d10e      	bne.n	8007e4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b20      	cmp	r3, #32
 8007e3c:	d107      	bne.n	8007e4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f06f 0220 	mvn.w	r2, #32
 8007e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f8cd 	bl	8007fe8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e72:	bf00      	nop
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e9a:	bf00      	nop
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
	...

08007ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a40      	ldr	r2, [pc, #256]	; (8007fbc <TIM_Base_SetConfig+0x114>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d013      	beq.n	8007ee8 <TIM_Base_SetConfig+0x40>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec6:	d00f      	beq.n	8007ee8 <TIM_Base_SetConfig+0x40>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a3d      	ldr	r2, [pc, #244]	; (8007fc0 <TIM_Base_SetConfig+0x118>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d00b      	beq.n	8007ee8 <TIM_Base_SetConfig+0x40>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a3c      	ldr	r2, [pc, #240]	; (8007fc4 <TIM_Base_SetConfig+0x11c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d007      	beq.n	8007ee8 <TIM_Base_SetConfig+0x40>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a3b      	ldr	r2, [pc, #236]	; (8007fc8 <TIM_Base_SetConfig+0x120>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d003      	beq.n	8007ee8 <TIM_Base_SetConfig+0x40>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a3a      	ldr	r2, [pc, #232]	; (8007fcc <TIM_Base_SetConfig+0x124>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d108      	bne.n	8007efa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a2f      	ldr	r2, [pc, #188]	; (8007fbc <TIM_Base_SetConfig+0x114>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d02b      	beq.n	8007f5a <TIM_Base_SetConfig+0xb2>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f08:	d027      	beq.n	8007f5a <TIM_Base_SetConfig+0xb2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a2c      	ldr	r2, [pc, #176]	; (8007fc0 <TIM_Base_SetConfig+0x118>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d023      	beq.n	8007f5a <TIM_Base_SetConfig+0xb2>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a2b      	ldr	r2, [pc, #172]	; (8007fc4 <TIM_Base_SetConfig+0x11c>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d01f      	beq.n	8007f5a <TIM_Base_SetConfig+0xb2>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a2a      	ldr	r2, [pc, #168]	; (8007fc8 <TIM_Base_SetConfig+0x120>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d01b      	beq.n	8007f5a <TIM_Base_SetConfig+0xb2>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a29      	ldr	r2, [pc, #164]	; (8007fcc <TIM_Base_SetConfig+0x124>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d017      	beq.n	8007f5a <TIM_Base_SetConfig+0xb2>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a28      	ldr	r2, [pc, #160]	; (8007fd0 <TIM_Base_SetConfig+0x128>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d013      	beq.n	8007f5a <TIM_Base_SetConfig+0xb2>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a27      	ldr	r2, [pc, #156]	; (8007fd4 <TIM_Base_SetConfig+0x12c>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d00f      	beq.n	8007f5a <TIM_Base_SetConfig+0xb2>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a26      	ldr	r2, [pc, #152]	; (8007fd8 <TIM_Base_SetConfig+0x130>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00b      	beq.n	8007f5a <TIM_Base_SetConfig+0xb2>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a25      	ldr	r2, [pc, #148]	; (8007fdc <TIM_Base_SetConfig+0x134>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d007      	beq.n	8007f5a <TIM_Base_SetConfig+0xb2>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a24      	ldr	r2, [pc, #144]	; (8007fe0 <TIM_Base_SetConfig+0x138>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d003      	beq.n	8007f5a <TIM_Base_SetConfig+0xb2>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a23      	ldr	r2, [pc, #140]	; (8007fe4 <TIM_Base_SetConfig+0x13c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d108      	bne.n	8007f6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a0a      	ldr	r2, [pc, #40]	; (8007fbc <TIM_Base_SetConfig+0x114>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d003      	beq.n	8007fa0 <TIM_Base_SetConfig+0xf8>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a0c      	ldr	r2, [pc, #48]	; (8007fcc <TIM_Base_SetConfig+0x124>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d103      	bne.n	8007fa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	691a      	ldr	r2, [r3, #16]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	615a      	str	r2, [r3, #20]
}
 8007fae:	bf00      	nop
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40010000 	.word	0x40010000
 8007fc0:	40000400 	.word	0x40000400
 8007fc4:	40000800 	.word	0x40000800
 8007fc8:	40000c00 	.word	0x40000c00
 8007fcc:	40010400 	.word	0x40010400
 8007fd0:	40014000 	.word	0x40014000
 8007fd4:	40014400 	.word	0x40014400
 8007fd8:	40014800 	.word	0x40014800
 8007fdc:	40001800 	.word	0x40001800
 8007fe0:	40001c00 	.word	0x40001c00
 8007fe4:	40002000 	.word	0x40002000

08007fe8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e040      	b.n	80080b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d106      	bne.n	800804c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7fa ff26 	bl	8002e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2224      	movs	r2, #36	; 0x24
 8008050:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0201 	bic.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fbc2 	bl	80087ec <UART_SetConfig>
 8008068:	4603      	mov	r3, r0
 800806a:	2b01      	cmp	r3, #1
 800806c:	d101      	bne.n	8008072 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e022      	b.n	80080b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fe1a 	bl	8008cb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800808e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800809e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0201 	orr.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fea1 	bl	8008df8 <UART_CheckIdleState>
 80080b6:	4603      	mov	r3, r0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08a      	sub	sp, #40	; 0x28
 80080c4:	af02      	add	r7, sp, #8
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	4613      	mov	r3, r2
 80080ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d171      	bne.n	80081bc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <HAL_UART_Transmit+0x24>
 80080de:	88fb      	ldrh	r3, [r7, #6]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e06a      	b.n	80081be <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2221      	movs	r2, #33	; 0x21
 80080f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080f6:	f7fb f889 	bl	800320c <HAL_GetTick>
 80080fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	88fa      	ldrh	r2, [r7, #6]
 8008100:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	88fa      	ldrh	r2, [r7, #6]
 8008108:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008114:	d108      	bne.n	8008128 <HAL_UART_Transmit+0x68>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d104      	bne.n	8008128 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800811e:	2300      	movs	r3, #0
 8008120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	61bb      	str	r3, [r7, #24]
 8008126:	e003      	b.n	8008130 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800812c:	2300      	movs	r3, #0
 800812e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008130:	e02c      	b.n	800818c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2200      	movs	r2, #0
 800813a:	2180      	movs	r1, #128	; 0x80
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 fea8 	bl	8008e92 <UART_WaitOnFlagUntilTimeout>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e038      	b.n	80081be <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10b      	bne.n	800816a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008160:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	3302      	adds	r3, #2
 8008166:	61bb      	str	r3, [r7, #24]
 8008168:	e007      	b.n	800817a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	781a      	ldrb	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	3301      	adds	r3, #1
 8008178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008180:	b29b      	uxth	r3, r3
 8008182:	3b01      	subs	r3, #1
 8008184:	b29a      	uxth	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008192:	b29b      	uxth	r3, r3
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1cc      	bne.n	8008132 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2200      	movs	r2, #0
 80081a0:	2140      	movs	r1, #64	; 0x40
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 fe75 	bl	8008e92 <UART_WaitOnFlagUntilTimeout>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e005      	b.n	80081be <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2220      	movs	r2, #32
 80081b6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e000      	b.n	80081be <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80081bc:	2302      	movs	r3, #2
  }
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3720      	adds	r7, #32
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b0ba      	sub	sp, #232	; 0xe8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80081f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80081f6:	4013      	ands	r3, r2
 80081f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80081fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008200:	2b00      	cmp	r3, #0
 8008202:	d115      	bne.n	8008230 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008208:	f003 0320 	and.w	r3, r3, #32
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00f      	beq.n	8008230 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008214:	f003 0320 	and.w	r3, r3, #32
 8008218:	2b00      	cmp	r3, #0
 800821a:	d009      	beq.n	8008230 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 82ac 	beq.w	800877e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
      }
      return;
 800822e:	e2a6      	b.n	800877e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 8117 	beq.w	8008468 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800823a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d106      	bne.n	8008254 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008246:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800824a:	4b85      	ldr	r3, [pc, #532]	; (8008460 <HAL_UART_IRQHandler+0x298>)
 800824c:	4013      	ands	r3, r2
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 810a 	beq.w	8008468 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d011      	beq.n	8008284 <HAL_UART_IRQHandler+0xbc>
 8008260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00b      	beq.n	8008284 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2201      	movs	r2, #1
 8008272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800827a:	f043 0201 	orr.w	r2, r3, #1
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d011      	beq.n	80082b4 <HAL_UART_IRQHandler+0xec>
 8008290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00b      	beq.n	80082b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2202      	movs	r2, #2
 80082a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082aa:	f043 0204 	orr.w	r2, r3, #4
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d011      	beq.n	80082e4 <HAL_UART_IRQHandler+0x11c>
 80082c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00b      	beq.n	80082e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2204      	movs	r2, #4
 80082d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082da:	f043 0202 	orr.w	r2, r3, #2
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e8:	f003 0308 	and.w	r3, r3, #8
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d017      	beq.n	8008320 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80082f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f4:	f003 0320 	and.w	r3, r3, #32
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d105      	bne.n	8008308 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80082fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008300:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00b      	beq.n	8008320 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2208      	movs	r2, #8
 800830e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008316:	f043 0208 	orr.w	r2, r3, #8
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008328:	2b00      	cmp	r3, #0
 800832a:	d012      	beq.n	8008352 <HAL_UART_IRQHandler+0x18a>
 800832c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00c      	beq.n	8008352 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008348:	f043 0220 	orr.w	r2, r3, #32
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 8212 	beq.w	8008782 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800835e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008362:	f003 0320 	and.w	r3, r3, #32
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00d      	beq.n	8008386 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800836a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800836e:	f003 0320 	and.w	r3, r3, #32
 8008372:	2b00      	cmp	r3, #0
 8008374:	d007      	beq.n	8008386 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800838c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839a:	2b40      	cmp	r3, #64	; 0x40
 800839c:	d005      	beq.n	80083aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800839e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d04f      	beq.n	800844a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fe37 	bl	800901e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ba:	2b40      	cmp	r3, #64	; 0x40
 80083bc:	d141      	bne.n	8008442 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3308      	adds	r3, #8
 80083c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80083d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3308      	adds	r3, #8
 80083e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1d9      	bne.n	80083be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800840e:	2b00      	cmp	r3, #0
 8008410:	d013      	beq.n	800843a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008416:	4a13      	ldr	r2, [pc, #76]	; (8008464 <HAL_UART_IRQHandler+0x29c>)
 8008418:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800841e:	4618      	mov	r0, r3
 8008420:	f7fb ff76 	bl	8004310 <HAL_DMA_Abort_IT>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d017      	beq.n	800845a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800842e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008434:	4610      	mov	r0, r2
 8008436:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008438:	e00f      	b.n	800845a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f9b6 	bl	80087ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008440:	e00b      	b.n	800845a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f9b2 	bl	80087ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008448:	e007      	b.n	800845a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f9ae 	bl	80087ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008458:	e193      	b.n	8008782 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845a:	bf00      	nop
    return;
 800845c:	e191      	b.n	8008782 <HAL_UART_IRQHandler+0x5ba>
 800845e:	bf00      	nop
 8008460:	04000120 	.word	0x04000120
 8008464:	080090e7 	.word	0x080090e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800846c:	2b01      	cmp	r3, #1
 800846e:	f040 814c 	bne.w	800870a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008476:	f003 0310 	and.w	r3, r3, #16
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 8145 	beq.w	800870a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008484:	f003 0310 	and.w	r3, r3, #16
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 813e 	beq.w	800870a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2210      	movs	r2, #16
 8008494:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a0:	2b40      	cmp	r3, #64	; 0x40
 80084a2:	f040 80b6 	bne.w	8008612 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f000 8165 	beq.w	8008786 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80084c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084c6:	429a      	cmp	r2, r3
 80084c8:	f080 815d 	bcs.w	8008786 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e0:	f000 8086 	beq.w	80085f0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	461a      	mov	r2, r3
 800850a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800850e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008512:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800851a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1da      	bne.n	80084e4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3308      	adds	r3, #8
 8008534:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800853e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008540:	f023 0301 	bic.w	r3, r3, #1
 8008544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3308      	adds	r3, #8
 800854e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008552:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008556:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800855a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e1      	bne.n	800852e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800857a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800857c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3308      	adds	r3, #8
 800858a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800858e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008590:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008594:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800859c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e3      	bne.n	800856a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c0:	f023 0310 	bic.w	r3, r3, #16
 80085c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	461a      	mov	r2, r3
 80085ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80085d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e4      	bne.n	80085b0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fb fe20 	bl	8004230 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2202      	movs	r2, #2
 80085f4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008602:	b29b      	uxth	r3, r3
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	b29b      	uxth	r3, r3
 8008608:	4619      	mov	r1, r3
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f8d8 	bl	80087c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008610:	e0b9      	b.n	8008786 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800861e:	b29b      	uxth	r3, r3
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800862c:	b29b      	uxth	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 80ab 	beq.w	800878a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8008634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 80a6 	beq.w	800878a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800864c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008652:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008660:	647b      	str	r3, [r7, #68]	; 0x44
 8008662:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800866e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e4      	bne.n	800863e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3308      	adds	r3, #8
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	623b      	str	r3, [r7, #32]
   return(result);
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	f023 0301 	bic.w	r3, r3, #1
 800868a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3308      	adds	r3, #8
 8008694:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008698:	633a      	str	r2, [r7, #48]	; 0x30
 800869a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800869e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e3      	bne.n	8008674 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2220      	movs	r2, #32
 80086b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f023 0310 	bic.w	r3, r3, #16
 80086d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	461a      	mov	r2, r3
 80086de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086e2:	61fb      	str	r3, [r7, #28]
 80086e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e6:	69b9      	ldr	r1, [r7, #24]
 80086e8:	69fa      	ldr	r2, [r7, #28]
 80086ea:	e841 2300 	strex	r3, r2, [r1]
 80086ee:	617b      	str	r3, [r7, #20]
   return(result);
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e4      	bne.n	80086c0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2202      	movs	r2, #2
 80086fa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f85c 	bl	80087c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008708:	e03f      	b.n	800878a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800870a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800870e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00e      	beq.n	8008734 <HAL_UART_IRQHandler+0x56c>
 8008716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800871a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d008      	beq.n	8008734 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800872a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f853 	bl	80087d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008732:	e02d      	b.n	8008790 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00e      	beq.n	800875e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008748:	2b00      	cmp	r3, #0
 800874a:	d008      	beq.n	800875e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008750:	2b00      	cmp	r3, #0
 8008752:	d01c      	beq.n	800878e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	4798      	blx	r3
    }
    return;
 800875c:	e017      	b.n	800878e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800875e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008766:	2b00      	cmp	r3, #0
 8008768:	d012      	beq.n	8008790 <HAL_UART_IRQHandler+0x5c8>
 800876a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800876e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00c      	beq.n	8008790 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fccb 	bl	8009112 <UART_EndTransmit_IT>
    return;
 800877c:	e008      	b.n	8008790 <HAL_UART_IRQHandler+0x5c8>
      return;
 800877e:	bf00      	nop
 8008780:	e006      	b.n	8008790 <HAL_UART_IRQHandler+0x5c8>
    return;
 8008782:	bf00      	nop
 8008784:	e004      	b.n	8008790 <HAL_UART_IRQHandler+0x5c8>
      return;
 8008786:	bf00      	nop
 8008788:	e002      	b.n	8008790 <HAL_UART_IRQHandler+0x5c8>
      return;
 800878a:	bf00      	nop
 800878c:	e000      	b.n	8008790 <HAL_UART_IRQHandler+0x5c8>
    return;
 800878e:	bf00      	nop
  }

}
 8008790:	37e8      	adds	r7, #232	; 0xe8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop

08008798 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	431a      	orrs	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	4ba6      	ldr	r3, [pc, #664]	; (8008ab0 <UART_SetConfig+0x2c4>)
 8008818:	4013      	ands	r3, r2
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	6812      	ldr	r2, [r2, #0]
 800881e:	6979      	ldr	r1, [r7, #20]
 8008820:	430b      	orrs	r3, r1
 8008822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	430a      	orrs	r2, r1
 8008838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	4313      	orrs	r3, r2
 8008848:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	430a      	orrs	r2, r1
 800885c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a94      	ldr	r2, [pc, #592]	; (8008ab4 <UART_SetConfig+0x2c8>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d120      	bne.n	80088aa <UART_SetConfig+0xbe>
 8008868:	4b93      	ldr	r3, [pc, #588]	; (8008ab8 <UART_SetConfig+0x2cc>)
 800886a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800886e:	f003 0303 	and.w	r3, r3, #3
 8008872:	2b03      	cmp	r3, #3
 8008874:	d816      	bhi.n	80088a4 <UART_SetConfig+0xb8>
 8008876:	a201      	add	r2, pc, #4	; (adr r2, 800887c <UART_SetConfig+0x90>)
 8008878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887c:	0800888d 	.word	0x0800888d
 8008880:	08008899 	.word	0x08008899
 8008884:	08008893 	.word	0x08008893
 8008888:	0800889f 	.word	0x0800889f
 800888c:	2301      	movs	r3, #1
 800888e:	77fb      	strb	r3, [r7, #31]
 8008890:	e150      	b.n	8008b34 <UART_SetConfig+0x348>
 8008892:	2302      	movs	r3, #2
 8008894:	77fb      	strb	r3, [r7, #31]
 8008896:	e14d      	b.n	8008b34 <UART_SetConfig+0x348>
 8008898:	2304      	movs	r3, #4
 800889a:	77fb      	strb	r3, [r7, #31]
 800889c:	e14a      	b.n	8008b34 <UART_SetConfig+0x348>
 800889e:	2308      	movs	r3, #8
 80088a0:	77fb      	strb	r3, [r7, #31]
 80088a2:	e147      	b.n	8008b34 <UART_SetConfig+0x348>
 80088a4:	2310      	movs	r3, #16
 80088a6:	77fb      	strb	r3, [r7, #31]
 80088a8:	e144      	b.n	8008b34 <UART_SetConfig+0x348>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a83      	ldr	r2, [pc, #524]	; (8008abc <UART_SetConfig+0x2d0>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d132      	bne.n	800891a <UART_SetConfig+0x12e>
 80088b4:	4b80      	ldr	r3, [pc, #512]	; (8008ab8 <UART_SetConfig+0x2cc>)
 80088b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ba:	f003 030c 	and.w	r3, r3, #12
 80088be:	2b0c      	cmp	r3, #12
 80088c0:	d828      	bhi.n	8008914 <UART_SetConfig+0x128>
 80088c2:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <UART_SetConfig+0xdc>)
 80088c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c8:	080088fd 	.word	0x080088fd
 80088cc:	08008915 	.word	0x08008915
 80088d0:	08008915 	.word	0x08008915
 80088d4:	08008915 	.word	0x08008915
 80088d8:	08008909 	.word	0x08008909
 80088dc:	08008915 	.word	0x08008915
 80088e0:	08008915 	.word	0x08008915
 80088e4:	08008915 	.word	0x08008915
 80088e8:	08008903 	.word	0x08008903
 80088ec:	08008915 	.word	0x08008915
 80088f0:	08008915 	.word	0x08008915
 80088f4:	08008915 	.word	0x08008915
 80088f8:	0800890f 	.word	0x0800890f
 80088fc:	2300      	movs	r3, #0
 80088fe:	77fb      	strb	r3, [r7, #31]
 8008900:	e118      	b.n	8008b34 <UART_SetConfig+0x348>
 8008902:	2302      	movs	r3, #2
 8008904:	77fb      	strb	r3, [r7, #31]
 8008906:	e115      	b.n	8008b34 <UART_SetConfig+0x348>
 8008908:	2304      	movs	r3, #4
 800890a:	77fb      	strb	r3, [r7, #31]
 800890c:	e112      	b.n	8008b34 <UART_SetConfig+0x348>
 800890e:	2308      	movs	r3, #8
 8008910:	77fb      	strb	r3, [r7, #31]
 8008912:	e10f      	b.n	8008b34 <UART_SetConfig+0x348>
 8008914:	2310      	movs	r3, #16
 8008916:	77fb      	strb	r3, [r7, #31]
 8008918:	e10c      	b.n	8008b34 <UART_SetConfig+0x348>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a68      	ldr	r2, [pc, #416]	; (8008ac0 <UART_SetConfig+0x2d4>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d120      	bne.n	8008966 <UART_SetConfig+0x17a>
 8008924:	4b64      	ldr	r3, [pc, #400]	; (8008ab8 <UART_SetConfig+0x2cc>)
 8008926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800892a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800892e:	2b30      	cmp	r3, #48	; 0x30
 8008930:	d013      	beq.n	800895a <UART_SetConfig+0x16e>
 8008932:	2b30      	cmp	r3, #48	; 0x30
 8008934:	d814      	bhi.n	8008960 <UART_SetConfig+0x174>
 8008936:	2b20      	cmp	r3, #32
 8008938:	d009      	beq.n	800894e <UART_SetConfig+0x162>
 800893a:	2b20      	cmp	r3, #32
 800893c:	d810      	bhi.n	8008960 <UART_SetConfig+0x174>
 800893e:	2b00      	cmp	r3, #0
 8008940:	d002      	beq.n	8008948 <UART_SetConfig+0x15c>
 8008942:	2b10      	cmp	r3, #16
 8008944:	d006      	beq.n	8008954 <UART_SetConfig+0x168>
 8008946:	e00b      	b.n	8008960 <UART_SetConfig+0x174>
 8008948:	2300      	movs	r3, #0
 800894a:	77fb      	strb	r3, [r7, #31]
 800894c:	e0f2      	b.n	8008b34 <UART_SetConfig+0x348>
 800894e:	2302      	movs	r3, #2
 8008950:	77fb      	strb	r3, [r7, #31]
 8008952:	e0ef      	b.n	8008b34 <UART_SetConfig+0x348>
 8008954:	2304      	movs	r3, #4
 8008956:	77fb      	strb	r3, [r7, #31]
 8008958:	e0ec      	b.n	8008b34 <UART_SetConfig+0x348>
 800895a:	2308      	movs	r3, #8
 800895c:	77fb      	strb	r3, [r7, #31]
 800895e:	e0e9      	b.n	8008b34 <UART_SetConfig+0x348>
 8008960:	2310      	movs	r3, #16
 8008962:	77fb      	strb	r3, [r7, #31]
 8008964:	e0e6      	b.n	8008b34 <UART_SetConfig+0x348>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a56      	ldr	r2, [pc, #344]	; (8008ac4 <UART_SetConfig+0x2d8>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d120      	bne.n	80089b2 <UART_SetConfig+0x1c6>
 8008970:	4b51      	ldr	r3, [pc, #324]	; (8008ab8 <UART_SetConfig+0x2cc>)
 8008972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008976:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800897a:	2bc0      	cmp	r3, #192	; 0xc0
 800897c:	d013      	beq.n	80089a6 <UART_SetConfig+0x1ba>
 800897e:	2bc0      	cmp	r3, #192	; 0xc0
 8008980:	d814      	bhi.n	80089ac <UART_SetConfig+0x1c0>
 8008982:	2b80      	cmp	r3, #128	; 0x80
 8008984:	d009      	beq.n	800899a <UART_SetConfig+0x1ae>
 8008986:	2b80      	cmp	r3, #128	; 0x80
 8008988:	d810      	bhi.n	80089ac <UART_SetConfig+0x1c0>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <UART_SetConfig+0x1a8>
 800898e:	2b40      	cmp	r3, #64	; 0x40
 8008990:	d006      	beq.n	80089a0 <UART_SetConfig+0x1b4>
 8008992:	e00b      	b.n	80089ac <UART_SetConfig+0x1c0>
 8008994:	2300      	movs	r3, #0
 8008996:	77fb      	strb	r3, [r7, #31]
 8008998:	e0cc      	b.n	8008b34 <UART_SetConfig+0x348>
 800899a:	2302      	movs	r3, #2
 800899c:	77fb      	strb	r3, [r7, #31]
 800899e:	e0c9      	b.n	8008b34 <UART_SetConfig+0x348>
 80089a0:	2304      	movs	r3, #4
 80089a2:	77fb      	strb	r3, [r7, #31]
 80089a4:	e0c6      	b.n	8008b34 <UART_SetConfig+0x348>
 80089a6:	2308      	movs	r3, #8
 80089a8:	77fb      	strb	r3, [r7, #31]
 80089aa:	e0c3      	b.n	8008b34 <UART_SetConfig+0x348>
 80089ac:	2310      	movs	r3, #16
 80089ae:	77fb      	strb	r3, [r7, #31]
 80089b0:	e0c0      	b.n	8008b34 <UART_SetConfig+0x348>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a44      	ldr	r2, [pc, #272]	; (8008ac8 <UART_SetConfig+0x2dc>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d125      	bne.n	8008a08 <UART_SetConfig+0x21c>
 80089bc:	4b3e      	ldr	r3, [pc, #248]	; (8008ab8 <UART_SetConfig+0x2cc>)
 80089be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089ca:	d017      	beq.n	80089fc <UART_SetConfig+0x210>
 80089cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089d0:	d817      	bhi.n	8008a02 <UART_SetConfig+0x216>
 80089d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089d6:	d00b      	beq.n	80089f0 <UART_SetConfig+0x204>
 80089d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089dc:	d811      	bhi.n	8008a02 <UART_SetConfig+0x216>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <UART_SetConfig+0x1fe>
 80089e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089e6:	d006      	beq.n	80089f6 <UART_SetConfig+0x20a>
 80089e8:	e00b      	b.n	8008a02 <UART_SetConfig+0x216>
 80089ea:	2300      	movs	r3, #0
 80089ec:	77fb      	strb	r3, [r7, #31]
 80089ee:	e0a1      	b.n	8008b34 <UART_SetConfig+0x348>
 80089f0:	2302      	movs	r3, #2
 80089f2:	77fb      	strb	r3, [r7, #31]
 80089f4:	e09e      	b.n	8008b34 <UART_SetConfig+0x348>
 80089f6:	2304      	movs	r3, #4
 80089f8:	77fb      	strb	r3, [r7, #31]
 80089fa:	e09b      	b.n	8008b34 <UART_SetConfig+0x348>
 80089fc:	2308      	movs	r3, #8
 80089fe:	77fb      	strb	r3, [r7, #31]
 8008a00:	e098      	b.n	8008b34 <UART_SetConfig+0x348>
 8008a02:	2310      	movs	r3, #16
 8008a04:	77fb      	strb	r3, [r7, #31]
 8008a06:	e095      	b.n	8008b34 <UART_SetConfig+0x348>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a2f      	ldr	r2, [pc, #188]	; (8008acc <UART_SetConfig+0x2e0>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d125      	bne.n	8008a5e <UART_SetConfig+0x272>
 8008a12:	4b29      	ldr	r3, [pc, #164]	; (8008ab8 <UART_SetConfig+0x2cc>)
 8008a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a20:	d017      	beq.n	8008a52 <UART_SetConfig+0x266>
 8008a22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a26:	d817      	bhi.n	8008a58 <UART_SetConfig+0x26c>
 8008a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a2c:	d00b      	beq.n	8008a46 <UART_SetConfig+0x25a>
 8008a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a32:	d811      	bhi.n	8008a58 <UART_SetConfig+0x26c>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d003      	beq.n	8008a40 <UART_SetConfig+0x254>
 8008a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a3c:	d006      	beq.n	8008a4c <UART_SetConfig+0x260>
 8008a3e:	e00b      	b.n	8008a58 <UART_SetConfig+0x26c>
 8008a40:	2301      	movs	r3, #1
 8008a42:	77fb      	strb	r3, [r7, #31]
 8008a44:	e076      	b.n	8008b34 <UART_SetConfig+0x348>
 8008a46:	2302      	movs	r3, #2
 8008a48:	77fb      	strb	r3, [r7, #31]
 8008a4a:	e073      	b.n	8008b34 <UART_SetConfig+0x348>
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	77fb      	strb	r3, [r7, #31]
 8008a50:	e070      	b.n	8008b34 <UART_SetConfig+0x348>
 8008a52:	2308      	movs	r3, #8
 8008a54:	77fb      	strb	r3, [r7, #31]
 8008a56:	e06d      	b.n	8008b34 <UART_SetConfig+0x348>
 8008a58:	2310      	movs	r3, #16
 8008a5a:	77fb      	strb	r3, [r7, #31]
 8008a5c:	e06a      	b.n	8008b34 <UART_SetConfig+0x348>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a1b      	ldr	r2, [pc, #108]	; (8008ad0 <UART_SetConfig+0x2e4>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d138      	bne.n	8008ada <UART_SetConfig+0x2ee>
 8008a68:	4b13      	ldr	r3, [pc, #76]	; (8008ab8 <UART_SetConfig+0x2cc>)
 8008a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008a72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a76:	d017      	beq.n	8008aa8 <UART_SetConfig+0x2bc>
 8008a78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a7c:	d82a      	bhi.n	8008ad4 <UART_SetConfig+0x2e8>
 8008a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a82:	d00b      	beq.n	8008a9c <UART_SetConfig+0x2b0>
 8008a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a88:	d824      	bhi.n	8008ad4 <UART_SetConfig+0x2e8>
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <UART_SetConfig+0x2aa>
 8008a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a92:	d006      	beq.n	8008aa2 <UART_SetConfig+0x2b6>
 8008a94:	e01e      	b.n	8008ad4 <UART_SetConfig+0x2e8>
 8008a96:	2300      	movs	r3, #0
 8008a98:	77fb      	strb	r3, [r7, #31]
 8008a9a:	e04b      	b.n	8008b34 <UART_SetConfig+0x348>
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	77fb      	strb	r3, [r7, #31]
 8008aa0:	e048      	b.n	8008b34 <UART_SetConfig+0x348>
 8008aa2:	2304      	movs	r3, #4
 8008aa4:	77fb      	strb	r3, [r7, #31]
 8008aa6:	e045      	b.n	8008b34 <UART_SetConfig+0x348>
 8008aa8:	2308      	movs	r3, #8
 8008aaa:	77fb      	strb	r3, [r7, #31]
 8008aac:	e042      	b.n	8008b34 <UART_SetConfig+0x348>
 8008aae:	bf00      	nop
 8008ab0:	efff69f3 	.word	0xefff69f3
 8008ab4:	40011000 	.word	0x40011000
 8008ab8:	40023800 	.word	0x40023800
 8008abc:	40004400 	.word	0x40004400
 8008ac0:	40004800 	.word	0x40004800
 8008ac4:	40004c00 	.word	0x40004c00
 8008ac8:	40005000 	.word	0x40005000
 8008acc:	40011400 	.word	0x40011400
 8008ad0:	40007800 	.word	0x40007800
 8008ad4:	2310      	movs	r3, #16
 8008ad6:	77fb      	strb	r3, [r7, #31]
 8008ad8:	e02c      	b.n	8008b34 <UART_SetConfig+0x348>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a72      	ldr	r2, [pc, #456]	; (8008ca8 <UART_SetConfig+0x4bc>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d125      	bne.n	8008b30 <UART_SetConfig+0x344>
 8008ae4:	4b71      	ldr	r3, [pc, #452]	; (8008cac <UART_SetConfig+0x4c0>)
 8008ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008aee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008af2:	d017      	beq.n	8008b24 <UART_SetConfig+0x338>
 8008af4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008af8:	d817      	bhi.n	8008b2a <UART_SetConfig+0x33e>
 8008afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008afe:	d00b      	beq.n	8008b18 <UART_SetConfig+0x32c>
 8008b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b04:	d811      	bhi.n	8008b2a <UART_SetConfig+0x33e>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <UART_SetConfig+0x326>
 8008b0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b0e:	d006      	beq.n	8008b1e <UART_SetConfig+0x332>
 8008b10:	e00b      	b.n	8008b2a <UART_SetConfig+0x33e>
 8008b12:	2300      	movs	r3, #0
 8008b14:	77fb      	strb	r3, [r7, #31]
 8008b16:	e00d      	b.n	8008b34 <UART_SetConfig+0x348>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	77fb      	strb	r3, [r7, #31]
 8008b1c:	e00a      	b.n	8008b34 <UART_SetConfig+0x348>
 8008b1e:	2304      	movs	r3, #4
 8008b20:	77fb      	strb	r3, [r7, #31]
 8008b22:	e007      	b.n	8008b34 <UART_SetConfig+0x348>
 8008b24:	2308      	movs	r3, #8
 8008b26:	77fb      	strb	r3, [r7, #31]
 8008b28:	e004      	b.n	8008b34 <UART_SetConfig+0x348>
 8008b2a:	2310      	movs	r3, #16
 8008b2c:	77fb      	strb	r3, [r7, #31]
 8008b2e:	e001      	b.n	8008b34 <UART_SetConfig+0x348>
 8008b30:	2310      	movs	r3, #16
 8008b32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b3c:	d15b      	bne.n	8008bf6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008b3e:	7ffb      	ldrb	r3, [r7, #31]
 8008b40:	2b08      	cmp	r3, #8
 8008b42:	d828      	bhi.n	8008b96 <UART_SetConfig+0x3aa>
 8008b44:	a201      	add	r2, pc, #4	; (adr r2, 8008b4c <UART_SetConfig+0x360>)
 8008b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4a:	bf00      	nop
 8008b4c:	08008b71 	.word	0x08008b71
 8008b50:	08008b79 	.word	0x08008b79
 8008b54:	08008b81 	.word	0x08008b81
 8008b58:	08008b97 	.word	0x08008b97
 8008b5c:	08008b87 	.word	0x08008b87
 8008b60:	08008b97 	.word	0x08008b97
 8008b64:	08008b97 	.word	0x08008b97
 8008b68:	08008b97 	.word	0x08008b97
 8008b6c:	08008b8f 	.word	0x08008b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b70:	f7fe faf6 	bl	8007160 <HAL_RCC_GetPCLK1Freq>
 8008b74:	61b8      	str	r0, [r7, #24]
        break;
 8008b76:	e013      	b.n	8008ba0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b78:	f7fe fb06 	bl	8007188 <HAL_RCC_GetPCLK2Freq>
 8008b7c:	61b8      	str	r0, [r7, #24]
        break;
 8008b7e:	e00f      	b.n	8008ba0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b80:	4b4b      	ldr	r3, [pc, #300]	; (8008cb0 <UART_SetConfig+0x4c4>)
 8008b82:	61bb      	str	r3, [r7, #24]
        break;
 8008b84:	e00c      	b.n	8008ba0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b86:	f7fe f9d9 	bl	8006f3c <HAL_RCC_GetSysClockFreq>
 8008b8a:	61b8      	str	r0, [r7, #24]
        break;
 8008b8c:	e008      	b.n	8008ba0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b92:	61bb      	str	r3, [r7, #24]
        break;
 8008b94:	e004      	b.n	8008ba0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	77bb      	strb	r3, [r7, #30]
        break;
 8008b9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d074      	beq.n	8008c90 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	005a      	lsls	r2, r3, #1
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	085b      	lsrs	r3, r3, #1
 8008bb0:	441a      	add	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	2b0f      	cmp	r3, #15
 8008bc0:	d916      	bls.n	8008bf0 <UART_SetConfig+0x404>
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc8:	d212      	bcs.n	8008bf0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	f023 030f 	bic.w	r3, r3, #15
 8008bd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	085b      	lsrs	r3, r3, #1
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	f003 0307 	and.w	r3, r3, #7
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	89fb      	ldrh	r3, [r7, #14]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	89fa      	ldrh	r2, [r7, #14]
 8008bec:	60da      	str	r2, [r3, #12]
 8008bee:	e04f      	b.n	8008c90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	77bb      	strb	r3, [r7, #30]
 8008bf4:	e04c      	b.n	8008c90 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bf6:	7ffb      	ldrb	r3, [r7, #31]
 8008bf8:	2b08      	cmp	r3, #8
 8008bfa:	d828      	bhi.n	8008c4e <UART_SetConfig+0x462>
 8008bfc:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <UART_SetConfig+0x418>)
 8008bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c02:	bf00      	nop
 8008c04:	08008c29 	.word	0x08008c29
 8008c08:	08008c31 	.word	0x08008c31
 8008c0c:	08008c39 	.word	0x08008c39
 8008c10:	08008c4f 	.word	0x08008c4f
 8008c14:	08008c3f 	.word	0x08008c3f
 8008c18:	08008c4f 	.word	0x08008c4f
 8008c1c:	08008c4f 	.word	0x08008c4f
 8008c20:	08008c4f 	.word	0x08008c4f
 8008c24:	08008c47 	.word	0x08008c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c28:	f7fe fa9a 	bl	8007160 <HAL_RCC_GetPCLK1Freq>
 8008c2c:	61b8      	str	r0, [r7, #24]
        break;
 8008c2e:	e013      	b.n	8008c58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c30:	f7fe faaa 	bl	8007188 <HAL_RCC_GetPCLK2Freq>
 8008c34:	61b8      	str	r0, [r7, #24]
        break;
 8008c36:	e00f      	b.n	8008c58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c38:	4b1d      	ldr	r3, [pc, #116]	; (8008cb0 <UART_SetConfig+0x4c4>)
 8008c3a:	61bb      	str	r3, [r7, #24]
        break;
 8008c3c:	e00c      	b.n	8008c58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c3e:	f7fe f97d 	bl	8006f3c <HAL_RCC_GetSysClockFreq>
 8008c42:	61b8      	str	r0, [r7, #24]
        break;
 8008c44:	e008      	b.n	8008c58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c4a:	61bb      	str	r3, [r7, #24]
        break;
 8008c4c:	e004      	b.n	8008c58 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	77bb      	strb	r3, [r7, #30]
        break;
 8008c56:	bf00      	nop
    }

    if (pclk != 0U)
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d018      	beq.n	8008c90 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	085a      	lsrs	r2, r3, #1
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	441a      	add	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2b0f      	cmp	r3, #15
 8008c76:	d909      	bls.n	8008c8c <UART_SetConfig+0x4a0>
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c7e:	d205      	bcs.n	8008c8c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60da      	str	r2, [r3, #12]
 8008c8a:	e001      	b.n	8008c90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008c9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3720      	adds	r7, #32
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	40007c00 	.word	0x40007c00
 8008cac:	40023800 	.word	0x40023800
 8008cb0:	00f42400 	.word	0x00f42400

08008cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	f003 0304 	and.w	r3, r3, #4
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00a      	beq.n	8008d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	f003 0308 	and.w	r3, r3, #8
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	f003 0310 	and.w	r3, r3, #16
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00a      	beq.n	8008d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01a      	beq.n	8008dca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008db2:	d10a      	bne.n	8008dca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	605a      	str	r2, [r3, #4]
  }
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af02      	add	r7, sp, #8
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e08:	f7fa fa00 	bl	800320c <HAL_GetTick>
 8008e0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0308 	and.w	r3, r3, #8
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d10e      	bne.n	8008e3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f831 	bl	8008e92 <UART_WaitOnFlagUntilTimeout>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e027      	b.n	8008e8a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d10e      	bne.n	8008e66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f81b 	bl	8008e92 <UART_WaitOnFlagUntilTimeout>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e011      	b.n	8008e8a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b09c      	sub	sp, #112	; 0x70
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	603b      	str	r3, [r7, #0]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ea2:	e0a7      	b.n	8008ff4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eaa:	f000 80a3 	beq.w	8008ff4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eae:	f7fa f9ad 	bl	800320c <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d302      	bcc.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d13f      	bne.n	8008f44 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ed8:	667b      	str	r3, [r7, #100]	; 0x64
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ee4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ee8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008eea:	e841 2300 	strex	r3, r2, [r1]
 8008eee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1e6      	bne.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3308      	adds	r3, #8
 8008efc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f00:	e853 3f00 	ldrex	r3, [r3]
 8008f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f08:	f023 0301 	bic.w	r3, r3, #1
 8008f0c:	663b      	str	r3, [r7, #96]	; 0x60
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3308      	adds	r3, #8
 8008f14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f16:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f1e:	e841 2300 	strex	r3, r2, [r1]
 8008f22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1e5      	bne.n	8008ef6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2220      	movs	r2, #32
 8008f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e068      	b.n	8009016 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 0304 	and.w	r3, r3, #4
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d050      	beq.n	8008ff4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	69db      	ldr	r3, [r3, #28]
 8008f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f60:	d148      	bne.n	8008ff4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f6a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f74:	e853 3f00 	ldrex	r3, [r3]
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	461a      	mov	r2, r3
 8008f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f8c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f92:	e841 2300 	strex	r3, r2, [r1]
 8008f96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1e6      	bne.n	8008f6c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	e853 3f00 	ldrex	r3, [r3]
 8008fac:	613b      	str	r3, [r7, #16]
   return(result);
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f023 0301 	bic.w	r3, r3, #1
 8008fb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3308      	adds	r3, #8
 8008fbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fbe:	623a      	str	r2, [r7, #32]
 8008fc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc2:	69f9      	ldr	r1, [r7, #28]
 8008fc4:	6a3a      	ldr	r2, [r7, #32]
 8008fc6:	e841 2300 	strex	r3, r2, [r1]
 8008fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1e5      	bne.n	8008f9e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e010      	b.n	8009016 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	69da      	ldr	r2, [r3, #28]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	429a      	cmp	r2, r3
 8009002:	bf0c      	ite	eq
 8009004:	2301      	moveq	r3, #1
 8009006:	2300      	movne	r3, #0
 8009008:	b2db      	uxtb	r3, r3
 800900a:	461a      	mov	r2, r3
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	429a      	cmp	r2, r3
 8009010:	f43f af48 	beq.w	8008ea4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3770      	adds	r7, #112	; 0x70
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800901e:	b480      	push	{r7}
 8009020:	b095      	sub	sp, #84	; 0x54
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902e:	e853 3f00 	ldrex	r3, [r3]
 8009032:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009036:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800903a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	461a      	mov	r2, r3
 8009042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009044:	643b      	str	r3, [r7, #64]	; 0x40
 8009046:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800904a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800904c:	e841 2300 	strex	r3, r2, [r1]
 8009050:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e6      	bne.n	8009026 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3308      	adds	r3, #8
 800905e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	e853 3f00 	ldrex	r3, [r3]
 8009066:	61fb      	str	r3, [r7, #28]
   return(result);
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	f023 0301 	bic.w	r3, r3, #1
 800906e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3308      	adds	r3, #8
 8009076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009078:	62fa      	str	r2, [r7, #44]	; 0x2c
 800907a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800907e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e5      	bne.n	8009058 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009090:	2b01      	cmp	r3, #1
 8009092:	d118      	bne.n	80090c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f023 0310 	bic.w	r3, r3, #16
 80090a8:	647b      	str	r3, [r7, #68]	; 0x44
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090b2:	61bb      	str	r3, [r7, #24]
 80090b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	6979      	ldr	r1, [r7, #20]
 80090b8:	69ba      	ldr	r2, [r7, #24]
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	613b      	str	r3, [r7, #16]
   return(result);
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e6      	bne.n	8009094 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2220      	movs	r2, #32
 80090ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80090da:	bf00      	nop
 80090dc:	3754      	adds	r7, #84	; 0x54
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f7ff fb51 	bl	80087ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800910a:	bf00      	nop
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b088      	sub	sp, #32
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	e853 3f00 	ldrex	r3, [r3]
 8009126:	60bb      	str	r3, [r7, #8]
   return(result);
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800912e:	61fb      	str	r3, [r7, #28]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	461a      	mov	r2, r3
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	61bb      	str	r3, [r7, #24]
 800913a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913c:	6979      	ldr	r1, [r7, #20]
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	e841 2300 	strex	r3, r2, [r1]
 8009144:	613b      	str	r3, [r7, #16]
   return(result);
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e6      	bne.n	800911a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2220      	movs	r2, #32
 8009150:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7ff fb1d 	bl	8008798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800915e:	bf00      	nop
 8009160:	3720      	adds	r7, #32
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
	...

08009168 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009168:	b084      	sub	sp, #16
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	f107 001c 	add.w	r0, r7, #28
 8009176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	2b01      	cmp	r3, #1
 800917e:	d120      	bne.n	80091c2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009184:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	4b20      	ldr	r3, [pc, #128]	; (8009214 <USB_CoreInit+0xac>)
 8009192:	4013      	ands	r3, r2
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80091a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d105      	bne.n	80091b6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 fbee 	bl	800a998 <USB_CoreReset>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]
 80091c0:	e010      	b.n	80091e4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f001 fbe2 	bl	800a998 <USB_CoreReset>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d10b      	bne.n	8009202 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	f043 0206 	orr.w	r2, r3, #6
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	f043 0220 	orr.w	r2, r3, #32
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009202:	7bfb      	ldrb	r3, [r7, #15]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800920e:	b004      	add	sp, #16
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	ffbdffbf 	.word	0xffbdffbf

08009218 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	4613      	mov	r3, r2
 8009224:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009226:	79fb      	ldrb	r3, [r7, #7]
 8009228:	2b02      	cmp	r3, #2
 800922a:	d165      	bne.n	80092f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	4a41      	ldr	r2, [pc, #260]	; (8009334 <USB_SetTurnaroundTime+0x11c>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d906      	bls.n	8009242 <USB_SetTurnaroundTime+0x2a>
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	4a40      	ldr	r2, [pc, #256]	; (8009338 <USB_SetTurnaroundTime+0x120>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d202      	bcs.n	8009242 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800923c:	230f      	movs	r3, #15
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	e062      	b.n	8009308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	4a3c      	ldr	r2, [pc, #240]	; (8009338 <USB_SetTurnaroundTime+0x120>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d306      	bcc.n	8009258 <USB_SetTurnaroundTime+0x40>
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	4a3b      	ldr	r2, [pc, #236]	; (800933c <USB_SetTurnaroundTime+0x124>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d202      	bcs.n	8009258 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009252:	230e      	movs	r3, #14
 8009254:	617b      	str	r3, [r7, #20]
 8009256:	e057      	b.n	8009308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	4a38      	ldr	r2, [pc, #224]	; (800933c <USB_SetTurnaroundTime+0x124>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d306      	bcc.n	800926e <USB_SetTurnaroundTime+0x56>
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	4a37      	ldr	r2, [pc, #220]	; (8009340 <USB_SetTurnaroundTime+0x128>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d202      	bcs.n	800926e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009268:	230d      	movs	r3, #13
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	e04c      	b.n	8009308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	4a33      	ldr	r2, [pc, #204]	; (8009340 <USB_SetTurnaroundTime+0x128>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d306      	bcc.n	8009284 <USB_SetTurnaroundTime+0x6c>
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	4a32      	ldr	r2, [pc, #200]	; (8009344 <USB_SetTurnaroundTime+0x12c>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d802      	bhi.n	8009284 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800927e:	230c      	movs	r3, #12
 8009280:	617b      	str	r3, [r7, #20]
 8009282:	e041      	b.n	8009308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	4a2f      	ldr	r2, [pc, #188]	; (8009344 <USB_SetTurnaroundTime+0x12c>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d906      	bls.n	800929a <USB_SetTurnaroundTime+0x82>
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	4a2e      	ldr	r2, [pc, #184]	; (8009348 <USB_SetTurnaroundTime+0x130>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d802      	bhi.n	800929a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009294:	230b      	movs	r3, #11
 8009296:	617b      	str	r3, [r7, #20]
 8009298:	e036      	b.n	8009308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	4a2a      	ldr	r2, [pc, #168]	; (8009348 <USB_SetTurnaroundTime+0x130>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d906      	bls.n	80092b0 <USB_SetTurnaroundTime+0x98>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	4a29      	ldr	r2, [pc, #164]	; (800934c <USB_SetTurnaroundTime+0x134>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d802      	bhi.n	80092b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80092aa:	230a      	movs	r3, #10
 80092ac:	617b      	str	r3, [r7, #20]
 80092ae:	e02b      	b.n	8009308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	4a26      	ldr	r2, [pc, #152]	; (800934c <USB_SetTurnaroundTime+0x134>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d906      	bls.n	80092c6 <USB_SetTurnaroundTime+0xae>
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	4a25      	ldr	r2, [pc, #148]	; (8009350 <USB_SetTurnaroundTime+0x138>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d202      	bcs.n	80092c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80092c0:	2309      	movs	r3, #9
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	e020      	b.n	8009308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	4a21      	ldr	r2, [pc, #132]	; (8009350 <USB_SetTurnaroundTime+0x138>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d306      	bcc.n	80092dc <USB_SetTurnaroundTime+0xc4>
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	4a20      	ldr	r2, [pc, #128]	; (8009354 <USB_SetTurnaroundTime+0x13c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d802      	bhi.n	80092dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80092d6:	2308      	movs	r3, #8
 80092d8:	617b      	str	r3, [r7, #20]
 80092da:	e015      	b.n	8009308 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	4a1d      	ldr	r2, [pc, #116]	; (8009354 <USB_SetTurnaroundTime+0x13c>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d906      	bls.n	80092f2 <USB_SetTurnaroundTime+0xda>
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4a1c      	ldr	r2, [pc, #112]	; (8009358 <USB_SetTurnaroundTime+0x140>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d202      	bcs.n	80092f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80092ec:	2307      	movs	r3, #7
 80092ee:	617b      	str	r3, [r7, #20]
 80092f0:	e00a      	b.n	8009308 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80092f2:	2306      	movs	r3, #6
 80092f4:	617b      	str	r3, [r7, #20]
 80092f6:	e007      	b.n	8009308 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d102      	bne.n	8009304 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80092fe:	2309      	movs	r3, #9
 8009300:	617b      	str	r3, [r7, #20]
 8009302:	e001      	b.n	8009308 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009304:	2309      	movs	r3, #9
 8009306:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	68da      	ldr	r2, [r3, #12]
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	029b      	lsls	r3, r3, #10
 800931c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009320:	431a      	orrs	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	371c      	adds	r7, #28
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	00d8acbf 	.word	0x00d8acbf
 8009338:	00e4e1c0 	.word	0x00e4e1c0
 800933c:	00f42400 	.word	0x00f42400
 8009340:	01067380 	.word	0x01067380
 8009344:	011a499f 	.word	0x011a499f
 8009348:	01312cff 	.word	0x01312cff
 800934c:	014ca43f 	.word	0x014ca43f
 8009350:	016e3600 	.word	0x016e3600
 8009354:	01a6ab1f 	.word	0x01a6ab1f
 8009358:	01e84800 	.word	0x01e84800

0800935c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f043 0201 	orr.w	r2, r3, #1
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f023 0201 	bic.w	r2, r3, #1
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	460b      	mov	r3, r1
 80093aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093bc:	78fb      	ldrb	r3, [r7, #3]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d115      	bne.n	80093ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80093ce:	2001      	movs	r0, #1
 80093d0:	f7f9 ff28 	bl	8003224 <HAL_Delay>
      ms++;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	3301      	adds	r3, #1
 80093d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f001 fa4b 	bl	800a876 <USB_GetMode>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d01e      	beq.n	8009424 <USB_SetCurrentMode+0x84>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b31      	cmp	r3, #49	; 0x31
 80093ea:	d9f0      	bls.n	80093ce <USB_SetCurrentMode+0x2e>
 80093ec:	e01a      	b.n	8009424 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80093ee:	78fb      	ldrb	r3, [r7, #3]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d115      	bne.n	8009420 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009400:	2001      	movs	r0, #1
 8009402:	f7f9 ff0f 	bl	8003224 <HAL_Delay>
      ms++;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3301      	adds	r3, #1
 800940a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 fa32 	bl	800a876 <USB_GetMode>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d005      	beq.n	8009424 <USB_SetCurrentMode+0x84>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b31      	cmp	r3, #49	; 0x31
 800941c:	d9f0      	bls.n	8009400 <USB_SetCurrentMode+0x60>
 800941e:	e001      	b.n	8009424 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e005      	b.n	8009430 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b32      	cmp	r3, #50	; 0x32
 8009428:	d101      	bne.n	800942e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e000      	b.n	8009430 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009438:	b084      	sub	sp, #16
 800943a:	b580      	push	{r7, lr}
 800943c:	b086      	sub	sp, #24
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009452:	2300      	movs	r3, #0
 8009454:	613b      	str	r3, [r7, #16]
 8009456:	e009      	b.n	800946c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	3340      	adds	r3, #64	; 0x40
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	2200      	movs	r2, #0
 8009464:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	3301      	adds	r3, #1
 800946a:	613b      	str	r3, [r7, #16]
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	2b0e      	cmp	r3, #14
 8009470:	d9f2      	bls.n	8009458 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009474:	2b00      	cmp	r3, #0
 8009476:	d11c      	bne.n	80094b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009486:	f043 0302 	orr.w	r3, r3, #2
 800948a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009490:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	e005      	b.n	80094be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094c4:	461a      	mov	r2, r3
 80094c6:	2300      	movs	r3, #0
 80094c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d0:	4619      	mov	r1, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d8:	461a      	mov	r2, r3
 80094da:	680b      	ldr	r3, [r1, #0]
 80094dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d10c      	bne.n	80094fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d104      	bne.n	80094f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094ea:	2100      	movs	r1, #0
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f965 	bl	80097bc <USB_SetDevSpeed>
 80094f2:	e008      	b.n	8009506 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80094f4:	2101      	movs	r1, #1
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f960 	bl	80097bc <USB_SetDevSpeed>
 80094fc:	e003      	b.n	8009506 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80094fe:	2103      	movs	r1, #3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f95b 	bl	80097bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009506:	2110      	movs	r1, #16
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f8f3 	bl	80096f4 <USB_FlushTxFifo>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f91f 	bl	800975c <USB_FlushRxFifo>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952e:	461a      	mov	r2, r3
 8009530:	2300      	movs	r3, #0
 8009532:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800953a:	461a      	mov	r2, r3
 800953c:	2300      	movs	r3, #0
 800953e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009546:	461a      	mov	r2, r3
 8009548:	2300      	movs	r3, #0
 800954a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800954c:	2300      	movs	r3, #0
 800954e:	613b      	str	r3, [r7, #16]
 8009550:	e043      	b.n	80095da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	4413      	add	r3, r2
 800955a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009568:	d118      	bne.n	800959c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10a      	bne.n	8009586 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957c:	461a      	mov	r2, r3
 800957e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009582:	6013      	str	r3, [r2, #0]
 8009584:	e013      	b.n	80095ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	015a      	lsls	r2, r3, #5
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	4413      	add	r3, r2
 800958e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009592:	461a      	mov	r2, r3
 8009594:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009598:	6013      	str	r3, [r2, #0]
 800959a:	e008      	b.n	80095ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a8:	461a      	mov	r2, r3
 80095aa:	2300      	movs	r3, #0
 80095ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ba:	461a      	mov	r2, r3
 80095bc:	2300      	movs	r3, #0
 80095be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095cc:	461a      	mov	r2, r3
 80095ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	3301      	adds	r3, #1
 80095d8:	613b      	str	r3, [r7, #16]
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d3b7      	bcc.n	8009552 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095e2:	2300      	movs	r3, #0
 80095e4:	613b      	str	r3, [r7, #16]
 80095e6:	e043      	b.n	8009670 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095fe:	d118      	bne.n	8009632 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10a      	bne.n	800961c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	015a      	lsls	r2, r3, #5
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	4413      	add	r3, r2
 800960e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009612:	461a      	mov	r2, r3
 8009614:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009618:	6013      	str	r3, [r2, #0]
 800961a:	e013      	b.n	8009644 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009628:	461a      	mov	r2, r3
 800962a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800962e:	6013      	str	r3, [r2, #0]
 8009630:	e008      	b.n	8009644 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4413      	add	r3, r2
 800963a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800963e:	461a      	mov	r2, r3
 8009640:	2300      	movs	r3, #0
 8009642:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	015a      	lsls	r2, r3, #5
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4413      	add	r3, r2
 800964c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009650:	461a      	mov	r2, r3
 8009652:	2300      	movs	r3, #0
 8009654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009662:	461a      	mov	r2, r3
 8009664:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009668:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	3301      	adds	r3, #1
 800966e:	613b      	str	r3, [r7, #16]
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	429a      	cmp	r2, r3
 8009676:	d3b7      	bcc.n	80095e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009686:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800968a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009698:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800969a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969c:	2b00      	cmp	r3, #0
 800969e:	d105      	bne.n	80096ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	f043 0210 	orr.w	r2, r3, #16
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	699a      	ldr	r2, [r3, #24]
 80096b0:	4b0e      	ldr	r3, [pc, #56]	; (80096ec <USB_DevInit+0x2b4>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80096b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d005      	beq.n	80096ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	f043 0208 	orr.w	r2, r3, #8
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d105      	bne.n	80096dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	699a      	ldr	r2, [r3, #24]
 80096d4:	4b06      	ldr	r3, [pc, #24]	; (80096f0 <USB_DevInit+0x2b8>)
 80096d6:	4313      	orrs	r3, r2
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096e8:	b004      	add	sp, #16
 80096ea:	4770      	bx	lr
 80096ec:	803c3800 	.word	0x803c3800
 80096f0:	40000004 	.word	0x40000004

080096f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096fe:	2300      	movs	r3, #0
 8009700:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3301      	adds	r3, #1
 8009706:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4a13      	ldr	r2, [pc, #76]	; (8009758 <USB_FlushTxFifo+0x64>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d901      	bls.n	8009714 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	e01b      	b.n	800974c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	2b00      	cmp	r3, #0
 800971a:	daf2      	bge.n	8009702 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800971c:	2300      	movs	r3, #0
 800971e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	019b      	lsls	r3, r3, #6
 8009724:	f043 0220 	orr.w	r2, r3, #32
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	3301      	adds	r3, #1
 8009730:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	4a08      	ldr	r2, [pc, #32]	; (8009758 <USB_FlushTxFifo+0x64>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d901      	bls.n	800973e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e006      	b.n	800974c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	f003 0320 	and.w	r3, r3, #32
 8009746:	2b20      	cmp	r3, #32
 8009748:	d0f0      	beq.n	800972c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	00030d40 	.word	0x00030d40

0800975c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009764:	2300      	movs	r3, #0
 8009766:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3301      	adds	r3, #1
 800976c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	4a11      	ldr	r2, [pc, #68]	; (80097b8 <USB_FlushRxFifo+0x5c>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d901      	bls.n	800977a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	e018      	b.n	80097ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	daf2      	bge.n	8009768 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2210      	movs	r2, #16
 800978a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3301      	adds	r3, #1
 8009790:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4a08      	ldr	r2, [pc, #32]	; (80097b8 <USB_FlushRxFifo+0x5c>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d901      	bls.n	800979e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e006      	b.n	80097ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	f003 0310 	and.w	r3, r3, #16
 80097a6:	2b10      	cmp	r3, #16
 80097a8:	d0f0      	beq.n	800978c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	00030d40 	.word	0x00030d40

080097bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	78fb      	ldrb	r3, [r7, #3]
 80097d6:	68f9      	ldr	r1, [r7, #12]
 80097d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097dc:	4313      	orrs	r3, r2
 80097de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b087      	sub	sp, #28
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f003 0306 	and.w	r3, r3, #6
 8009806:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d102      	bne.n	8009814 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800980e:	2300      	movs	r3, #0
 8009810:	75fb      	strb	r3, [r7, #23]
 8009812:	e00a      	b.n	800982a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b02      	cmp	r3, #2
 8009818:	d002      	beq.n	8009820 <USB_GetDevSpeed+0x32>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b06      	cmp	r3, #6
 800981e:	d102      	bne.n	8009826 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009820:	2302      	movs	r3, #2
 8009822:	75fb      	strb	r3, [r7, #23]
 8009824:	e001      	b.n	800982a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009826:	230f      	movs	r3, #15
 8009828:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800982a:	7dfb      	ldrb	r3, [r7, #23]
}
 800982c:	4618      	mov	r0, r3
 800982e:	371c      	adds	r7, #28
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d139      	bne.n	80098c8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800985a:	69da      	ldr	r2, [r3, #28]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	f003 030f 	and.w	r3, r3, #15
 8009864:	2101      	movs	r1, #1
 8009866:	fa01 f303 	lsl.w	r3, r1, r3
 800986a:	b29b      	uxth	r3, r3
 800986c:	68f9      	ldr	r1, [r7, #12]
 800986e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009872:	4313      	orrs	r3, r2
 8009874:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4413      	add	r3, r2
 800987e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d153      	bne.n	8009934 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	791b      	ldrb	r3, [r3, #4]
 80098a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	059b      	lsls	r3, r3, #22
 80098ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80098b0:	431a      	orrs	r2, r3
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	0159      	lsls	r1, r3, #5
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	440b      	add	r3, r1
 80098ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098be:	4619      	mov	r1, r3
 80098c0:	4b20      	ldr	r3, [pc, #128]	; (8009944 <USB_ActivateEndpoint+0x10c>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	600b      	str	r3, [r1, #0]
 80098c6:	e035      	b.n	8009934 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ce:	69da      	ldr	r2, [r3, #28]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	f003 030f 	and.w	r3, r3, #15
 80098d8:	2101      	movs	r1, #1
 80098da:	fa01 f303 	lsl.w	r3, r1, r3
 80098de:	041b      	lsls	r3, r3, #16
 80098e0:	68f9      	ldr	r1, [r7, #12]
 80098e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098e6:	4313      	orrs	r3, r2
 80098e8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d119      	bne.n	8009934 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	791b      	ldrb	r3, [r3, #4]
 800991a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800991c:	430b      	orrs	r3, r1
 800991e:	431a      	orrs	r2, r3
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	0159      	lsls	r1, r3, #5
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	440b      	add	r3, r1
 8009928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800992c:	4619      	mov	r1, r3
 800992e:	4b05      	ldr	r3, [pc, #20]	; (8009944 <USB_ActivateEndpoint+0x10c>)
 8009930:	4313      	orrs	r3, r2
 8009932:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	10008000 	.word	0x10008000

08009948 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	785b      	ldrb	r3, [r3, #1]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d161      	bne.n	8009a28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	4413      	add	r3, r2
 800996c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009976:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800997a:	d11f      	bne.n	80099bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	0151      	lsls	r1, r2, #5
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	440a      	add	r2, r1
 8009992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009996:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800999a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	015a      	lsls	r2, r3, #5
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4413      	add	r3, r2
 80099a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	0151      	lsls	r1, r2, #5
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	440a      	add	r2, r1
 80099b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 030f 	and.w	r3, r3, #15
 80099cc:	2101      	movs	r1, #1
 80099ce:	fa01 f303 	lsl.w	r3, r1, r3
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	43db      	mvns	r3, r3
 80099d6:	68f9      	ldr	r1, [r7, #12]
 80099d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099dc:	4013      	ands	r3, r2
 80099de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e6:	69da      	ldr	r2, [r3, #28]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	f003 030f 	and.w	r3, r3, #15
 80099f0:	2101      	movs	r1, #1
 80099f2:	fa01 f303 	lsl.w	r3, r1, r3
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	43db      	mvns	r3, r3
 80099fa:	68f9      	ldr	r1, [r7, #12]
 80099fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a00:	4013      	ands	r3, r2
 8009a02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	015a      	lsls	r2, r3, #5
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	0159      	lsls	r1, r3, #5
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	440b      	add	r3, r1
 8009a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4b35      	ldr	r3, [pc, #212]	; (8009af8 <USB_DeactivateEndpoint+0x1b0>)
 8009a22:	4013      	ands	r3, r2
 8009a24:	600b      	str	r3, [r1, #0]
 8009a26:	e060      	b.n	8009aea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a3e:	d11f      	bne.n	8009a80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	f003 030f 	and.w	r3, r3, #15
 8009a90:	2101      	movs	r1, #1
 8009a92:	fa01 f303 	lsl.w	r3, r1, r3
 8009a96:	041b      	lsls	r3, r3, #16
 8009a98:	43db      	mvns	r3, r3
 8009a9a:	68f9      	ldr	r1, [r7, #12]
 8009a9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aaa:	69da      	ldr	r2, [r3, #28]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	f003 030f 	and.w	r3, r3, #15
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aba:	041b      	lsls	r3, r3, #16
 8009abc:	43db      	mvns	r3, r3
 8009abe:	68f9      	ldr	r1, [r7, #12]
 8009ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	0159      	lsls	r1, r3, #5
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	440b      	add	r3, r1
 8009ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	4b05      	ldr	r3, [pc, #20]	; (8009afc <USB_DeactivateEndpoint+0x1b4>)
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	ec337800 	.word	0xec337800
 8009afc:	eff37800 	.word	0xeff37800

08009b00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b08a      	sub	sp, #40	; 0x28
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	785b      	ldrb	r3, [r3, #1]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	f040 8163 	bne.w	8009de8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d132      	bne.n	8009b90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b36:	691a      	ldr	r2, [r3, #16]
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	0159      	lsls	r1, r3, #5
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	440b      	add	r3, r1
 8009b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b44:	4619      	mov	r1, r3
 8009b46:	4ba5      	ldr	r3, [pc, #660]	; (8009ddc <USB_EPStartXfer+0x2dc>)
 8009b48:	4013      	ands	r3, r2
 8009b4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	015a      	lsls	r2, r3, #5
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	4413      	add	r3, r2
 8009b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	69ba      	ldr	r2, [r7, #24]
 8009b5c:	0151      	lsls	r1, r2, #5
 8009b5e:	69fa      	ldr	r2, [r7, #28]
 8009b60:	440a      	add	r2, r1
 8009b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	015a      	lsls	r2, r3, #5
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b78:	691a      	ldr	r2, [r3, #16]
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	0159      	lsls	r1, r3, #5
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	440b      	add	r3, r1
 8009b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b86:	4619      	mov	r1, r3
 8009b88:	4b95      	ldr	r3, [pc, #596]	; (8009de0 <USB_EPStartXfer+0x2e0>)
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	610b      	str	r3, [r1, #16]
 8009b8e:	e074      	b.n	8009c7a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b9c:	691a      	ldr	r2, [r3, #16]
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	0159      	lsls	r1, r3, #5
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	440b      	add	r3, r1
 8009ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009baa:	4619      	mov	r1, r3
 8009bac:	4b8c      	ldr	r3, [pc, #560]	; (8009de0 <USB_EPStartXfer+0x2e0>)
 8009bae:	4013      	ands	r3, r2
 8009bb0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	015a      	lsls	r2, r3, #5
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	4413      	add	r3, r2
 8009bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bbe:	691a      	ldr	r2, [r3, #16]
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	0159      	lsls	r1, r3, #5
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	440b      	add	r3, r1
 8009bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4b83      	ldr	r3, [pc, #524]	; (8009ddc <USB_EPStartXfer+0x2dc>)
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	6999      	ldr	r1, [r3, #24]
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	440b      	add	r3, r1
 8009bec:	1e59      	subs	r1, r3, #1
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009bf6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009bf8:	4b7a      	ldr	r3, [pc, #488]	; (8009de4 <USB_EPStartXfer+0x2e4>)
 8009bfa:	400b      	ands	r3, r1
 8009bfc:	69b9      	ldr	r1, [r7, #24]
 8009bfe:	0148      	lsls	r0, r1, #5
 8009c00:	69f9      	ldr	r1, [r7, #28]
 8009c02:	4401      	add	r1, r0
 8009c04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c18:	691a      	ldr	r2, [r3, #16]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c22:	69b9      	ldr	r1, [r7, #24]
 8009c24:	0148      	lsls	r0, r1, #5
 8009c26:	69f9      	ldr	r1, [r7, #28]
 8009c28:	4401      	add	r1, r0
 8009c2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	791b      	ldrb	r3, [r3, #4]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d11f      	bne.n	8009c7a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	015a      	lsls	r2, r3, #5
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	4413      	add	r3, r2
 8009c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	69ba      	ldr	r2, [r7, #24]
 8009c4a:	0151      	lsls	r1, r2, #5
 8009c4c:	69fa      	ldr	r2, [r7, #28]
 8009c4e:	440a      	add	r2, r1
 8009c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009c58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	015a      	lsls	r2, r3, #5
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	0151      	lsls	r1, r2, #5
 8009c6c:	69fa      	ldr	r2, [r7, #28]
 8009c6e:	440a      	add	r2, r1
 8009c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009c7a:	79fb      	ldrb	r3, [r7, #7]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d14b      	bne.n	8009d18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d009      	beq.n	8009c9c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c94:	461a      	mov	r2, r3
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	791b      	ldrb	r3, [r3, #4]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d128      	bne.n	8009cf6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d110      	bne.n	8009cd6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	015a      	lsls	r2, r3, #5
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	4413      	add	r3, r2
 8009cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	69ba      	ldr	r2, [r7, #24]
 8009cc4:	0151      	lsls	r1, r2, #5
 8009cc6:	69fa      	ldr	r2, [r7, #28]
 8009cc8:	440a      	add	r2, r1
 8009cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	e00f      	b.n	8009cf6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	0151      	lsls	r1, r2, #5
 8009ce8:	69fa      	ldr	r2, [r7, #28]
 8009cea:	440a      	add	r2, r1
 8009cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cf4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	015a      	lsls	r2, r3, #5
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	69ba      	ldr	r2, [r7, #24]
 8009d06:	0151      	lsls	r1, r2, #5
 8009d08:	69fa      	ldr	r2, [r7, #28]
 8009d0a:	440a      	add	r2, r1
 8009d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d14:	6013      	str	r3, [r2, #0]
 8009d16:	e137      	b.n	8009f88 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	69ba      	ldr	r2, [r7, #24]
 8009d28:	0151      	lsls	r1, r2, #5
 8009d2a:	69fa      	ldr	r2, [r7, #28]
 8009d2c:	440a      	add	r2, r1
 8009d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	791b      	ldrb	r3, [r3, #4]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d015      	beq.n	8009d6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 811f 	beq.w	8009f88 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	f003 030f 	and.w	r3, r3, #15
 8009d5a:	2101      	movs	r1, #1
 8009d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d60:	69f9      	ldr	r1, [r7, #28]
 8009d62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d66:	4313      	orrs	r3, r2
 8009d68:	634b      	str	r3, [r1, #52]	; 0x34
 8009d6a:	e10d      	b.n	8009f88 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d110      	bne.n	8009d9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	69ba      	ldr	r2, [r7, #24]
 8009d8c:	0151      	lsls	r1, r2, #5
 8009d8e:	69fa      	ldr	r2, [r7, #28]
 8009d90:	440a      	add	r2, r1
 8009d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d9a:	6013      	str	r3, [r2, #0]
 8009d9c:	e00f      	b.n	8009dbe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	015a      	lsls	r2, r3, #5
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	4413      	add	r3, r2
 8009da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	0151      	lsls	r1, r2, #5
 8009db0:	69fa      	ldr	r2, [r7, #28]
 8009db2:	440a      	add	r2, r1
 8009db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dbc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	6919      	ldr	r1, [r3, #16]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	781a      	ldrb	r2, [r3, #0]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	b298      	uxth	r0, r3
 8009dcc:	79fb      	ldrb	r3, [r7, #7]
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f000 faea 	bl	800a3ac <USB_WritePacket>
 8009dd8:	e0d6      	b.n	8009f88 <USB_EPStartXfer+0x488>
 8009dda:	bf00      	nop
 8009ddc:	e007ffff 	.word	0xe007ffff
 8009de0:	fff80000 	.word	0xfff80000
 8009de4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df4:	691a      	ldr	r2, [r3, #16]
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	0159      	lsls	r1, r3, #5
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	440b      	add	r3, r1
 8009dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e02:	4619      	mov	r1, r3
 8009e04:	4b63      	ldr	r3, [pc, #396]	; (8009f94 <USB_EPStartXfer+0x494>)
 8009e06:	4013      	ands	r3, r2
 8009e08:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e16:	691a      	ldr	r2, [r3, #16]
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	0159      	lsls	r1, r3, #5
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	440b      	add	r3, r1
 8009e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e24:	4619      	mov	r1, r3
 8009e26:	4b5c      	ldr	r3, [pc, #368]	; (8009f98 <USB_EPStartXfer+0x498>)
 8009e28:	4013      	ands	r3, r2
 8009e2a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d123      	bne.n	8009e7c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e40:	691a      	ldr	r2, [r3, #16]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e4a:	69b9      	ldr	r1, [r7, #24]
 8009e4c:	0148      	lsls	r0, r1, #5
 8009e4e:	69f9      	ldr	r1, [r7, #28]
 8009e50:	4401      	add	r1, r0
 8009e52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e56:	4313      	orrs	r3, r2
 8009e58:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	69ba      	ldr	r2, [r7, #24]
 8009e6a:	0151      	lsls	r1, r2, #5
 8009e6c:	69fa      	ldr	r2, [r7, #28]
 8009e6e:	440a      	add	r2, r1
 8009e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e78:	6113      	str	r3, [r2, #16]
 8009e7a:	e037      	b.n	8009eec <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	699a      	ldr	r2, [r3, #24]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	4413      	add	r3, r2
 8009e86:	1e5a      	subs	r2, r3, #1
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e90:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	8afa      	ldrh	r2, [r7, #22]
 8009e98:	fb03 f202 	mul.w	r2, r3, r2
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	015a      	lsls	r2, r3, #5
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eac:	691a      	ldr	r2, [r3, #16]
 8009eae:	8afb      	ldrh	r3, [r7, #22]
 8009eb0:	04d9      	lsls	r1, r3, #19
 8009eb2:	4b3a      	ldr	r3, [pc, #232]	; (8009f9c <USB_EPStartXfer+0x49c>)
 8009eb4:	400b      	ands	r3, r1
 8009eb6:	69b9      	ldr	r1, [r7, #24]
 8009eb8:	0148      	lsls	r0, r1, #5
 8009eba:	69f9      	ldr	r1, [r7, #28]
 8009ebc:	4401      	add	r1, r0
 8009ebe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed2:	691a      	ldr	r2, [r3, #16]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	69db      	ldr	r3, [r3, #28]
 8009ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009edc:	69b9      	ldr	r1, [r7, #24]
 8009ede:	0148      	lsls	r0, r1, #5
 8009ee0:	69f9      	ldr	r1, [r7, #28]
 8009ee2:	4401      	add	r1, r0
 8009ee4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d10d      	bne.n	8009f0e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d009      	beq.n	8009f0e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	6919      	ldr	r1, [r3, #16]
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0a:	460a      	mov	r2, r1
 8009f0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	791b      	ldrb	r3, [r3, #4]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d128      	bne.n	8009f68 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d110      	bne.n	8009f48 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	015a      	lsls	r2, r3, #5
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	69ba      	ldr	r2, [r7, #24]
 8009f36:	0151      	lsls	r1, r2, #5
 8009f38:	69fa      	ldr	r2, [r7, #28]
 8009f3a:	440a      	add	r2, r1
 8009f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	e00f      	b.n	8009f68 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	69ba      	ldr	r2, [r7, #24]
 8009f58:	0151      	lsls	r1, r2, #5
 8009f5a:	69fa      	ldr	r2, [r7, #28]
 8009f5c:	440a      	add	r2, r1
 8009f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	69ba      	ldr	r2, [r7, #24]
 8009f78:	0151      	lsls	r1, r2, #5
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	440a      	add	r2, r1
 8009f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3720      	adds	r7, #32
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	fff80000 	.word	0xfff80000
 8009f98:	e007ffff 	.word	0xe007ffff
 8009f9c:	1ff80000 	.word	0x1ff80000

08009fa0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b087      	sub	sp, #28
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	4613      	mov	r3, r2
 8009fac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	785b      	ldrb	r3, [r3, #1]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	f040 80ce 	bne.w	800a15e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d132      	bne.n	800a030 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	015a      	lsls	r2, r3, #5
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd6:	691a      	ldr	r2, [r3, #16]
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	0159      	lsls	r1, r3, #5
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	440b      	add	r3, r1
 8009fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4b9a      	ldr	r3, [pc, #616]	; (800a250 <USB_EP0StartXfer+0x2b0>)
 8009fe8:	4013      	ands	r3, r2
 8009fea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	0151      	lsls	r1, r2, #5
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	440a      	add	r2, r1
 800a002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a00a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a018:	691a      	ldr	r2, [r3, #16]
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	0159      	lsls	r1, r3, #5
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	440b      	add	r3, r1
 800a022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a026:	4619      	mov	r1, r3
 800a028:	4b8a      	ldr	r3, [pc, #552]	; (800a254 <USB_EP0StartXfer+0x2b4>)
 800a02a:	4013      	ands	r3, r2
 800a02c:	610b      	str	r3, [r1, #16]
 800a02e:	e04e      	b.n	800a0ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a03c:	691a      	ldr	r2, [r3, #16]
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	0159      	lsls	r1, r3, #5
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	440b      	add	r3, r1
 800a046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a04a:	4619      	mov	r1, r3
 800a04c:	4b81      	ldr	r3, [pc, #516]	; (800a254 <USB_EP0StartXfer+0x2b4>)
 800a04e:	4013      	ands	r3, r2
 800a050:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	015a      	lsls	r2, r3, #5
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	4413      	add	r3, r2
 800a05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a05e:	691a      	ldr	r2, [r3, #16]
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	0159      	lsls	r1, r3, #5
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	440b      	add	r3, r1
 800a068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a06c:	4619      	mov	r1, r3
 800a06e:	4b78      	ldr	r3, [pc, #480]	; (800a250 <USB_EP0StartXfer+0x2b0>)
 800a070:	4013      	ands	r3, r2
 800a072:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	699a      	ldr	r2, [r3, #24]
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d903      	bls.n	800a088 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	68da      	ldr	r2, [r3, #12]
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	0151      	lsls	r1, r2, #5
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	440a      	add	r2, r1
 800a09e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b4:	691a      	ldr	r2, [r3, #16]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0be:	6939      	ldr	r1, [r7, #16]
 800a0c0:	0148      	lsls	r0, r1, #5
 800a0c2:	6979      	ldr	r1, [r7, #20]
 800a0c4:	4401      	add	r1, r0
 800a0c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d11e      	bne.n	800a112 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d009      	beq.n	800a0f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	0151      	lsls	r1, r2, #5
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	440a      	add	r2, r1
 800a106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a10a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	e097      	b.n	800a242 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	015a      	lsls	r2, r3, #5
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	4413      	add	r3, r2
 800a11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	0151      	lsls	r1, r2, #5
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	440a      	add	r2, r1
 800a128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a12c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a130:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 8083 	beq.w	800a242 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	f003 030f 	and.w	r3, r3, #15
 800a14c:	2101      	movs	r1, #1
 800a14e:	fa01 f303 	lsl.w	r3, r1, r3
 800a152:	6979      	ldr	r1, [r7, #20]
 800a154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a158:	4313      	orrs	r3, r2
 800a15a:	634b      	str	r3, [r1, #52]	; 0x34
 800a15c:	e071      	b.n	800a242 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	015a      	lsls	r2, r3, #5
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	4413      	add	r3, r2
 800a166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a16a:	691a      	ldr	r2, [r3, #16]
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	0159      	lsls	r1, r3, #5
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	440b      	add	r3, r1
 800a174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a178:	4619      	mov	r1, r3
 800a17a:	4b36      	ldr	r3, [pc, #216]	; (800a254 <USB_EP0StartXfer+0x2b4>)
 800a17c:	4013      	ands	r3, r2
 800a17e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a18c:	691a      	ldr	r2, [r3, #16]
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	0159      	lsls	r1, r3, #5
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	440b      	add	r3, r1
 800a196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a19a:	4619      	mov	r1, r3
 800a19c:	4b2c      	ldr	r3, [pc, #176]	; (800a250 <USB_EP0StartXfer+0x2b0>)
 800a19e:	4013      	ands	r3, r2
 800a1a0:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	699b      	ldr	r3, [r3, #24]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	68da      	ldr	r2, [r3, #12]
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	68da      	ldr	r2, [r3, #12]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	0151      	lsls	r1, r2, #5
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	440a      	add	r2, r1
 800a1d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	015a      	lsls	r2, r3, #5
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e6:	691a      	ldr	r2, [r3, #16]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	69db      	ldr	r3, [r3, #28]
 800a1ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1f0:	6939      	ldr	r1, [r7, #16]
 800a1f2:	0148      	lsls	r0, r1, #5
 800a1f4:	6979      	ldr	r1, [r7, #20]
 800a1f6:	4401      	add	r1, r0
 800a1f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a200:	79fb      	ldrb	r3, [r7, #7]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d10d      	bne.n	800a222 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d009      	beq.n	800a222 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	6919      	ldr	r1, [r3, #16]
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a21e:	460a      	mov	r2, r1
 800a220:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	0151      	lsls	r1, r2, #5
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	440a      	add	r2, r1
 800a238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a23c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a240:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	371c      	adds	r7, #28
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	e007ffff 	.word	0xe007ffff
 800a254:	fff80000 	.word	0xfff80000

0800a258 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a258:	b480      	push	{r7}
 800a25a:	b087      	sub	sp, #28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	785b      	ldrb	r3, [r3, #1]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d14a      	bne.n	800a30c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	015a      	lsls	r2, r3, #5
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	4413      	add	r3, r2
 800a280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a28a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a28e:	f040 8086 	bne.w	800a39e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	015a      	lsls	r2, r3, #5
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	4413      	add	r3, r2
 800a29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	7812      	ldrb	r2, [r2, #0]
 800a2a6:	0151      	lsls	r1, r2, #5
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	440a      	add	r2, r1
 800a2ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a2b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	7812      	ldrb	r2, [r2, #0]
 800a2ca:	0151      	lsls	r1, r2, #5
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	440a      	add	r2, r1
 800a2d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d902      	bls.n	800a2f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	75fb      	strb	r3, [r7, #23]
          break;
 800a2ee:	e056      	b.n	800a39e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	015a      	lsls	r2, r3, #5
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a308:	d0e7      	beq.n	800a2da <USB_EPStopXfer+0x82>
 800a30a:	e048      	b.n	800a39e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	015a      	lsls	r2, r3, #5
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	4413      	add	r3, r2
 800a316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a324:	d13b      	bne.n	800a39e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	7812      	ldrb	r2, [r2, #0]
 800a33a:	0151      	lsls	r1, r2, #5
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	440a      	add	r2, r1
 800a340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a344:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a348:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	015a      	lsls	r2, r3, #5
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	4413      	add	r3, r2
 800a354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	7812      	ldrb	r2, [r2, #0]
 800a35e:	0151      	lsls	r1, r2, #5
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	440a      	add	r2, r1
 800a364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a368:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a36c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3301      	adds	r3, #1
 800a372:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f242 7210 	movw	r2, #10000	; 0x2710
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d902      	bls.n	800a384 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	75fb      	strb	r3, [r7, #23]
          break;
 800a382:	e00c      	b.n	800a39e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	015a      	lsls	r2, r3, #5
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	4413      	add	r3, r2
 800a38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a39c:	d0e7      	beq.n	800a36e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	371c      	adds	r7, #28
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b089      	sub	sp, #36	; 0x24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	71fb      	strb	r3, [r7, #7]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a3ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d123      	bne.n	800a41a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a3d2:	88bb      	ldrh	r3, [r7, #4]
 800a3d4:	3303      	adds	r3, #3
 800a3d6:	089b      	lsrs	r3, r3, #2
 800a3d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61bb      	str	r3, [r7, #24]
 800a3de:	e018      	b.n	800a412 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a3e0:	79fb      	ldrb	r3, [r7, #7]
 800a3e2:	031a      	lsls	r2, r3, #12
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	3301      	adds	r3, #1
 800a404:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	3301      	adds	r3, #1
 800a40a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	3301      	adds	r3, #1
 800a410:	61bb      	str	r3, [r7, #24]
 800a412:	69ba      	ldr	r2, [r7, #24]
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	429a      	cmp	r2, r3
 800a418:	d3e2      	bcc.n	800a3e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3724      	adds	r7, #36	; 0x24
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a428:	b480      	push	{r7}
 800a42a:	b08b      	sub	sp, #44	; 0x2c
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	4613      	mov	r3, r2
 800a434:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a43e:	88fb      	ldrh	r3, [r7, #6]
 800a440:	089b      	lsrs	r3, r3, #2
 800a442:	b29b      	uxth	r3, r3
 800a444:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a446:	88fb      	ldrh	r3, [r7, #6]
 800a448:	f003 0303 	and.w	r3, r3, #3
 800a44c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a44e:	2300      	movs	r3, #0
 800a450:	623b      	str	r3, [r7, #32]
 800a452:	e014      	b.n	800a47e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	3301      	adds	r3, #1
 800a464:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	3301      	adds	r3, #1
 800a46a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46e:	3301      	adds	r3, #1
 800a470:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	3301      	adds	r3, #1
 800a476:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	3301      	adds	r3, #1
 800a47c:	623b      	str	r3, [r7, #32]
 800a47e:	6a3a      	ldr	r2, [r7, #32]
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	429a      	cmp	r2, r3
 800a484:	d3e6      	bcc.n	800a454 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a486:	8bfb      	ldrh	r3, [r7, #30]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d01e      	beq.n	800a4ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a48c:	2300      	movs	r3, #0
 800a48e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a496:	461a      	mov	r2, r3
 800a498:	f107 0310 	add.w	r3, r7, #16
 800a49c:	6812      	ldr	r2, [r2, #0]
 800a49e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	701a      	strb	r2, [r3, #0]
      i++;
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a4be:	8bfb      	ldrh	r3, [r7, #30]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a4c4:	8bfb      	ldrh	r3, [r7, #30]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1ea      	bne.n	800a4a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	372c      	adds	r7, #44	; 0x2c
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	785b      	ldrb	r3, [r3, #1]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d12c      	bne.n	800a54e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	db12      	blt.n	800a52c <USB_EPSetStall+0x54>
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00f      	beq.n	800a52c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	0151      	lsls	r1, r2, #5
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	440a      	add	r2, r1
 800a522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a526:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a52a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	015a      	lsls	r2, r3, #5
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	4413      	add	r3, r2
 800a534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	0151      	lsls	r1, r2, #5
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	440a      	add	r2, r1
 800a542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a546:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a54a:	6013      	str	r3, [r2, #0]
 800a54c:	e02b      	b.n	800a5a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	015a      	lsls	r2, r3, #5
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	4413      	add	r3, r2
 800a556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	db12      	blt.n	800a586 <USB_EPSetStall+0xae>
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00f      	beq.n	800a586 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	0151      	lsls	r1, r2, #5
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	440a      	add	r2, r1
 800a57c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a580:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a584:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	015a      	lsls	r2, r3, #5
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	4413      	add	r3, r2
 800a58e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	0151      	lsls	r1, r2, #5
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	440a      	add	r2, r1
 800a59c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a5a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	785b      	ldrb	r3, [r3, #1]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d128      	bne.n	800a622 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	0151      	lsls	r1, r2, #5
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	440a      	add	r2, r1
 800a5e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	791b      	ldrb	r3, [r3, #4]
 800a5f4:	2b03      	cmp	r3, #3
 800a5f6:	d003      	beq.n	800a600 <USB_EPClearStall+0x4c>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	791b      	ldrb	r3, [r3, #4]
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d138      	bne.n	800a672 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	4413      	add	r3, r2
 800a608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	0151      	lsls	r1, r2, #5
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	440a      	add	r2, r1
 800a616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a61a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	e027      	b.n	800a672 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	0151      	lsls	r1, r2, #5
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	440a      	add	r2, r1
 800a638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a63c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a640:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	791b      	ldrb	r3, [r3, #4]
 800a646:	2b03      	cmp	r3, #3
 800a648:	d003      	beq.n	800a652 <USB_EPClearStall+0x9e>
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	791b      	ldrb	r3, [r3, #4]
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d10f      	bne.n	800a672 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	0151      	lsls	r1, r2, #5
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	440a      	add	r2, r1
 800a668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a66c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a670:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3714      	adds	r7, #20
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	460b      	mov	r3, r1
 800a68a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a69e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a6a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	011b      	lsls	r3, r3, #4
 800a6b0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a6b4:	68f9      	ldr	r1, [r7, #12]
 800a6b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a6e6:	f023 0303 	bic.w	r3, r3, #3
 800a6ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6fa:	f023 0302 	bic.w	r3, r3, #2
 800a6fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a70e:	b480      	push	{r7}
 800a710:	b085      	sub	sp, #20
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a728:	f023 0303 	bic.w	r3, r3, #3
 800a72c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a73c:	f043 0302 	orr.w	r3, r3, #2
 800a740:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	695b      	ldr	r3, [r3, #20]
 800a75c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	4013      	ands	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a768:	68fb      	ldr	r3, [r7, #12]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a776:	b480      	push	{r7}
 800a778:	b085      	sub	sp, #20
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a792:	69db      	ldr	r3, [r3, #28]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	4013      	ands	r3, r2
 800a798:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	0c1b      	lsrs	r3, r3, #16
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	b29b      	uxth	r3, r3
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b085      	sub	sp, #20
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a7ee:	78fb      	ldrb	r3, [r7, #3]
 800a7f0:	015a      	lsls	r2, r3, #5
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	4013      	ands	r3, r2
 800a80a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a80c:	68bb      	ldr	r3, [r7, #8]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b087      	sub	sp, #28
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a83c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a83e:	78fb      	ldrb	r3, [r7, #3]
 800a840:	f003 030f 	and.w	r3, r3, #15
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	fa22 f303 	lsr.w	r3, r2, r3
 800a84a:	01db      	lsls	r3, r3, #7
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	4313      	orrs	r3, r2
 800a852:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	693a      	ldr	r2, [r7, #16]
 800a864:	4013      	ands	r3, r2
 800a866:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a868:	68bb      	ldr	r3, [r7, #8]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	371c      	adds	r7, #28
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a876:	b480      	push	{r7}
 800a878:	b083      	sub	sp, #12
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	f003 0301 	and.w	r3, r3, #1
}
 800a886:	4618      	mov	r0, r3
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
	...

0800a894 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4b09      	ldr	r3, [pc, #36]	; (800a8d8 <USB_ActivateSetup+0x44>)
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	fffff800 	.word	0xfffff800

0800a8dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	607a      	str	r2, [r7, #4]
 800a8e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	333c      	adds	r3, #60	; 0x3c
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	4a26      	ldr	r2, [pc, #152]	; (800a994 <USB_EP0_OutStart+0xb8>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d90a      	bls.n	800a916 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a90c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a910:	d101      	bne.n	800a916 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	e037      	b.n	800a986 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a91c:	461a      	mov	r2, r3
 800a91e:	2300      	movs	r3, #0
 800a920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	697a      	ldr	r2, [r7, #20]
 800a92c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a930:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a944:	f043 0318 	orr.w	r3, r3, #24
 800a948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a958:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a95c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a95e:	7afb      	ldrb	r3, [r7, #11]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d10f      	bne.n	800a984 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a96a:	461a      	mov	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a97e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a982:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	371c      	adds	r7, #28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	4f54300a 	.word	0x4f54300a

0800a998 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	4a13      	ldr	r2, [pc, #76]	; (800a9fc <USB_CoreReset+0x64>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d901      	bls.n	800a9b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e01b      	b.n	800a9ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	daf2      	bge.n	800a9a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	f043 0201 	orr.w	r2, r3, #1
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	4a09      	ldr	r2, [pc, #36]	; (800a9fc <USB_CoreReset+0x64>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d901      	bls.n	800a9e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	e006      	b.n	800a9ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d0f0      	beq.n	800a9ce <USB_CoreReset+0x36>

  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	00030d40 	.word	0x00030d40

0800aa00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800aa10:	f005 fc44 	bl	801029c <malloc>
 800aa14:	4603      	mov	r3, r0
 800aa16:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d109      	bne.n	800aa32 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	32b0      	adds	r2, #176	; 0xb0
 800aa28:	2100      	movs	r1, #0
 800aa2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aa2e:	2302      	movs	r3, #2
 800aa30:	e0d4      	b.n	800abdc <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aa32:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800aa36:	2100      	movs	r1, #0
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f005 ffa9 	bl	8010990 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	32b0      	adds	r2, #176	; 0xb0
 800aa48:	68f9      	ldr	r1, [r7, #12]
 800aa4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	32b0      	adds	r2, #176	; 0xb0
 800aa58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	7c1b      	ldrb	r3, [r3, #16]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d138      	bne.n	800aadc <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aa6a:	4b5e      	ldr	r3, [pc, #376]	; (800abe4 <USBD_CDC_Init+0x1e4>)
 800aa6c:	7819      	ldrb	r1, [r3, #0]
 800aa6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa72:	2202      	movs	r2, #2
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f005 fa6e 	bl	800ff56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aa7a:	4b5a      	ldr	r3, [pc, #360]	; (800abe4 <USBD_CDC_Init+0x1e4>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	f003 020f 	and.w	r2, r3, #15
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	4613      	mov	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	3324      	adds	r3, #36	; 0x24
 800aa90:	2201      	movs	r2, #1
 800aa92:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aa94:	4b54      	ldr	r3, [pc, #336]	; (800abe8 <USBD_CDC_Init+0x1e8>)
 800aa96:	7819      	ldrb	r1, [r3, #0]
 800aa98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f005 fa59 	bl	800ff56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aaa4:	4b50      	ldr	r3, [pc, #320]	; (800abe8 <USBD_CDC_Init+0x1e8>)
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	f003 020f 	and.w	r2, r3, #15
 800aaac:	6879      	ldr	r1, [r7, #4]
 800aaae:	4613      	mov	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	440b      	add	r3, r1
 800aab8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aabc:	2201      	movs	r2, #1
 800aabe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aac0:	4b4a      	ldr	r3, [pc, #296]	; (800abec <USBD_CDC_Init+0x1ec>)
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	f003 020f 	and.w	r2, r3, #15
 800aac8:	6879      	ldr	r1, [r7, #4]
 800aaca:	4613      	mov	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	440b      	add	r3, r1
 800aad4:	3326      	adds	r3, #38	; 0x26
 800aad6:	2210      	movs	r2, #16
 800aad8:	801a      	strh	r2, [r3, #0]
 800aada:	e035      	b.n	800ab48 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aadc:	4b41      	ldr	r3, [pc, #260]	; (800abe4 <USBD_CDC_Init+0x1e4>)
 800aade:	7819      	ldrb	r1, [r3, #0]
 800aae0:	2340      	movs	r3, #64	; 0x40
 800aae2:	2202      	movs	r2, #2
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f005 fa36 	bl	800ff56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aaea:	4b3e      	ldr	r3, [pc, #248]	; (800abe4 <USBD_CDC_Init+0x1e4>)
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	f003 020f 	and.w	r2, r3, #15
 800aaf2:	6879      	ldr	r1, [r7, #4]
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4413      	add	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	440b      	add	r3, r1
 800aafe:	3324      	adds	r3, #36	; 0x24
 800ab00:	2201      	movs	r2, #1
 800ab02:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab04:	4b38      	ldr	r3, [pc, #224]	; (800abe8 <USBD_CDC_Init+0x1e8>)
 800ab06:	7819      	ldrb	r1, [r3, #0]
 800ab08:	2340      	movs	r3, #64	; 0x40
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f005 fa22 	bl	800ff56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab12:	4b35      	ldr	r3, [pc, #212]	; (800abe8 <USBD_CDC_Init+0x1e8>)
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	f003 020f 	and.w	r2, r3, #15
 800ab1a:	6879      	ldr	r1, [r7, #4]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	440b      	add	r3, r1
 800ab26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ab2e:	4b2f      	ldr	r3, [pc, #188]	; (800abec <USBD_CDC_Init+0x1ec>)
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	f003 020f 	and.w	r2, r3, #15
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	440b      	add	r3, r1
 800ab42:	3326      	adds	r3, #38	; 0x26
 800ab44:	2210      	movs	r2, #16
 800ab46:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ab48:	4b28      	ldr	r3, [pc, #160]	; (800abec <USBD_CDC_Init+0x1ec>)
 800ab4a:	7819      	ldrb	r1, [r3, #0]
 800ab4c:	2308      	movs	r3, #8
 800ab4e:	2203      	movs	r2, #3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f005 fa00 	bl	800ff56 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ab56:	4b25      	ldr	r3, [pc, #148]	; (800abec <USBD_CDC_Init+0x1ec>)
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	f003 020f 	and.w	r2, r3, #15
 800ab5e:	6879      	ldr	r1, [r7, #4]
 800ab60:	4613      	mov	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	440b      	add	r3, r1
 800ab6a:	3324      	adds	r3, #36	; 0x24
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	33b0      	adds	r3, #176	; 0xb0
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800aba6:	2302      	movs	r3, #2
 800aba8:	e018      	b.n	800abdc <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	7c1b      	ldrb	r3, [r3, #16]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10a      	bne.n	800abc8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abb2:	4b0d      	ldr	r3, [pc, #52]	; (800abe8 <USBD_CDC_Init+0x1e8>)
 800abb4:	7819      	ldrb	r1, [r3, #0]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f005 fab7 	bl	8010134 <USBD_LL_PrepareReceive>
 800abc6:	e008      	b.n	800abda <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abc8:	4b07      	ldr	r3, [pc, #28]	; (800abe8 <USBD_CDC_Init+0x1e8>)
 800abca:	7819      	ldrb	r1, [r3, #0]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abd2:	2340      	movs	r3, #64	; 0x40
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f005 faad 	bl	8010134 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	20000093 	.word	0x20000093
 800abe8:	20000094 	.word	0x20000094
 800abec:	20000095 	.word	0x20000095

0800abf0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	460b      	mov	r3, r1
 800abfa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800abfc:	4b3a      	ldr	r3, [pc, #232]	; (800ace8 <USBD_CDC_DeInit+0xf8>)
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	4619      	mov	r1, r3
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f005 f9cd 	bl	800ffa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ac08:	4b37      	ldr	r3, [pc, #220]	; (800ace8 <USBD_CDC_DeInit+0xf8>)
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	f003 020f 	and.w	r2, r3, #15
 800ac10:	6879      	ldr	r1, [r7, #4]
 800ac12:	4613      	mov	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4413      	add	r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	440b      	add	r3, r1
 800ac1c:	3324      	adds	r3, #36	; 0x24
 800ac1e:	2200      	movs	r2, #0
 800ac20:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ac22:	4b32      	ldr	r3, [pc, #200]	; (800acec <USBD_CDC_DeInit+0xfc>)
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	4619      	mov	r1, r3
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f005 f9ba 	bl	800ffa2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ac2e:	4b2f      	ldr	r3, [pc, #188]	; (800acec <USBD_CDC_DeInit+0xfc>)
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	f003 020f 	and.w	r2, r3, #15
 800ac36:	6879      	ldr	r1, [r7, #4]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	440b      	add	r3, r1
 800ac42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac46:	2200      	movs	r2, #0
 800ac48:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ac4a:	4b29      	ldr	r3, [pc, #164]	; (800acf0 <USBD_CDC_DeInit+0x100>)
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f005 f9a6 	bl	800ffa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ac56:	4b26      	ldr	r3, [pc, #152]	; (800acf0 <USBD_CDC_DeInit+0x100>)
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	f003 020f 	and.w	r2, r3, #15
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	4613      	mov	r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4413      	add	r3, r2
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	440b      	add	r3, r1
 800ac6a:	3324      	adds	r3, #36	; 0x24
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ac70:	4b1f      	ldr	r3, [pc, #124]	; (800acf0 <USBD_CDC_DeInit+0x100>)
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	f003 020f 	and.w	r2, r3, #15
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	440b      	add	r3, r1
 800ac84:	3326      	adds	r3, #38	; 0x26
 800ac86:	2200      	movs	r2, #0
 800ac88:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	32b0      	adds	r2, #176	; 0xb0
 800ac94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d01f      	beq.n	800acdc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	33b0      	adds	r3, #176	; 0xb0
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	32b0      	adds	r2, #176	; 0xb0
 800acba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f005 faf4 	bl	80102ac <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	32b0      	adds	r2, #176	; 0xb0
 800acce:	2100      	movs	r1, #0
 800acd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20000093 	.word	0x20000093
 800acec:	20000094 	.word	0x20000094
 800acf0:	20000095 	.word	0x20000095

0800acf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	32b0      	adds	r2, #176	; 0xb0
 800ad08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ad12:	2300      	movs	r3, #0
 800ad14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad16:	2300      	movs	r3, #0
 800ad18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e0bf      	b.n	800aea4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d050      	beq.n	800add2 <USBD_CDC_Setup+0xde>
 800ad30:	2b20      	cmp	r3, #32
 800ad32:	f040 80af 	bne.w	800ae94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	88db      	ldrh	r3, [r3, #6]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d03a      	beq.n	800adb4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	b25b      	sxtb	r3, r3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	da1b      	bge.n	800ad80 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	33b0      	adds	r3, #176	; 0xb0
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	4413      	add	r3, r2
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ad5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad60:	683a      	ldr	r2, [r7, #0]
 800ad62:	88d2      	ldrh	r2, [r2, #6]
 800ad64:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	88db      	ldrh	r3, [r3, #6]
 800ad6a:	2b07      	cmp	r3, #7
 800ad6c:	bf28      	it	cs
 800ad6e:	2307      	movcs	r3, #7
 800ad70:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	89fa      	ldrh	r2, [r7, #14]
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f001 fd6d 	bl	800c858 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ad7e:	e090      	b.n	800aea2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	785a      	ldrb	r2, [r3, #1]
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	88db      	ldrh	r3, [r3, #6]
 800ad8e:	2b3f      	cmp	r3, #63	; 0x3f
 800ad90:	d803      	bhi.n	800ad9a <USBD_CDC_Setup+0xa6>
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	88db      	ldrh	r3, [r3, #6]
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	e000      	b.n	800ad9c <USBD_CDC_Setup+0xa8>
 800ad9a:	2240      	movs	r2, #64	; 0x40
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ada2:	6939      	ldr	r1, [r7, #16]
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800adaa:	461a      	mov	r2, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f001 fd7f 	bl	800c8b0 <USBD_CtlPrepareRx>
      break;
 800adb2:	e076      	b.n	800aea2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	33b0      	adds	r3, #176	; 0xb0
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	7850      	ldrb	r0, [r2, #1]
 800adca:	2200      	movs	r2, #0
 800adcc:	6839      	ldr	r1, [r7, #0]
 800adce:	4798      	blx	r3
      break;
 800add0:	e067      	b.n	800aea2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	785b      	ldrb	r3, [r3, #1]
 800add6:	2b0b      	cmp	r3, #11
 800add8:	d851      	bhi.n	800ae7e <USBD_CDC_Setup+0x18a>
 800adda:	a201      	add	r2, pc, #4	; (adr r2, 800ade0 <USBD_CDC_Setup+0xec>)
 800addc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade0:	0800ae11 	.word	0x0800ae11
 800ade4:	0800ae8d 	.word	0x0800ae8d
 800ade8:	0800ae7f 	.word	0x0800ae7f
 800adec:	0800ae7f 	.word	0x0800ae7f
 800adf0:	0800ae7f 	.word	0x0800ae7f
 800adf4:	0800ae7f 	.word	0x0800ae7f
 800adf8:	0800ae7f 	.word	0x0800ae7f
 800adfc:	0800ae7f 	.word	0x0800ae7f
 800ae00:	0800ae7f 	.word	0x0800ae7f
 800ae04:	0800ae7f 	.word	0x0800ae7f
 800ae08:	0800ae3b 	.word	0x0800ae3b
 800ae0c:	0800ae65 	.word	0x0800ae65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	2b03      	cmp	r3, #3
 800ae1a:	d107      	bne.n	800ae2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ae1c:	f107 030a 	add.w	r3, r7, #10
 800ae20:	2202      	movs	r2, #2
 800ae22:	4619      	mov	r1, r3
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f001 fd17 	bl	800c858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae2a:	e032      	b.n	800ae92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f001 fca1 	bl	800c776 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae34:	2303      	movs	r3, #3
 800ae36:	75fb      	strb	r3, [r7, #23]
          break;
 800ae38:	e02b      	b.n	800ae92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b03      	cmp	r3, #3
 800ae44:	d107      	bne.n	800ae56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae46:	f107 030d 	add.w	r3, r7, #13
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f001 fd02 	bl	800c858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae54:	e01d      	b.n	800ae92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f001 fc8c 	bl	800c776 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	75fb      	strb	r3, [r7, #23]
          break;
 800ae62:	e016      	b.n	800ae92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	2b03      	cmp	r3, #3
 800ae6e:	d00f      	beq.n	800ae90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ae70:	6839      	ldr	r1, [r7, #0]
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f001 fc7f 	bl	800c776 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ae7c:	e008      	b.n	800ae90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f001 fc78 	bl	800c776 <USBD_CtlError>
          ret = USBD_FAIL;
 800ae86:	2303      	movs	r3, #3
 800ae88:	75fb      	strb	r3, [r7, #23]
          break;
 800ae8a:	e002      	b.n	800ae92 <USBD_CDC_Setup+0x19e>
          break;
 800ae8c:	bf00      	nop
 800ae8e:	e008      	b.n	800aea2 <USBD_CDC_Setup+0x1ae>
          break;
 800ae90:	bf00      	nop
      }
      break;
 800ae92:	e006      	b.n	800aea2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f001 fc6d 	bl	800c776 <USBD_CtlError>
      ret = USBD_FAIL;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	75fb      	strb	r3, [r7, #23]
      break;
 800aea0:	bf00      	nop
  }

  return (uint8_t)ret;
 800aea2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aebe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	32b0      	adds	r2, #176	; 0xb0
 800aeca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d101      	bne.n	800aed6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aed2:	2303      	movs	r3, #3
 800aed4:	e065      	b.n	800afa2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	32b0      	adds	r2, #176	; 0xb0
 800aee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aee6:	78fb      	ldrb	r3, [r7, #3]
 800aee8:	f003 020f 	and.w	r2, r3, #15
 800aeec:	6879      	ldr	r1, [r7, #4]
 800aeee:	4613      	mov	r3, r2
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	4413      	add	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	440b      	add	r3, r1
 800aef8:	3318      	adds	r3, #24
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d02f      	beq.n	800af60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800af00:	78fb      	ldrb	r3, [r7, #3]
 800af02:	f003 020f 	and.w	r2, r3, #15
 800af06:	6879      	ldr	r1, [r7, #4]
 800af08:	4613      	mov	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	440b      	add	r3, r1
 800af12:	3318      	adds	r3, #24
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	78fb      	ldrb	r3, [r7, #3]
 800af18:	f003 010f 	and.w	r1, r3, #15
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	460b      	mov	r3, r1
 800af20:	00db      	lsls	r3, r3, #3
 800af22:	440b      	add	r3, r1
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	4403      	add	r3, r0
 800af28:	3348      	adds	r3, #72	; 0x48
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	fbb2 f1f3 	udiv	r1, r2, r3
 800af30:	fb01 f303 	mul.w	r3, r1, r3
 800af34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af36:	2b00      	cmp	r3, #0
 800af38:	d112      	bne.n	800af60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800af3a:	78fb      	ldrb	r3, [r7, #3]
 800af3c:	f003 020f 	and.w	r2, r3, #15
 800af40:	6879      	ldr	r1, [r7, #4]
 800af42:	4613      	mov	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4413      	add	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	440b      	add	r3, r1
 800af4c:	3318      	adds	r3, #24
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af52:	78f9      	ldrb	r1, [r7, #3]
 800af54:	2300      	movs	r3, #0
 800af56:	2200      	movs	r2, #0
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f005 f8ca 	bl	80100f2 <USBD_LL_Transmit>
 800af5e:	e01f      	b.n	800afa0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	2200      	movs	r2, #0
 800af64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	33b0      	adds	r3, #176	; 0xb0
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4413      	add	r3, r2
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d010      	beq.n	800afa0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	33b0      	adds	r3, #176	; 0xb0
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4413      	add	r3, r2
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800af9c:	78fa      	ldrb	r2, [r7, #3]
 800af9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b084      	sub	sp, #16
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
 800afb2:	460b      	mov	r3, r1
 800afb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	32b0      	adds	r2, #176	; 0xb0
 800afc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	32b0      	adds	r2, #176	; 0xb0
 800afd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d101      	bne.n	800afdc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800afd8:	2303      	movs	r3, #3
 800afda:	e01a      	b.n	800b012 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800afdc:	78fb      	ldrb	r3, [r7, #3]
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f005 f8c8 	bl	8010176 <USBD_LL_GetRxDataSize>
 800afe6:	4602      	mov	r2, r0
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	33b0      	adds	r3, #176	; 0xb0
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	4413      	add	r3, r2
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b00c:	4611      	mov	r1, r2
 800b00e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	32b0      	adds	r2, #176	; 0xb0
 800b02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b030:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b038:	2303      	movs	r3, #3
 800b03a:	e025      	b.n	800b088 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	33b0      	adds	r3, #176	; 0xb0
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d01a      	beq.n	800b086 <USBD_CDC_EP0_RxReady+0x6c>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b056:	2bff      	cmp	r3, #255	; 0xff
 800b058:	d015      	beq.n	800b086 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	33b0      	adds	r3, #176	; 0xb0
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b072:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b07a:	b292      	uxth	r2, r2
 800b07c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	22ff      	movs	r2, #255	; 0xff
 800b082:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b098:	2182      	movs	r1, #130	; 0x82
 800b09a:	4818      	ldr	r0, [pc, #96]	; (800b0fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b09c:	f000 fd09 	bl	800bab2 <USBD_GetEpDesc>
 800b0a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	4815      	ldr	r0, [pc, #84]	; (800b0fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0a6:	f000 fd04 	bl	800bab2 <USBD_GetEpDesc>
 800b0aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b0ac:	2181      	movs	r1, #129	; 0x81
 800b0ae:	4813      	ldr	r0, [pc, #76]	; (800b0fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0b0:	f000 fcff 	bl	800bab2 <USBD_GetEpDesc>
 800b0b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	2210      	movs	r2, #16
 800b0c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d006      	beq.n	800b0d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0d0:	711a      	strb	r2, [r3, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d006      	beq.n	800b0ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0e4:	711a      	strb	r2, [r3, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2243      	movs	r2, #67	; 0x43
 800b0ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b0f0:	4b02      	ldr	r3, [pc, #8]	; (800b0fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20000050 	.word	0x20000050

0800b100 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b108:	2182      	movs	r1, #130	; 0x82
 800b10a:	4818      	ldr	r0, [pc, #96]	; (800b16c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b10c:	f000 fcd1 	bl	800bab2 <USBD_GetEpDesc>
 800b110:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b112:	2101      	movs	r1, #1
 800b114:	4815      	ldr	r0, [pc, #84]	; (800b16c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b116:	f000 fccc 	bl	800bab2 <USBD_GetEpDesc>
 800b11a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b11c:	2181      	movs	r1, #129	; 0x81
 800b11e:	4813      	ldr	r0, [pc, #76]	; (800b16c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b120:	f000 fcc7 	bl	800bab2 <USBD_GetEpDesc>
 800b124:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d002      	beq.n	800b132 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	2210      	movs	r2, #16
 800b130:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d006      	beq.n	800b146 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	2200      	movs	r2, #0
 800b13c:	711a      	strb	r2, [r3, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	f042 0202 	orr.w	r2, r2, #2
 800b144:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d006      	beq.n	800b15a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2200      	movs	r2, #0
 800b150:	711a      	strb	r2, [r3, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f042 0202 	orr.w	r2, r2, #2
 800b158:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2243      	movs	r2, #67	; 0x43
 800b15e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b160:	4b02      	ldr	r3, [pc, #8]	; (800b16c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b162:	4618      	mov	r0, r3
 800b164:	3718      	adds	r7, #24
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	20000050 	.word	0x20000050

0800b170 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b178:	2182      	movs	r1, #130	; 0x82
 800b17a:	4818      	ldr	r0, [pc, #96]	; (800b1dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b17c:	f000 fc99 	bl	800bab2 <USBD_GetEpDesc>
 800b180:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b182:	2101      	movs	r1, #1
 800b184:	4815      	ldr	r0, [pc, #84]	; (800b1dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b186:	f000 fc94 	bl	800bab2 <USBD_GetEpDesc>
 800b18a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b18c:	2181      	movs	r1, #129	; 0x81
 800b18e:	4813      	ldr	r0, [pc, #76]	; (800b1dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b190:	f000 fc8f 	bl	800bab2 <USBD_GetEpDesc>
 800b194:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d002      	beq.n	800b1a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2210      	movs	r2, #16
 800b1a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d006      	beq.n	800b1b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1b0:	711a      	strb	r2, [r3, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d006      	beq.n	800b1ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1c4:	711a      	strb	r2, [r3, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2243      	movs	r2, #67	; 0x43
 800b1ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1d0:	4b02      	ldr	r3, [pc, #8]	; (800b1dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3718      	adds	r7, #24
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	20000050 	.word	0x20000050

0800b1e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	220a      	movs	r2, #10
 800b1ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b1ee:	4b03      	ldr	r3, [pc, #12]	; (800b1fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	2000000c 	.word	0x2000000c

0800b200 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b210:	2303      	movs	r3, #3
 800b212:	e009      	b.n	800b228 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	33b0      	adds	r3, #176	; 0xb0
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b234:	b480      	push	{r7}
 800b236:	b087      	sub	sp, #28
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	32b0      	adds	r2, #176	; 0xb0
 800b24a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b24e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b256:	2303      	movs	r3, #3
 800b258:	e008      	b.n	800b26c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	371c      	adds	r7, #28
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	32b0      	adds	r2, #176	; 0xb0
 800b28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b290:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b298:	2303      	movs	r3, #3
 800b29a:	e004      	b.n	800b2a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3714      	adds	r7, #20
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
	...

0800b2b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	32b0      	adds	r2, #176	; 0xb0
 800b2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	32b0      	adds	r2, #176	; 0xb0
 800b2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e018      	b.n	800b314 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	7c1b      	ldrb	r3, [r3, #16]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10a      	bne.n	800b300 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2ea:	4b0c      	ldr	r3, [pc, #48]	; (800b31c <USBD_CDC_ReceivePacket+0x68>)
 800b2ec:	7819      	ldrb	r1, [r3, #0]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f004 ff1b 	bl	8010134 <USBD_LL_PrepareReceive>
 800b2fe:	e008      	b.n	800b312 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b300:	4b06      	ldr	r3, [pc, #24]	; (800b31c <USBD_CDC_ReceivePacket+0x68>)
 800b302:	7819      	ldrb	r1, [r3, #0]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b30a:	2340      	movs	r3, #64	; 0x40
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f004 ff11 	bl	8010134 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	20000094 	.word	0x20000094

0800b320 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	4613      	mov	r3, r2
 800b32c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d101      	bne.n	800b338 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b334:	2303      	movs	r3, #3
 800b336:	e01f      	b.n	800b378 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d003      	beq.n	800b35e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2201      	movs	r2, #1
 800b362:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	79fa      	ldrb	r2, [r7, #7]
 800b36a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f004 fd8b 	bl	800fe88 <USBD_LL_Init>
 800b372:	4603      	mov	r3, r0
 800b374:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b376:	7dfb      	ldrb	r3, [r7, #23]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3718      	adds	r7, #24
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b38a:	2300      	movs	r3, #0
 800b38c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d101      	bne.n	800b398 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b394:	2303      	movs	r3, #3
 800b396:	e025      	b.n	800b3e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	32ae      	adds	r2, #174	; 0xae
 800b3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00f      	beq.n	800b3d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	32ae      	adds	r2, #174	; 0xae
 800b3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c4:	f107 020e 	add.w	r2, r7, #14
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	4798      	blx	r3
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b3da:	1c5a      	adds	r2, r3, #1
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f004 fd93 	bl	800ff20 <USBD_LL_Start>
 800b3fa:	4603      	mov	r3, r0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b40c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b40e:	4618      	mov	r0, r3
 800b410:	370c      	adds	r7, #12
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr

0800b41a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b084      	sub	sp, #16
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	460b      	mov	r3, r1
 800b424:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b430:	2b00      	cmp	r3, #0
 800b432:	d009      	beq.n	800b448 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	78fa      	ldrb	r2, [r7, #3]
 800b43e:	4611      	mov	r1, r2
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	4798      	blx	r3
 800b444:	4603      	mov	r3, r0
 800b446:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b448:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b084      	sub	sp, #16
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	460b      	mov	r3, r1
 800b45c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	78fa      	ldrb	r2, [r7, #3]
 800b46c:	4611      	mov	r1, r2
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	4798      	blx	r3
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d001      	beq.n	800b47c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b478:	2303      	movs	r3, #3
 800b47a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b084      	sub	sp, #16
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
 800b48e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	4618      	mov	r0, r3
 800b49a:	f001 f932 	bl	800c702 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b4ba:	f003 031f 	and.w	r3, r3, #31
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d01a      	beq.n	800b4f8 <USBD_LL_SetupStage+0x72>
 800b4c2:	2b02      	cmp	r3, #2
 800b4c4:	d822      	bhi.n	800b50c <USBD_LL_SetupStage+0x86>
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d002      	beq.n	800b4d0 <USBD_LL_SetupStage+0x4a>
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d00a      	beq.n	800b4e4 <USBD_LL_SetupStage+0x5e>
 800b4ce:	e01d      	b.n	800b50c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 fb5f 	bl	800bb9c <USBD_StdDevReq>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b4e2:	e020      	b.n	800b526 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fbc7 	bl	800bc80 <USBD_StdItfReq>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b4f6:	e016      	b.n	800b526 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4fe:	4619      	mov	r1, r3
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 fc29 	bl	800bd58 <USBD_StdEPReq>
 800b506:	4603      	mov	r3, r0
 800b508:	73fb      	strb	r3, [r7, #15]
      break;
 800b50a:	e00c      	b.n	800b526 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b512:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b516:	b2db      	uxtb	r3, r3
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f004 fd60 	bl	800ffe0 <USBD_LL_StallEP>
 800b520:	4603      	mov	r3, r0
 800b522:	73fb      	strb	r3, [r7, #15]
      break;
 800b524:	bf00      	nop
  }

  return ret;
 800b526:	7bfb      	ldrb	r3, [r7, #15]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	460b      	mov	r3, r1
 800b53a:	607a      	str	r2, [r7, #4]
 800b53c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b542:	7afb      	ldrb	r3, [r7, #11]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d16e      	bne.n	800b626 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b54e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b556:	2b03      	cmp	r3, #3
 800b558:	f040 8098 	bne.w	800b68c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	689a      	ldr	r2, [r3, #8]
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	429a      	cmp	r2, r3
 800b566:	d913      	bls.n	800b590 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	689a      	ldr	r2, [r3, #8]
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	1ad2      	subs	r2, r2, r3
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	68da      	ldr	r2, [r3, #12]
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	4293      	cmp	r3, r2
 800b580:	bf28      	it	cs
 800b582:	4613      	movcs	r3, r2
 800b584:	461a      	mov	r2, r3
 800b586:	6879      	ldr	r1, [r7, #4]
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f001 f9ae 	bl	800c8ea <USBD_CtlContinueRx>
 800b58e:	e07d      	b.n	800b68c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b596:	f003 031f 	and.w	r3, r3, #31
 800b59a:	2b02      	cmp	r3, #2
 800b59c:	d014      	beq.n	800b5c8 <USBD_LL_DataOutStage+0x98>
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d81d      	bhi.n	800b5de <USBD_LL_DataOutStage+0xae>
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d002      	beq.n	800b5ac <USBD_LL_DataOutStage+0x7c>
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	d003      	beq.n	800b5b2 <USBD_LL_DataOutStage+0x82>
 800b5aa:	e018      	b.n	800b5de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	75bb      	strb	r3, [r7, #22]
            break;
 800b5b0:	e018      	b.n	800b5e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f000 fa5e 	bl	800ba7e <USBD_CoreFindIF>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	75bb      	strb	r3, [r7, #22]
            break;
 800b5c6:	e00d      	b.n	800b5e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f000 fa60 	bl	800ba98 <USBD_CoreFindEP>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	75bb      	strb	r3, [r7, #22]
            break;
 800b5dc:	e002      	b.n	800b5e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	75bb      	strb	r3, [r7, #22]
            break;
 800b5e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b5e4:	7dbb      	ldrb	r3, [r7, #22]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d119      	bne.n	800b61e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	2b03      	cmp	r3, #3
 800b5f4:	d113      	bne.n	800b61e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b5f6:	7dba      	ldrb	r2, [r7, #22]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	32ae      	adds	r2, #174	; 0xae
 800b5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00b      	beq.n	800b61e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b606:	7dba      	ldrb	r2, [r7, #22]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b60e:	7dba      	ldrb	r2, [r7, #22]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	32ae      	adds	r2, #174	; 0xae
 800b614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f001 f974 	bl	800c90c <USBD_CtlSendStatus>
 800b624:	e032      	b.n	800b68c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b626:	7afb      	ldrb	r3, [r7, #11]
 800b628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	4619      	mov	r1, r3
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f000 fa31 	bl	800ba98 <USBD_CoreFindEP>
 800b636:	4603      	mov	r3, r0
 800b638:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b63a:	7dbb      	ldrb	r3, [r7, #22]
 800b63c:	2bff      	cmp	r3, #255	; 0xff
 800b63e:	d025      	beq.n	800b68c <USBD_LL_DataOutStage+0x15c>
 800b640:	7dbb      	ldrb	r3, [r7, #22]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d122      	bne.n	800b68c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	2b03      	cmp	r3, #3
 800b650:	d117      	bne.n	800b682 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b652:	7dba      	ldrb	r2, [r7, #22]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	32ae      	adds	r2, #174	; 0xae
 800b658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b65c:	699b      	ldr	r3, [r3, #24]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00f      	beq.n	800b682 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b662:	7dba      	ldrb	r2, [r7, #22]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b66a:	7dba      	ldrb	r2, [r7, #22]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	32ae      	adds	r2, #174	; 0xae
 800b670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	7afa      	ldrb	r2, [r7, #11]
 800b678:	4611      	mov	r1, r2
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	4798      	blx	r3
 800b67e:	4603      	mov	r3, r0
 800b680:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b682:	7dfb      	ldrb	r3, [r7, #23]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d001      	beq.n	800b68c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b688:	7dfb      	ldrb	r3, [r7, #23]
 800b68a:	e000      	b.n	800b68e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b086      	sub	sp, #24
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	60f8      	str	r0, [r7, #12]
 800b69e:	460b      	mov	r3, r1
 800b6a0:	607a      	str	r2, [r7, #4]
 800b6a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b6a4:	7afb      	ldrb	r3, [r7, #11]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d16f      	bne.n	800b78a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	3314      	adds	r3, #20
 800b6ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d15a      	bne.n	800b770 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	689a      	ldr	r2, [r3, #8]
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d914      	bls.n	800b6f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	689a      	ldr	r2, [r3, #8]
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	1ad2      	subs	r2, r2, r3
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	6879      	ldr	r1, [r7, #4]
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f001 f8d6 	bl	800c88e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f004 fd23 	bl	8010134 <USBD_LL_PrepareReceive>
 800b6ee:	e03f      	b.n	800b770 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	68da      	ldr	r2, [r3, #12]
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d11c      	bne.n	800b736 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	685a      	ldr	r2, [r3, #4]
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b704:	429a      	cmp	r2, r3
 800b706:	d316      	bcc.n	800b736 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	685a      	ldr	r2, [r3, #4]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b712:	429a      	cmp	r2, r3
 800b714:	d20f      	bcs.n	800b736 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b716:	2200      	movs	r2, #0
 800b718:	2100      	movs	r1, #0
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f001 f8b7 	bl	800c88e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b728:	2300      	movs	r3, #0
 800b72a:	2200      	movs	r2, #0
 800b72c:	2100      	movs	r1, #0
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f004 fd00 	bl	8010134 <USBD_LL_PrepareReceive>
 800b734:	e01c      	b.n	800b770 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b03      	cmp	r3, #3
 800b740:	d10f      	bne.n	800b762 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d009      	beq.n	800b762 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b762:	2180      	movs	r1, #128	; 0x80
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f004 fc3b 	bl	800ffe0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f001 f8e1 	bl	800c932 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d03a      	beq.n	800b7f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f7ff fe42 	bl	800b404 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b788:	e032      	b.n	800b7f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b78a:	7afb      	ldrb	r3, [r7, #11]
 800b78c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b790:	b2db      	uxtb	r3, r3
 800b792:	4619      	mov	r1, r3
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f000 f97f 	bl	800ba98 <USBD_CoreFindEP>
 800b79a:	4603      	mov	r3, r0
 800b79c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b79e:	7dfb      	ldrb	r3, [r7, #23]
 800b7a0:	2bff      	cmp	r3, #255	; 0xff
 800b7a2:	d025      	beq.n	800b7f0 <USBD_LL_DataInStage+0x15a>
 800b7a4:	7dfb      	ldrb	r3, [r7, #23]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d122      	bne.n	800b7f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d11c      	bne.n	800b7f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b7b6:	7dfa      	ldrb	r2, [r7, #23]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	32ae      	adds	r2, #174	; 0xae
 800b7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d014      	beq.n	800b7f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b7c6:	7dfa      	ldrb	r2, [r7, #23]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b7ce:	7dfa      	ldrb	r2, [r7, #23]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	32ae      	adds	r2, #174	; 0xae
 800b7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	7afa      	ldrb	r2, [r7, #11]
 800b7dc:	4611      	mov	r1, r2
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	4798      	blx	r3
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b7e6:	7dbb      	ldrb	r3, [r7, #22]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b7ec:	7dbb      	ldrb	r3, [r7, #22]
 800b7ee:	e000      	b.n	800b7f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3718      	adds	r7, #24
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b084      	sub	sp, #16
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b802:	2300      	movs	r3, #0
 800b804:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2201      	movs	r2, #1
 800b80a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b832:	2b00      	cmp	r3, #0
 800b834:	d014      	beq.n	800b860 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00e      	beq.n	800b860 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	6852      	ldr	r2, [r2, #4]
 800b84e:	b2d2      	uxtb	r2, r2
 800b850:	4611      	mov	r1, r2
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	4798      	blx	r3
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b85c:	2303      	movs	r3, #3
 800b85e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b860:	2340      	movs	r3, #64	; 0x40
 800b862:	2200      	movs	r2, #0
 800b864:	2100      	movs	r1, #0
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f004 fb75 	bl	800ff56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2240      	movs	r2, #64	; 0x40
 800b878:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b87c:	2340      	movs	r3, #64	; 0x40
 800b87e:	2200      	movs	r2, #0
 800b880:	2180      	movs	r1, #128	; 0x80
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f004 fb67 	bl	800ff56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2240      	movs	r2, #64	; 0x40
 800b892:	621a      	str	r2, [r3, #32]

  return ret;
 800b894:	7bfb      	ldrb	r3, [r7, #15]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b89e:	b480      	push	{r7}
 800b8a0:	b083      	sub	sp, #12
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	78fa      	ldrb	r2, [r7, #3]
 800b8ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	370c      	adds	r7, #12
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b083      	sub	sp, #12
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2204      	movs	r2, #4
 800b8d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	b083      	sub	sp, #12
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	2b04      	cmp	r3, #4
 800b8fc:	d106      	bne.n	800b90c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b904:	b2da      	uxtb	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	370c      	adds	r7, #12
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr

0800b91a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b082      	sub	sp, #8
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d110      	bne.n	800b950 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00b      	beq.n	800b950 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b93e:	69db      	ldr	r3, [r3, #28]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d005      	beq.n	800b950 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b94a:	69db      	ldr	r3, [r3, #28]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b082      	sub	sp, #8
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	460b      	mov	r3, r1
 800b964:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	32ae      	adds	r2, #174	; 0xae
 800b970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d101      	bne.n	800b97c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b978:	2303      	movs	r3, #3
 800b97a:	e01c      	b.n	800b9b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b03      	cmp	r3, #3
 800b986:	d115      	bne.n	800b9b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	32ae      	adds	r2, #174	; 0xae
 800b992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b996:	6a1b      	ldr	r3, [r3, #32]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00b      	beq.n	800b9b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	32ae      	adds	r2, #174	; 0xae
 800b9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9aa:	6a1b      	ldr	r3, [r3, #32]
 800b9ac:	78fa      	ldrb	r2, [r7, #3]
 800b9ae:	4611      	mov	r1, r2
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b082      	sub	sp, #8
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	32ae      	adds	r2, #174	; 0xae
 800b9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d101      	bne.n	800b9e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b9dc:	2303      	movs	r3, #3
 800b9de:	e01c      	b.n	800ba1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d115      	bne.n	800ba18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	32ae      	adds	r2, #174	; 0xae
 800b9f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00b      	beq.n	800ba18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	32ae      	adds	r2, #174	; 0xae
 800ba0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	78fa      	ldrb	r2, [r7, #3]
 800ba12:	4611      	mov	r1, r2
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b083      	sub	sp, #12
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ba40:	2300      	movs	r3, #0
 800ba42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00e      	beq.n	800ba74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	6852      	ldr	r2, [r2, #4]
 800ba62:	b2d2      	uxtb	r2, r2
 800ba64:	4611      	mov	r1, r2
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	4798      	blx	r3
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ba70:	2303      	movs	r3, #3
 800ba72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b083      	sub	sp, #12
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
 800ba86:	460b      	mov	r3, r1
 800ba88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	460b      	mov	r3, r1
 800baa2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800baa4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	370c      	adds	r7, #12
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b086      	sub	sp, #24
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	460b      	mov	r3, r1
 800babc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bac6:	2300      	movs	r3, #0
 800bac8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	885b      	ldrh	r3, [r3, #2]
 800bace:	b29a      	uxth	r2, r3
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d920      	bls.n	800bb1c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	b29b      	uxth	r3, r3
 800bae0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bae2:	e013      	b.n	800bb0c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bae4:	f107 030a 	add.w	r3, r7, #10
 800bae8:	4619      	mov	r1, r3
 800baea:	6978      	ldr	r0, [r7, #20]
 800baec:	f000 f81b 	bl	800bb26 <USBD_GetNextDesc>
 800baf0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	785b      	ldrb	r3, [r3, #1]
 800baf6:	2b05      	cmp	r3, #5
 800baf8:	d108      	bne.n	800bb0c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	789b      	ldrb	r3, [r3, #2]
 800bb02:	78fa      	ldrb	r2, [r7, #3]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d008      	beq.n	800bb1a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	885b      	ldrh	r3, [r3, #2]
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	897b      	ldrh	r3, [r7, #10]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d8e5      	bhi.n	800bae4 <USBD_GetEpDesc+0x32>
 800bb18:	e000      	b.n	800bb1c <USBD_GetEpDesc+0x6a>
          break;
 800bb1a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bb1c:	693b      	ldr	r3, [r7, #16]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b085      	sub	sp, #20
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	881a      	ldrh	r2, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	4413      	add	r3, r2
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4413      	add	r3, r2
 800bb50:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb52:	68fb      	ldr	r3, [r7, #12]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3714      	adds	r7, #20
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b087      	sub	sp, #28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	3301      	adds	r3, #1
 800bb76:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb7e:	8a3b      	ldrh	r3, [r7, #16]
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	b21a      	sxth	r2, r3
 800bb84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	b21b      	sxth	r3, r3
 800bb8c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bb8e:	89fb      	ldrh	r3, [r7, #14]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	371c      	adds	r7, #28
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbb2:	2b40      	cmp	r3, #64	; 0x40
 800bbb4:	d005      	beq.n	800bbc2 <USBD_StdDevReq+0x26>
 800bbb6:	2b40      	cmp	r3, #64	; 0x40
 800bbb8:	d857      	bhi.n	800bc6a <USBD_StdDevReq+0xce>
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00f      	beq.n	800bbde <USBD_StdDevReq+0x42>
 800bbbe:	2b20      	cmp	r3, #32
 800bbc0:	d153      	bne.n	800bc6a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	32ae      	adds	r2, #174	; 0xae
 800bbcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	6839      	ldr	r1, [r7, #0]
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	4798      	blx	r3
 800bbd8:	4603      	mov	r3, r0
 800bbda:	73fb      	strb	r3, [r7, #15]
      break;
 800bbdc:	e04a      	b.n	800bc74 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	785b      	ldrb	r3, [r3, #1]
 800bbe2:	2b09      	cmp	r3, #9
 800bbe4:	d83b      	bhi.n	800bc5e <USBD_StdDevReq+0xc2>
 800bbe6:	a201      	add	r2, pc, #4	; (adr r2, 800bbec <USBD_StdDevReq+0x50>)
 800bbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbec:	0800bc41 	.word	0x0800bc41
 800bbf0:	0800bc55 	.word	0x0800bc55
 800bbf4:	0800bc5f 	.word	0x0800bc5f
 800bbf8:	0800bc4b 	.word	0x0800bc4b
 800bbfc:	0800bc5f 	.word	0x0800bc5f
 800bc00:	0800bc1f 	.word	0x0800bc1f
 800bc04:	0800bc15 	.word	0x0800bc15
 800bc08:	0800bc5f 	.word	0x0800bc5f
 800bc0c:	0800bc37 	.word	0x0800bc37
 800bc10:	0800bc29 	.word	0x0800bc29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fa3c 	bl	800c094 <USBD_GetDescriptor>
          break;
 800bc1c:	e024      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fbcb 	bl	800c3bc <USBD_SetAddress>
          break;
 800bc26:	e01f      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fc0a 	bl	800c444 <USBD_SetConfig>
 800bc30:	4603      	mov	r3, r0
 800bc32:	73fb      	strb	r3, [r7, #15]
          break;
 800bc34:	e018      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc36:	6839      	ldr	r1, [r7, #0]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 fcad 	bl	800c598 <USBD_GetConfig>
          break;
 800bc3e:	e013      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fcde 	bl	800c604 <USBD_GetStatus>
          break;
 800bc48:	e00e      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fd0d 	bl	800c66c <USBD_SetFeature>
          break;
 800bc52:	e009      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fd31 	bl	800c6be <USBD_ClrFeature>
          break;
 800bc5c:	e004      	b.n	800bc68 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fd88 	bl	800c776 <USBD_CtlError>
          break;
 800bc66:	bf00      	nop
      }
      break;
 800bc68:	e004      	b.n	800bc74 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bc6a:	6839      	ldr	r1, [r7, #0]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 fd82 	bl	800c776 <USBD_CtlError>
      break;
 800bc72:	bf00      	nop
  }

  return ret;
 800bc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop

0800bc80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc96:	2b40      	cmp	r3, #64	; 0x40
 800bc98:	d005      	beq.n	800bca6 <USBD_StdItfReq+0x26>
 800bc9a:	2b40      	cmp	r3, #64	; 0x40
 800bc9c:	d852      	bhi.n	800bd44 <USBD_StdItfReq+0xc4>
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d001      	beq.n	800bca6 <USBD_StdItfReq+0x26>
 800bca2:	2b20      	cmp	r3, #32
 800bca4:	d14e      	bne.n	800bd44 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d840      	bhi.n	800bd36 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	889b      	ldrh	r3, [r3, #4]
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d836      	bhi.n	800bd2c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	889b      	ldrh	r3, [r3, #4]
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f7ff fed9 	bl	800ba7e <USBD_CoreFindIF>
 800bccc:	4603      	mov	r3, r0
 800bcce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	2bff      	cmp	r3, #255	; 0xff
 800bcd4:	d01d      	beq.n	800bd12 <USBD_StdItfReq+0x92>
 800bcd6:	7bbb      	ldrb	r3, [r7, #14]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d11a      	bne.n	800bd12 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bcdc:	7bba      	ldrb	r2, [r7, #14]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	32ae      	adds	r2, #174	; 0xae
 800bce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00f      	beq.n	800bd0c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bcec:	7bba      	ldrb	r2, [r7, #14]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bcf4:	7bba      	ldrb	r2, [r7, #14]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	32ae      	adds	r2, #174	; 0xae
 800bcfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	4798      	blx	r3
 800bd06:	4603      	mov	r3, r0
 800bd08:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd0a:	e004      	b.n	800bd16 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bd0c:	2303      	movs	r3, #3
 800bd0e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd10:	e001      	b.n	800bd16 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bd12:	2303      	movs	r3, #3
 800bd14:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	88db      	ldrh	r3, [r3, #6]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d110      	bne.n	800bd40 <USBD_StdItfReq+0xc0>
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10d      	bne.n	800bd40 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fdf1 	bl	800c90c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bd2a:	e009      	b.n	800bd40 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bd2c:	6839      	ldr	r1, [r7, #0]
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fd21 	bl	800c776 <USBD_CtlError>
          break;
 800bd34:	e004      	b.n	800bd40 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 fd1c 	bl	800c776 <USBD_CtlError>
          break;
 800bd3e:	e000      	b.n	800bd42 <USBD_StdItfReq+0xc2>
          break;
 800bd40:	bf00      	nop
      }
      break;
 800bd42:	e004      	b.n	800bd4e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bd44:	6839      	ldr	r1, [r7, #0]
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fd15 	bl	800c776 <USBD_CtlError>
      break;
 800bd4c:	bf00      	nop
  }

  return ret;
 800bd4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	889b      	ldrh	r3, [r3, #4]
 800bd6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd74:	2b40      	cmp	r3, #64	; 0x40
 800bd76:	d007      	beq.n	800bd88 <USBD_StdEPReq+0x30>
 800bd78:	2b40      	cmp	r3, #64	; 0x40
 800bd7a:	f200 817f 	bhi.w	800c07c <USBD_StdEPReq+0x324>
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d02a      	beq.n	800bdd8 <USBD_StdEPReq+0x80>
 800bd82:	2b20      	cmp	r3, #32
 800bd84:	f040 817a 	bne.w	800c07c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd88:	7bbb      	ldrb	r3, [r7, #14]
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f7ff fe83 	bl	800ba98 <USBD_CoreFindEP>
 800bd92:	4603      	mov	r3, r0
 800bd94:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd96:	7b7b      	ldrb	r3, [r7, #13]
 800bd98:	2bff      	cmp	r3, #255	; 0xff
 800bd9a:	f000 8174 	beq.w	800c086 <USBD_StdEPReq+0x32e>
 800bd9e:	7b7b      	ldrb	r3, [r7, #13]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f040 8170 	bne.w	800c086 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bda6:	7b7a      	ldrb	r2, [r7, #13]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bdae:	7b7a      	ldrb	r2, [r7, #13]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	32ae      	adds	r2, #174	; 0xae
 800bdb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f000 8163 	beq.w	800c086 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bdc0:	7b7a      	ldrb	r2, [r7, #13]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	32ae      	adds	r2, #174	; 0xae
 800bdc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	6839      	ldr	r1, [r7, #0]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	4798      	blx	r3
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bdd6:	e156      	b.n	800c086 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	785b      	ldrb	r3, [r3, #1]
 800bddc:	2b03      	cmp	r3, #3
 800bdde:	d008      	beq.n	800bdf2 <USBD_StdEPReq+0x9a>
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	f300 8145 	bgt.w	800c070 <USBD_StdEPReq+0x318>
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	f000 809b 	beq.w	800bf22 <USBD_StdEPReq+0x1ca>
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d03c      	beq.n	800be6a <USBD_StdEPReq+0x112>
 800bdf0:	e13e      	b.n	800c070 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d002      	beq.n	800be04 <USBD_StdEPReq+0xac>
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d016      	beq.n	800be30 <USBD_StdEPReq+0xd8>
 800be02:	e02c      	b.n	800be5e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be04:	7bbb      	ldrb	r3, [r7, #14]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00d      	beq.n	800be26 <USBD_StdEPReq+0xce>
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
 800be0c:	2b80      	cmp	r3, #128	; 0x80
 800be0e:	d00a      	beq.n	800be26 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be10:	7bbb      	ldrb	r3, [r7, #14]
 800be12:	4619      	mov	r1, r3
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f004 f8e3 	bl	800ffe0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be1a:	2180      	movs	r1, #128	; 0x80
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f004 f8df 	bl	800ffe0 <USBD_LL_StallEP>
 800be22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be24:	e020      	b.n	800be68 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fca4 	bl	800c776 <USBD_CtlError>
              break;
 800be2e:	e01b      	b.n	800be68 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	885b      	ldrh	r3, [r3, #2]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10e      	bne.n	800be56 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800be38:	7bbb      	ldrb	r3, [r7, #14]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00b      	beq.n	800be56 <USBD_StdEPReq+0xfe>
 800be3e:	7bbb      	ldrb	r3, [r7, #14]
 800be40:	2b80      	cmp	r3, #128	; 0x80
 800be42:	d008      	beq.n	800be56 <USBD_StdEPReq+0xfe>
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	88db      	ldrh	r3, [r3, #6]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d104      	bne.n	800be56 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800be4c:	7bbb      	ldrb	r3, [r7, #14]
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f004 f8c5 	bl	800ffe0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fd58 	bl	800c90c <USBD_CtlSendStatus>

              break;
 800be5c:	e004      	b.n	800be68 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 fc88 	bl	800c776 <USBD_CtlError>
              break;
 800be66:	bf00      	nop
          }
          break;
 800be68:	e107      	b.n	800c07a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be70:	b2db      	uxtb	r3, r3
 800be72:	2b02      	cmp	r3, #2
 800be74:	d002      	beq.n	800be7c <USBD_StdEPReq+0x124>
 800be76:	2b03      	cmp	r3, #3
 800be78:	d016      	beq.n	800bea8 <USBD_StdEPReq+0x150>
 800be7a:	e04b      	b.n	800bf14 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be7c:	7bbb      	ldrb	r3, [r7, #14]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00d      	beq.n	800be9e <USBD_StdEPReq+0x146>
 800be82:	7bbb      	ldrb	r3, [r7, #14]
 800be84:	2b80      	cmp	r3, #128	; 0x80
 800be86:	d00a      	beq.n	800be9e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be88:	7bbb      	ldrb	r3, [r7, #14]
 800be8a:	4619      	mov	r1, r3
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f004 f8a7 	bl	800ffe0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be92:	2180      	movs	r1, #128	; 0x80
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f004 f8a3 	bl	800ffe0 <USBD_LL_StallEP>
 800be9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be9c:	e040      	b.n	800bf20 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fc68 	bl	800c776 <USBD_CtlError>
              break;
 800bea6:	e03b      	b.n	800bf20 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	885b      	ldrh	r3, [r3, #2]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d136      	bne.n	800bf1e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800beb0:	7bbb      	ldrb	r3, [r7, #14]
 800beb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d004      	beq.n	800bec4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800beba:	7bbb      	ldrb	r3, [r7, #14]
 800bebc:	4619      	mov	r1, r3
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f004 f8ad 	bl	801001e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fd21 	bl	800c90c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800beca:	7bbb      	ldrb	r3, [r7, #14]
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7ff fde2 	bl	800ba98 <USBD_CoreFindEP>
 800bed4:	4603      	mov	r3, r0
 800bed6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bed8:	7b7b      	ldrb	r3, [r7, #13]
 800beda:	2bff      	cmp	r3, #255	; 0xff
 800bedc:	d01f      	beq.n	800bf1e <USBD_StdEPReq+0x1c6>
 800bede:	7b7b      	ldrb	r3, [r7, #13]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d11c      	bne.n	800bf1e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bee4:	7b7a      	ldrb	r2, [r7, #13]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800beec:	7b7a      	ldrb	r2, [r7, #13]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	32ae      	adds	r2, #174	; 0xae
 800bef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d010      	beq.n	800bf1e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800befc:	7b7a      	ldrb	r2, [r7, #13]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	32ae      	adds	r2, #174	; 0xae
 800bf02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	4798      	blx	r3
 800bf0e:	4603      	mov	r3, r0
 800bf10:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bf12:	e004      	b.n	800bf1e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 fc2d 	bl	800c776 <USBD_CtlError>
              break;
 800bf1c:	e000      	b.n	800bf20 <USBD_StdEPReq+0x1c8>
              break;
 800bf1e:	bf00      	nop
          }
          break;
 800bf20:	e0ab      	b.n	800c07a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	d002      	beq.n	800bf34 <USBD_StdEPReq+0x1dc>
 800bf2e:	2b03      	cmp	r3, #3
 800bf30:	d032      	beq.n	800bf98 <USBD_StdEPReq+0x240>
 800bf32:	e097      	b.n	800c064 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf34:	7bbb      	ldrb	r3, [r7, #14]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d007      	beq.n	800bf4a <USBD_StdEPReq+0x1f2>
 800bf3a:	7bbb      	ldrb	r3, [r7, #14]
 800bf3c:	2b80      	cmp	r3, #128	; 0x80
 800bf3e:	d004      	beq.n	800bf4a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fc17 	bl	800c776 <USBD_CtlError>
                break;
 800bf48:	e091      	b.n	800c06e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	da0b      	bge.n	800bf6a <USBD_StdEPReq+0x212>
 800bf52:	7bbb      	ldrb	r3, [r7, #14]
 800bf54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf58:	4613      	mov	r3, r2
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	3310      	adds	r3, #16
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	4413      	add	r3, r2
 800bf66:	3304      	adds	r3, #4
 800bf68:	e00b      	b.n	800bf82 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf6a:	7bbb      	ldrb	r3, [r7, #14]
 800bf6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf70:	4613      	mov	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4413      	add	r3, r2
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	4413      	add	r3, r2
 800bf80:	3304      	adds	r3, #4
 800bf82:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2200      	movs	r2, #0
 800bf88:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	4619      	mov	r1, r3
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fc61 	bl	800c858 <USBD_CtlSendData>
              break;
 800bf96:	e06a      	b.n	800c06e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bf98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	da11      	bge.n	800bfc4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bfa0:	7bbb      	ldrb	r3, [r7, #14]
 800bfa2:	f003 020f 	and.w	r2, r3, #15
 800bfa6:	6879      	ldr	r1, [r7, #4]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	4413      	add	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	440b      	add	r3, r1
 800bfb2:	3324      	adds	r3, #36	; 0x24
 800bfb4:	881b      	ldrh	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d117      	bne.n	800bfea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bfba:	6839      	ldr	r1, [r7, #0]
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 fbda 	bl	800c776 <USBD_CtlError>
                  break;
 800bfc2:	e054      	b.n	800c06e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bfc4:	7bbb      	ldrb	r3, [r7, #14]
 800bfc6:	f003 020f 	and.w	r2, r3, #15
 800bfca:	6879      	ldr	r1, [r7, #4]
 800bfcc:	4613      	mov	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4413      	add	r3, r2
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	440b      	add	r3, r1
 800bfd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d104      	bne.n	800bfea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fbc7 	bl	800c776 <USBD_CtlError>
                  break;
 800bfe8:	e041      	b.n	800c06e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	da0b      	bge.n	800c00a <USBD_StdEPReq+0x2b2>
 800bff2:	7bbb      	ldrb	r3, [r7, #14]
 800bff4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bff8:	4613      	mov	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	3310      	adds	r3, #16
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	4413      	add	r3, r2
 800c006:	3304      	adds	r3, #4
 800c008:	e00b      	b.n	800c022 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c00a:	7bbb      	ldrb	r3, [r7, #14]
 800c00c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c010:	4613      	mov	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	4413      	add	r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	4413      	add	r3, r2
 800c020:	3304      	adds	r3, #4
 800c022:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c024:	7bbb      	ldrb	r3, [r7, #14]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d002      	beq.n	800c030 <USBD_StdEPReq+0x2d8>
 800c02a:	7bbb      	ldrb	r3, [r7, #14]
 800c02c:	2b80      	cmp	r3, #128	; 0x80
 800c02e:	d103      	bne.n	800c038 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	2200      	movs	r2, #0
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	e00e      	b.n	800c056 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	4619      	mov	r1, r3
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f004 f80d 	bl	801005c <USBD_LL_IsStallEP>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d003      	beq.n	800c050 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	2201      	movs	r2, #1
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	e002      	b.n	800c056 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	2202      	movs	r2, #2
 800c05a:	4619      	mov	r1, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fbfb 	bl	800c858 <USBD_CtlSendData>
              break;
 800c062:	e004      	b.n	800c06e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 fb85 	bl	800c776 <USBD_CtlError>
              break;
 800c06c:	bf00      	nop
          }
          break;
 800c06e:	e004      	b.n	800c07a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fb7f 	bl	800c776 <USBD_CtlError>
          break;
 800c078:	bf00      	nop
      }
      break;
 800c07a:	e005      	b.n	800c088 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fb79 	bl	800c776 <USBD_CtlError>
      break;
 800c084:	e000      	b.n	800c088 <USBD_StdEPReq+0x330>
      break;
 800c086:	bf00      	nop
  }

  return ret;
 800c088:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
	...

0800c094 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	885b      	ldrh	r3, [r3, #2]
 800c0ae:	0a1b      	lsrs	r3, r3, #8
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	2b0e      	cmp	r3, #14
 800c0b6:	f200 8152 	bhi.w	800c35e <USBD_GetDescriptor+0x2ca>
 800c0ba:	a201      	add	r2, pc, #4	; (adr r2, 800c0c0 <USBD_GetDescriptor+0x2c>)
 800c0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c0:	0800c131 	.word	0x0800c131
 800c0c4:	0800c149 	.word	0x0800c149
 800c0c8:	0800c189 	.word	0x0800c189
 800c0cc:	0800c35f 	.word	0x0800c35f
 800c0d0:	0800c35f 	.word	0x0800c35f
 800c0d4:	0800c2ff 	.word	0x0800c2ff
 800c0d8:	0800c32b 	.word	0x0800c32b
 800c0dc:	0800c35f 	.word	0x0800c35f
 800c0e0:	0800c35f 	.word	0x0800c35f
 800c0e4:	0800c35f 	.word	0x0800c35f
 800c0e8:	0800c35f 	.word	0x0800c35f
 800c0ec:	0800c35f 	.word	0x0800c35f
 800c0f0:	0800c35f 	.word	0x0800c35f
 800c0f4:	0800c35f 	.word	0x0800c35f
 800c0f8:	0800c0fd 	.word	0x0800c0fd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c102:	69db      	ldr	r3, [r3, #28]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00b      	beq.n	800c120 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c10e:	69db      	ldr	r3, [r3, #28]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	7c12      	ldrb	r2, [r2, #16]
 800c114:	f107 0108 	add.w	r1, r7, #8
 800c118:	4610      	mov	r0, r2
 800c11a:	4798      	blx	r3
 800c11c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c11e:	e126      	b.n	800c36e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 fb27 	bl	800c776 <USBD_CtlError>
        err++;
 800c128:	7afb      	ldrb	r3, [r7, #11]
 800c12a:	3301      	adds	r3, #1
 800c12c:	72fb      	strb	r3, [r7, #11]
      break;
 800c12e:	e11e      	b.n	800c36e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	7c12      	ldrb	r2, [r2, #16]
 800c13c:	f107 0108 	add.w	r1, r7, #8
 800c140:	4610      	mov	r0, r2
 800c142:	4798      	blx	r3
 800c144:	60f8      	str	r0, [r7, #12]
      break;
 800c146:	e112      	b.n	800c36e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	7c1b      	ldrb	r3, [r3, #16]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10d      	bne.n	800c16c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c158:	f107 0208 	add.w	r2, r7, #8
 800c15c:	4610      	mov	r0, r2
 800c15e:	4798      	blx	r3
 800c160:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3301      	adds	r3, #1
 800c166:	2202      	movs	r2, #2
 800c168:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c16a:	e100      	b.n	800c36e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c174:	f107 0208 	add.w	r2, r7, #8
 800c178:	4610      	mov	r0, r2
 800c17a:	4798      	blx	r3
 800c17c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	3301      	adds	r3, #1
 800c182:	2202      	movs	r2, #2
 800c184:	701a      	strb	r2, [r3, #0]
      break;
 800c186:	e0f2      	b.n	800c36e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	885b      	ldrh	r3, [r3, #2]
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	2b05      	cmp	r3, #5
 800c190:	f200 80ac 	bhi.w	800c2ec <USBD_GetDescriptor+0x258>
 800c194:	a201      	add	r2, pc, #4	; (adr r2, 800c19c <USBD_GetDescriptor+0x108>)
 800c196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19a:	bf00      	nop
 800c19c:	0800c1b5 	.word	0x0800c1b5
 800c1a0:	0800c1e9 	.word	0x0800c1e9
 800c1a4:	0800c21d 	.word	0x0800c21d
 800c1a8:	0800c251 	.word	0x0800c251
 800c1ac:	0800c285 	.word	0x0800c285
 800c1b0:	0800c2b9 	.word	0x0800c2b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00b      	beq.n	800c1d8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	7c12      	ldrb	r2, [r2, #16]
 800c1cc:	f107 0108 	add.w	r1, r7, #8
 800c1d0:	4610      	mov	r0, r2
 800c1d2:	4798      	blx	r3
 800c1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1d6:	e091      	b.n	800c2fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 facb 	bl	800c776 <USBD_CtlError>
            err++;
 800c1e0:	7afb      	ldrb	r3, [r7, #11]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c1e6:	e089      	b.n	800c2fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00b      	beq.n	800c20c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	7c12      	ldrb	r2, [r2, #16]
 800c200:	f107 0108 	add.w	r1, r7, #8
 800c204:	4610      	mov	r0, r2
 800c206:	4798      	blx	r3
 800c208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c20a:	e077      	b.n	800c2fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c20c:	6839      	ldr	r1, [r7, #0]
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 fab1 	bl	800c776 <USBD_CtlError>
            err++;
 800c214:	7afb      	ldrb	r3, [r7, #11]
 800c216:	3301      	adds	r3, #1
 800c218:	72fb      	strb	r3, [r7, #11]
          break;
 800c21a:	e06f      	b.n	800c2fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00b      	beq.n	800c240 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	7c12      	ldrb	r2, [r2, #16]
 800c234:	f107 0108 	add.w	r1, r7, #8
 800c238:	4610      	mov	r0, r2
 800c23a:	4798      	blx	r3
 800c23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c23e:	e05d      	b.n	800c2fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c240:	6839      	ldr	r1, [r7, #0]
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fa97 	bl	800c776 <USBD_CtlError>
            err++;
 800c248:	7afb      	ldrb	r3, [r7, #11]
 800c24a:	3301      	adds	r3, #1
 800c24c:	72fb      	strb	r3, [r7, #11]
          break;
 800c24e:	e055      	b.n	800c2fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00b      	beq.n	800c274 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	7c12      	ldrb	r2, [r2, #16]
 800c268:	f107 0108 	add.w	r1, r7, #8
 800c26c:	4610      	mov	r0, r2
 800c26e:	4798      	blx	r3
 800c270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c272:	e043      	b.n	800c2fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c274:	6839      	ldr	r1, [r7, #0]
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fa7d 	bl	800c776 <USBD_CtlError>
            err++;
 800c27c:	7afb      	ldrb	r3, [r7, #11]
 800c27e:	3301      	adds	r3, #1
 800c280:	72fb      	strb	r3, [r7, #11]
          break;
 800c282:	e03b      	b.n	800c2fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c28a:	695b      	ldr	r3, [r3, #20]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00b      	beq.n	800c2a8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c296:	695b      	ldr	r3, [r3, #20]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	7c12      	ldrb	r2, [r2, #16]
 800c29c:	f107 0108 	add.w	r1, r7, #8
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	4798      	blx	r3
 800c2a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2a6:	e029      	b.n	800c2fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 fa63 	bl	800c776 <USBD_CtlError>
            err++;
 800c2b0:	7afb      	ldrb	r3, [r7, #11]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2b6:	e021      	b.n	800c2fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00b      	beq.n	800c2dc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ca:	699b      	ldr	r3, [r3, #24]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	7c12      	ldrb	r2, [r2, #16]
 800c2d0:	f107 0108 	add.w	r1, r7, #8
 800c2d4:	4610      	mov	r0, r2
 800c2d6:	4798      	blx	r3
 800c2d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2da:	e00f      	b.n	800c2fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fa49 	bl	800c776 <USBD_CtlError>
            err++;
 800c2e4:	7afb      	ldrb	r3, [r7, #11]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2ea:	e007      	b.n	800c2fc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fa41 	bl	800c776 <USBD_CtlError>
          err++;
 800c2f4:	7afb      	ldrb	r3, [r7, #11]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c2fa:	bf00      	nop
      }
      break;
 800c2fc:	e037      	b.n	800c36e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	7c1b      	ldrb	r3, [r3, #16]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d109      	bne.n	800c31a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c30e:	f107 0208 	add.w	r2, r7, #8
 800c312:	4610      	mov	r0, r2
 800c314:	4798      	blx	r3
 800c316:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c318:	e029      	b.n	800c36e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c31a:	6839      	ldr	r1, [r7, #0]
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fa2a 	bl	800c776 <USBD_CtlError>
        err++;
 800c322:	7afb      	ldrb	r3, [r7, #11]
 800c324:	3301      	adds	r3, #1
 800c326:	72fb      	strb	r3, [r7, #11]
      break;
 800c328:	e021      	b.n	800c36e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	7c1b      	ldrb	r3, [r3, #16]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10d      	bne.n	800c34e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c33a:	f107 0208 	add.w	r2, r7, #8
 800c33e:	4610      	mov	r0, r2
 800c340:	4798      	blx	r3
 800c342:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	3301      	adds	r3, #1
 800c348:	2207      	movs	r2, #7
 800c34a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c34c:	e00f      	b.n	800c36e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fa10 	bl	800c776 <USBD_CtlError>
        err++;
 800c356:	7afb      	ldrb	r3, [r7, #11]
 800c358:	3301      	adds	r3, #1
 800c35a:	72fb      	strb	r3, [r7, #11]
      break;
 800c35c:	e007      	b.n	800c36e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c35e:	6839      	ldr	r1, [r7, #0]
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fa08 	bl	800c776 <USBD_CtlError>
      err++;
 800c366:	7afb      	ldrb	r3, [r7, #11]
 800c368:	3301      	adds	r3, #1
 800c36a:	72fb      	strb	r3, [r7, #11]
      break;
 800c36c:	bf00      	nop
  }

  if (err != 0U)
 800c36e:	7afb      	ldrb	r3, [r7, #11]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d11e      	bne.n	800c3b2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	88db      	ldrh	r3, [r3, #6]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d016      	beq.n	800c3aa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c37c:	893b      	ldrh	r3, [r7, #8]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00e      	beq.n	800c3a0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	88da      	ldrh	r2, [r3, #6]
 800c386:	893b      	ldrh	r3, [r7, #8]
 800c388:	4293      	cmp	r3, r2
 800c38a:	bf28      	it	cs
 800c38c:	4613      	movcs	r3, r2
 800c38e:	b29b      	uxth	r3, r3
 800c390:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c392:	893b      	ldrh	r3, [r7, #8]
 800c394:	461a      	mov	r2, r3
 800c396:	68f9      	ldr	r1, [r7, #12]
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fa5d 	bl	800c858 <USBD_CtlSendData>
 800c39e:	e009      	b.n	800c3b4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f9e7 	bl	800c776 <USBD_CtlError>
 800c3a8:	e004      	b.n	800c3b4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 faae 	bl	800c90c <USBD_CtlSendStatus>
 800c3b0:	e000      	b.n	800c3b4 <USBD_GetDescriptor+0x320>
    return;
 800c3b2:	bf00      	nop
  }
}
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop

0800c3bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	889b      	ldrh	r3, [r3, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d131      	bne.n	800c432 <USBD_SetAddress+0x76>
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	88db      	ldrh	r3, [r3, #6]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d12d      	bne.n	800c432 <USBD_SetAddress+0x76>
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	885b      	ldrh	r3, [r3, #2]
 800c3da:	2b7f      	cmp	r3, #127	; 0x7f
 800c3dc:	d829      	bhi.n	800c432 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	885b      	ldrh	r3, [r3, #2]
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	d104      	bne.n	800c400 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c3f6:	6839      	ldr	r1, [r7, #0]
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 f9bc 	bl	800c776 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3fe:	e01d      	b.n	800c43c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	7bfa      	ldrb	r2, [r7, #15]
 800c404:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c408:	7bfb      	ldrb	r3, [r7, #15]
 800c40a:	4619      	mov	r1, r3
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f003 fe51 	bl	80100b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fa7a 	bl	800c90c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c418:	7bfb      	ldrb	r3, [r7, #15]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d004      	beq.n	800c428 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2202      	movs	r2, #2
 800c422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c426:	e009      	b.n	800c43c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c430:	e004      	b.n	800c43c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c432:	6839      	ldr	r1, [r7, #0]
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 f99e 	bl	800c776 <USBD_CtlError>
  }
}
 800c43a:	bf00      	nop
 800c43c:	bf00      	nop
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	885b      	ldrh	r3, [r3, #2]
 800c456:	b2da      	uxtb	r2, r3
 800c458:	4b4e      	ldr	r3, [pc, #312]	; (800c594 <USBD_SetConfig+0x150>)
 800c45a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c45c:	4b4d      	ldr	r3, [pc, #308]	; (800c594 <USBD_SetConfig+0x150>)
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d905      	bls.n	800c470 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f985 	bl	800c776 <USBD_CtlError>
    return USBD_FAIL;
 800c46c:	2303      	movs	r3, #3
 800c46e:	e08c      	b.n	800c58a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c476:	b2db      	uxtb	r3, r3
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d002      	beq.n	800c482 <USBD_SetConfig+0x3e>
 800c47c:	2b03      	cmp	r3, #3
 800c47e:	d029      	beq.n	800c4d4 <USBD_SetConfig+0x90>
 800c480:	e075      	b.n	800c56e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c482:	4b44      	ldr	r3, [pc, #272]	; (800c594 <USBD_SetConfig+0x150>)
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d020      	beq.n	800c4cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c48a:	4b42      	ldr	r3, [pc, #264]	; (800c594 <USBD_SetConfig+0x150>)
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	461a      	mov	r2, r3
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c494:	4b3f      	ldr	r3, [pc, #252]	; (800c594 <USBD_SetConfig+0x150>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	4619      	mov	r1, r3
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f7fe ffbd 	bl	800b41a <USBD_SetClassConfig>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c4a4:	7bfb      	ldrb	r3, [r7, #15]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d008      	beq.n	800c4bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c4aa:	6839      	ldr	r1, [r7, #0]
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 f962 	bl	800c776 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2202      	movs	r2, #2
 800c4b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c4ba:	e065      	b.n	800c588 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fa25 	bl	800c90c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2203      	movs	r2, #3
 800c4c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c4ca:	e05d      	b.n	800c588 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fa1d 	bl	800c90c <USBD_CtlSendStatus>
      break;
 800c4d2:	e059      	b.n	800c588 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c4d4:	4b2f      	ldr	r3, [pc, #188]	; (800c594 <USBD_SetConfig+0x150>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d112      	bne.n	800c502 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2202      	movs	r2, #2
 800c4e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c4e4:	4b2b      	ldr	r3, [pc, #172]	; (800c594 <USBD_SetConfig+0x150>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4ee:	4b29      	ldr	r3, [pc, #164]	; (800c594 <USBD_SetConfig+0x150>)
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f7fe ffac 	bl	800b452 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fa06 	bl	800c90c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c500:	e042      	b.n	800c588 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c502:	4b24      	ldr	r3, [pc, #144]	; (800c594 <USBD_SetConfig+0x150>)
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d02a      	beq.n	800c566 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	b2db      	uxtb	r3, r3
 800c516:	4619      	mov	r1, r3
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7fe ff9a 	bl	800b452 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c51e:	4b1d      	ldr	r3, [pc, #116]	; (800c594 <USBD_SetConfig+0x150>)
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	461a      	mov	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c528:	4b1a      	ldr	r3, [pc, #104]	; (800c594 <USBD_SetConfig+0x150>)
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	4619      	mov	r1, r3
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f7fe ff73 	bl	800b41a <USBD_SetClassConfig>
 800c534:	4603      	mov	r3, r0
 800c536:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c538:	7bfb      	ldrb	r3, [r7, #15]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00f      	beq.n	800c55e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c53e:	6839      	ldr	r1, [r7, #0]
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 f918 	bl	800c776 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	4619      	mov	r1, r3
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7fe ff7f 	bl	800b452 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2202      	movs	r2, #2
 800c558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c55c:	e014      	b.n	800c588 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 f9d4 	bl	800c90c <USBD_CtlSendStatus>
      break;
 800c564:	e010      	b.n	800c588 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 f9d0 	bl	800c90c <USBD_CtlSendStatus>
      break;
 800c56c:	e00c      	b.n	800c588 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 f900 	bl	800c776 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c576:	4b07      	ldr	r3, [pc, #28]	; (800c594 <USBD_SetConfig+0x150>)
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	4619      	mov	r1, r3
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7fe ff68 	bl	800b452 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c582:	2303      	movs	r3, #3
 800c584:	73fb      	strb	r3, [r7, #15]
      break;
 800c586:	bf00      	nop
  }

  return ret;
 800c588:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	20007ee4 	.word	0x20007ee4

0800c598 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	88db      	ldrh	r3, [r3, #6]
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d004      	beq.n	800c5b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c5aa:	6839      	ldr	r1, [r7, #0]
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 f8e2 	bl	800c776 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c5b2:	e023      	b.n	800c5fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b02      	cmp	r3, #2
 800c5be:	dc02      	bgt.n	800c5c6 <USBD_GetConfig+0x2e>
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	dc03      	bgt.n	800c5cc <USBD_GetConfig+0x34>
 800c5c4:	e015      	b.n	800c5f2 <USBD_GetConfig+0x5a>
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	d00b      	beq.n	800c5e2 <USBD_GetConfig+0x4a>
 800c5ca:	e012      	b.n	800c5f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	3308      	adds	r3, #8
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	4619      	mov	r1, r3
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 f93c 	bl	800c858 <USBD_CtlSendData>
        break;
 800c5e0:	e00c      	b.n	800c5fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 f934 	bl	800c858 <USBD_CtlSendData>
        break;
 800c5f0:	e004      	b.n	800c5fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 f8be 	bl	800c776 <USBD_CtlError>
        break;
 800c5fa:	bf00      	nop
}
 800c5fc:	bf00      	nop
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c614:	b2db      	uxtb	r3, r3
 800c616:	3b01      	subs	r3, #1
 800c618:	2b02      	cmp	r3, #2
 800c61a:	d81e      	bhi.n	800c65a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	88db      	ldrh	r3, [r3, #6]
 800c620:	2b02      	cmp	r3, #2
 800c622:	d004      	beq.n	800c62e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c624:	6839      	ldr	r1, [r7, #0]
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 f8a5 	bl	800c776 <USBD_CtlError>
        break;
 800c62c:	e01a      	b.n	800c664 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d005      	beq.n	800c64a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	f043 0202 	orr.w	r2, r3, #2
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	330c      	adds	r3, #12
 800c64e:	2202      	movs	r2, #2
 800c650:	4619      	mov	r1, r3
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f900 	bl	800c858 <USBD_CtlSendData>
      break;
 800c658:	e004      	b.n	800c664 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f88a 	bl	800c776 <USBD_CtlError>
      break;
 800c662:	bf00      	nop
  }
}
 800c664:	bf00      	nop
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	885b      	ldrh	r3, [r3, #2]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d107      	bne.n	800c68e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2201      	movs	r2, #1
 800c682:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 f940 	bl	800c90c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c68c:	e013      	b.n	800c6b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	885b      	ldrh	r3, [r3, #2]
 800c692:	2b02      	cmp	r3, #2
 800c694:	d10b      	bne.n	800c6ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	889b      	ldrh	r3, [r3, #4]
 800c69a:	0a1b      	lsrs	r3, r3, #8
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f930 	bl	800c90c <USBD_CtlSendStatus>
}
 800c6ac:	e003      	b.n	800c6b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c6ae:	6839      	ldr	r1, [r7, #0]
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 f860 	bl	800c776 <USBD_CtlError>
}
 800c6b6:	bf00      	nop
 800c6b8:	3708      	adds	r7, #8
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b082      	sub	sp, #8
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
 800c6c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	2b02      	cmp	r3, #2
 800c6d4:	d80b      	bhi.n	800c6ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	885b      	ldrh	r3, [r3, #2]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d10c      	bne.n	800c6f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f910 	bl	800c90c <USBD_CtlSendStatus>
      }
      break;
 800c6ec:	e004      	b.n	800c6f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 f840 	bl	800c776 <USBD_CtlError>
      break;
 800c6f6:	e000      	b.n	800c6fa <USBD_ClrFeature+0x3c>
      break;
 800c6f8:	bf00      	nop
  }
}
 800c6fa:	bf00      	nop
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b084      	sub	sp, #16
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	781a      	ldrb	r2, [r3, #0]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	3301      	adds	r3, #1
 800c71c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	781a      	ldrb	r2, [r3, #0]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	3301      	adds	r3, #1
 800c72a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f7ff fa17 	bl	800bb60 <SWAPBYTE>
 800c732:	4603      	mov	r3, r0
 800c734:	461a      	mov	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	3301      	adds	r3, #1
 800c73e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	3301      	adds	r3, #1
 800c744:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	f7ff fa0a 	bl	800bb60 <SWAPBYTE>
 800c74c:	4603      	mov	r3, r0
 800c74e:	461a      	mov	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	3301      	adds	r3, #1
 800c758:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	3301      	adds	r3, #1
 800c75e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f7ff f9fd 	bl	800bb60 <SWAPBYTE>
 800c766:	4603      	mov	r3, r0
 800c768:	461a      	mov	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	80da      	strh	r2, [r3, #6]
}
 800c76e:	bf00      	nop
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b082      	sub	sp, #8
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
 800c77e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c780:	2180      	movs	r1, #128	; 0x80
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f003 fc2c 	bl	800ffe0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c788:	2100      	movs	r1, #0
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f003 fc28 	bl	800ffe0 <USBD_LL_StallEP>
}
 800c790:	bf00      	nop
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d036      	beq.n	800c81c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c7b2:	6938      	ldr	r0, [r7, #16]
 800c7b4:	f000 f836 	bl	800c824 <USBD_GetLen>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	7812      	ldrb	r2, [r2, #0]
 800c7d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c7d2:	7dfb      	ldrb	r3, [r7, #23]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	4413      	add	r3, r2
 800c7de:	2203      	movs	r2, #3
 800c7e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c7e2:	7dfb      	ldrb	r3, [r7, #23]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c7e8:	e013      	b.n	800c812 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c7ea:	7dfb      	ldrb	r3, [r7, #23]
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	693a      	ldr	r2, [r7, #16]
 800c7f2:	7812      	ldrb	r2, [r2, #0]
 800c7f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	613b      	str	r3, [r7, #16]
    idx++;
 800c7fc:	7dfb      	ldrb	r3, [r7, #23]
 800c7fe:	3301      	adds	r3, #1
 800c800:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c802:	7dfb      	ldrb	r3, [r7, #23]
 800c804:	68ba      	ldr	r2, [r7, #8]
 800c806:	4413      	add	r3, r2
 800c808:	2200      	movs	r2, #0
 800c80a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c80c:	7dfb      	ldrb	r3, [r7, #23]
 800c80e:	3301      	adds	r3, #1
 800c810:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d1e7      	bne.n	800c7ea <USBD_GetString+0x52>
 800c81a:	e000      	b.n	800c81e <USBD_GetString+0x86>
    return;
 800c81c:	bf00      	nop
  }
}
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c82c:	2300      	movs	r3, #0
 800c82e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c834:	e005      	b.n	800c842 <USBD_GetLen+0x1e>
  {
    len++;
 800c836:	7bfb      	ldrb	r3, [r7, #15]
 800c838:	3301      	adds	r3, #1
 800c83a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	3301      	adds	r3, #1
 800c840:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1f5      	bne.n	800c836 <USBD_GetLen+0x12>
  }

  return len;
 800c84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3714      	adds	r7, #20
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2202      	movs	r2, #2
 800c868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	2100      	movs	r1, #0
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f003 fc37 	bl	80100f2 <USBD_LL_Transmit>

  return USBD_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b084      	sub	sp, #16
 800c892:	af00      	add	r7, sp, #0
 800c894:	60f8      	str	r0, [r7, #12]
 800c896:	60b9      	str	r1, [r7, #8]
 800c898:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	2100      	movs	r1, #0
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	f003 fc26 	bl	80100f2 <USBD_LL_Transmit>

  return USBD_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2203      	movs	r2, #3
 800c8c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	68ba      	ldr	r2, [r7, #8]
 800c8d8:	2100      	movs	r1, #0
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	f003 fc2a 	bl	8010134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8e0:	2300      	movs	r3, #0
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3710      	adds	r7, #16
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b084      	sub	sp, #16
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	60f8      	str	r0, [r7, #12]
 800c8f2:	60b9      	str	r1, [r7, #8]
 800c8f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f003 fc19 	bl	8010134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c902:	2300      	movs	r3, #0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2204      	movs	r2, #4
 800c918:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c91c:	2300      	movs	r3, #0
 800c91e:	2200      	movs	r2, #0
 800c920:	2100      	movs	r1, #0
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f003 fbe5 	bl	80100f2 <USBD_LL_Transmit>

  return USBD_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b082      	sub	sp, #8
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2205      	movs	r2, #5
 800c93e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c942:	2300      	movs	r3, #0
 800c944:	2200      	movs	r2, #0
 800c946:	2100      	movs	r1, #0
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f003 fbf3 	bl	8010134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c94e:	2300      	movs	r3, #0
}
 800c950:	4618      	mov	r0, r3
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c958:	b480      	push	{r7}
 800c95a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800c95c:	bf00      	nop
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
	...

0800c968 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c96e:	f3ef 8305 	mrs	r3, IPSR
 800c972:	60bb      	str	r3, [r7, #8]
  return(result);
 800c974:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10f      	bne.n	800c99a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c97a:	f3ef 8310 	mrs	r3, PRIMASK
 800c97e:	607b      	str	r3, [r7, #4]
  return(result);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d105      	bne.n	800c992 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c986:	f3ef 8311 	mrs	r3, BASEPRI
 800c98a:	603b      	str	r3, [r7, #0]
  return(result);
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d007      	beq.n	800c9a2 <osKernelInitialize+0x3a>
 800c992:	4b0e      	ldr	r3, [pc, #56]	; (800c9cc <osKernelInitialize+0x64>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2b02      	cmp	r3, #2
 800c998:	d103      	bne.n	800c9a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800c99a:	f06f 0305 	mvn.w	r3, #5
 800c99e:	60fb      	str	r3, [r7, #12]
 800c9a0:	e00c      	b.n	800c9bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c9a2:	4b0a      	ldr	r3, [pc, #40]	; (800c9cc <osKernelInitialize+0x64>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d105      	bne.n	800c9b6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c9aa:	4b08      	ldr	r3, [pc, #32]	; (800c9cc <osKernelInitialize+0x64>)
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60fb      	str	r3, [r7, #12]
 800c9b4:	e002      	b.n	800c9bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800c9b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3714      	adds	r7, #20
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	20007ee8 	.word	0x20007ee8

0800c9d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9d6:	f3ef 8305 	mrs	r3, IPSR
 800c9da:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10f      	bne.n	800ca02 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9e2:	f3ef 8310 	mrs	r3, PRIMASK
 800c9e6:	607b      	str	r3, [r7, #4]
  return(result);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d105      	bne.n	800c9fa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c9ee:	f3ef 8311 	mrs	r3, BASEPRI
 800c9f2:	603b      	str	r3, [r7, #0]
  return(result);
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d007      	beq.n	800ca0a <osKernelStart+0x3a>
 800c9fa:	4b0f      	ldr	r3, [pc, #60]	; (800ca38 <osKernelStart+0x68>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	d103      	bne.n	800ca0a <osKernelStart+0x3a>
    stat = osErrorISR;
 800ca02:	f06f 0305 	mvn.w	r3, #5
 800ca06:	60fb      	str	r3, [r7, #12]
 800ca08:	e010      	b.n	800ca2c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ca0a:	4b0b      	ldr	r3, [pc, #44]	; (800ca38 <osKernelStart+0x68>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d109      	bne.n	800ca26 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ca12:	f7ff ffa1 	bl	800c958 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ca16:	4b08      	ldr	r3, [pc, #32]	; (800ca38 <osKernelStart+0x68>)
 800ca18:	2202      	movs	r2, #2
 800ca1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ca1c:	f001 f94e 	bl	800dcbc <vTaskStartScheduler>
      stat = osOK;
 800ca20:	2300      	movs	r3, #0
 800ca22:	60fb      	str	r3, [r7, #12]
 800ca24:	e002      	b.n	800ca2c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ca26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3710      	adds	r7, #16
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	20007ee8 	.word	0x20007ee8

0800ca3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b090      	sub	sp, #64	; 0x40
 800ca40:	af04      	add	r7, sp, #16
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca4c:	f3ef 8305 	mrs	r3, IPSR
 800ca50:	61fb      	str	r3, [r7, #28]
  return(result);
 800ca52:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f040 808f 	bne.w	800cb78 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ca5e:	61bb      	str	r3, [r7, #24]
  return(result);
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d105      	bne.n	800ca72 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ca66:	f3ef 8311 	mrs	r3, BASEPRI
 800ca6a:	617b      	str	r3, [r7, #20]
  return(result);
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d003      	beq.n	800ca7a <osThreadNew+0x3e>
 800ca72:	4b44      	ldr	r3, [pc, #272]	; (800cb84 <osThreadNew+0x148>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d07e      	beq.n	800cb78 <osThreadNew+0x13c>
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d07b      	beq.n	800cb78 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ca80:	2380      	movs	r3, #128	; 0x80
 800ca82:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ca84:	2318      	movs	r3, #24
 800ca86:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ca8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca90:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d045      	beq.n	800cb24 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <osThreadNew+0x6a>
        name = attr->name;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	699b      	ldr	r3, [r3, #24]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d002      	beq.n	800cab4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	699b      	ldr	r3, [r3, #24]
 800cab2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d008      	beq.n	800cacc <osThreadNew+0x90>
 800caba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabc:	2b38      	cmp	r3, #56	; 0x38
 800cabe:	d805      	bhi.n	800cacc <osThreadNew+0x90>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	f003 0301 	and.w	r3, r3, #1
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d001      	beq.n	800cad0 <osThreadNew+0x94>
        return (NULL);
 800cacc:	2300      	movs	r3, #0
 800cace:	e054      	b.n	800cb7a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	695b      	ldr	r3, [r3, #20]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d003      	beq.n	800cae0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	695b      	ldr	r3, [r3, #20]
 800cadc:	089b      	lsrs	r3, r3, #2
 800cade:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00e      	beq.n	800cb06 <osThreadNew+0xca>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	2b5b      	cmp	r3, #91	; 0x5b
 800caee:	d90a      	bls.n	800cb06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d006      	beq.n	800cb06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	695b      	ldr	r3, [r3, #20]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <osThreadNew+0xca>
        mem = 1;
 800cb00:	2301      	movs	r3, #1
 800cb02:	623b      	str	r3, [r7, #32]
 800cb04:	e010      	b.n	800cb28 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d10c      	bne.n	800cb28 <osThreadNew+0xec>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d108      	bne.n	800cb28 <osThreadNew+0xec>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d104      	bne.n	800cb28 <osThreadNew+0xec>
          mem = 0;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	623b      	str	r3, [r7, #32]
 800cb22:	e001      	b.n	800cb28 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cb28:	6a3b      	ldr	r3, [r7, #32]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d110      	bne.n	800cb50 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cb36:	9202      	str	r2, [sp, #8]
 800cb38:	9301      	str	r3, [sp, #4]
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3c:	9300      	str	r3, [sp, #0]
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	f000 fed9 	bl	800d8fc <xTaskCreateStatic>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	613b      	str	r3, [r7, #16]
 800cb4e:	e013      	b.n	800cb78 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d110      	bne.n	800cb78 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	f107 0310 	add.w	r3, r7, #16
 800cb5e:	9301      	str	r3, [sp, #4]
 800cb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f000 ff2a 	bl	800d9c2 <xTaskCreate>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d001      	beq.n	800cb78 <osThreadNew+0x13c>
          hTask = NULL;
 800cb74:	2300      	movs	r3, #0
 800cb76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cb78:	693b      	ldr	r3, [r7, #16]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3730      	adds	r7, #48	; 0x30
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	20007ee8 	.word	0x20007ee8

0800cb88 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b086      	sub	sp, #24
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb90:	f3ef 8305 	mrs	r3, IPSR
 800cb94:	613b      	str	r3, [r7, #16]
  return(result);
 800cb96:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10f      	bne.n	800cbbc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb9c:	f3ef 8310 	mrs	r3, PRIMASK
 800cba0:	60fb      	str	r3, [r7, #12]
  return(result);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d105      	bne.n	800cbb4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cba8:	f3ef 8311 	mrs	r3, BASEPRI
 800cbac:	60bb      	str	r3, [r7, #8]
  return(result);
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d007      	beq.n	800cbc4 <osDelay+0x3c>
 800cbb4:	4b0a      	ldr	r3, [pc, #40]	; (800cbe0 <osDelay+0x58>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d103      	bne.n	800cbc4 <osDelay+0x3c>
    stat = osErrorISR;
 800cbbc:	f06f 0305 	mvn.w	r3, #5
 800cbc0:	617b      	str	r3, [r7, #20]
 800cbc2:	e007      	b.n	800cbd4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d002      	beq.n	800cbd4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f001 f83e 	bl	800dc50 <vTaskDelay>
    }
  }

  return (stat);
 800cbd4:	697b      	ldr	r3, [r7, #20]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3718      	adds	r7, #24
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	20007ee8 	.word	0x20007ee8

0800cbe4 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f002 f9a3 	bl	800ef38 <pvTimerGetTimerID>
 800cbf2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d005      	beq.n	800cc06 <TimerCallback+0x22>
    callb->func (callb->arg);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	68fa      	ldr	r2, [r7, #12]
 800cc00:	6852      	ldr	r2, [r2, #4]
 800cc02:	4610      	mov	r0, r2
 800cc04:	4798      	blx	r3
  }
}
 800cc06:	bf00      	nop
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
	...

0800cc10 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b08e      	sub	sp, #56	; 0x38
 800cc14:	af02      	add	r7, sp, #8
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	607a      	str	r2, [r7, #4]
 800cc1a:	603b      	str	r3, [r7, #0]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800cc20:	2300      	movs	r3, #0
 800cc22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc24:	f3ef 8305 	mrs	r3, IPSR
 800cc28:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc2a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d16a      	bne.n	800cd06 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc30:	f3ef 8310 	mrs	r3, PRIMASK
 800cc34:	617b      	str	r3, [r7, #20]
  return(result);
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d105      	bne.n	800cc48 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc3c:	f3ef 8311 	mrs	r3, BASEPRI
 800cc40:	613b      	str	r3, [r7, #16]
  return(result);
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d003      	beq.n	800cc50 <osTimerNew+0x40>
 800cc48:	4b31      	ldr	r3, [pc, #196]	; (800cd10 <osTimerNew+0x100>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2b02      	cmp	r3, #2
 800cc4e:	d05a      	beq.n	800cd06 <osTimerNew+0xf6>
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d057      	beq.n	800cd06 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800cc56:	2008      	movs	r0, #8
 800cc58:	f002 fbcc 	bl	800f3f4 <pvPortMalloc>
 800cc5c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d050      	beq.n	800cd06 <osTimerNew+0xf6>
      callb->func = func;
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800cc70:	7afb      	ldrb	r3, [r7, #11]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d102      	bne.n	800cc7c <osTimerNew+0x6c>
        reload = pdFALSE;
 800cc76:	2300      	movs	r3, #0
 800cc78:	627b      	str	r3, [r7, #36]	; 0x24
 800cc7a:	e001      	b.n	800cc80 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800cc80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc84:	623b      	str	r3, [r7, #32]
      name = NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d01c      	beq.n	800ccca <osTimerNew+0xba>
        if (attr->name != NULL) {
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d002      	beq.n	800cc9e <osTimerNew+0x8e>
          name = attr->name;
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d006      	beq.n	800ccb4 <osTimerNew+0xa4>
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	2b2b      	cmp	r3, #43	; 0x2b
 800ccac:	d902      	bls.n	800ccb4 <osTimerNew+0xa4>
          mem = 1;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	623b      	str	r3, [r7, #32]
 800ccb2:	e00c      	b.n	800ccce <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d108      	bne.n	800ccce <osTimerNew+0xbe>
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d104      	bne.n	800ccce <osTimerNew+0xbe>
            mem = 0;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	623b      	str	r3, [r7, #32]
 800ccc8:	e001      	b.n	800ccce <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800ccce:	6a3b      	ldr	r3, [r7, #32]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d10c      	bne.n	800ccee <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	9301      	str	r3, [sp, #4]
 800ccda:	4b0e      	ldr	r3, [pc, #56]	; (800cd14 <osTimerNew+0x104>)
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cce2:	2101      	movs	r1, #1
 800cce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cce6:	f001 fd96 	bl	800e816 <xTimerCreateStatic>
 800ccea:	62b8      	str	r0, [r7, #40]	; 0x28
 800ccec:	e00b      	b.n	800cd06 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d108      	bne.n	800cd06 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800ccf4:	4b07      	ldr	r3, [pc, #28]	; (800cd14 <osTimerNew+0x104>)
 800ccf6:	9300      	str	r3, [sp, #0]
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccfc:	2101      	movs	r1, #1
 800ccfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd00:	f001 fd68 	bl	800e7d4 <xTimerCreate>
 800cd04:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800cd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3730      	adds	r7, #48	; 0x30
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	20007ee8 	.word	0x20007ee8
 800cd14:	0800cbe5 	.word	0x0800cbe5

0800cd18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	4a07      	ldr	r2, [pc, #28]	; (800cd44 <vApplicationGetIdleTaskMemory+0x2c>)
 800cd28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	4a06      	ldr	r2, [pc, #24]	; (800cd48 <vApplicationGetIdleTaskMemory+0x30>)
 800cd2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2280      	movs	r2, #128	; 0x80
 800cd34:	601a      	str	r2, [r3, #0]
}
 800cd36:	bf00      	nop
 800cd38:	3714      	adds	r7, #20
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	20007eec 	.word	0x20007eec
 800cd48:	20007f48 	.word	0x20007f48

0800cd4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	4a07      	ldr	r2, [pc, #28]	; (800cd78 <vApplicationGetTimerTaskMemory+0x2c>)
 800cd5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	4a06      	ldr	r2, [pc, #24]	; (800cd7c <vApplicationGetTimerTaskMemory+0x30>)
 800cd62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd6a:	601a      	str	r2, [r3, #0]
}
 800cd6c:	bf00      	nop
 800cd6e:	3714      	adds	r7, #20
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr
 800cd78:	20008148 	.word	0x20008148
 800cd7c:	200081a4 	.word	0x200081a4

0800cd80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f103 0208 	add.w	r2, r3, #8
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f103 0208 	add.w	r2, r3, #8
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f103 0208 	add.w	r2, r3, #8
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cdb4:	bf00      	nop
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cdce:	bf00      	nop
 800cdd0:	370c      	adds	r7, #12
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cdda:	b480      	push	{r7}
 800cddc:	b085      	sub	sp, #20
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	689a      	ldr	r2, [r3, #8]
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	683a      	ldr	r2, [r7, #0]
 800cdfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	683a      	ldr	r2, [r7, #0]
 800ce04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	1c5a      	adds	r2, r3, #1
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	601a      	str	r2, [r3, #0]
}
 800ce16:	bf00      	nop
 800ce18:	3714      	adds	r7, #20
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce22:	b480      	push	{r7}
 800ce24:	b085      	sub	sp, #20
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce38:	d103      	bne.n	800ce42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	60fb      	str	r3, [r7, #12]
 800ce40:	e00c      	b.n	800ce5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	3308      	adds	r3, #8
 800ce46:	60fb      	str	r3, [r7, #12]
 800ce48:	e002      	b.n	800ce50 <vListInsert+0x2e>
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	60fb      	str	r3, [r7, #12]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	68ba      	ldr	r2, [r7, #8]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d2f6      	bcs.n	800ce4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	685a      	ldr	r2, [r3, #4]
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	683a      	ldr	r2, [r7, #0]
 800ce6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	683a      	ldr	r2, [r7, #0]
 800ce76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	1c5a      	adds	r2, r3, #1
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	601a      	str	r2, [r3, #0]
}
 800ce88:	bf00      	nop
 800ce8a:	3714      	adds	r7, #20
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce94:	b480      	push	{r7}
 800ce96:	b085      	sub	sp, #20
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	691b      	ldr	r3, [r3, #16]
 800cea0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	6892      	ldr	r2, [r2, #8]
 800ceaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	6852      	ldr	r2, [r2, #4]
 800ceb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d103      	bne.n	800cec8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	689a      	ldr	r2, [r3, #8]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	1e5a      	subs	r2, r3, #1
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10c      	bne.n	800cf16 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	b672      	cpsid	i
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	b662      	cpsie	i
 800cf10:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cf12:	bf00      	nop
 800cf14:	e7fe      	b.n	800cf14 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800cf16:	f002 f941 	bl	800f19c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf22:	68f9      	ldr	r1, [r7, #12]
 800cf24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cf26:	fb01 f303 	mul.w	r3, r1, r3
 800cf2a:	441a      	add	r2, r3
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2200      	movs	r2, #0
 800cf34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf46:	3b01      	subs	r3, #1
 800cf48:	68f9      	ldr	r1, [r7, #12]
 800cf4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cf4c:	fb01 f303 	mul.w	r3, r1, r3
 800cf50:	441a      	add	r2, r3
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	22ff      	movs	r2, #255	; 0xff
 800cf5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	22ff      	movs	r2, #255	; 0xff
 800cf62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d114      	bne.n	800cf96 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d01a      	beq.n	800cfaa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	3310      	adds	r3, #16
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f001 f937 	bl	800e1ec <xTaskRemoveFromEventList>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d012      	beq.n	800cfaa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cf84:	4b0c      	ldr	r3, [pc, #48]	; (800cfb8 <xQueueGenericReset+0xd0>)
 800cf86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf8a:	601a      	str	r2, [r3, #0]
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	e009      	b.n	800cfaa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	3310      	adds	r3, #16
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff fef0 	bl	800cd80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	3324      	adds	r3, #36	; 0x24
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7ff feeb 	bl	800cd80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cfaa:	f002 f92b 	bl	800f204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cfae:	2301      	movs	r3, #1
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	e000ed04 	.word	0xe000ed04

0800cfbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b08e      	sub	sp, #56	; 0x38
 800cfc0:	af02      	add	r7, sp, #8
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	607a      	str	r2, [r7, #4]
 800cfc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d10c      	bne.n	800cfea <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800cfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd4:	b672      	cpsid	i
 800cfd6:	f383 8811 	msr	BASEPRI, r3
 800cfda:	f3bf 8f6f 	isb	sy
 800cfde:	f3bf 8f4f 	dsb	sy
 800cfe2:	b662      	cpsie	i
 800cfe4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cfe6:	bf00      	nop
 800cfe8:	e7fe      	b.n	800cfe8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10c      	bne.n	800d00a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800cff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff4:	b672      	cpsid	i
 800cff6:	f383 8811 	msr	BASEPRI, r3
 800cffa:	f3bf 8f6f 	isb	sy
 800cffe:	f3bf 8f4f 	dsb	sy
 800d002:	b662      	cpsie	i
 800d004:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d006:	bf00      	nop
 800d008:	e7fe      	b.n	800d008 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <xQueueGenericCreateStatic+0x5a>
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d001      	beq.n	800d01a <xQueueGenericCreateStatic+0x5e>
 800d016:	2301      	movs	r3, #1
 800d018:	e000      	b.n	800d01c <xQueueGenericCreateStatic+0x60>
 800d01a:	2300      	movs	r3, #0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d10c      	bne.n	800d03a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d024:	b672      	cpsid	i
 800d026:	f383 8811 	msr	BASEPRI, r3
 800d02a:	f3bf 8f6f 	isb	sy
 800d02e:	f3bf 8f4f 	dsb	sy
 800d032:	b662      	cpsie	i
 800d034:	623b      	str	r3, [r7, #32]
}
 800d036:	bf00      	nop
 800d038:	e7fe      	b.n	800d038 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d102      	bne.n	800d046 <xQueueGenericCreateStatic+0x8a>
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <xQueueGenericCreateStatic+0x8e>
 800d046:	2301      	movs	r3, #1
 800d048:	e000      	b.n	800d04c <xQueueGenericCreateStatic+0x90>
 800d04a:	2300      	movs	r3, #0
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d10c      	bne.n	800d06a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800d050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d054:	b672      	cpsid	i
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	b662      	cpsie	i
 800d064:	61fb      	str	r3, [r7, #28]
}
 800d066:	bf00      	nop
 800d068:	e7fe      	b.n	800d068 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d06a:	2350      	movs	r3, #80	; 0x50
 800d06c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	2b50      	cmp	r3, #80	; 0x50
 800d072:	d00c      	beq.n	800d08e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800d074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d078:	b672      	cpsid	i
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	b662      	cpsie	i
 800d088:	61bb      	str	r3, [r7, #24]
}
 800d08a:	bf00      	nop
 800d08c:	e7fe      	b.n	800d08c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d08e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d096:	2b00      	cmp	r3, #0
 800d098:	d00d      	beq.n	800d0b6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09c:	2201      	movs	r2, #1
 800d09e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d0a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	68b9      	ldr	r1, [r7, #8]
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f000 f805 	bl	800d0c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3730      	adds	r7, #48	; 0x30
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
 800d0cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d103      	bne.n	800d0dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	69ba      	ldr	r2, [r7, #24]
 800d0d8:	601a      	str	r2, [r3, #0]
 800d0da:	e002      	b.n	800d0e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d0e8:	69bb      	ldr	r3, [r7, #24]
 800d0ea:	68ba      	ldr	r2, [r7, #8]
 800d0ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d0ee:	2101      	movs	r1, #1
 800d0f0:	69b8      	ldr	r0, [r7, #24]
 800d0f2:	f7ff fef9 	bl	800cee8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	78fa      	ldrb	r2, [r7, #3]
 800d0fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d0fe:	bf00      	nop
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
	...

0800d108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08e      	sub	sp, #56	; 0x38
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
 800d114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d116:	2300      	movs	r3, #0
 800d118:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d120:	2b00      	cmp	r3, #0
 800d122:	d10c      	bne.n	800d13e <xQueueGenericSend+0x36>
	__asm volatile
 800d124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d128:	b672      	cpsid	i
 800d12a:	f383 8811 	msr	BASEPRI, r3
 800d12e:	f3bf 8f6f 	isb	sy
 800d132:	f3bf 8f4f 	dsb	sy
 800d136:	b662      	cpsie	i
 800d138:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d13a:	bf00      	nop
 800d13c:	e7fe      	b.n	800d13c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d103      	bne.n	800d14c <xQueueGenericSend+0x44>
 800d144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d101      	bne.n	800d150 <xQueueGenericSend+0x48>
 800d14c:	2301      	movs	r3, #1
 800d14e:	e000      	b.n	800d152 <xQueueGenericSend+0x4a>
 800d150:	2300      	movs	r3, #0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d10c      	bne.n	800d170 <xQueueGenericSend+0x68>
	__asm volatile
 800d156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15a:	b672      	cpsid	i
 800d15c:	f383 8811 	msr	BASEPRI, r3
 800d160:	f3bf 8f6f 	isb	sy
 800d164:	f3bf 8f4f 	dsb	sy
 800d168:	b662      	cpsie	i
 800d16a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d16c:	bf00      	nop
 800d16e:	e7fe      	b.n	800d16e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2b02      	cmp	r3, #2
 800d174:	d103      	bne.n	800d17e <xQueueGenericSend+0x76>
 800d176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d101      	bne.n	800d182 <xQueueGenericSend+0x7a>
 800d17e:	2301      	movs	r3, #1
 800d180:	e000      	b.n	800d184 <xQueueGenericSend+0x7c>
 800d182:	2300      	movs	r3, #0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10c      	bne.n	800d1a2 <xQueueGenericSend+0x9a>
	__asm volatile
 800d188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18c:	b672      	cpsid	i
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	b662      	cpsie	i
 800d19c:	623b      	str	r3, [r7, #32]
}
 800d19e:	bf00      	nop
 800d1a0:	e7fe      	b.n	800d1a0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1a2:	f001 f9e9 	bl	800e578 <xTaskGetSchedulerState>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d102      	bne.n	800d1b2 <xQueueGenericSend+0xaa>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d101      	bne.n	800d1b6 <xQueueGenericSend+0xae>
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	e000      	b.n	800d1b8 <xQueueGenericSend+0xb0>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10c      	bne.n	800d1d6 <xQueueGenericSend+0xce>
	__asm volatile
 800d1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c0:	b672      	cpsid	i
 800d1c2:	f383 8811 	msr	BASEPRI, r3
 800d1c6:	f3bf 8f6f 	isb	sy
 800d1ca:	f3bf 8f4f 	dsb	sy
 800d1ce:	b662      	cpsie	i
 800d1d0:	61fb      	str	r3, [r7, #28]
}
 800d1d2:	bf00      	nop
 800d1d4:	e7fe      	b.n	800d1d4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1d6:	f001 ffe1 	bl	800f19c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d302      	bcc.n	800d1ec <xQueueGenericSend+0xe4>
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d129      	bne.n	800d240 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	68b9      	ldr	r1, [r7, #8]
 800d1f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1f2:	f000 fa15 	bl	800d620 <prvCopyDataToQueue>
 800d1f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d010      	beq.n	800d222 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d202:	3324      	adds	r3, #36	; 0x24
 800d204:	4618      	mov	r0, r3
 800d206:	f000 fff1 	bl	800e1ec <xTaskRemoveFromEventList>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d013      	beq.n	800d238 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d210:	4b3f      	ldr	r3, [pc, #252]	; (800d310 <xQueueGenericSend+0x208>)
 800d212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d216:	601a      	str	r2, [r3, #0]
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	f3bf 8f6f 	isb	sy
 800d220:	e00a      	b.n	800d238 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d224:	2b00      	cmp	r3, #0
 800d226:	d007      	beq.n	800d238 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d228:	4b39      	ldr	r3, [pc, #228]	; (800d310 <xQueueGenericSend+0x208>)
 800d22a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d22e:	601a      	str	r2, [r3, #0]
 800d230:	f3bf 8f4f 	dsb	sy
 800d234:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d238:	f001 ffe4 	bl	800f204 <vPortExitCritical>
				return pdPASS;
 800d23c:	2301      	movs	r3, #1
 800d23e:	e063      	b.n	800d308 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d103      	bne.n	800d24e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d246:	f001 ffdd 	bl	800f204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d24a:	2300      	movs	r3, #0
 800d24c:	e05c      	b.n	800d308 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d250:	2b00      	cmp	r3, #0
 800d252:	d106      	bne.n	800d262 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d254:	f107 0314 	add.w	r3, r7, #20
 800d258:	4618      	mov	r0, r3
 800d25a:	f001 f82d 	bl	800e2b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d25e:	2301      	movs	r3, #1
 800d260:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d262:	f001 ffcf 	bl	800f204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d266:	f000 fd93 	bl	800dd90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d26a:	f001 ff97 	bl	800f19c <vPortEnterCritical>
 800d26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d274:	b25b      	sxtb	r3, r3
 800d276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d27a:	d103      	bne.n	800d284 <xQueueGenericSend+0x17c>
 800d27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27e:	2200      	movs	r2, #0
 800d280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d28a:	b25b      	sxtb	r3, r3
 800d28c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d290:	d103      	bne.n	800d29a <xQueueGenericSend+0x192>
 800d292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d294:	2200      	movs	r2, #0
 800d296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d29a:	f001 ffb3 	bl	800f204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d29e:	1d3a      	adds	r2, r7, #4
 800d2a0:	f107 0314 	add.w	r3, r7, #20
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f001 f81c 	bl	800e2e4 <xTaskCheckForTimeOut>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d124      	bne.n	800d2fc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d2b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2b4:	f000 faac 	bl	800d810 <prvIsQueueFull>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d018      	beq.n	800d2f0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c0:	3310      	adds	r3, #16
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	4611      	mov	r1, r2
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f000 ff3c 	bl	800e144 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ce:	f000 fa37 	bl	800d740 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2d2:	f000 fd6b 	bl	800ddac <xTaskResumeAll>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f47f af7c 	bne.w	800d1d6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d2de:	4b0c      	ldr	r3, [pc, #48]	; (800d310 <xQueueGenericSend+0x208>)
 800d2e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2e4:	601a      	str	r2, [r3, #0]
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	e772      	b.n	800d1d6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2f2:	f000 fa25 	bl	800d740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2f6:	f000 fd59 	bl	800ddac <xTaskResumeAll>
 800d2fa:	e76c      	b.n	800d1d6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2fe:	f000 fa1f 	bl	800d740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d302:	f000 fd53 	bl	800ddac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d306:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3738      	adds	r7, #56	; 0x38
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	e000ed04 	.word	0xe000ed04

0800d314 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08e      	sub	sp, #56	; 0x38
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
 800d320:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10c      	bne.n	800d346 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	b672      	cpsid	i
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	b662      	cpsie	i
 800d340:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d342:	bf00      	nop
 800d344:	e7fe      	b.n	800d344 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d103      	bne.n	800d354 <xQueueGenericSendFromISR+0x40>
 800d34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d350:	2b00      	cmp	r3, #0
 800d352:	d101      	bne.n	800d358 <xQueueGenericSendFromISR+0x44>
 800d354:	2301      	movs	r3, #1
 800d356:	e000      	b.n	800d35a <xQueueGenericSendFromISR+0x46>
 800d358:	2300      	movs	r3, #0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d10c      	bne.n	800d378 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d362:	b672      	cpsid	i
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	b662      	cpsie	i
 800d372:	623b      	str	r3, [r7, #32]
}
 800d374:	bf00      	nop
 800d376:	e7fe      	b.n	800d376 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	2b02      	cmp	r3, #2
 800d37c:	d103      	bne.n	800d386 <xQueueGenericSendFromISR+0x72>
 800d37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d382:	2b01      	cmp	r3, #1
 800d384:	d101      	bne.n	800d38a <xQueueGenericSendFromISR+0x76>
 800d386:	2301      	movs	r3, #1
 800d388:	e000      	b.n	800d38c <xQueueGenericSendFromISR+0x78>
 800d38a:	2300      	movs	r3, #0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d10c      	bne.n	800d3aa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800d390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d394:	b672      	cpsid	i
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	b662      	cpsie	i
 800d3a4:	61fb      	str	r3, [r7, #28]
}
 800d3a6:	bf00      	nop
 800d3a8:	e7fe      	b.n	800d3a8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3aa:	f001 ffdf 	bl	800f36c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d3ae:	f3ef 8211 	mrs	r2, BASEPRI
 800d3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b6:	b672      	cpsid	i
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	b662      	cpsie	i
 800d3c6:	61ba      	str	r2, [r7, #24]
 800d3c8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d3ca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d302      	bcc.n	800d3e0 <xQueueGenericSendFromISR+0xcc>
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	2b02      	cmp	r3, #2
 800d3de:	d12c      	bne.n	800d43a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3ea:	683a      	ldr	r2, [r7, #0]
 800d3ec:	68b9      	ldr	r1, [r7, #8]
 800d3ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3f0:	f000 f916 	bl	800d620 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d3f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3fc:	d112      	bne.n	800d424 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d402:	2b00      	cmp	r3, #0
 800d404:	d016      	beq.n	800d434 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d408:	3324      	adds	r3, #36	; 0x24
 800d40a:	4618      	mov	r0, r3
 800d40c:	f000 feee 	bl	800e1ec <xTaskRemoveFromEventList>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00e      	beq.n	800d434 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00b      	beq.n	800d434 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2201      	movs	r2, #1
 800d420:	601a      	str	r2, [r3, #0]
 800d422:	e007      	b.n	800d434 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d424:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d428:	3301      	adds	r3, #1
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	b25a      	sxtb	r2, r3
 800d42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d434:	2301      	movs	r3, #1
 800d436:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d438:	e001      	b.n	800d43e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d43a:	2300      	movs	r3, #0
 800d43c:	637b      	str	r3, [r7, #52]	; 0x34
 800d43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d440:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d448:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3738      	adds	r7, #56	; 0x38
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08c      	sub	sp, #48	; 0x30
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d460:	2300      	movs	r3, #0
 800d462:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10c      	bne.n	800d488 <xQueueReceive+0x34>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	b672      	cpsid	i
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	b662      	cpsie	i
 800d482:	623b      	str	r3, [r7, #32]
}
 800d484:	bf00      	nop
 800d486:	e7fe      	b.n	800d486 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d103      	bne.n	800d496 <xQueueReceive+0x42>
 800d48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d492:	2b00      	cmp	r3, #0
 800d494:	d101      	bne.n	800d49a <xQueueReceive+0x46>
 800d496:	2301      	movs	r3, #1
 800d498:	e000      	b.n	800d49c <xQueueReceive+0x48>
 800d49a:	2300      	movs	r3, #0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10c      	bne.n	800d4ba <xQueueReceive+0x66>
	__asm volatile
 800d4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a4:	b672      	cpsid	i
 800d4a6:	f383 8811 	msr	BASEPRI, r3
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	b662      	cpsie	i
 800d4b4:	61fb      	str	r3, [r7, #28]
}
 800d4b6:	bf00      	nop
 800d4b8:	e7fe      	b.n	800d4b8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4ba:	f001 f85d 	bl	800e578 <xTaskGetSchedulerState>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d102      	bne.n	800d4ca <xQueueReceive+0x76>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d101      	bne.n	800d4ce <xQueueReceive+0x7a>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e000      	b.n	800d4d0 <xQueueReceive+0x7c>
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d10c      	bne.n	800d4ee <xQueueReceive+0x9a>
	__asm volatile
 800d4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d8:	b672      	cpsid	i
 800d4da:	f383 8811 	msr	BASEPRI, r3
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f3bf 8f4f 	dsb	sy
 800d4e6:	b662      	cpsie	i
 800d4e8:	61bb      	str	r3, [r7, #24]
}
 800d4ea:	bf00      	nop
 800d4ec:	e7fe      	b.n	800d4ec <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4ee:	f001 fe55 	bl	800f19c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d01f      	beq.n	800d53e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4fe:	68b9      	ldr	r1, [r7, #8]
 800d500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d502:	f000 f8f7 	bl	800d6f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d508:	1e5a      	subs	r2, r3, #1
 800d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d510:	691b      	ldr	r3, [r3, #16]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d00f      	beq.n	800d536 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d518:	3310      	adds	r3, #16
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 fe66 	bl	800e1ec <xTaskRemoveFromEventList>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d007      	beq.n	800d536 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d526:	4b3d      	ldr	r3, [pc, #244]	; (800d61c <xQueueReceive+0x1c8>)
 800d528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d52c:	601a      	str	r2, [r3, #0]
 800d52e:	f3bf 8f4f 	dsb	sy
 800d532:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d536:	f001 fe65 	bl	800f204 <vPortExitCritical>
				return pdPASS;
 800d53a:	2301      	movs	r3, #1
 800d53c:	e069      	b.n	800d612 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d103      	bne.n	800d54c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d544:	f001 fe5e 	bl	800f204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d548:	2300      	movs	r3, #0
 800d54a:	e062      	b.n	800d612 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d106      	bne.n	800d560 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d552:	f107 0310 	add.w	r3, r7, #16
 800d556:	4618      	mov	r0, r3
 800d558:	f000 feae 	bl	800e2b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d55c:	2301      	movs	r3, #1
 800d55e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d560:	f001 fe50 	bl	800f204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d564:	f000 fc14 	bl	800dd90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d568:	f001 fe18 	bl	800f19c <vPortEnterCritical>
 800d56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d572:	b25b      	sxtb	r3, r3
 800d574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d578:	d103      	bne.n	800d582 <xQueueReceive+0x12e>
 800d57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57c:	2200      	movs	r2, #0
 800d57e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d588:	b25b      	sxtb	r3, r3
 800d58a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d58e:	d103      	bne.n	800d598 <xQueueReceive+0x144>
 800d590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d592:	2200      	movs	r2, #0
 800d594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d598:	f001 fe34 	bl	800f204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d59c:	1d3a      	adds	r2, r7, #4
 800d59e:	f107 0310 	add.w	r3, r7, #16
 800d5a2:	4611      	mov	r1, r2
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f000 fe9d 	bl	800e2e4 <xTaskCheckForTimeOut>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d123      	bne.n	800d5f8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5b2:	f000 f917 	bl	800d7e4 <prvIsQueueEmpty>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d017      	beq.n	800d5ec <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5be:	3324      	adds	r3, #36	; 0x24
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	4611      	mov	r1, r2
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f000 fdbd 	bl	800e144 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5cc:	f000 f8b8 	bl	800d740 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5d0:	f000 fbec 	bl	800ddac <xTaskResumeAll>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d189      	bne.n	800d4ee <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d5da:	4b10      	ldr	r3, [pc, #64]	; (800d61c <xQueueReceive+0x1c8>)
 800d5dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5e0:	601a      	str	r2, [r3, #0]
 800d5e2:	f3bf 8f4f 	dsb	sy
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	e780      	b.n	800d4ee <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d5ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5ee:	f000 f8a7 	bl	800d740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5f2:	f000 fbdb 	bl	800ddac <xTaskResumeAll>
 800d5f6:	e77a      	b.n	800d4ee <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d5f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5fa:	f000 f8a1 	bl	800d740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5fe:	f000 fbd5 	bl	800ddac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d604:	f000 f8ee 	bl	800d7e4 <prvIsQueueEmpty>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f43f af6f 	beq.w	800d4ee <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d610:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d612:	4618      	mov	r0, r3
 800d614:	3730      	adds	r7, #48	; 0x30
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	e000ed04 	.word	0xe000ed04

0800d620 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b086      	sub	sp, #24
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d62c:	2300      	movs	r3, #0
 800d62e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d634:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d10d      	bne.n	800d65a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d14d      	bne.n	800d6e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f000 ffb2 	bl	800e5b4 <xTaskPriorityDisinherit>
 800d650:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2200      	movs	r2, #0
 800d656:	609a      	str	r2, [r3, #8]
 800d658:	e043      	b.n	800d6e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d119      	bne.n	800d694 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	6858      	ldr	r0, [r3, #4]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d668:	461a      	mov	r2, r3
 800d66a:	68b9      	ldr	r1, [r7, #8]
 800d66c:	f003 fa1b 	bl	8010aa6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d678:	441a      	add	r2, r3
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	685a      	ldr	r2, [r3, #4]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	429a      	cmp	r2, r3
 800d688:	d32b      	bcc.n	800d6e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	605a      	str	r2, [r3, #4]
 800d692:	e026      	b.n	800d6e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	68d8      	ldr	r0, [r3, #12]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69c:	461a      	mov	r2, r3
 800d69e:	68b9      	ldr	r1, [r7, #8]
 800d6a0:	f003 fa01 	bl	8010aa6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	68da      	ldr	r2, [r3, #12]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ac:	425b      	negs	r3, r3
 800d6ae:	441a      	add	r2, r3
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	68da      	ldr	r2, [r3, #12]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d207      	bcs.n	800d6d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	689a      	ldr	r2, [r3, #8]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c8:	425b      	negs	r3, r3
 800d6ca:	441a      	add	r2, r3
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	d105      	bne.n	800d6e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d002      	beq.n	800d6e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	1c5a      	adds	r2, r3, #1
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d6ea:	697b      	ldr	r3, [r7, #20]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3718      	adds	r7, #24
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d702:	2b00      	cmp	r3, #0
 800d704:	d018      	beq.n	800d738 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	68da      	ldr	r2, [r3, #12]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70e:	441a      	add	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	68da      	ldr	r2, [r3, #12]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d303      	bcc.n	800d728 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	68d9      	ldr	r1, [r3, #12]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d730:	461a      	mov	r2, r3
 800d732:	6838      	ldr	r0, [r7, #0]
 800d734:	f003 f9b7 	bl	8010aa6 <memcpy>
	}
}
 800d738:	bf00      	nop
 800d73a:	3708      	adds	r7, #8
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d748:	f001 fd28 	bl	800f19c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d752:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d754:	e011      	b.n	800d77a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d012      	beq.n	800d784 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	3324      	adds	r3, #36	; 0x24
 800d762:	4618      	mov	r0, r3
 800d764:	f000 fd42 	bl	800e1ec <xTaskRemoveFromEventList>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d001      	beq.n	800d772 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d76e:	f000 fe1f 	bl	800e3b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d772:	7bfb      	ldrb	r3, [r7, #15]
 800d774:	3b01      	subs	r3, #1
 800d776:	b2db      	uxtb	r3, r3
 800d778:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d77a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	dce9      	bgt.n	800d756 <prvUnlockQueue+0x16>
 800d782:	e000      	b.n	800d786 <prvUnlockQueue+0x46>
					break;
 800d784:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	22ff      	movs	r2, #255	; 0xff
 800d78a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d78e:	f001 fd39 	bl	800f204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d792:	f001 fd03 	bl	800f19c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d79c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d79e:	e011      	b.n	800d7c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	691b      	ldr	r3, [r3, #16]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d012      	beq.n	800d7ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	3310      	adds	r3, #16
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f000 fd1d 	bl	800e1ec <xTaskRemoveFromEventList>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d001      	beq.n	800d7bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7b8:	f000 fdfa 	bl	800e3b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7bc:	7bbb      	ldrb	r3, [r7, #14]
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	dce9      	bgt.n	800d7a0 <prvUnlockQueue+0x60>
 800d7cc:	e000      	b.n	800d7d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d7ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	22ff      	movs	r2, #255	; 0xff
 800d7d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d7d8:	f001 fd14 	bl	800f204 <vPortExitCritical>
}
 800d7dc:	bf00      	nop
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7ec:	f001 fcd6 	bl	800f19c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d102      	bne.n	800d7fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	e001      	b.n	800d802 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d7fe:	2300      	movs	r3, #0
 800d800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d802:	f001 fcff 	bl	800f204 <vPortExitCritical>

	return xReturn;
 800d806:	68fb      	ldr	r3, [r7, #12]
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d818:	f001 fcc0 	bl	800f19c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d824:	429a      	cmp	r2, r3
 800d826:	d102      	bne.n	800d82e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d828:	2301      	movs	r3, #1
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	e001      	b.n	800d832 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d82e:	2300      	movs	r3, #0
 800d830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d832:	f001 fce7 	bl	800f204 <vPortExitCritical>

	return xReturn;
 800d836:	68fb      	ldr	r3, [r7, #12]
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3710      	adds	r7, #16
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d84a:	2300      	movs	r3, #0
 800d84c:	60fb      	str	r3, [r7, #12]
 800d84e:	e014      	b.n	800d87a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d850:	4a0f      	ldr	r2, [pc, #60]	; (800d890 <vQueueAddToRegistry+0x50>)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10b      	bne.n	800d874 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d85c:	490c      	ldr	r1, [pc, #48]	; (800d890 <vQueueAddToRegistry+0x50>)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	683a      	ldr	r2, [r7, #0]
 800d862:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d866:	4a0a      	ldr	r2, [pc, #40]	; (800d890 <vQueueAddToRegistry+0x50>)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	00db      	lsls	r3, r3, #3
 800d86c:	4413      	add	r3, r2
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d872:	e006      	b.n	800d882 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	3301      	adds	r3, #1
 800d878:	60fb      	str	r3, [r7, #12]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2b07      	cmp	r3, #7
 800d87e:	d9e7      	bls.n	800d850 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d880:	bf00      	nop
 800d882:	bf00      	nop
 800d884:	3714      	adds	r7, #20
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	200085a4 	.word	0x200085a4

0800d894 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d894:	b580      	push	{r7, lr}
 800d896:	b086      	sub	sp, #24
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	60b9      	str	r1, [r7, #8]
 800d89e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d8a4:	f001 fc7a 	bl	800f19c <vPortEnterCritical>
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8ae:	b25b      	sxtb	r3, r3
 800d8b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8b4:	d103      	bne.n	800d8be <vQueueWaitForMessageRestricted+0x2a>
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8c4:	b25b      	sxtb	r3, r3
 800d8c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8ca:	d103      	bne.n	800d8d4 <vQueueWaitForMessageRestricted+0x40>
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8d4:	f001 fc96 	bl	800f204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d106      	bne.n	800d8ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	3324      	adds	r3, #36	; 0x24
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	68b9      	ldr	r1, [r7, #8]
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f000 fc51 	bl	800e190 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d8ee:	6978      	ldr	r0, [r7, #20]
 800d8f0:	f7ff ff26 	bl	800d740 <prvUnlockQueue>
	}
 800d8f4:	bf00      	nop
 800d8f6:	3718      	adds	r7, #24
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b08e      	sub	sp, #56	; 0x38
 800d900:	af04      	add	r7, sp, #16
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
 800d908:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d10c      	bne.n	800d92a <xTaskCreateStatic+0x2e>
	__asm volatile
 800d910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d914:	b672      	cpsid	i
 800d916:	f383 8811 	msr	BASEPRI, r3
 800d91a:	f3bf 8f6f 	isb	sy
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	b662      	cpsie	i
 800d924:	623b      	str	r3, [r7, #32]
}
 800d926:	bf00      	nop
 800d928:	e7fe      	b.n	800d928 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d10c      	bne.n	800d94a <xTaskCreateStatic+0x4e>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d934:	b672      	cpsid	i
 800d936:	f383 8811 	msr	BASEPRI, r3
 800d93a:	f3bf 8f6f 	isb	sy
 800d93e:	f3bf 8f4f 	dsb	sy
 800d942:	b662      	cpsie	i
 800d944:	61fb      	str	r3, [r7, #28]
}
 800d946:	bf00      	nop
 800d948:	e7fe      	b.n	800d948 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d94a:	235c      	movs	r3, #92	; 0x5c
 800d94c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	2b5c      	cmp	r3, #92	; 0x5c
 800d952:	d00c      	beq.n	800d96e <xTaskCreateStatic+0x72>
	__asm volatile
 800d954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d958:	b672      	cpsid	i
 800d95a:	f383 8811 	msr	BASEPRI, r3
 800d95e:	f3bf 8f6f 	isb	sy
 800d962:	f3bf 8f4f 	dsb	sy
 800d966:	b662      	cpsie	i
 800d968:	61bb      	str	r3, [r7, #24]
}
 800d96a:	bf00      	nop
 800d96c:	e7fe      	b.n	800d96c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d96e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d972:	2b00      	cmp	r3, #0
 800d974:	d01e      	beq.n	800d9b4 <xTaskCreateStatic+0xb8>
 800d976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d01b      	beq.n	800d9b4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d984:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d988:	2202      	movs	r2, #2
 800d98a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d98e:	2300      	movs	r3, #0
 800d990:	9303      	str	r3, [sp, #12]
 800d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d994:	9302      	str	r3, [sp, #8]
 800d996:	f107 0314 	add.w	r3, r7, #20
 800d99a:	9301      	str	r3, [sp, #4]
 800d99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	68b9      	ldr	r1, [r7, #8]
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	f000 f850 	bl	800da4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9ae:	f000 f8df 	bl	800db70 <prvAddNewTaskToReadyList>
 800d9b2:	e001      	b.n	800d9b8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d9b8:	697b      	ldr	r3, [r7, #20]
	}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3728      	adds	r7, #40	; 0x28
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b08c      	sub	sp, #48	; 0x30
 800d9c6:	af04      	add	r7, sp, #16
 800d9c8:	60f8      	str	r0, [r7, #12]
 800d9ca:	60b9      	str	r1, [r7, #8]
 800d9cc:	603b      	str	r3, [r7, #0]
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d9d2:	88fb      	ldrh	r3, [r7, #6]
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f001 fd0c 	bl	800f3f4 <pvPortMalloc>
 800d9dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00e      	beq.n	800da02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d9e4:	205c      	movs	r0, #92	; 0x5c
 800d9e6:	f001 fd05 	bl	800f3f4 <pvPortMalloc>
 800d9ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d003      	beq.n	800d9fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	697a      	ldr	r2, [r7, #20]
 800d9f6:	631a      	str	r2, [r3, #48]	; 0x30
 800d9f8:	e005      	b.n	800da06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d9fa:	6978      	ldr	r0, [r7, #20]
 800d9fc:	f001 fdc4 	bl	800f588 <vPortFree>
 800da00:	e001      	b.n	800da06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da02:	2300      	movs	r3, #0
 800da04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d017      	beq.n	800da3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	2200      	movs	r2, #0
 800da10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da14:	88fa      	ldrh	r2, [r7, #6]
 800da16:	2300      	movs	r3, #0
 800da18:	9303      	str	r3, [sp, #12]
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	9302      	str	r3, [sp, #8]
 800da1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da20:	9301      	str	r3, [sp, #4]
 800da22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da24:	9300      	str	r3, [sp, #0]
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	68b9      	ldr	r1, [r7, #8]
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f000 f80e 	bl	800da4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da30:	69f8      	ldr	r0, [r7, #28]
 800da32:	f000 f89d 	bl	800db70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da36:	2301      	movs	r3, #1
 800da38:	61bb      	str	r3, [r7, #24]
 800da3a:	e002      	b.n	800da42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da42:	69bb      	ldr	r3, [r7, #24]
	}
 800da44:	4618      	mov	r0, r3
 800da46:	3720      	adds	r7, #32
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b088      	sub	sp, #32
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	60b9      	str	r1, [r7, #8]
 800da56:	607a      	str	r2, [r7, #4]
 800da58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800da5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	461a      	mov	r2, r3
 800da64:	21a5      	movs	r1, #165	; 0xa5
 800da66:	f002 ff93 	bl	8010990 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800da6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da6e:	6879      	ldr	r1, [r7, #4]
 800da70:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800da74:	440b      	add	r3, r1
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	4413      	add	r3, r2
 800da7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	f023 0307 	bic.w	r3, r3, #7
 800da82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	f003 0307 	and.w	r3, r3, #7
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d00c      	beq.n	800daa8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800da8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da92:	b672      	cpsid	i
 800da94:	f383 8811 	msr	BASEPRI, r3
 800da98:	f3bf 8f6f 	isb	sy
 800da9c:	f3bf 8f4f 	dsb	sy
 800daa0:	b662      	cpsie	i
 800daa2:	617b      	str	r3, [r7, #20]
}
 800daa4:	bf00      	nop
 800daa6:	e7fe      	b.n	800daa6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d01f      	beq.n	800daee <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800daae:	2300      	movs	r3, #0
 800dab0:	61fb      	str	r3, [r7, #28]
 800dab2:	e012      	b.n	800dada <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dab4:	68ba      	ldr	r2, [r7, #8]
 800dab6:	69fb      	ldr	r3, [r7, #28]
 800dab8:	4413      	add	r3, r2
 800daba:	7819      	ldrb	r1, [r3, #0]
 800dabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	4413      	add	r3, r2
 800dac2:	3334      	adds	r3, #52	; 0x34
 800dac4:	460a      	mov	r2, r1
 800dac6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dac8:	68ba      	ldr	r2, [r7, #8]
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	4413      	add	r3, r2
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d006      	beq.n	800dae2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	3301      	adds	r3, #1
 800dad8:	61fb      	str	r3, [r7, #28]
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	2b0f      	cmp	r3, #15
 800dade:	d9e9      	bls.n	800dab4 <prvInitialiseNewTask+0x68>
 800dae0:	e000      	b.n	800dae4 <prvInitialiseNewTask+0x98>
			{
				break;
 800dae2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae6:	2200      	movs	r2, #0
 800dae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800daec:	e003      	b.n	800daf6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800daee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800daf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf8:	2b37      	cmp	r3, #55	; 0x37
 800dafa:	d901      	bls.n	800db00 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dafc:	2337      	movs	r3, #55	; 0x37
 800dafe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800db0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0e:	2200      	movs	r2, #0
 800db10:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db14:	3304      	adds	r3, #4
 800db16:	4618      	mov	r0, r3
 800db18:	f7ff f952 	bl	800cdc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1e:	3318      	adds	r3, #24
 800db20:	4618      	mov	r0, r3
 800db22:	f7ff f94d 	bl	800cdc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3e:	2200      	movs	r2, #0
 800db40:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db44:	2200      	movs	r2, #0
 800db46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db4a:	683a      	ldr	r2, [r7, #0]
 800db4c:	68f9      	ldr	r1, [r7, #12]
 800db4e:	69b8      	ldr	r0, [r7, #24]
 800db50:	f001 fa14 	bl	800ef7c <pxPortInitialiseStack>
 800db54:	4602      	mov	r2, r0
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800db5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db66:	bf00      	nop
 800db68:	3720      	adds	r7, #32
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
	...

0800db70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db78:	f001 fb10 	bl	800f19c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db7c:	4b2d      	ldr	r3, [pc, #180]	; (800dc34 <prvAddNewTaskToReadyList+0xc4>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	3301      	adds	r3, #1
 800db82:	4a2c      	ldr	r2, [pc, #176]	; (800dc34 <prvAddNewTaskToReadyList+0xc4>)
 800db84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db86:	4b2c      	ldr	r3, [pc, #176]	; (800dc38 <prvAddNewTaskToReadyList+0xc8>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d109      	bne.n	800dba2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db8e:	4a2a      	ldr	r2, [pc, #168]	; (800dc38 <prvAddNewTaskToReadyList+0xc8>)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db94:	4b27      	ldr	r3, [pc, #156]	; (800dc34 <prvAddNewTaskToReadyList+0xc4>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d110      	bne.n	800dbbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db9c:	f000 fc2c 	bl	800e3f8 <prvInitialiseTaskLists>
 800dba0:	e00d      	b.n	800dbbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dba2:	4b26      	ldr	r3, [pc, #152]	; (800dc3c <prvAddNewTaskToReadyList+0xcc>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d109      	bne.n	800dbbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dbaa:	4b23      	ldr	r3, [pc, #140]	; (800dc38 <prvAddNewTaskToReadyList+0xc8>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d802      	bhi.n	800dbbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dbb8:	4a1f      	ldr	r2, [pc, #124]	; (800dc38 <prvAddNewTaskToReadyList+0xc8>)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dbbe:	4b20      	ldr	r3, [pc, #128]	; (800dc40 <prvAddNewTaskToReadyList+0xd0>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	4a1e      	ldr	r2, [pc, #120]	; (800dc40 <prvAddNewTaskToReadyList+0xd0>)
 800dbc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dbc8:	4b1d      	ldr	r3, [pc, #116]	; (800dc40 <prvAddNewTaskToReadyList+0xd0>)
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd4:	4b1b      	ldr	r3, [pc, #108]	; (800dc44 <prvAddNewTaskToReadyList+0xd4>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d903      	bls.n	800dbe4 <prvAddNewTaskToReadyList+0x74>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe0:	4a18      	ldr	r2, [pc, #96]	; (800dc44 <prvAddNewTaskToReadyList+0xd4>)
 800dbe2:	6013      	str	r3, [r2, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe8:	4613      	mov	r3, r2
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	4413      	add	r3, r2
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4a15      	ldr	r2, [pc, #84]	; (800dc48 <prvAddNewTaskToReadyList+0xd8>)
 800dbf2:	441a      	add	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	3304      	adds	r3, #4
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	4610      	mov	r0, r2
 800dbfc:	f7ff f8ed 	bl	800cdda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc00:	f001 fb00 	bl	800f204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc04:	4b0d      	ldr	r3, [pc, #52]	; (800dc3c <prvAddNewTaskToReadyList+0xcc>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00e      	beq.n	800dc2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc0c:	4b0a      	ldr	r3, [pc, #40]	; (800dc38 <prvAddNewTaskToReadyList+0xc8>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d207      	bcs.n	800dc2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc1a:	4b0c      	ldr	r3, [pc, #48]	; (800dc4c <prvAddNewTaskToReadyList+0xdc>)
 800dc1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc20:	601a      	str	r2, [r3, #0]
 800dc22:	f3bf 8f4f 	dsb	sy
 800dc26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc2a:	bf00      	nop
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	20008ab8 	.word	0x20008ab8
 800dc38:	200085e4 	.word	0x200085e4
 800dc3c:	20008ac4 	.word	0x20008ac4
 800dc40:	20008ad4 	.word	0x20008ad4
 800dc44:	20008ac0 	.word	0x20008ac0
 800dc48:	200085e8 	.word	0x200085e8
 800dc4c:	e000ed04 	.word	0xe000ed04

0800dc50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d019      	beq.n	800dc96 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dc62:	4b14      	ldr	r3, [pc, #80]	; (800dcb4 <vTaskDelay+0x64>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00c      	beq.n	800dc84 <vTaskDelay+0x34>
	__asm volatile
 800dc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6e:	b672      	cpsid	i
 800dc70:	f383 8811 	msr	BASEPRI, r3
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	f3bf 8f4f 	dsb	sy
 800dc7c:	b662      	cpsie	i
 800dc7e:	60bb      	str	r3, [r7, #8]
}
 800dc80:	bf00      	nop
 800dc82:	e7fe      	b.n	800dc82 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800dc84:	f000 f884 	bl	800dd90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc88:	2100      	movs	r1, #0
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 fd04 	bl	800e698 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc90:	f000 f88c 	bl	800ddac <xTaskResumeAll>
 800dc94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d107      	bne.n	800dcac <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800dc9c:	4b06      	ldr	r3, [pc, #24]	; (800dcb8 <vTaskDelay+0x68>)
 800dc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dca2:	601a      	str	r2, [r3, #0]
 800dca4:	f3bf 8f4f 	dsb	sy
 800dca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dcac:	bf00      	nop
 800dcae:	3710      	adds	r7, #16
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	20008ae0 	.word	0x20008ae0
 800dcb8:	e000ed04 	.word	0xe000ed04

0800dcbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b08a      	sub	sp, #40	; 0x28
 800dcc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dcca:	463a      	mov	r2, r7
 800dccc:	1d39      	adds	r1, r7, #4
 800dcce:	f107 0308 	add.w	r3, r7, #8
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7ff f820 	bl	800cd18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dcd8:	6839      	ldr	r1, [r7, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	68ba      	ldr	r2, [r7, #8]
 800dcde:	9202      	str	r2, [sp, #8]
 800dce0:	9301      	str	r3, [sp, #4]
 800dce2:	2300      	movs	r3, #0
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	2300      	movs	r3, #0
 800dce8:	460a      	mov	r2, r1
 800dcea:	4923      	ldr	r1, [pc, #140]	; (800dd78 <vTaskStartScheduler+0xbc>)
 800dcec:	4823      	ldr	r0, [pc, #140]	; (800dd7c <vTaskStartScheduler+0xc0>)
 800dcee:	f7ff fe05 	bl	800d8fc <xTaskCreateStatic>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	4a22      	ldr	r2, [pc, #136]	; (800dd80 <vTaskStartScheduler+0xc4>)
 800dcf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dcf8:	4b21      	ldr	r3, [pc, #132]	; (800dd80 <vTaskStartScheduler+0xc4>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d002      	beq.n	800dd06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd00:	2301      	movs	r3, #1
 800dd02:	617b      	str	r3, [r7, #20]
 800dd04:	e001      	b.n	800dd0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd06:	2300      	movs	r3, #0
 800dd08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d102      	bne.n	800dd16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd10:	f000 fd16 	bl	800e740 <xTimerCreateTimerTask>
 800dd14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d118      	bne.n	800dd4e <vTaskStartScheduler+0x92>
	__asm volatile
 800dd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd20:	b672      	cpsid	i
 800dd22:	f383 8811 	msr	BASEPRI, r3
 800dd26:	f3bf 8f6f 	isb	sy
 800dd2a:	f3bf 8f4f 	dsb	sy
 800dd2e:	b662      	cpsie	i
 800dd30:	613b      	str	r3, [r7, #16]
}
 800dd32:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd34:	4b13      	ldr	r3, [pc, #76]	; (800dd84 <vTaskStartScheduler+0xc8>)
 800dd36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd3c:	4b12      	ldr	r3, [pc, #72]	; (800dd88 <vTaskStartScheduler+0xcc>)
 800dd3e:	2201      	movs	r2, #1
 800dd40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd42:	4b12      	ldr	r3, [pc, #72]	; (800dd8c <vTaskStartScheduler+0xd0>)
 800dd44:	2200      	movs	r2, #0
 800dd46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd48:	f001 f9aa 	bl	800f0a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd4c:	e010      	b.n	800dd70 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd54:	d10c      	bne.n	800dd70 <vTaskStartScheduler+0xb4>
	__asm volatile
 800dd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5a:	b672      	cpsid	i
 800dd5c:	f383 8811 	msr	BASEPRI, r3
 800dd60:	f3bf 8f6f 	isb	sy
 800dd64:	f3bf 8f4f 	dsb	sy
 800dd68:	b662      	cpsie	i
 800dd6a:	60fb      	str	r3, [r7, #12]
}
 800dd6c:	bf00      	nop
 800dd6e:	e7fe      	b.n	800dd6e <vTaskStartScheduler+0xb2>
}
 800dd70:	bf00      	nop
 800dd72:	3718      	adds	r7, #24
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	080115b0 	.word	0x080115b0
 800dd7c:	0800e3c9 	.word	0x0800e3c9
 800dd80:	20008adc 	.word	0x20008adc
 800dd84:	20008ad8 	.word	0x20008ad8
 800dd88:	20008ac4 	.word	0x20008ac4
 800dd8c:	20008abc 	.word	0x20008abc

0800dd90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd90:	b480      	push	{r7}
 800dd92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800dd94:	4b04      	ldr	r3, [pc, #16]	; (800dda8 <vTaskSuspendAll+0x18>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	4a03      	ldr	r2, [pc, #12]	; (800dda8 <vTaskSuspendAll+0x18>)
 800dd9c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800dd9e:	bf00      	nop
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr
 800dda8:	20008ae0 	.word	0x20008ae0

0800ddac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ddba:	4b43      	ldr	r3, [pc, #268]	; (800dec8 <xTaskResumeAll+0x11c>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d10c      	bne.n	800dddc <xTaskResumeAll+0x30>
	__asm volatile
 800ddc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc6:	b672      	cpsid	i
 800ddc8:	f383 8811 	msr	BASEPRI, r3
 800ddcc:	f3bf 8f6f 	isb	sy
 800ddd0:	f3bf 8f4f 	dsb	sy
 800ddd4:	b662      	cpsie	i
 800ddd6:	603b      	str	r3, [r7, #0]
}
 800ddd8:	bf00      	nop
 800ddda:	e7fe      	b.n	800ddda <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dddc:	f001 f9de 	bl	800f19c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dde0:	4b39      	ldr	r3, [pc, #228]	; (800dec8 <xTaskResumeAll+0x11c>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	3b01      	subs	r3, #1
 800dde6:	4a38      	ldr	r2, [pc, #224]	; (800dec8 <xTaskResumeAll+0x11c>)
 800dde8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddea:	4b37      	ldr	r3, [pc, #220]	; (800dec8 <xTaskResumeAll+0x11c>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d162      	bne.n	800deb8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ddf2:	4b36      	ldr	r3, [pc, #216]	; (800decc <xTaskResumeAll+0x120>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d05e      	beq.n	800deb8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ddfa:	e02f      	b.n	800de5c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddfc:	4b34      	ldr	r3, [pc, #208]	; (800ded0 <xTaskResumeAll+0x124>)
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	3318      	adds	r3, #24
 800de08:	4618      	mov	r0, r3
 800de0a:	f7ff f843 	bl	800ce94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	3304      	adds	r3, #4
 800de12:	4618      	mov	r0, r3
 800de14:	f7ff f83e 	bl	800ce94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de1c:	4b2d      	ldr	r3, [pc, #180]	; (800ded4 <xTaskResumeAll+0x128>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	429a      	cmp	r2, r3
 800de22:	d903      	bls.n	800de2c <xTaskResumeAll+0x80>
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de28:	4a2a      	ldr	r2, [pc, #168]	; (800ded4 <xTaskResumeAll+0x128>)
 800de2a:	6013      	str	r3, [r2, #0]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de30:	4613      	mov	r3, r2
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	4413      	add	r3, r2
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	4a27      	ldr	r2, [pc, #156]	; (800ded8 <xTaskResumeAll+0x12c>)
 800de3a:	441a      	add	r2, r3
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	3304      	adds	r3, #4
 800de40:	4619      	mov	r1, r3
 800de42:	4610      	mov	r0, r2
 800de44:	f7fe ffc9 	bl	800cdda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de4c:	4b23      	ldr	r3, [pc, #140]	; (800dedc <xTaskResumeAll+0x130>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de52:	429a      	cmp	r2, r3
 800de54:	d302      	bcc.n	800de5c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800de56:	4b22      	ldr	r3, [pc, #136]	; (800dee0 <xTaskResumeAll+0x134>)
 800de58:	2201      	movs	r2, #1
 800de5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de5c:	4b1c      	ldr	r3, [pc, #112]	; (800ded0 <xTaskResumeAll+0x124>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d1cb      	bne.n	800ddfc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d001      	beq.n	800de6e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de6a:	f000 fb65 	bl	800e538 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800de6e:	4b1d      	ldr	r3, [pc, #116]	; (800dee4 <xTaskResumeAll+0x138>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d010      	beq.n	800de9c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de7a:	f000 f847 	bl	800df0c <xTaskIncrementTick>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800de84:	4b16      	ldr	r3, [pc, #88]	; (800dee0 <xTaskResumeAll+0x134>)
 800de86:	2201      	movs	r2, #1
 800de88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	3b01      	subs	r3, #1
 800de8e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1f1      	bne.n	800de7a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800de96:	4b13      	ldr	r3, [pc, #76]	; (800dee4 <xTaskResumeAll+0x138>)
 800de98:	2200      	movs	r2, #0
 800de9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de9c:	4b10      	ldr	r3, [pc, #64]	; (800dee0 <xTaskResumeAll+0x134>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d009      	beq.n	800deb8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dea4:	2301      	movs	r3, #1
 800dea6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dea8:	4b0f      	ldr	r3, [pc, #60]	; (800dee8 <xTaskResumeAll+0x13c>)
 800deaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deae:	601a      	str	r2, [r3, #0]
 800deb0:	f3bf 8f4f 	dsb	sy
 800deb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800deb8:	f001 f9a4 	bl	800f204 <vPortExitCritical>

	return xAlreadyYielded;
 800debc:	68bb      	ldr	r3, [r7, #8]
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	20008ae0 	.word	0x20008ae0
 800decc:	20008ab8 	.word	0x20008ab8
 800ded0:	20008a78 	.word	0x20008a78
 800ded4:	20008ac0 	.word	0x20008ac0
 800ded8:	200085e8 	.word	0x200085e8
 800dedc:	200085e4 	.word	0x200085e4
 800dee0:	20008acc 	.word	0x20008acc
 800dee4:	20008ac8 	.word	0x20008ac8
 800dee8:	e000ed04 	.word	0xe000ed04

0800deec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800def2:	4b05      	ldr	r3, [pc, #20]	; (800df08 <xTaskGetTickCount+0x1c>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800def8:	687b      	ldr	r3, [r7, #4]
}
 800defa:	4618      	mov	r0, r3
 800defc:	370c      	adds	r7, #12
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr
 800df06:	bf00      	nop
 800df08:	20008abc 	.word	0x20008abc

0800df0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b086      	sub	sp, #24
 800df10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df12:	2300      	movs	r3, #0
 800df14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df16:	4b50      	ldr	r3, [pc, #320]	; (800e058 <xTaskIncrementTick+0x14c>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f040 808b 	bne.w	800e036 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df20:	4b4e      	ldr	r3, [pc, #312]	; (800e05c <xTaskIncrementTick+0x150>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	3301      	adds	r3, #1
 800df26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df28:	4a4c      	ldr	r2, [pc, #304]	; (800e05c <xTaskIncrementTick+0x150>)
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d122      	bne.n	800df7a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800df34:	4b4a      	ldr	r3, [pc, #296]	; (800e060 <xTaskIncrementTick+0x154>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d00c      	beq.n	800df58 <xTaskIncrementTick+0x4c>
	__asm volatile
 800df3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df42:	b672      	cpsid	i
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	b662      	cpsie	i
 800df52:	603b      	str	r3, [r7, #0]
}
 800df54:	bf00      	nop
 800df56:	e7fe      	b.n	800df56 <xTaskIncrementTick+0x4a>
 800df58:	4b41      	ldr	r3, [pc, #260]	; (800e060 <xTaskIncrementTick+0x154>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	60fb      	str	r3, [r7, #12]
 800df5e:	4b41      	ldr	r3, [pc, #260]	; (800e064 <xTaskIncrementTick+0x158>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a3f      	ldr	r2, [pc, #252]	; (800e060 <xTaskIncrementTick+0x154>)
 800df64:	6013      	str	r3, [r2, #0]
 800df66:	4a3f      	ldr	r2, [pc, #252]	; (800e064 <xTaskIncrementTick+0x158>)
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6013      	str	r3, [r2, #0]
 800df6c:	4b3e      	ldr	r3, [pc, #248]	; (800e068 <xTaskIncrementTick+0x15c>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	3301      	adds	r3, #1
 800df72:	4a3d      	ldr	r2, [pc, #244]	; (800e068 <xTaskIncrementTick+0x15c>)
 800df74:	6013      	str	r3, [r2, #0]
 800df76:	f000 fadf 	bl	800e538 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df7a:	4b3c      	ldr	r3, [pc, #240]	; (800e06c <xTaskIncrementTick+0x160>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	429a      	cmp	r2, r3
 800df82:	d349      	bcc.n	800e018 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df84:	4b36      	ldr	r3, [pc, #216]	; (800e060 <xTaskIncrementTick+0x154>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d104      	bne.n	800df98 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df8e:	4b37      	ldr	r3, [pc, #220]	; (800e06c <xTaskIncrementTick+0x160>)
 800df90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df94:	601a      	str	r2, [r3, #0]
					break;
 800df96:	e03f      	b.n	800e018 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df98:	4b31      	ldr	r3, [pc, #196]	; (800e060 <xTaskIncrementTick+0x154>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dfa8:	693a      	ldr	r2, [r7, #16]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d203      	bcs.n	800dfb8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dfb0:	4a2e      	ldr	r2, [pc, #184]	; (800e06c <xTaskIncrementTick+0x160>)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dfb6:	e02f      	b.n	800e018 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	3304      	adds	r3, #4
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7fe ff69 	bl	800ce94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d004      	beq.n	800dfd4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	3318      	adds	r3, #24
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fe ff60 	bl	800ce94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd8:	4b25      	ldr	r3, [pc, #148]	; (800e070 <xTaskIncrementTick+0x164>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d903      	bls.n	800dfe8 <xTaskIncrementTick+0xdc>
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe4:	4a22      	ldr	r2, [pc, #136]	; (800e070 <xTaskIncrementTick+0x164>)
 800dfe6:	6013      	str	r3, [r2, #0]
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfec:	4613      	mov	r3, r2
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	4413      	add	r3, r2
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	4a1f      	ldr	r2, [pc, #124]	; (800e074 <xTaskIncrementTick+0x168>)
 800dff6:	441a      	add	r2, r3
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	3304      	adds	r3, #4
 800dffc:	4619      	mov	r1, r3
 800dffe:	4610      	mov	r0, r2
 800e000:	f7fe feeb 	bl	800cdda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e008:	4b1b      	ldr	r3, [pc, #108]	; (800e078 <xTaskIncrementTick+0x16c>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00e:	429a      	cmp	r2, r3
 800e010:	d3b8      	bcc.n	800df84 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e012:	2301      	movs	r3, #1
 800e014:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e016:	e7b5      	b.n	800df84 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e018:	4b17      	ldr	r3, [pc, #92]	; (800e078 <xTaskIncrementTick+0x16c>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01e:	4915      	ldr	r1, [pc, #84]	; (800e074 <xTaskIncrementTick+0x168>)
 800e020:	4613      	mov	r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	4413      	add	r3, r2
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	440b      	add	r3, r1
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d907      	bls.n	800e040 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800e030:	2301      	movs	r3, #1
 800e032:	617b      	str	r3, [r7, #20]
 800e034:	e004      	b.n	800e040 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e036:	4b11      	ldr	r3, [pc, #68]	; (800e07c <xTaskIncrementTick+0x170>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	3301      	adds	r3, #1
 800e03c:	4a0f      	ldr	r2, [pc, #60]	; (800e07c <xTaskIncrementTick+0x170>)
 800e03e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e040:	4b0f      	ldr	r3, [pc, #60]	; (800e080 <xTaskIncrementTick+0x174>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d001      	beq.n	800e04c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800e048:	2301      	movs	r3, #1
 800e04a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e04c:	697b      	ldr	r3, [r7, #20]
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3718      	adds	r7, #24
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	20008ae0 	.word	0x20008ae0
 800e05c:	20008abc 	.word	0x20008abc
 800e060:	20008a70 	.word	0x20008a70
 800e064:	20008a74 	.word	0x20008a74
 800e068:	20008ad0 	.word	0x20008ad0
 800e06c:	20008ad8 	.word	0x20008ad8
 800e070:	20008ac0 	.word	0x20008ac0
 800e074:	200085e8 	.word	0x200085e8
 800e078:	200085e4 	.word	0x200085e4
 800e07c:	20008ac8 	.word	0x20008ac8
 800e080:	20008acc 	.word	0x20008acc

0800e084 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e08a:	4b29      	ldr	r3, [pc, #164]	; (800e130 <vTaskSwitchContext+0xac>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d003      	beq.n	800e09a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e092:	4b28      	ldr	r3, [pc, #160]	; (800e134 <vTaskSwitchContext+0xb0>)
 800e094:	2201      	movs	r2, #1
 800e096:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e098:	e043      	b.n	800e122 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800e09a:	4b26      	ldr	r3, [pc, #152]	; (800e134 <vTaskSwitchContext+0xb0>)
 800e09c:	2200      	movs	r2, #0
 800e09e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0a0:	4b25      	ldr	r3, [pc, #148]	; (800e138 <vTaskSwitchContext+0xb4>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	60fb      	str	r3, [r7, #12]
 800e0a6:	e012      	b.n	800e0ce <vTaskSwitchContext+0x4a>
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10c      	bne.n	800e0c8 <vTaskSwitchContext+0x44>
	__asm volatile
 800e0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b2:	b672      	cpsid	i
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	b662      	cpsie	i
 800e0c2:	607b      	str	r3, [r7, #4]
}
 800e0c4:	bf00      	nop
 800e0c6:	e7fe      	b.n	800e0c6 <vTaskSwitchContext+0x42>
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	60fb      	str	r3, [r7, #12]
 800e0ce:	491b      	ldr	r1, [pc, #108]	; (800e13c <vTaskSwitchContext+0xb8>)
 800e0d0:	68fa      	ldr	r2, [r7, #12]
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	4413      	add	r3, r2
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	440b      	add	r3, r1
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d0e2      	beq.n	800e0a8 <vTaskSwitchContext+0x24>
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	4613      	mov	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	4413      	add	r3, r2
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	4a13      	ldr	r2, [pc, #76]	; (800e13c <vTaskSwitchContext+0xb8>)
 800e0ee:	4413      	add	r3, r2
 800e0f0:	60bb      	str	r3, [r7, #8]
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	685a      	ldr	r2, [r3, #4]
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	605a      	str	r2, [r3, #4]
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	685a      	ldr	r2, [r3, #4]
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	3308      	adds	r3, #8
 800e104:	429a      	cmp	r2, r3
 800e106:	d104      	bne.n	800e112 <vTaskSwitchContext+0x8e>
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	685a      	ldr	r2, [r3, #4]
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	605a      	str	r2, [r3, #4]
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	4a09      	ldr	r2, [pc, #36]	; (800e140 <vTaskSwitchContext+0xbc>)
 800e11a:	6013      	str	r3, [r2, #0]
 800e11c:	4a06      	ldr	r2, [pc, #24]	; (800e138 <vTaskSwitchContext+0xb4>)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6013      	str	r3, [r2, #0]
}
 800e122:	bf00      	nop
 800e124:	3714      	adds	r7, #20
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop
 800e130:	20008ae0 	.word	0x20008ae0
 800e134:	20008acc 	.word	0x20008acc
 800e138:	20008ac0 	.word	0x20008ac0
 800e13c:	200085e8 	.word	0x200085e8
 800e140:	200085e4 	.word	0x200085e4

0800e144 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d10c      	bne.n	800e16e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e158:	b672      	cpsid	i
 800e15a:	f383 8811 	msr	BASEPRI, r3
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	b662      	cpsie	i
 800e168:	60fb      	str	r3, [r7, #12]
}
 800e16a:	bf00      	nop
 800e16c:	e7fe      	b.n	800e16c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e16e:	4b07      	ldr	r3, [pc, #28]	; (800e18c <vTaskPlaceOnEventList+0x48>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	3318      	adds	r3, #24
 800e174:	4619      	mov	r1, r3
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7fe fe53 	bl	800ce22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e17c:	2101      	movs	r1, #1
 800e17e:	6838      	ldr	r0, [r7, #0]
 800e180:	f000 fa8a 	bl	800e698 <prvAddCurrentTaskToDelayedList>
}
 800e184:	bf00      	nop
 800e186:	3710      	adds	r7, #16
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	200085e4 	.word	0x200085e4

0800e190 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e190:	b580      	push	{r7, lr}
 800e192:	b086      	sub	sp, #24
 800e194:	af00      	add	r7, sp, #0
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d10c      	bne.n	800e1bc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800e1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a6:	b672      	cpsid	i
 800e1a8:	f383 8811 	msr	BASEPRI, r3
 800e1ac:	f3bf 8f6f 	isb	sy
 800e1b0:	f3bf 8f4f 	dsb	sy
 800e1b4:	b662      	cpsie	i
 800e1b6:	617b      	str	r3, [r7, #20]
}
 800e1b8:	bf00      	nop
 800e1ba:	e7fe      	b.n	800e1ba <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e1bc:	4b0a      	ldr	r3, [pc, #40]	; (800e1e8 <vTaskPlaceOnEventListRestricted+0x58>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	3318      	adds	r3, #24
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	68f8      	ldr	r0, [r7, #12]
 800e1c6:	f7fe fe08 	bl	800cdda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d002      	beq.n	800e1d6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800e1d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e1d6:	6879      	ldr	r1, [r7, #4]
 800e1d8:	68b8      	ldr	r0, [r7, #8]
 800e1da:	f000 fa5d 	bl	800e698 <prvAddCurrentTaskToDelayedList>
	}
 800e1de:	bf00      	nop
 800e1e0:	3718      	adds	r7, #24
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	200085e4 	.word	0x200085e4

0800e1ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b086      	sub	sp, #24
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	68db      	ldr	r3, [r3, #12]
 800e1fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d10c      	bne.n	800e21c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e206:	b672      	cpsid	i
 800e208:	f383 8811 	msr	BASEPRI, r3
 800e20c:	f3bf 8f6f 	isb	sy
 800e210:	f3bf 8f4f 	dsb	sy
 800e214:	b662      	cpsie	i
 800e216:	60fb      	str	r3, [r7, #12]
}
 800e218:	bf00      	nop
 800e21a:	e7fe      	b.n	800e21a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	3318      	adds	r3, #24
 800e220:	4618      	mov	r0, r3
 800e222:	f7fe fe37 	bl	800ce94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e226:	4b1e      	ldr	r3, [pc, #120]	; (800e2a0 <xTaskRemoveFromEventList+0xb4>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d11d      	bne.n	800e26a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	3304      	adds	r3, #4
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe fe2e 	bl	800ce94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e23c:	4b19      	ldr	r3, [pc, #100]	; (800e2a4 <xTaskRemoveFromEventList+0xb8>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	429a      	cmp	r2, r3
 800e242:	d903      	bls.n	800e24c <xTaskRemoveFromEventList+0x60>
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e248:	4a16      	ldr	r2, [pc, #88]	; (800e2a4 <xTaskRemoveFromEventList+0xb8>)
 800e24a:	6013      	str	r3, [r2, #0]
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e250:	4613      	mov	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	4413      	add	r3, r2
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4a13      	ldr	r2, [pc, #76]	; (800e2a8 <xTaskRemoveFromEventList+0xbc>)
 800e25a:	441a      	add	r2, r3
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	3304      	adds	r3, #4
 800e260:	4619      	mov	r1, r3
 800e262:	4610      	mov	r0, r2
 800e264:	f7fe fdb9 	bl	800cdda <vListInsertEnd>
 800e268:	e005      	b.n	800e276 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	3318      	adds	r3, #24
 800e26e:	4619      	mov	r1, r3
 800e270:	480e      	ldr	r0, [pc, #56]	; (800e2ac <xTaskRemoveFromEventList+0xc0>)
 800e272:	f7fe fdb2 	bl	800cdda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e27a:	4b0d      	ldr	r3, [pc, #52]	; (800e2b0 <xTaskRemoveFromEventList+0xc4>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e280:	429a      	cmp	r2, r3
 800e282:	d905      	bls.n	800e290 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e284:	2301      	movs	r3, #1
 800e286:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e288:	4b0a      	ldr	r3, [pc, #40]	; (800e2b4 <xTaskRemoveFromEventList+0xc8>)
 800e28a:	2201      	movs	r2, #1
 800e28c:	601a      	str	r2, [r3, #0]
 800e28e:	e001      	b.n	800e294 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800e290:	2300      	movs	r3, #0
 800e292:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e294:	697b      	ldr	r3, [r7, #20]
}
 800e296:	4618      	mov	r0, r3
 800e298:	3718      	adds	r7, #24
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	20008ae0 	.word	0x20008ae0
 800e2a4:	20008ac0 	.word	0x20008ac0
 800e2a8:	200085e8 	.word	0x200085e8
 800e2ac:	20008a78 	.word	0x20008a78
 800e2b0:	200085e4 	.word	0x200085e4
 800e2b4:	20008acc 	.word	0x20008acc

0800e2b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b083      	sub	sp, #12
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e2c0:	4b06      	ldr	r3, [pc, #24]	; (800e2dc <vTaskInternalSetTimeOutState+0x24>)
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e2c8:	4b05      	ldr	r3, [pc, #20]	; (800e2e0 <vTaskInternalSetTimeOutState+0x28>)
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	605a      	str	r2, [r3, #4]
}
 800e2d0:	bf00      	nop
 800e2d2:	370c      	adds	r7, #12
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr
 800e2dc:	20008ad0 	.word	0x20008ad0
 800e2e0:	20008abc 	.word	0x20008abc

0800e2e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b088      	sub	sp, #32
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d10c      	bne.n	800e30e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f8:	b672      	cpsid	i
 800e2fa:	f383 8811 	msr	BASEPRI, r3
 800e2fe:	f3bf 8f6f 	isb	sy
 800e302:	f3bf 8f4f 	dsb	sy
 800e306:	b662      	cpsie	i
 800e308:	613b      	str	r3, [r7, #16]
}
 800e30a:	bf00      	nop
 800e30c:	e7fe      	b.n	800e30c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d10c      	bne.n	800e32e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e318:	b672      	cpsid	i
 800e31a:	f383 8811 	msr	BASEPRI, r3
 800e31e:	f3bf 8f6f 	isb	sy
 800e322:	f3bf 8f4f 	dsb	sy
 800e326:	b662      	cpsie	i
 800e328:	60fb      	str	r3, [r7, #12]
}
 800e32a:	bf00      	nop
 800e32c:	e7fe      	b.n	800e32c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e32e:	f000 ff35 	bl	800f19c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e332:	4b1d      	ldr	r3, [pc, #116]	; (800e3a8 <xTaskCheckForTimeOut+0xc4>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	69ba      	ldr	r2, [r7, #24]
 800e33e:	1ad3      	subs	r3, r2, r3
 800e340:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e34a:	d102      	bne.n	800e352 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e34c:	2300      	movs	r3, #0
 800e34e:	61fb      	str	r3, [r7, #28]
 800e350:	e023      	b.n	800e39a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	4b15      	ldr	r3, [pc, #84]	; (800e3ac <xTaskCheckForTimeOut+0xc8>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d007      	beq.n	800e36e <xTaskCheckForTimeOut+0x8a>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	69ba      	ldr	r2, [r7, #24]
 800e364:	429a      	cmp	r2, r3
 800e366:	d302      	bcc.n	800e36e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e368:	2301      	movs	r3, #1
 800e36a:	61fb      	str	r3, [r7, #28]
 800e36c:	e015      	b.n	800e39a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	697a      	ldr	r2, [r7, #20]
 800e374:	429a      	cmp	r2, r3
 800e376:	d20b      	bcs.n	800e390 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	1ad2      	subs	r2, r2, r3
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f7ff ff97 	bl	800e2b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e38a:	2300      	movs	r3, #0
 800e38c:	61fb      	str	r3, [r7, #28]
 800e38e:	e004      	b.n	800e39a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	2200      	movs	r2, #0
 800e394:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e396:	2301      	movs	r3, #1
 800e398:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e39a:	f000 ff33 	bl	800f204 <vPortExitCritical>

	return xReturn;
 800e39e:	69fb      	ldr	r3, [r7, #28]
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3720      	adds	r7, #32
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	20008abc 	.word	0x20008abc
 800e3ac:	20008ad0 	.word	0x20008ad0

0800e3b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e3b4:	4b03      	ldr	r3, [pc, #12]	; (800e3c4 <vTaskMissedYield+0x14>)
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	601a      	str	r2, [r3, #0]
}
 800e3ba:	bf00      	nop
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr
 800e3c4:	20008acc 	.word	0x20008acc

0800e3c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e3d0:	f000 f852 	bl	800e478 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3d4:	4b06      	ldr	r3, [pc, #24]	; (800e3f0 <prvIdleTask+0x28>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d9f9      	bls.n	800e3d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e3dc:	4b05      	ldr	r3, [pc, #20]	; (800e3f4 <prvIdleTask+0x2c>)
 800e3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3e2:	601a      	str	r2, [r3, #0]
 800e3e4:	f3bf 8f4f 	dsb	sy
 800e3e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3ec:	e7f0      	b.n	800e3d0 <prvIdleTask+0x8>
 800e3ee:	bf00      	nop
 800e3f0:	200085e8 	.word	0x200085e8
 800e3f4:	e000ed04 	.word	0xe000ed04

0800e3f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3fe:	2300      	movs	r3, #0
 800e400:	607b      	str	r3, [r7, #4]
 800e402:	e00c      	b.n	800e41e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	4613      	mov	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	009b      	lsls	r3, r3, #2
 800e40e:	4a12      	ldr	r2, [pc, #72]	; (800e458 <prvInitialiseTaskLists+0x60>)
 800e410:	4413      	add	r3, r2
 800e412:	4618      	mov	r0, r3
 800e414:	f7fe fcb4 	bl	800cd80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	3301      	adds	r3, #1
 800e41c:	607b      	str	r3, [r7, #4]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2b37      	cmp	r3, #55	; 0x37
 800e422:	d9ef      	bls.n	800e404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e424:	480d      	ldr	r0, [pc, #52]	; (800e45c <prvInitialiseTaskLists+0x64>)
 800e426:	f7fe fcab 	bl	800cd80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e42a:	480d      	ldr	r0, [pc, #52]	; (800e460 <prvInitialiseTaskLists+0x68>)
 800e42c:	f7fe fca8 	bl	800cd80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e430:	480c      	ldr	r0, [pc, #48]	; (800e464 <prvInitialiseTaskLists+0x6c>)
 800e432:	f7fe fca5 	bl	800cd80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e436:	480c      	ldr	r0, [pc, #48]	; (800e468 <prvInitialiseTaskLists+0x70>)
 800e438:	f7fe fca2 	bl	800cd80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e43c:	480b      	ldr	r0, [pc, #44]	; (800e46c <prvInitialiseTaskLists+0x74>)
 800e43e:	f7fe fc9f 	bl	800cd80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e442:	4b0b      	ldr	r3, [pc, #44]	; (800e470 <prvInitialiseTaskLists+0x78>)
 800e444:	4a05      	ldr	r2, [pc, #20]	; (800e45c <prvInitialiseTaskLists+0x64>)
 800e446:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e448:	4b0a      	ldr	r3, [pc, #40]	; (800e474 <prvInitialiseTaskLists+0x7c>)
 800e44a:	4a05      	ldr	r2, [pc, #20]	; (800e460 <prvInitialiseTaskLists+0x68>)
 800e44c:	601a      	str	r2, [r3, #0]
}
 800e44e:	bf00      	nop
 800e450:	3708      	adds	r7, #8
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	200085e8 	.word	0x200085e8
 800e45c:	20008a48 	.word	0x20008a48
 800e460:	20008a5c 	.word	0x20008a5c
 800e464:	20008a78 	.word	0x20008a78
 800e468:	20008a8c 	.word	0x20008a8c
 800e46c:	20008aa4 	.word	0x20008aa4
 800e470:	20008a70 	.word	0x20008a70
 800e474:	20008a74 	.word	0x20008a74

0800e478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e47e:	e019      	b.n	800e4b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e480:	f000 fe8c 	bl	800f19c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e484:	4b10      	ldr	r3, [pc, #64]	; (800e4c8 <prvCheckTasksWaitingTermination+0x50>)
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	3304      	adds	r3, #4
 800e490:	4618      	mov	r0, r3
 800e492:	f7fe fcff 	bl	800ce94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e496:	4b0d      	ldr	r3, [pc, #52]	; (800e4cc <prvCheckTasksWaitingTermination+0x54>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	3b01      	subs	r3, #1
 800e49c:	4a0b      	ldr	r2, [pc, #44]	; (800e4cc <prvCheckTasksWaitingTermination+0x54>)
 800e49e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e4a0:	4b0b      	ldr	r3, [pc, #44]	; (800e4d0 <prvCheckTasksWaitingTermination+0x58>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	3b01      	subs	r3, #1
 800e4a6:	4a0a      	ldr	r2, [pc, #40]	; (800e4d0 <prvCheckTasksWaitingTermination+0x58>)
 800e4a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e4aa:	f000 feab 	bl	800f204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 f810 	bl	800e4d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4b4:	4b06      	ldr	r3, [pc, #24]	; (800e4d0 <prvCheckTasksWaitingTermination+0x58>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1e1      	bne.n	800e480 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e4bc:	bf00      	nop
 800e4be:	bf00      	nop
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	20008a8c 	.word	0x20008a8c
 800e4cc:	20008ab8 	.word	0x20008ab8
 800e4d0:	20008aa0 	.word	0x20008aa0

0800e4d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b084      	sub	sp, #16
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d108      	bne.n	800e4f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f001 f84c 	bl	800f588 <vPortFree>
				vPortFree( pxTCB );
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f001 f849 	bl	800f588 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4f6:	e01a      	b.n	800e52e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	d103      	bne.n	800e50a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f001 f840 	bl	800f588 <vPortFree>
	}
 800e508:	e011      	b.n	800e52e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e510:	2b02      	cmp	r3, #2
 800e512:	d00c      	beq.n	800e52e <prvDeleteTCB+0x5a>
	__asm volatile
 800e514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e518:	b672      	cpsid	i
 800e51a:	f383 8811 	msr	BASEPRI, r3
 800e51e:	f3bf 8f6f 	isb	sy
 800e522:	f3bf 8f4f 	dsb	sy
 800e526:	b662      	cpsie	i
 800e528:	60fb      	str	r3, [r7, #12]
}
 800e52a:	bf00      	nop
 800e52c:	e7fe      	b.n	800e52c <prvDeleteTCB+0x58>
	}
 800e52e:	bf00      	nop
 800e530:	3710      	adds	r7, #16
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
	...

0800e538 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e538:	b480      	push	{r7}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e53e:	4b0c      	ldr	r3, [pc, #48]	; (800e570 <prvResetNextTaskUnblockTime+0x38>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d104      	bne.n	800e552 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e548:	4b0a      	ldr	r3, [pc, #40]	; (800e574 <prvResetNextTaskUnblockTime+0x3c>)
 800e54a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e54e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e550:	e008      	b.n	800e564 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e552:	4b07      	ldr	r3, [pc, #28]	; (800e570 <prvResetNextTaskUnblockTime+0x38>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	4a04      	ldr	r2, [pc, #16]	; (800e574 <prvResetNextTaskUnblockTime+0x3c>)
 800e562:	6013      	str	r3, [r2, #0]
}
 800e564:	bf00      	nop
 800e566:	370c      	adds	r7, #12
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr
 800e570:	20008a70 	.word	0x20008a70
 800e574:	20008ad8 	.word	0x20008ad8

0800e578 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e578:	b480      	push	{r7}
 800e57a:	b083      	sub	sp, #12
 800e57c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e57e:	4b0b      	ldr	r3, [pc, #44]	; (800e5ac <xTaskGetSchedulerState+0x34>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d102      	bne.n	800e58c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e586:	2301      	movs	r3, #1
 800e588:	607b      	str	r3, [r7, #4]
 800e58a:	e008      	b.n	800e59e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e58c:	4b08      	ldr	r3, [pc, #32]	; (800e5b0 <xTaskGetSchedulerState+0x38>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d102      	bne.n	800e59a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e594:	2302      	movs	r3, #2
 800e596:	607b      	str	r3, [r7, #4]
 800e598:	e001      	b.n	800e59e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e59a:	2300      	movs	r3, #0
 800e59c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e59e:	687b      	ldr	r3, [r7, #4]
	}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr
 800e5ac:	20008ac4 	.word	0x20008ac4
 800e5b0:	20008ae0 	.word	0x20008ae0

0800e5b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b086      	sub	sp, #24
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d05a      	beq.n	800e680 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e5ca:	4b30      	ldr	r3, [pc, #192]	; (800e68c <xTaskPriorityDisinherit+0xd8>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	693a      	ldr	r2, [r7, #16]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d00c      	beq.n	800e5ee <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d8:	b672      	cpsid	i
 800e5da:	f383 8811 	msr	BASEPRI, r3
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f3bf 8f4f 	dsb	sy
 800e5e6:	b662      	cpsie	i
 800e5e8:	60fb      	str	r3, [r7, #12]
}
 800e5ea:	bf00      	nop
 800e5ec:	e7fe      	b.n	800e5ec <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d10c      	bne.n	800e610 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fa:	b672      	cpsid	i
 800e5fc:	f383 8811 	msr	BASEPRI, r3
 800e600:	f3bf 8f6f 	isb	sy
 800e604:	f3bf 8f4f 	dsb	sy
 800e608:	b662      	cpsie	i
 800e60a:	60bb      	str	r3, [r7, #8]
}
 800e60c:	bf00      	nop
 800e60e:	e7fe      	b.n	800e60e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e614:	1e5a      	subs	r2, r3, #1
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e622:	429a      	cmp	r2, r3
 800e624:	d02c      	beq.n	800e680 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d128      	bne.n	800e680 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	3304      	adds	r3, #4
 800e632:	4618      	mov	r0, r3
 800e634:	f7fe fc2e 	bl	800ce94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e644:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e650:	4b0f      	ldr	r3, [pc, #60]	; (800e690 <xTaskPriorityDisinherit+0xdc>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	429a      	cmp	r2, r3
 800e656:	d903      	bls.n	800e660 <xTaskPriorityDisinherit+0xac>
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e65c:	4a0c      	ldr	r2, [pc, #48]	; (800e690 <xTaskPriorityDisinherit+0xdc>)
 800e65e:	6013      	str	r3, [r2, #0]
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e664:	4613      	mov	r3, r2
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	4413      	add	r3, r2
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	4a09      	ldr	r2, [pc, #36]	; (800e694 <xTaskPriorityDisinherit+0xe0>)
 800e66e:	441a      	add	r2, r3
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	3304      	adds	r3, #4
 800e674:	4619      	mov	r1, r3
 800e676:	4610      	mov	r0, r2
 800e678:	f7fe fbaf 	bl	800cdda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e67c:	2301      	movs	r3, #1
 800e67e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e680:	697b      	ldr	r3, [r7, #20]
	}
 800e682:	4618      	mov	r0, r3
 800e684:	3718      	adds	r7, #24
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	200085e4 	.word	0x200085e4
 800e690:	20008ac0 	.word	0x20008ac0
 800e694:	200085e8 	.word	0x200085e8

0800e698 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e6a2:	4b21      	ldr	r3, [pc, #132]	; (800e728 <prvAddCurrentTaskToDelayedList+0x90>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6a8:	4b20      	ldr	r3, [pc, #128]	; (800e72c <prvAddCurrentTaskToDelayedList+0x94>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	3304      	adds	r3, #4
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fe fbf0 	bl	800ce94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6ba:	d10a      	bne.n	800e6d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d007      	beq.n	800e6d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6c2:	4b1a      	ldr	r3, [pc, #104]	; (800e72c <prvAddCurrentTaskToDelayedList+0x94>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	3304      	adds	r3, #4
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	4819      	ldr	r0, [pc, #100]	; (800e730 <prvAddCurrentTaskToDelayedList+0x98>)
 800e6cc:	f7fe fb85 	bl	800cdda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e6d0:	e026      	b.n	800e720 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e6d2:	68fa      	ldr	r2, [r7, #12]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e6da:	4b14      	ldr	r3, [pc, #80]	; (800e72c <prvAddCurrentTaskToDelayedList+0x94>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	68ba      	ldr	r2, [r7, #8]
 800e6e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e6e2:	68ba      	ldr	r2, [r7, #8]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d209      	bcs.n	800e6fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6ea:	4b12      	ldr	r3, [pc, #72]	; (800e734 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	4b0f      	ldr	r3, [pc, #60]	; (800e72c <prvAddCurrentTaskToDelayedList+0x94>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	3304      	adds	r3, #4
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	4610      	mov	r0, r2
 800e6f8:	f7fe fb93 	bl	800ce22 <vListInsert>
}
 800e6fc:	e010      	b.n	800e720 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6fe:	4b0e      	ldr	r3, [pc, #56]	; (800e738 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	4b0a      	ldr	r3, [pc, #40]	; (800e72c <prvAddCurrentTaskToDelayedList+0x94>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	3304      	adds	r3, #4
 800e708:	4619      	mov	r1, r3
 800e70a:	4610      	mov	r0, r2
 800e70c:	f7fe fb89 	bl	800ce22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e710:	4b0a      	ldr	r3, [pc, #40]	; (800e73c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	68ba      	ldr	r2, [r7, #8]
 800e716:	429a      	cmp	r2, r3
 800e718:	d202      	bcs.n	800e720 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e71a:	4a08      	ldr	r2, [pc, #32]	; (800e73c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	6013      	str	r3, [r2, #0]
}
 800e720:	bf00      	nop
 800e722:	3710      	adds	r7, #16
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	20008abc 	.word	0x20008abc
 800e72c:	200085e4 	.word	0x200085e4
 800e730:	20008aa4 	.word	0x20008aa4
 800e734:	20008a74 	.word	0x20008a74
 800e738:	20008a70 	.word	0x20008a70
 800e73c:	20008ad8 	.word	0x20008ad8

0800e740 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b08a      	sub	sp, #40	; 0x28
 800e744:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e746:	2300      	movs	r3, #0
 800e748:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e74a:	f000 fbb5 	bl	800eeb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e74e:	4b1d      	ldr	r3, [pc, #116]	; (800e7c4 <xTimerCreateTimerTask+0x84>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d021      	beq.n	800e79a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e756:	2300      	movs	r3, #0
 800e758:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e75a:	2300      	movs	r3, #0
 800e75c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e75e:	1d3a      	adds	r2, r7, #4
 800e760:	f107 0108 	add.w	r1, r7, #8
 800e764:	f107 030c 	add.w	r3, r7, #12
 800e768:	4618      	mov	r0, r3
 800e76a:	f7fe faef 	bl	800cd4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e76e:	6879      	ldr	r1, [r7, #4]
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	9202      	str	r2, [sp, #8]
 800e776:	9301      	str	r3, [sp, #4]
 800e778:	2302      	movs	r3, #2
 800e77a:	9300      	str	r3, [sp, #0]
 800e77c:	2300      	movs	r3, #0
 800e77e:	460a      	mov	r2, r1
 800e780:	4911      	ldr	r1, [pc, #68]	; (800e7c8 <xTimerCreateTimerTask+0x88>)
 800e782:	4812      	ldr	r0, [pc, #72]	; (800e7cc <xTimerCreateTimerTask+0x8c>)
 800e784:	f7ff f8ba 	bl	800d8fc <xTaskCreateStatic>
 800e788:	4603      	mov	r3, r0
 800e78a:	4a11      	ldr	r2, [pc, #68]	; (800e7d0 <xTimerCreateTimerTask+0x90>)
 800e78c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e78e:	4b10      	ldr	r3, [pc, #64]	; (800e7d0 <xTimerCreateTimerTask+0x90>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d001      	beq.n	800e79a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e796:	2301      	movs	r3, #1
 800e798:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d10c      	bne.n	800e7ba <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800e7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a4:	b672      	cpsid	i
 800e7a6:	f383 8811 	msr	BASEPRI, r3
 800e7aa:	f3bf 8f6f 	isb	sy
 800e7ae:	f3bf 8f4f 	dsb	sy
 800e7b2:	b662      	cpsie	i
 800e7b4:	613b      	str	r3, [r7, #16]
}
 800e7b6:	bf00      	nop
 800e7b8:	e7fe      	b.n	800e7b8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800e7ba:	697b      	ldr	r3, [r7, #20]
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3718      	adds	r7, #24
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	20008b14 	.word	0x20008b14
 800e7c8:	080115b8 	.word	0x080115b8
 800e7cc:	0800ea51 	.word	0x0800ea51
 800e7d0:	20008b18 	.word	0x20008b18

0800e7d4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b088      	sub	sp, #32
 800e7d8:	af02      	add	r7, sp, #8
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	607a      	str	r2, [r7, #4]
 800e7e0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e7e2:	202c      	movs	r0, #44	; 0x2c
 800e7e4:	f000 fe06 	bl	800f3f4 <pvPortMalloc>
 800e7e8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d00d      	beq.n	800e80c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	9301      	str	r3, [sp, #4]
 800e7fc:	6a3b      	ldr	r3, [r7, #32]
 800e7fe:	9300      	str	r3, [sp, #0]
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	687a      	ldr	r2, [r7, #4]
 800e804:	68b9      	ldr	r1, [r7, #8]
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f000 f847 	bl	800e89a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e80c:	697b      	ldr	r3, [r7, #20]
	}
 800e80e:	4618      	mov	r0, r3
 800e810:	3718      	adds	r7, #24
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}

0800e816 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800e816:	b580      	push	{r7, lr}
 800e818:	b08a      	sub	sp, #40	; 0x28
 800e81a:	af02      	add	r7, sp, #8
 800e81c:	60f8      	str	r0, [r7, #12]
 800e81e:	60b9      	str	r1, [r7, #8]
 800e820:	607a      	str	r2, [r7, #4]
 800e822:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800e824:	232c      	movs	r3, #44	; 0x2c
 800e826:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	2b2c      	cmp	r3, #44	; 0x2c
 800e82c:	d00c      	beq.n	800e848 <xTimerCreateStatic+0x32>
	__asm volatile
 800e82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e832:	b672      	cpsid	i
 800e834:	f383 8811 	msr	BASEPRI, r3
 800e838:	f3bf 8f6f 	isb	sy
 800e83c:	f3bf 8f4f 	dsb	sy
 800e840:	b662      	cpsie	i
 800e842:	61bb      	str	r3, [r7, #24]
}
 800e844:	bf00      	nop
 800e846:	e7fe      	b.n	800e846 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e848:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800e84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10c      	bne.n	800e86a <xTimerCreateStatic+0x54>
	__asm volatile
 800e850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e854:	b672      	cpsid	i
 800e856:	f383 8811 	msr	BASEPRI, r3
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	b662      	cpsie	i
 800e864:	617b      	str	r3, [r7, #20]
}
 800e866:	bf00      	nop
 800e868:	e7fe      	b.n	800e868 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800e86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800e86e:	69fb      	ldr	r3, [r7, #28]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00d      	beq.n	800e890 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	2202      	movs	r2, #2
 800e878:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	9301      	str	r3, [sp, #4]
 800e880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e882:	9300      	str	r3, [sp, #0]
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	68b9      	ldr	r1, [r7, #8]
 800e88a:	68f8      	ldr	r0, [r7, #12]
 800e88c:	f000 f805 	bl	800e89a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e890:	69fb      	ldr	r3, [r7, #28]
	}
 800e892:	4618      	mov	r0, r3
 800e894:	3720      	adds	r7, #32
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}

0800e89a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800e89a:	b580      	push	{r7, lr}
 800e89c:	b086      	sub	sp, #24
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	60f8      	str	r0, [r7, #12]
 800e8a2:	60b9      	str	r1, [r7, #8]
 800e8a4:	607a      	str	r2, [r7, #4]
 800e8a6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d10c      	bne.n	800e8c8 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800e8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b2:	b672      	cpsid	i
 800e8b4:	f383 8811 	msr	BASEPRI, r3
 800e8b8:	f3bf 8f6f 	isb	sy
 800e8bc:	f3bf 8f4f 	dsb	sy
 800e8c0:	b662      	cpsie	i
 800e8c2:	617b      	str	r3, [r7, #20]
}
 800e8c4:	bf00      	nop
 800e8c6:	e7fe      	b.n	800e8c6 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800e8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d01e      	beq.n	800e90c <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800e8ce:	f000 faf3 	bl	800eeb8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800e8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800e8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e0:	683a      	ldr	r2, [r7, #0]
 800e8e2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e6:	6a3a      	ldr	r2, [r7, #32]
 800e8e8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ec:	3304      	adds	r3, #4
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fe fa66 	bl	800cdc0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d008      	beq.n	800e90c <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800e8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e900:	f043 0304 	orr.w	r3, r3, #4
 800e904:	b2da      	uxtb	r2, r3
 800e906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e908:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800e90c:	bf00      	nop
 800e90e:	3718      	adds	r7, #24
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b08a      	sub	sp, #40	; 0x28
 800e918:	af00      	add	r7, sp, #0
 800e91a:	60f8      	str	r0, [r7, #12]
 800e91c:	60b9      	str	r1, [r7, #8]
 800e91e:	607a      	str	r2, [r7, #4]
 800e920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e922:	2300      	movs	r3, #0
 800e924:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d10c      	bne.n	800e946 <xTimerGenericCommand+0x32>
	__asm volatile
 800e92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e930:	b672      	cpsid	i
 800e932:	f383 8811 	msr	BASEPRI, r3
 800e936:	f3bf 8f6f 	isb	sy
 800e93a:	f3bf 8f4f 	dsb	sy
 800e93e:	b662      	cpsie	i
 800e940:	623b      	str	r3, [r7, #32]
}
 800e942:	bf00      	nop
 800e944:	e7fe      	b.n	800e944 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e946:	4b1a      	ldr	r3, [pc, #104]	; (800e9b0 <xTimerGenericCommand+0x9c>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d02a      	beq.n	800e9a4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	2b05      	cmp	r3, #5
 800e95e:	dc18      	bgt.n	800e992 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e960:	f7ff fe0a 	bl	800e578 <xTaskGetSchedulerState>
 800e964:	4603      	mov	r3, r0
 800e966:	2b02      	cmp	r3, #2
 800e968:	d109      	bne.n	800e97e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e96a:	4b11      	ldr	r3, [pc, #68]	; (800e9b0 <xTimerGenericCommand+0x9c>)
 800e96c:	6818      	ldr	r0, [r3, #0]
 800e96e:	f107 0110 	add.w	r1, r7, #16
 800e972:	2300      	movs	r3, #0
 800e974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e976:	f7fe fbc7 	bl	800d108 <xQueueGenericSend>
 800e97a:	6278      	str	r0, [r7, #36]	; 0x24
 800e97c:	e012      	b.n	800e9a4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e97e:	4b0c      	ldr	r3, [pc, #48]	; (800e9b0 <xTimerGenericCommand+0x9c>)
 800e980:	6818      	ldr	r0, [r3, #0]
 800e982:	f107 0110 	add.w	r1, r7, #16
 800e986:	2300      	movs	r3, #0
 800e988:	2200      	movs	r2, #0
 800e98a:	f7fe fbbd 	bl	800d108 <xQueueGenericSend>
 800e98e:	6278      	str	r0, [r7, #36]	; 0x24
 800e990:	e008      	b.n	800e9a4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e992:	4b07      	ldr	r3, [pc, #28]	; (800e9b0 <xTimerGenericCommand+0x9c>)
 800e994:	6818      	ldr	r0, [r3, #0]
 800e996:	f107 0110 	add.w	r1, r7, #16
 800e99a:	2300      	movs	r3, #0
 800e99c:	683a      	ldr	r2, [r7, #0]
 800e99e:	f7fe fcb9 	bl	800d314 <xQueueGenericSendFromISR>
 800e9a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3728      	adds	r7, #40	; 0x28
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	20008b14 	.word	0x20008b14

0800e9b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b088      	sub	sp, #32
 800e9b8:	af02      	add	r7, sp, #8
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9be:	4b23      	ldr	r3, [pc, #140]	; (800ea4c <prvProcessExpiredTimer+0x98>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	68db      	ldr	r3, [r3, #12]
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	3304      	adds	r3, #4
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7fe fa61 	bl	800ce94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9d8:	f003 0304 	and.w	r3, r3, #4
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d024      	beq.n	800ea2a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	699a      	ldr	r2, [r3, #24]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	18d1      	adds	r1, r2, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	683a      	ldr	r2, [r7, #0]
 800e9ec:	6978      	ldr	r0, [r7, #20]
 800e9ee:	f000 f8d3 	bl	800eb98 <prvInsertTimerInActiveList>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d021      	beq.n	800ea3c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	9300      	str	r3, [sp, #0]
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	2100      	movs	r1, #0
 800ea02:	6978      	ldr	r0, [r7, #20]
 800ea04:	f7ff ff86 	bl	800e914 <xTimerGenericCommand>
 800ea08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d115      	bne.n	800ea3c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800ea10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea14:	b672      	cpsid	i
 800ea16:	f383 8811 	msr	BASEPRI, r3
 800ea1a:	f3bf 8f6f 	isb	sy
 800ea1e:	f3bf 8f4f 	dsb	sy
 800ea22:	b662      	cpsie	i
 800ea24:	60fb      	str	r3, [r7, #12]
}
 800ea26:	bf00      	nop
 800ea28:	e7fe      	b.n	800ea28 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea30:	f023 0301 	bic.w	r3, r3, #1
 800ea34:	b2da      	uxtb	r2, r3
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	6a1b      	ldr	r3, [r3, #32]
 800ea40:	6978      	ldr	r0, [r7, #20]
 800ea42:	4798      	blx	r3
}
 800ea44:	bf00      	nop
 800ea46:	3718      	adds	r7, #24
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	20008b0c 	.word	0x20008b0c

0800ea50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea58:	f107 0308 	add.w	r3, r7, #8
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f000 f857 	bl	800eb10 <prvGetNextExpireTime>
 800ea62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	4619      	mov	r1, r3
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	f000 f803 	bl	800ea74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ea6e:	f000 f8d5 	bl	800ec1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea72:	e7f1      	b.n	800ea58 <prvTimerTask+0x8>

0800ea74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ea7e:	f7ff f987 	bl	800dd90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea82:	f107 0308 	add.w	r3, r7, #8
 800ea86:	4618      	mov	r0, r3
 800ea88:	f000 f866 	bl	800eb58 <prvSampleTimeNow>
 800ea8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d130      	bne.n	800eaf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d10a      	bne.n	800eab0 <prvProcessTimerOrBlockTask+0x3c>
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d806      	bhi.n	800eab0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eaa2:	f7ff f983 	bl	800ddac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eaa6:	68f9      	ldr	r1, [r7, #12]
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7ff ff83 	bl	800e9b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eaae:	e024      	b.n	800eafa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d008      	beq.n	800eac8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eab6:	4b13      	ldr	r3, [pc, #76]	; (800eb04 <prvProcessTimerOrBlockTask+0x90>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d101      	bne.n	800eac4 <prvProcessTimerOrBlockTask+0x50>
 800eac0:	2301      	movs	r3, #1
 800eac2:	e000      	b.n	800eac6 <prvProcessTimerOrBlockTask+0x52>
 800eac4:	2300      	movs	r3, #0
 800eac6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eac8:	4b0f      	ldr	r3, [pc, #60]	; (800eb08 <prvProcessTimerOrBlockTask+0x94>)
 800eaca:	6818      	ldr	r0, [r3, #0]
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	1ad3      	subs	r3, r2, r3
 800ead2:	683a      	ldr	r2, [r7, #0]
 800ead4:	4619      	mov	r1, r3
 800ead6:	f7fe fedd 	bl	800d894 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eada:	f7ff f967 	bl	800ddac <xTaskResumeAll>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d10a      	bne.n	800eafa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eae4:	4b09      	ldr	r3, [pc, #36]	; (800eb0c <prvProcessTimerOrBlockTask+0x98>)
 800eae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaea:	601a      	str	r2, [r3, #0]
 800eaec:	f3bf 8f4f 	dsb	sy
 800eaf0:	f3bf 8f6f 	isb	sy
}
 800eaf4:	e001      	b.n	800eafa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eaf6:	f7ff f959 	bl	800ddac <xTaskResumeAll>
}
 800eafa:	bf00      	nop
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	20008b10 	.word	0x20008b10
 800eb08:	20008b14 	.word	0x20008b14
 800eb0c:	e000ed04 	.word	0xe000ed04

0800eb10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eb10:	b480      	push	{r7}
 800eb12:	b085      	sub	sp, #20
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eb18:	4b0e      	ldr	r3, [pc, #56]	; (800eb54 <prvGetNextExpireTime+0x44>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d101      	bne.n	800eb26 <prvGetNextExpireTime+0x16>
 800eb22:	2201      	movs	r2, #1
 800eb24:	e000      	b.n	800eb28 <prvGetNextExpireTime+0x18>
 800eb26:	2200      	movs	r2, #0
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d105      	bne.n	800eb40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb34:	4b07      	ldr	r3, [pc, #28]	; (800eb54 <prvGetNextExpireTime+0x44>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	60fb      	str	r3, [r7, #12]
 800eb3e:	e001      	b.n	800eb44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eb40:	2300      	movs	r3, #0
 800eb42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eb44:	68fb      	ldr	r3, [r7, #12]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3714      	adds	r7, #20
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr
 800eb52:	bf00      	nop
 800eb54:	20008b0c 	.word	0x20008b0c

0800eb58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eb60:	f7ff f9c4 	bl	800deec <xTaskGetTickCount>
 800eb64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800eb66:	4b0b      	ldr	r3, [pc, #44]	; (800eb94 <prvSampleTimeNow+0x3c>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	68fa      	ldr	r2, [r7, #12]
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d205      	bcs.n	800eb7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800eb70:	f000 f93c 	bl	800edec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2201      	movs	r2, #1
 800eb78:	601a      	str	r2, [r3, #0]
 800eb7a:	e002      	b.n	800eb82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eb82:	4a04      	ldr	r2, [pc, #16]	; (800eb94 <prvSampleTimeNow+0x3c>)
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eb88:	68fb      	ldr	r3, [r7, #12]
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	20008b1c 	.word	0x20008b1c

0800eb98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b086      	sub	sp, #24
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	60b9      	str	r1, [r7, #8]
 800eba2:	607a      	str	r2, [r7, #4]
 800eba4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eba6:	2300      	movs	r3, #0
 800eba8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	68fa      	ldr	r2, [r7, #12]
 800ebb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ebb6:	68ba      	ldr	r2, [r7, #8]
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d812      	bhi.n	800ebe4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebbe:	687a      	ldr	r2, [r7, #4]
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	1ad2      	subs	r2, r2, r3
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	699b      	ldr	r3, [r3, #24]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d302      	bcc.n	800ebd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ebcc:	2301      	movs	r3, #1
 800ebce:	617b      	str	r3, [r7, #20]
 800ebd0:	e01b      	b.n	800ec0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ebd2:	4b10      	ldr	r3, [pc, #64]	; (800ec14 <prvInsertTimerInActiveList+0x7c>)
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	3304      	adds	r3, #4
 800ebda:	4619      	mov	r1, r3
 800ebdc:	4610      	mov	r0, r2
 800ebde:	f7fe f920 	bl	800ce22 <vListInsert>
 800ebe2:	e012      	b.n	800ec0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d206      	bcs.n	800ebfa <prvInsertTimerInActiveList+0x62>
 800ebec:	68ba      	ldr	r2, [r7, #8]
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d302      	bcc.n	800ebfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	617b      	str	r3, [r7, #20]
 800ebf8:	e007      	b.n	800ec0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ebfa:	4b07      	ldr	r3, [pc, #28]	; (800ec18 <prvInsertTimerInActiveList+0x80>)
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	3304      	adds	r3, #4
 800ec02:	4619      	mov	r1, r3
 800ec04:	4610      	mov	r0, r2
 800ec06:	f7fe f90c 	bl	800ce22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ec0a:	697b      	ldr	r3, [r7, #20]
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3718      	adds	r7, #24
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	20008b10 	.word	0x20008b10
 800ec18:	20008b0c 	.word	0x20008b0c

0800ec1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b08e      	sub	sp, #56	; 0x38
 800ec20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec22:	e0d0      	b.n	800edc6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	da1a      	bge.n	800ec60 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ec2a:	1d3b      	adds	r3, r7, #4
 800ec2c:	3304      	adds	r3, #4
 800ec2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ec30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d10c      	bne.n	800ec50 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800ec36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3a:	b672      	cpsid	i
 800ec3c:	f383 8811 	msr	BASEPRI, r3
 800ec40:	f3bf 8f6f 	isb	sy
 800ec44:	f3bf 8f4f 	dsb	sy
 800ec48:	b662      	cpsie	i
 800ec4a:	61fb      	str	r3, [r7, #28]
}
 800ec4c:	bf00      	nop
 800ec4e:	e7fe      	b.n	800ec4e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ec50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec56:	6850      	ldr	r0, [r2, #4]
 800ec58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec5a:	6892      	ldr	r2, [r2, #8]
 800ec5c:	4611      	mov	r1, r2
 800ec5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	f2c0 80af 	blt.w	800edc6 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ec6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6e:	695b      	ldr	r3, [r3, #20]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d004      	beq.n	800ec7e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec76:	3304      	adds	r3, #4
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fe f90b 	bl	800ce94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec7e:	463b      	mov	r3, r7
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7ff ff69 	bl	800eb58 <prvSampleTimeNow>
 800ec86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2b09      	cmp	r3, #9
 800ec8c:	f200 809a 	bhi.w	800edc4 <prvProcessReceivedCommands+0x1a8>
 800ec90:	a201      	add	r2, pc, #4	; (adr r2, 800ec98 <prvProcessReceivedCommands+0x7c>)
 800ec92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec96:	bf00      	nop
 800ec98:	0800ecc1 	.word	0x0800ecc1
 800ec9c:	0800ecc1 	.word	0x0800ecc1
 800eca0:	0800ecc1 	.word	0x0800ecc1
 800eca4:	0800ed39 	.word	0x0800ed39
 800eca8:	0800ed4d 	.word	0x0800ed4d
 800ecac:	0800ed9b 	.word	0x0800ed9b
 800ecb0:	0800ecc1 	.word	0x0800ecc1
 800ecb4:	0800ecc1 	.word	0x0800ecc1
 800ecb8:	0800ed39 	.word	0x0800ed39
 800ecbc:	0800ed4d 	.word	0x0800ed4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ecc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecc6:	f043 0301 	orr.w	r3, r3, #1
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ecd2:	68ba      	ldr	r2, [r7, #8]
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	699b      	ldr	r3, [r3, #24]
 800ecd8:	18d1      	adds	r1, r2, r3
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ece0:	f7ff ff5a 	bl	800eb98 <prvInsertTimerInActiveList>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d06d      	beq.n	800edc6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ecea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecec:	6a1b      	ldr	r3, [r3, #32]
 800ecee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ecf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecf8:	f003 0304 	and.w	r3, r3, #4
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d062      	beq.n	800edc6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed00:	68ba      	ldr	r2, [r7, #8]
 800ed02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed04:	699b      	ldr	r3, [r3, #24]
 800ed06:	441a      	add	r2, r3
 800ed08:	2300      	movs	r3, #0
 800ed0a:	9300      	str	r3, [sp, #0]
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	2100      	movs	r1, #0
 800ed10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed12:	f7ff fdff 	bl	800e914 <xTimerGenericCommand>
 800ed16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ed18:	6a3b      	ldr	r3, [r7, #32]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d153      	bne.n	800edc6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800ed1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed22:	b672      	cpsid	i
 800ed24:	f383 8811 	msr	BASEPRI, r3
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	f3bf 8f4f 	dsb	sy
 800ed30:	b662      	cpsie	i
 800ed32:	61bb      	str	r3, [r7, #24]
}
 800ed34:	bf00      	nop
 800ed36:	e7fe      	b.n	800ed36 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed3e:	f023 0301 	bic.w	r3, r3, #1
 800ed42:	b2da      	uxtb	r2, r3
 800ed44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ed4a:	e03c      	b.n	800edc6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed52:	f043 0301 	orr.w	r3, r3, #1
 800ed56:	b2da      	uxtb	r2, r3
 800ed58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ed5e:	68ba      	ldr	r2, [r7, #8]
 800ed60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ed64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed66:	699b      	ldr	r3, [r3, #24]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d10c      	bne.n	800ed86 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800ed6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed70:	b672      	cpsid	i
 800ed72:	f383 8811 	msr	BASEPRI, r3
 800ed76:	f3bf 8f6f 	isb	sy
 800ed7a:	f3bf 8f4f 	dsb	sy
 800ed7e:	b662      	cpsie	i
 800ed80:	617b      	str	r3, [r7, #20]
}
 800ed82:	bf00      	nop
 800ed84:	e7fe      	b.n	800ed84 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ed86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed88:	699a      	ldr	r2, [r3, #24]
 800ed8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8c:	18d1      	adds	r1, r2, r3
 800ed8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed94:	f7ff ff00 	bl	800eb98 <prvInsertTimerInActiveList>
					break;
 800ed98:	e015      	b.n	800edc6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ed9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eda0:	f003 0302 	and.w	r3, r3, #2
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d103      	bne.n	800edb0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800eda8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edaa:	f000 fbed 	bl	800f588 <vPortFree>
 800edae:	e00a      	b.n	800edc6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edb6:	f023 0301 	bic.w	r3, r3, #1
 800edba:	b2da      	uxtb	r2, r3
 800edbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800edc2:	e000      	b.n	800edc6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800edc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edc6:	4b08      	ldr	r3, [pc, #32]	; (800ede8 <prvProcessReceivedCommands+0x1cc>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	1d39      	adds	r1, r7, #4
 800edcc:	2200      	movs	r2, #0
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fe fb40 	bl	800d454 <xQueueReceive>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	f47f af24 	bne.w	800ec24 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800eddc:	bf00      	nop
 800edde:	bf00      	nop
 800ede0:	3730      	adds	r7, #48	; 0x30
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	bf00      	nop
 800ede8:	20008b14 	.word	0x20008b14

0800edec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b088      	sub	sp, #32
 800edf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800edf2:	e04a      	b.n	800ee8a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800edf4:	4b2e      	ldr	r3, [pc, #184]	; (800eeb0 <prvSwitchTimerLists+0xc4>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	68db      	ldr	r3, [r3, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edfe:	4b2c      	ldr	r3, [pc, #176]	; (800eeb0 <prvSwitchTimerLists+0xc4>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	68db      	ldr	r3, [r3, #12]
 800ee06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	3304      	adds	r3, #4
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7fe f841 	bl	800ce94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6a1b      	ldr	r3, [r3, #32]
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee20:	f003 0304 	and.w	r3, r3, #4
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d030      	beq.n	800ee8a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	699b      	ldr	r3, [r3, #24]
 800ee2c:	693a      	ldr	r2, [r7, #16]
 800ee2e:	4413      	add	r3, r2
 800ee30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ee32:	68ba      	ldr	r2, [r7, #8]
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d90e      	bls.n	800ee58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	68ba      	ldr	r2, [r7, #8]
 800ee3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	68fa      	ldr	r2, [r7, #12]
 800ee44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee46:	4b1a      	ldr	r3, [pc, #104]	; (800eeb0 <prvSwitchTimerLists+0xc4>)
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	4619      	mov	r1, r3
 800ee50:	4610      	mov	r0, r2
 800ee52:	f7fd ffe6 	bl	800ce22 <vListInsert>
 800ee56:	e018      	b.n	800ee8a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee58:	2300      	movs	r3, #0
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	693a      	ldr	r2, [r7, #16]
 800ee60:	2100      	movs	r1, #0
 800ee62:	68f8      	ldr	r0, [r7, #12]
 800ee64:	f7ff fd56 	bl	800e914 <xTimerGenericCommand>
 800ee68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d10c      	bne.n	800ee8a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800ee70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee74:	b672      	cpsid	i
 800ee76:	f383 8811 	msr	BASEPRI, r3
 800ee7a:	f3bf 8f6f 	isb	sy
 800ee7e:	f3bf 8f4f 	dsb	sy
 800ee82:	b662      	cpsie	i
 800ee84:	603b      	str	r3, [r7, #0]
}
 800ee86:	bf00      	nop
 800ee88:	e7fe      	b.n	800ee88 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee8a:	4b09      	ldr	r3, [pc, #36]	; (800eeb0 <prvSwitchTimerLists+0xc4>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d1af      	bne.n	800edf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ee94:	4b06      	ldr	r3, [pc, #24]	; (800eeb0 <prvSwitchTimerLists+0xc4>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ee9a:	4b06      	ldr	r3, [pc, #24]	; (800eeb4 <prvSwitchTimerLists+0xc8>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a04      	ldr	r2, [pc, #16]	; (800eeb0 <prvSwitchTimerLists+0xc4>)
 800eea0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eea2:	4a04      	ldr	r2, [pc, #16]	; (800eeb4 <prvSwitchTimerLists+0xc8>)
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	6013      	str	r3, [r2, #0]
}
 800eea8:	bf00      	nop
 800eeaa:	3718      	adds	r7, #24
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	20008b0c 	.word	0x20008b0c
 800eeb4:	20008b10 	.word	0x20008b10

0800eeb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eebe:	f000 f96d 	bl	800f19c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eec2:	4b15      	ldr	r3, [pc, #84]	; (800ef18 <prvCheckForValidListAndQueue+0x60>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d120      	bne.n	800ef0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eeca:	4814      	ldr	r0, [pc, #80]	; (800ef1c <prvCheckForValidListAndQueue+0x64>)
 800eecc:	f7fd ff58 	bl	800cd80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eed0:	4813      	ldr	r0, [pc, #76]	; (800ef20 <prvCheckForValidListAndQueue+0x68>)
 800eed2:	f7fd ff55 	bl	800cd80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eed6:	4b13      	ldr	r3, [pc, #76]	; (800ef24 <prvCheckForValidListAndQueue+0x6c>)
 800eed8:	4a10      	ldr	r2, [pc, #64]	; (800ef1c <prvCheckForValidListAndQueue+0x64>)
 800eeda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eedc:	4b12      	ldr	r3, [pc, #72]	; (800ef28 <prvCheckForValidListAndQueue+0x70>)
 800eede:	4a10      	ldr	r2, [pc, #64]	; (800ef20 <prvCheckForValidListAndQueue+0x68>)
 800eee0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eee2:	2300      	movs	r3, #0
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	4b11      	ldr	r3, [pc, #68]	; (800ef2c <prvCheckForValidListAndQueue+0x74>)
 800eee8:	4a11      	ldr	r2, [pc, #68]	; (800ef30 <prvCheckForValidListAndQueue+0x78>)
 800eeea:	2110      	movs	r1, #16
 800eeec:	200a      	movs	r0, #10
 800eeee:	f7fe f865 	bl	800cfbc <xQueueGenericCreateStatic>
 800eef2:	4603      	mov	r3, r0
 800eef4:	4a08      	ldr	r2, [pc, #32]	; (800ef18 <prvCheckForValidListAndQueue+0x60>)
 800eef6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eef8:	4b07      	ldr	r3, [pc, #28]	; (800ef18 <prvCheckForValidListAndQueue+0x60>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d005      	beq.n	800ef0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef00:	4b05      	ldr	r3, [pc, #20]	; (800ef18 <prvCheckForValidListAndQueue+0x60>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	490b      	ldr	r1, [pc, #44]	; (800ef34 <prvCheckForValidListAndQueue+0x7c>)
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fe fc9a 	bl	800d840 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef0c:	f000 f97a 	bl	800f204 <vPortExitCritical>
}
 800ef10:	bf00      	nop
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	20008b14 	.word	0x20008b14
 800ef1c:	20008ae4 	.word	0x20008ae4
 800ef20:	20008af8 	.word	0x20008af8
 800ef24:	20008b0c 	.word	0x20008b0c
 800ef28:	20008b10 	.word	0x20008b10
 800ef2c:	20008bc0 	.word	0x20008bc0
 800ef30:	20008b20 	.word	0x20008b20
 800ef34:	080115c0 	.word	0x080115c0

0800ef38 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b086      	sub	sp, #24
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d10c      	bne.n	800ef64 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800ef4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4e:	b672      	cpsid	i
 800ef50:	f383 8811 	msr	BASEPRI, r3
 800ef54:	f3bf 8f6f 	isb	sy
 800ef58:	f3bf 8f4f 	dsb	sy
 800ef5c:	b662      	cpsie	i
 800ef5e:	60fb      	str	r3, [r7, #12]
}
 800ef60:	bf00      	nop
 800ef62:	e7fe      	b.n	800ef62 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800ef64:	f000 f91a 	bl	800f19c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	69db      	ldr	r3, [r3, #28]
 800ef6c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ef6e:	f000 f949 	bl	800f204 <vPortExitCritical>

	return pvReturn;
 800ef72:	693b      	ldr	r3, [r7, #16]
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3718      	adds	r7, #24
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}

0800ef7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b085      	sub	sp, #20
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	3b04      	subs	r3, #4
 800ef8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ef94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	3b04      	subs	r3, #4
 800ef9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	f023 0201 	bic.w	r2, r3, #1
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	3b04      	subs	r3, #4
 800efaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800efac:	4a0c      	ldr	r2, [pc, #48]	; (800efe0 <pxPortInitialiseStack+0x64>)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	3b14      	subs	r3, #20
 800efb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	3b04      	subs	r3, #4
 800efc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f06f 0202 	mvn.w	r2, #2
 800efca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	3b20      	subs	r3, #32
 800efd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800efd2:	68fb      	ldr	r3, [r7, #12]
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3714      	adds	r7, #20
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr
 800efe0:	0800efe5 	.word	0x0800efe5

0800efe4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800efe4:	b480      	push	{r7}
 800efe6:	b085      	sub	sp, #20
 800efe8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800efea:	2300      	movs	r3, #0
 800efec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800efee:	4b14      	ldr	r3, [pc, #80]	; (800f040 <prvTaskExitError+0x5c>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eff6:	d00c      	beq.n	800f012 <prvTaskExitError+0x2e>
	__asm volatile
 800eff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effc:	b672      	cpsid	i
 800effe:	f383 8811 	msr	BASEPRI, r3
 800f002:	f3bf 8f6f 	isb	sy
 800f006:	f3bf 8f4f 	dsb	sy
 800f00a:	b662      	cpsie	i
 800f00c:	60fb      	str	r3, [r7, #12]
}
 800f00e:	bf00      	nop
 800f010:	e7fe      	b.n	800f010 <prvTaskExitError+0x2c>
	__asm volatile
 800f012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f016:	b672      	cpsid	i
 800f018:	f383 8811 	msr	BASEPRI, r3
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f3bf 8f4f 	dsb	sy
 800f024:	b662      	cpsie	i
 800f026:	60bb      	str	r3, [r7, #8]
}
 800f028:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f02a:	bf00      	nop
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d0fc      	beq.n	800f02c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f032:	bf00      	nop
 800f034:	bf00      	nop
 800f036:	3714      	adds	r7, #20
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr
 800f040:	20000098 	.word	0x20000098
	...

0800f050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f050:	4b07      	ldr	r3, [pc, #28]	; (800f070 <pxCurrentTCBConst2>)
 800f052:	6819      	ldr	r1, [r3, #0]
 800f054:	6808      	ldr	r0, [r1, #0]
 800f056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05a:	f380 8809 	msr	PSP, r0
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f04f 0000 	mov.w	r0, #0
 800f066:	f380 8811 	msr	BASEPRI, r0
 800f06a:	4770      	bx	lr
 800f06c:	f3af 8000 	nop.w

0800f070 <pxCurrentTCBConst2>:
 800f070:	200085e4 	.word	0x200085e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f074:	bf00      	nop
 800f076:	bf00      	nop

0800f078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f078:	4808      	ldr	r0, [pc, #32]	; (800f09c <prvPortStartFirstTask+0x24>)
 800f07a:	6800      	ldr	r0, [r0, #0]
 800f07c:	6800      	ldr	r0, [r0, #0]
 800f07e:	f380 8808 	msr	MSP, r0
 800f082:	f04f 0000 	mov.w	r0, #0
 800f086:	f380 8814 	msr	CONTROL, r0
 800f08a:	b662      	cpsie	i
 800f08c:	b661      	cpsie	f
 800f08e:	f3bf 8f4f 	dsb	sy
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	df00      	svc	0
 800f098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f09a:	bf00      	nop
 800f09c:	e000ed08 	.word	0xe000ed08

0800f0a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b084      	sub	sp, #16
 800f0a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f0a6:	4b37      	ldr	r3, [pc, #220]	; (800f184 <xPortStartScheduler+0xe4>)
 800f0a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	22ff      	movs	r2, #255	; 0xff
 800f0b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f0c0:	78fb      	ldrb	r3, [r7, #3]
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f0c8:	b2da      	uxtb	r2, r3
 800f0ca:	4b2f      	ldr	r3, [pc, #188]	; (800f188 <xPortStartScheduler+0xe8>)
 800f0cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f0ce:	4b2f      	ldr	r3, [pc, #188]	; (800f18c <xPortStartScheduler+0xec>)
 800f0d0:	2207      	movs	r2, #7
 800f0d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f0d4:	e009      	b.n	800f0ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f0d6:	4b2d      	ldr	r3, [pc, #180]	; (800f18c <xPortStartScheduler+0xec>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	3b01      	subs	r3, #1
 800f0dc:	4a2b      	ldr	r2, [pc, #172]	; (800f18c <xPortStartScheduler+0xec>)
 800f0de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f0e0:	78fb      	ldrb	r3, [r7, #3]
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	005b      	lsls	r3, r3, #1
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f0ea:	78fb      	ldrb	r3, [r7, #3]
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0f2:	2b80      	cmp	r3, #128	; 0x80
 800f0f4:	d0ef      	beq.n	800f0d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f0f6:	4b25      	ldr	r3, [pc, #148]	; (800f18c <xPortStartScheduler+0xec>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f1c3 0307 	rsb	r3, r3, #7
 800f0fe:	2b04      	cmp	r3, #4
 800f100:	d00c      	beq.n	800f11c <xPortStartScheduler+0x7c>
	__asm volatile
 800f102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f106:	b672      	cpsid	i
 800f108:	f383 8811 	msr	BASEPRI, r3
 800f10c:	f3bf 8f6f 	isb	sy
 800f110:	f3bf 8f4f 	dsb	sy
 800f114:	b662      	cpsie	i
 800f116:	60bb      	str	r3, [r7, #8]
}
 800f118:	bf00      	nop
 800f11a:	e7fe      	b.n	800f11a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f11c:	4b1b      	ldr	r3, [pc, #108]	; (800f18c <xPortStartScheduler+0xec>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	021b      	lsls	r3, r3, #8
 800f122:	4a1a      	ldr	r2, [pc, #104]	; (800f18c <xPortStartScheduler+0xec>)
 800f124:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f126:	4b19      	ldr	r3, [pc, #100]	; (800f18c <xPortStartScheduler+0xec>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f12e:	4a17      	ldr	r2, [pc, #92]	; (800f18c <xPortStartScheduler+0xec>)
 800f130:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	b2da      	uxtb	r2, r3
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f13a:	4b15      	ldr	r3, [pc, #84]	; (800f190 <xPortStartScheduler+0xf0>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	4a14      	ldr	r2, [pc, #80]	; (800f190 <xPortStartScheduler+0xf0>)
 800f140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f144:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f146:	4b12      	ldr	r3, [pc, #72]	; (800f190 <xPortStartScheduler+0xf0>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4a11      	ldr	r2, [pc, #68]	; (800f190 <xPortStartScheduler+0xf0>)
 800f14c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f150:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f152:	f000 f8dd 	bl	800f310 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f156:	4b0f      	ldr	r3, [pc, #60]	; (800f194 <xPortStartScheduler+0xf4>)
 800f158:	2200      	movs	r2, #0
 800f15a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f15c:	f000 f8fc 	bl	800f358 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f160:	4b0d      	ldr	r3, [pc, #52]	; (800f198 <xPortStartScheduler+0xf8>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4a0c      	ldr	r2, [pc, #48]	; (800f198 <xPortStartScheduler+0xf8>)
 800f166:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f16a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f16c:	f7ff ff84 	bl	800f078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f170:	f7fe ff88 	bl	800e084 <vTaskSwitchContext>
	prvTaskExitError();
 800f174:	f7ff ff36 	bl	800efe4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f178:	2300      	movs	r3, #0
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	e000e400 	.word	0xe000e400
 800f188:	20008c10 	.word	0x20008c10
 800f18c:	20008c14 	.word	0x20008c14
 800f190:	e000ed20 	.word	0xe000ed20
 800f194:	20000098 	.word	0x20000098
 800f198:	e000ef34 	.word	0xe000ef34

0800f19c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
	__asm volatile
 800f1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a6:	b672      	cpsid	i
 800f1a8:	f383 8811 	msr	BASEPRI, r3
 800f1ac:	f3bf 8f6f 	isb	sy
 800f1b0:	f3bf 8f4f 	dsb	sy
 800f1b4:	b662      	cpsie	i
 800f1b6:	607b      	str	r3, [r7, #4]
}
 800f1b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f1ba:	4b10      	ldr	r3, [pc, #64]	; (800f1fc <vPortEnterCritical+0x60>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	4a0e      	ldr	r2, [pc, #56]	; (800f1fc <vPortEnterCritical+0x60>)
 800f1c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f1c4:	4b0d      	ldr	r3, [pc, #52]	; (800f1fc <vPortEnterCritical+0x60>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d111      	bne.n	800f1f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f1cc:	4b0c      	ldr	r3, [pc, #48]	; (800f200 <vPortEnterCritical+0x64>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	b2db      	uxtb	r3, r3
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d00c      	beq.n	800f1f0 <vPortEnterCritical+0x54>
	__asm volatile
 800f1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1da:	b672      	cpsid	i
 800f1dc:	f383 8811 	msr	BASEPRI, r3
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	b662      	cpsie	i
 800f1ea:	603b      	str	r3, [r7, #0]
}
 800f1ec:	bf00      	nop
 800f1ee:	e7fe      	b.n	800f1ee <vPortEnterCritical+0x52>
	}
}
 800f1f0:	bf00      	nop
 800f1f2:	370c      	adds	r7, #12
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fa:	4770      	bx	lr
 800f1fc:	20000098 	.word	0x20000098
 800f200:	e000ed04 	.word	0xe000ed04

0800f204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f20a:	4b13      	ldr	r3, [pc, #76]	; (800f258 <vPortExitCritical+0x54>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d10c      	bne.n	800f22c <vPortExitCritical+0x28>
	__asm volatile
 800f212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f216:	b672      	cpsid	i
 800f218:	f383 8811 	msr	BASEPRI, r3
 800f21c:	f3bf 8f6f 	isb	sy
 800f220:	f3bf 8f4f 	dsb	sy
 800f224:	b662      	cpsie	i
 800f226:	607b      	str	r3, [r7, #4]
}
 800f228:	bf00      	nop
 800f22a:	e7fe      	b.n	800f22a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f22c:	4b0a      	ldr	r3, [pc, #40]	; (800f258 <vPortExitCritical+0x54>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	3b01      	subs	r3, #1
 800f232:	4a09      	ldr	r2, [pc, #36]	; (800f258 <vPortExitCritical+0x54>)
 800f234:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f236:	4b08      	ldr	r3, [pc, #32]	; (800f258 <vPortExitCritical+0x54>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d105      	bne.n	800f24a <vPortExitCritical+0x46>
 800f23e:	2300      	movs	r3, #0
 800f240:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	f383 8811 	msr	BASEPRI, r3
}
 800f248:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f24a:	bf00      	nop
 800f24c:	370c      	adds	r7, #12
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop
 800f258:	20000098 	.word	0x20000098
 800f25c:	00000000 	.word	0x00000000

0800f260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f260:	f3ef 8009 	mrs	r0, PSP
 800f264:	f3bf 8f6f 	isb	sy
 800f268:	4b15      	ldr	r3, [pc, #84]	; (800f2c0 <pxCurrentTCBConst>)
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	f01e 0f10 	tst.w	lr, #16
 800f270:	bf08      	it	eq
 800f272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f27a:	6010      	str	r0, [r2, #0]
 800f27c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f280:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f284:	b672      	cpsid	i
 800f286:	f380 8811 	msr	BASEPRI, r0
 800f28a:	f3bf 8f4f 	dsb	sy
 800f28e:	f3bf 8f6f 	isb	sy
 800f292:	b662      	cpsie	i
 800f294:	f7fe fef6 	bl	800e084 <vTaskSwitchContext>
 800f298:	f04f 0000 	mov.w	r0, #0
 800f29c:	f380 8811 	msr	BASEPRI, r0
 800f2a0:	bc09      	pop	{r0, r3}
 800f2a2:	6819      	ldr	r1, [r3, #0]
 800f2a4:	6808      	ldr	r0, [r1, #0]
 800f2a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2aa:	f01e 0f10 	tst.w	lr, #16
 800f2ae:	bf08      	it	eq
 800f2b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f2b4:	f380 8809 	msr	PSP, r0
 800f2b8:	f3bf 8f6f 	isb	sy
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop

0800f2c0 <pxCurrentTCBConst>:
 800f2c0:	200085e4 	.word	0x200085e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f2c4:	bf00      	nop
 800f2c6:	bf00      	nop

0800f2c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800f2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d2:	b672      	cpsid	i
 800f2d4:	f383 8811 	msr	BASEPRI, r3
 800f2d8:	f3bf 8f6f 	isb	sy
 800f2dc:	f3bf 8f4f 	dsb	sy
 800f2e0:	b662      	cpsie	i
 800f2e2:	607b      	str	r3, [r7, #4]
}
 800f2e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f2e6:	f7fe fe11 	bl	800df0c <xTaskIncrementTick>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d003      	beq.n	800f2f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f2f0:	4b06      	ldr	r3, [pc, #24]	; (800f30c <SysTick_Handler+0x44>)
 800f2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2f6:	601a      	str	r2, [r3, #0]
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	f383 8811 	msr	BASEPRI, r3
}
 800f302:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f304:	bf00      	nop
 800f306:	3708      	adds	r7, #8
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	e000ed04 	.word	0xe000ed04

0800f310 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f310:	b480      	push	{r7}
 800f312:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f314:	4b0b      	ldr	r3, [pc, #44]	; (800f344 <vPortSetupTimerInterrupt+0x34>)
 800f316:	2200      	movs	r2, #0
 800f318:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f31a:	4b0b      	ldr	r3, [pc, #44]	; (800f348 <vPortSetupTimerInterrupt+0x38>)
 800f31c:	2200      	movs	r2, #0
 800f31e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f320:	4b0a      	ldr	r3, [pc, #40]	; (800f34c <vPortSetupTimerInterrupt+0x3c>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4a0a      	ldr	r2, [pc, #40]	; (800f350 <vPortSetupTimerInterrupt+0x40>)
 800f326:	fba2 2303 	umull	r2, r3, r2, r3
 800f32a:	099b      	lsrs	r3, r3, #6
 800f32c:	4a09      	ldr	r2, [pc, #36]	; (800f354 <vPortSetupTimerInterrupt+0x44>)
 800f32e:	3b01      	subs	r3, #1
 800f330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f332:	4b04      	ldr	r3, [pc, #16]	; (800f344 <vPortSetupTimerInterrupt+0x34>)
 800f334:	2207      	movs	r2, #7
 800f336:	601a      	str	r2, [r3, #0]
}
 800f338:	bf00      	nop
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop
 800f344:	e000e010 	.word	0xe000e010
 800f348:	e000e018 	.word	0xe000e018
 800f34c:	20000000 	.word	0x20000000
 800f350:	10624dd3 	.word	0x10624dd3
 800f354:	e000e014 	.word	0xe000e014

0800f358 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f358:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f368 <vPortEnableVFP+0x10>
 800f35c:	6801      	ldr	r1, [r0, #0]
 800f35e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f362:	6001      	str	r1, [r0, #0]
 800f364:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f366:	bf00      	nop
 800f368:	e000ed88 	.word	0xe000ed88

0800f36c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f36c:	b480      	push	{r7}
 800f36e:	b085      	sub	sp, #20
 800f370:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f372:	f3ef 8305 	mrs	r3, IPSR
 800f376:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2b0f      	cmp	r3, #15
 800f37c:	d916      	bls.n	800f3ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f37e:	4a19      	ldr	r2, [pc, #100]	; (800f3e4 <vPortValidateInterruptPriority+0x78>)
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	4413      	add	r3, r2
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f388:	4b17      	ldr	r3, [pc, #92]	; (800f3e8 <vPortValidateInterruptPriority+0x7c>)
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	7afa      	ldrb	r2, [r7, #11]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d20c      	bcs.n	800f3ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f396:	b672      	cpsid	i
 800f398:	f383 8811 	msr	BASEPRI, r3
 800f39c:	f3bf 8f6f 	isb	sy
 800f3a0:	f3bf 8f4f 	dsb	sy
 800f3a4:	b662      	cpsie	i
 800f3a6:	607b      	str	r3, [r7, #4]
}
 800f3a8:	bf00      	nop
 800f3aa:	e7fe      	b.n	800f3aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f3ac:	4b0f      	ldr	r3, [pc, #60]	; (800f3ec <vPortValidateInterruptPriority+0x80>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f3b4:	4b0e      	ldr	r3, [pc, #56]	; (800f3f0 <vPortValidateInterruptPriority+0x84>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d90c      	bls.n	800f3d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c0:	b672      	cpsid	i
 800f3c2:	f383 8811 	msr	BASEPRI, r3
 800f3c6:	f3bf 8f6f 	isb	sy
 800f3ca:	f3bf 8f4f 	dsb	sy
 800f3ce:	b662      	cpsie	i
 800f3d0:	603b      	str	r3, [r7, #0]
}
 800f3d2:	bf00      	nop
 800f3d4:	e7fe      	b.n	800f3d4 <vPortValidateInterruptPriority+0x68>
	}
 800f3d6:	bf00      	nop
 800f3d8:	3714      	adds	r7, #20
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
 800f3e2:	bf00      	nop
 800f3e4:	e000e3f0 	.word	0xe000e3f0
 800f3e8:	20008c10 	.word	0x20008c10
 800f3ec:	e000ed0c 	.word	0xe000ed0c
 800f3f0:	20008c14 	.word	0x20008c14

0800f3f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b08a      	sub	sp, #40	; 0x28
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f400:	f7fe fcc6 	bl	800dd90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f404:	4b5b      	ldr	r3, [pc, #364]	; (800f574 <pvPortMalloc+0x180>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f40c:	f000 f91a 	bl	800f644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f410:	4b59      	ldr	r3, [pc, #356]	; (800f578 <pvPortMalloc+0x184>)
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4013      	ands	r3, r2
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f040 8092 	bne.w	800f542 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d01f      	beq.n	800f464 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f424:	2208      	movs	r2, #8
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	4413      	add	r3, r2
 800f42a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f003 0307 	and.w	r3, r3, #7
 800f432:	2b00      	cmp	r3, #0
 800f434:	d016      	beq.n	800f464 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f023 0307 	bic.w	r3, r3, #7
 800f43c:	3308      	adds	r3, #8
 800f43e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f003 0307 	and.w	r3, r3, #7
 800f446:	2b00      	cmp	r3, #0
 800f448:	d00c      	beq.n	800f464 <pvPortMalloc+0x70>
	__asm volatile
 800f44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44e:	b672      	cpsid	i
 800f450:	f383 8811 	msr	BASEPRI, r3
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	f3bf 8f4f 	dsb	sy
 800f45c:	b662      	cpsie	i
 800f45e:	617b      	str	r3, [r7, #20]
}
 800f460:	bf00      	nop
 800f462:	e7fe      	b.n	800f462 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d06b      	beq.n	800f542 <pvPortMalloc+0x14e>
 800f46a:	4b44      	ldr	r3, [pc, #272]	; (800f57c <pvPortMalloc+0x188>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	429a      	cmp	r2, r3
 800f472:	d866      	bhi.n	800f542 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f474:	4b42      	ldr	r3, [pc, #264]	; (800f580 <pvPortMalloc+0x18c>)
 800f476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f478:	4b41      	ldr	r3, [pc, #260]	; (800f580 <pvPortMalloc+0x18c>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f47e:	e004      	b.n	800f48a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48c:	685b      	ldr	r3, [r3, #4]
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	429a      	cmp	r2, r3
 800f492:	d903      	bls.n	800f49c <pvPortMalloc+0xa8>
 800f494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d1f1      	bne.n	800f480 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f49c:	4b35      	ldr	r3, [pc, #212]	; (800f574 <pvPortMalloc+0x180>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d04d      	beq.n	800f542 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4a6:	6a3b      	ldr	r3, [r7, #32]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	2208      	movs	r2, #8
 800f4ac:	4413      	add	r3, r2
 800f4ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	6a3b      	ldr	r3, [r7, #32]
 800f4b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ba:	685a      	ldr	r2, [r3, #4]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	1ad2      	subs	r2, r2, r3
 800f4c0:	2308      	movs	r3, #8
 800f4c2:	005b      	lsls	r3, r3, #1
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d921      	bls.n	800f50c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	f003 0307 	and.w	r3, r3, #7
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d00c      	beq.n	800f4f4 <pvPortMalloc+0x100>
	__asm volatile
 800f4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4de:	b672      	cpsid	i
 800f4e0:	f383 8811 	msr	BASEPRI, r3
 800f4e4:	f3bf 8f6f 	isb	sy
 800f4e8:	f3bf 8f4f 	dsb	sy
 800f4ec:	b662      	cpsie	i
 800f4ee:	613b      	str	r3, [r7, #16]
}
 800f4f0:	bf00      	nop
 800f4f2:	e7fe      	b.n	800f4f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f6:	685a      	ldr	r2, [r3, #4]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	1ad2      	subs	r2, r2, r3
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f506:	69b8      	ldr	r0, [r7, #24]
 800f508:	f000 f8fe 	bl	800f708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f50c:	4b1b      	ldr	r3, [pc, #108]	; (800f57c <pvPortMalloc+0x188>)
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	1ad3      	subs	r3, r2, r3
 800f516:	4a19      	ldr	r2, [pc, #100]	; (800f57c <pvPortMalloc+0x188>)
 800f518:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f51a:	4b18      	ldr	r3, [pc, #96]	; (800f57c <pvPortMalloc+0x188>)
 800f51c:	681a      	ldr	r2, [r3, #0]
 800f51e:	4b19      	ldr	r3, [pc, #100]	; (800f584 <pvPortMalloc+0x190>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	429a      	cmp	r2, r3
 800f524:	d203      	bcs.n	800f52e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f526:	4b15      	ldr	r3, [pc, #84]	; (800f57c <pvPortMalloc+0x188>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4a16      	ldr	r2, [pc, #88]	; (800f584 <pvPortMalloc+0x190>)
 800f52c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f530:	685a      	ldr	r2, [r3, #4]
 800f532:	4b11      	ldr	r3, [pc, #68]	; (800f578 <pvPortMalloc+0x184>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	431a      	orrs	r2, r3
 800f538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53e:	2200      	movs	r2, #0
 800f540:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f542:	f7fe fc33 	bl	800ddac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	f003 0307 	and.w	r3, r3, #7
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d00c      	beq.n	800f56a <pvPortMalloc+0x176>
	__asm volatile
 800f550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f554:	b672      	cpsid	i
 800f556:	f383 8811 	msr	BASEPRI, r3
 800f55a:	f3bf 8f6f 	isb	sy
 800f55e:	f3bf 8f4f 	dsb	sy
 800f562:	b662      	cpsie	i
 800f564:	60fb      	str	r3, [r7, #12]
}
 800f566:	bf00      	nop
 800f568:	e7fe      	b.n	800f568 <pvPortMalloc+0x174>
	return pvReturn;
 800f56a:	69fb      	ldr	r3, [r7, #28]
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3728      	adds	r7, #40	; 0x28
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	2000c820 	.word	0x2000c820
 800f578:	2000c82c 	.word	0x2000c82c
 800f57c:	2000c824 	.word	0x2000c824
 800f580:	2000c818 	.word	0x2000c818
 800f584:	2000c828 	.word	0x2000c828

0800f588 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b086      	sub	sp, #24
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d04c      	beq.n	800f634 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f59a:	2308      	movs	r3, #8
 800f59c:	425b      	negs	r3, r3
 800f59e:	697a      	ldr	r2, [r7, #20]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	685a      	ldr	r2, [r3, #4]
 800f5ac:	4b23      	ldr	r3, [pc, #140]	; (800f63c <vPortFree+0xb4>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4013      	ands	r3, r2
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d10c      	bne.n	800f5d0 <vPortFree+0x48>
	__asm volatile
 800f5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ba:	b672      	cpsid	i
 800f5bc:	f383 8811 	msr	BASEPRI, r3
 800f5c0:	f3bf 8f6f 	isb	sy
 800f5c4:	f3bf 8f4f 	dsb	sy
 800f5c8:	b662      	cpsie	i
 800f5ca:	60fb      	str	r3, [r7, #12]
}
 800f5cc:	bf00      	nop
 800f5ce:	e7fe      	b.n	800f5ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d00c      	beq.n	800f5f2 <vPortFree+0x6a>
	__asm volatile
 800f5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5dc:	b672      	cpsid	i
 800f5de:	f383 8811 	msr	BASEPRI, r3
 800f5e2:	f3bf 8f6f 	isb	sy
 800f5e6:	f3bf 8f4f 	dsb	sy
 800f5ea:	b662      	cpsie	i
 800f5ec:	60bb      	str	r3, [r7, #8]
}
 800f5ee:	bf00      	nop
 800f5f0:	e7fe      	b.n	800f5f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	685a      	ldr	r2, [r3, #4]
 800f5f6:	4b11      	ldr	r3, [pc, #68]	; (800f63c <vPortFree+0xb4>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	4013      	ands	r3, r2
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d019      	beq.n	800f634 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d115      	bne.n	800f634 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	685a      	ldr	r2, [r3, #4]
 800f60c:	4b0b      	ldr	r3, [pc, #44]	; (800f63c <vPortFree+0xb4>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	43db      	mvns	r3, r3
 800f612:	401a      	ands	r2, r3
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f618:	f7fe fbba 	bl	800dd90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	685a      	ldr	r2, [r3, #4]
 800f620:	4b07      	ldr	r3, [pc, #28]	; (800f640 <vPortFree+0xb8>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4413      	add	r3, r2
 800f626:	4a06      	ldr	r2, [pc, #24]	; (800f640 <vPortFree+0xb8>)
 800f628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f62a:	6938      	ldr	r0, [r7, #16]
 800f62c:	f000 f86c 	bl	800f708 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f630:	f7fe fbbc 	bl	800ddac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f634:	bf00      	nop
 800f636:	3718      	adds	r7, #24
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	2000c82c 	.word	0x2000c82c
 800f640:	2000c824 	.word	0x2000c824

0800f644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f64a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f64e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f650:	4b27      	ldr	r3, [pc, #156]	; (800f6f0 <prvHeapInit+0xac>)
 800f652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f003 0307 	and.w	r3, r3, #7
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00c      	beq.n	800f678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	3307      	adds	r3, #7
 800f662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f023 0307 	bic.w	r3, r3, #7
 800f66a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f66c:	68ba      	ldr	r2, [r7, #8]
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	1ad3      	subs	r3, r2, r3
 800f672:	4a1f      	ldr	r2, [pc, #124]	; (800f6f0 <prvHeapInit+0xac>)
 800f674:	4413      	add	r3, r2
 800f676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f67c:	4a1d      	ldr	r2, [pc, #116]	; (800f6f4 <prvHeapInit+0xb0>)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f682:	4b1c      	ldr	r3, [pc, #112]	; (800f6f4 <prvHeapInit+0xb0>)
 800f684:	2200      	movs	r2, #0
 800f686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	68ba      	ldr	r2, [r7, #8]
 800f68c:	4413      	add	r3, r2
 800f68e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f690:	2208      	movs	r2, #8
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	1a9b      	subs	r3, r3, r2
 800f696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	f023 0307 	bic.w	r3, r3, #7
 800f69e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	4a15      	ldr	r2, [pc, #84]	; (800f6f8 <prvHeapInit+0xb4>)
 800f6a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f6a6:	4b14      	ldr	r3, [pc, #80]	; (800f6f8 <prvHeapInit+0xb4>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f6ae:	4b12      	ldr	r3, [pc, #72]	; (800f6f8 <prvHeapInit+0xb4>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	68fa      	ldr	r2, [r7, #12]
 800f6be:	1ad2      	subs	r2, r2, r3
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f6c4:	4b0c      	ldr	r3, [pc, #48]	; (800f6f8 <prvHeapInit+0xb4>)
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	4a0a      	ldr	r2, [pc, #40]	; (800f6fc <prvHeapInit+0xb8>)
 800f6d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	4a09      	ldr	r2, [pc, #36]	; (800f700 <prvHeapInit+0xbc>)
 800f6da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f6dc:	4b09      	ldr	r3, [pc, #36]	; (800f704 <prvHeapInit+0xc0>)
 800f6de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f6e2:	601a      	str	r2, [r3, #0]
}
 800f6e4:	bf00      	nop
 800f6e6:	3714      	adds	r7, #20
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr
 800f6f0:	20008c18 	.word	0x20008c18
 800f6f4:	2000c818 	.word	0x2000c818
 800f6f8:	2000c820 	.word	0x2000c820
 800f6fc:	2000c828 	.word	0x2000c828
 800f700:	2000c824 	.word	0x2000c824
 800f704:	2000c82c 	.word	0x2000c82c

0800f708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f708:	b480      	push	{r7}
 800f70a:	b085      	sub	sp, #20
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f710:	4b28      	ldr	r3, [pc, #160]	; (800f7b4 <prvInsertBlockIntoFreeList+0xac>)
 800f712:	60fb      	str	r3, [r7, #12]
 800f714:	e002      	b.n	800f71c <prvInsertBlockIntoFreeList+0x14>
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	60fb      	str	r3, [r7, #12]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	687a      	ldr	r2, [r7, #4]
 800f722:	429a      	cmp	r2, r3
 800f724:	d8f7      	bhi.n	800f716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	68ba      	ldr	r2, [r7, #8]
 800f730:	4413      	add	r3, r2
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	429a      	cmp	r2, r3
 800f736:	d108      	bne.n	800f74a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	685a      	ldr	r2, [r3, #4]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	441a      	add	r2, r3
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	68ba      	ldr	r2, [r7, #8]
 800f754:	441a      	add	r2, r3
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d118      	bne.n	800f790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681a      	ldr	r2, [r3, #0]
 800f762:	4b15      	ldr	r3, [pc, #84]	; (800f7b8 <prvInsertBlockIntoFreeList+0xb0>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	429a      	cmp	r2, r3
 800f768:	d00d      	beq.n	800f786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	685a      	ldr	r2, [r3, #4]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	441a      	add	r2, r3
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	601a      	str	r2, [r3, #0]
 800f784:	e008      	b.n	800f798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f786:	4b0c      	ldr	r3, [pc, #48]	; (800f7b8 <prvInsertBlockIntoFreeList+0xb0>)
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	601a      	str	r2, [r3, #0]
 800f78e:	e003      	b.n	800f798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681a      	ldr	r2, [r3, #0]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d002      	beq.n	800f7a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	687a      	ldr	r2, [r7, #4]
 800f7a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7a6:	bf00      	nop
 800f7a8:	3714      	adds	r7, #20
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	2000c818 	.word	0x2000c818
 800f7b8:	2000c820 	.word	0x2000c820

0800f7bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	4912      	ldr	r1, [pc, #72]	; (800f80c <MX_USB_DEVICE_Init+0x50>)
 800f7c4:	4812      	ldr	r0, [pc, #72]	; (800f810 <MX_USB_DEVICE_Init+0x54>)
 800f7c6:	f7fb fdab 	bl	800b320 <USBD_Init>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d001      	beq.n	800f7d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f7d0:	f7f3 f916 	bl	8002a00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f7d4:	490f      	ldr	r1, [pc, #60]	; (800f814 <MX_USB_DEVICE_Init+0x58>)
 800f7d6:	480e      	ldr	r0, [pc, #56]	; (800f810 <MX_USB_DEVICE_Init+0x54>)
 800f7d8:	f7fb fdd2 	bl	800b380 <USBD_RegisterClass>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d001      	beq.n	800f7e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f7e2:	f7f3 f90d 	bl	8002a00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f7e6:	490c      	ldr	r1, [pc, #48]	; (800f818 <MX_USB_DEVICE_Init+0x5c>)
 800f7e8:	4809      	ldr	r0, [pc, #36]	; (800f810 <MX_USB_DEVICE_Init+0x54>)
 800f7ea:	f7fb fd09 	bl	800b200 <USBD_CDC_RegisterInterface>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d001      	beq.n	800f7f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f7f4:	f7f3 f904 	bl	8002a00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f7f8:	4805      	ldr	r0, [pc, #20]	; (800f810 <MX_USB_DEVICE_Init+0x54>)
 800f7fa:	f7fb fdf7 	bl	800b3ec <USBD_Start>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	d001      	beq.n	800f808 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f804:	f7f3 f8fc 	bl	8002a00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f808:	bf00      	nop
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	200000b0 	.word	0x200000b0
 800f810:	2000c830 	.word	0x2000c830
 800f814:	20000018 	.word	0x20000018
 800f818:	2000009c 	.word	0x2000009c

0800f81c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f820:	2200      	movs	r2, #0
 800f822:	4905      	ldr	r1, [pc, #20]	; (800f838 <CDC_Init_FS+0x1c>)
 800f824:	4805      	ldr	r0, [pc, #20]	; (800f83c <CDC_Init_FS+0x20>)
 800f826:	f7fb fd05 	bl	800b234 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f82a:	4905      	ldr	r1, [pc, #20]	; (800f840 <CDC_Init_FS+0x24>)
 800f82c:	4803      	ldr	r0, [pc, #12]	; (800f83c <CDC_Init_FS+0x20>)
 800f82e:	f7fb fd23 	bl	800b278 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f832:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f834:	4618      	mov	r0, r3
 800f836:	bd80      	pop	{r7, pc}
 800f838:	2000d30c 	.word	0x2000d30c
 800f83c:	2000c830 	.word	0x2000c830
 800f840:	2000cb0c 	.word	0x2000cb0c

0800f844 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f844:	b480      	push	{r7}
 800f846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f848:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr

0800f854 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	4603      	mov	r3, r0
 800f85c:	6039      	str	r1, [r7, #0]
 800f85e:	71fb      	strb	r3, [r7, #7]
 800f860:	4613      	mov	r3, r2
 800f862:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f864:	79fb      	ldrb	r3, [r7, #7]
 800f866:	2b23      	cmp	r3, #35	; 0x23
 800f868:	d84a      	bhi.n	800f900 <CDC_Control_FS+0xac>
 800f86a:	a201      	add	r2, pc, #4	; (adr r2, 800f870 <CDC_Control_FS+0x1c>)
 800f86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f870:	0800f901 	.word	0x0800f901
 800f874:	0800f901 	.word	0x0800f901
 800f878:	0800f901 	.word	0x0800f901
 800f87c:	0800f901 	.word	0x0800f901
 800f880:	0800f901 	.word	0x0800f901
 800f884:	0800f901 	.word	0x0800f901
 800f888:	0800f901 	.word	0x0800f901
 800f88c:	0800f901 	.word	0x0800f901
 800f890:	0800f901 	.word	0x0800f901
 800f894:	0800f901 	.word	0x0800f901
 800f898:	0800f901 	.word	0x0800f901
 800f89c:	0800f901 	.word	0x0800f901
 800f8a0:	0800f901 	.word	0x0800f901
 800f8a4:	0800f901 	.word	0x0800f901
 800f8a8:	0800f901 	.word	0x0800f901
 800f8ac:	0800f901 	.word	0x0800f901
 800f8b0:	0800f901 	.word	0x0800f901
 800f8b4:	0800f901 	.word	0x0800f901
 800f8b8:	0800f901 	.word	0x0800f901
 800f8bc:	0800f901 	.word	0x0800f901
 800f8c0:	0800f901 	.word	0x0800f901
 800f8c4:	0800f901 	.word	0x0800f901
 800f8c8:	0800f901 	.word	0x0800f901
 800f8cc:	0800f901 	.word	0x0800f901
 800f8d0:	0800f901 	.word	0x0800f901
 800f8d4:	0800f901 	.word	0x0800f901
 800f8d8:	0800f901 	.word	0x0800f901
 800f8dc:	0800f901 	.word	0x0800f901
 800f8e0:	0800f901 	.word	0x0800f901
 800f8e4:	0800f901 	.word	0x0800f901
 800f8e8:	0800f901 	.word	0x0800f901
 800f8ec:	0800f901 	.word	0x0800f901
 800f8f0:	0800f901 	.word	0x0800f901
 800f8f4:	0800f901 	.word	0x0800f901
 800f8f8:	0800f901 	.word	0x0800f901
 800f8fc:	0800f901 	.word	0x0800f901
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f900:	bf00      	nop
  }

  return (USBD_OK);
 800f902:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f904:	4618      	mov	r0, r3
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f91a:	6879      	ldr	r1, [r7, #4]
 800f91c:	4805      	ldr	r0, [pc, #20]	; (800f934 <CDC_Receive_FS+0x24>)
 800f91e:	f7fb fcab 	bl	800b278 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f922:	4804      	ldr	r0, [pc, #16]	; (800f934 <CDC_Receive_FS+0x24>)
 800f924:	f7fb fcc6 	bl	800b2b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f928:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3708      	adds	r7, #8
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}
 800f932:	bf00      	nop
 800f934:	2000c830 	.word	0x2000c830

0800f938 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f938:	b480      	push	{r7}
 800f93a:	b087      	sub	sp, #28
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	4613      	mov	r3, r2
 800f944:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f946:	2300      	movs	r3, #0
 800f948:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f94a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	371c      	adds	r7, #28
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr
	...

0800f95c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	4603      	mov	r3, r0
 800f964:	6039      	str	r1, [r7, #0]
 800f966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	2212      	movs	r2, #18
 800f96c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f96e:	4b03      	ldr	r3, [pc, #12]	; (800f97c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f970:	4618      	mov	r0, r3
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr
 800f97c:	200000d0 	.word	0x200000d0

0800f980 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f980:	b480      	push	{r7}
 800f982:	b083      	sub	sp, #12
 800f984:	af00      	add	r7, sp, #0
 800f986:	4603      	mov	r3, r0
 800f988:	6039      	str	r1, [r7, #0]
 800f98a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	2204      	movs	r2, #4
 800f990:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f992:	4b03      	ldr	r3, [pc, #12]	; (800f9a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f994:	4618      	mov	r0, r3
 800f996:	370c      	adds	r7, #12
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr
 800f9a0:	200000f0 	.word	0x200000f0

0800f9a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	6039      	str	r1, [r7, #0]
 800f9ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f9b0:	79fb      	ldrb	r3, [r7, #7]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d105      	bne.n	800f9c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f9b6:	683a      	ldr	r2, [r7, #0]
 800f9b8:	4907      	ldr	r1, [pc, #28]	; (800f9d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f9ba:	4808      	ldr	r0, [pc, #32]	; (800f9dc <USBD_FS_ProductStrDescriptor+0x38>)
 800f9bc:	f7fc feec 	bl	800c798 <USBD_GetString>
 800f9c0:	e004      	b.n	800f9cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f9c2:	683a      	ldr	r2, [r7, #0]
 800f9c4:	4904      	ldr	r1, [pc, #16]	; (800f9d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f9c6:	4805      	ldr	r0, [pc, #20]	; (800f9dc <USBD_FS_ProductStrDescriptor+0x38>)
 800f9c8:	f7fc fee6 	bl	800c798 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f9cc:	4b02      	ldr	r3, [pc, #8]	; (800f9d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	2000db0c 	.word	0x2000db0c
 800f9dc:	080115c8 	.word	0x080115c8

0800f9e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	6039      	str	r1, [r7, #0]
 800f9ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f9ec:	683a      	ldr	r2, [r7, #0]
 800f9ee:	4904      	ldr	r1, [pc, #16]	; (800fa00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f9f0:	4804      	ldr	r0, [pc, #16]	; (800fa04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f9f2:	f7fc fed1 	bl	800c798 <USBD_GetString>
  return USBD_StrDesc;
 800f9f6:	4b02      	ldr	r3, [pc, #8]	; (800fa00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3708      	adds	r7, #8
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	2000db0c 	.word	0x2000db0c
 800fa04:	080115e0 	.word	0x080115e0

0800fa08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	4603      	mov	r3, r0
 800fa10:	6039      	str	r1, [r7, #0]
 800fa12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	221a      	movs	r2, #26
 800fa18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fa1a:	f000 f855 	bl	800fac8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fa1e:	4b02      	ldr	r3, [pc, #8]	; (800fa28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3708      	adds	r7, #8
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	200000f4 	.word	0x200000f4

0800fa2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b082      	sub	sp, #8
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	4603      	mov	r3, r0
 800fa34:	6039      	str	r1, [r7, #0]
 800fa36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fa38:	79fb      	ldrb	r3, [r7, #7]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d105      	bne.n	800fa4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fa3e:	683a      	ldr	r2, [r7, #0]
 800fa40:	4907      	ldr	r1, [pc, #28]	; (800fa60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fa42:	4808      	ldr	r0, [pc, #32]	; (800fa64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fa44:	f7fc fea8 	bl	800c798 <USBD_GetString>
 800fa48:	e004      	b.n	800fa54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fa4a:	683a      	ldr	r2, [r7, #0]
 800fa4c:	4904      	ldr	r1, [pc, #16]	; (800fa60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fa4e:	4805      	ldr	r0, [pc, #20]	; (800fa64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fa50:	f7fc fea2 	bl	800c798 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa54:	4b02      	ldr	r3, [pc, #8]	; (800fa60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3708      	adds	r7, #8
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
 800fa5e:	bf00      	nop
 800fa60:	2000db0c 	.word	0x2000db0c
 800fa64:	080115f4 	.word	0x080115f4

0800fa68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	4603      	mov	r3, r0
 800fa70:	6039      	str	r1, [r7, #0]
 800fa72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa74:	79fb      	ldrb	r3, [r7, #7]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d105      	bne.n	800fa86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fa7a:	683a      	ldr	r2, [r7, #0]
 800fa7c:	4907      	ldr	r1, [pc, #28]	; (800fa9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fa7e:	4808      	ldr	r0, [pc, #32]	; (800faa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fa80:	f7fc fe8a 	bl	800c798 <USBD_GetString>
 800fa84:	e004      	b.n	800fa90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fa86:	683a      	ldr	r2, [r7, #0]
 800fa88:	4904      	ldr	r1, [pc, #16]	; (800fa9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fa8a:	4805      	ldr	r0, [pc, #20]	; (800faa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fa8c:	f7fc fe84 	bl	800c798 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa90:	4b02      	ldr	r3, [pc, #8]	; (800fa9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3708      	adds	r7, #8
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	2000db0c 	.word	0x2000db0c
 800faa0:	08011600 	.word	0x08011600

0800faa4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faa4:	b480      	push	{r7}
 800faa6:	b083      	sub	sp, #12
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	4603      	mov	r3, r0
 800faac:	6039      	str	r1, [r7, #0]
 800faae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	220c      	movs	r2, #12
 800fab4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800fab6:	4b03      	ldr	r3, [pc, #12]	; (800fac4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800fab8:	4618      	mov	r0, r3
 800faba:	370c      	adds	r7, #12
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr
 800fac4:	200000e4 	.word	0x200000e4

0800fac8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b084      	sub	sp, #16
 800facc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800face:	4b0f      	ldr	r3, [pc, #60]	; (800fb0c <Get_SerialNum+0x44>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fad4:	4b0e      	ldr	r3, [pc, #56]	; (800fb10 <Get_SerialNum+0x48>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fada:	4b0e      	ldr	r3, [pc, #56]	; (800fb14 <Get_SerialNum+0x4c>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fae0:	68fa      	ldr	r2, [r7, #12]
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4413      	add	r3, r2
 800fae6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d009      	beq.n	800fb02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800faee:	2208      	movs	r2, #8
 800faf0:	4909      	ldr	r1, [pc, #36]	; (800fb18 <Get_SerialNum+0x50>)
 800faf2:	68f8      	ldr	r0, [r7, #12]
 800faf4:	f000 f814 	bl	800fb20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800faf8:	2204      	movs	r2, #4
 800fafa:	4908      	ldr	r1, [pc, #32]	; (800fb1c <Get_SerialNum+0x54>)
 800fafc:	68b8      	ldr	r0, [r7, #8]
 800fafe:	f000 f80f 	bl	800fb20 <IntToUnicode>
  }
}
 800fb02:	bf00      	nop
 800fb04:	3710      	adds	r7, #16
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	1ff0f420 	.word	0x1ff0f420
 800fb10:	1ff0f424 	.word	0x1ff0f424
 800fb14:	1ff0f428 	.word	0x1ff0f428
 800fb18:	200000f6 	.word	0x200000f6
 800fb1c:	20000106 	.word	0x20000106

0800fb20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fb20:	b480      	push	{r7}
 800fb22:	b087      	sub	sp, #28
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fb32:	2300      	movs	r3, #0
 800fb34:	75fb      	strb	r3, [r7, #23]
 800fb36:	e027      	b.n	800fb88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	0f1b      	lsrs	r3, r3, #28
 800fb3c:	2b09      	cmp	r3, #9
 800fb3e:	d80b      	bhi.n	800fb58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	0f1b      	lsrs	r3, r3, #28
 800fb44:	b2da      	uxtb	r2, r3
 800fb46:	7dfb      	ldrb	r3, [r7, #23]
 800fb48:	005b      	lsls	r3, r3, #1
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	440b      	add	r3, r1
 800fb50:	3230      	adds	r2, #48	; 0x30
 800fb52:	b2d2      	uxtb	r2, r2
 800fb54:	701a      	strb	r2, [r3, #0]
 800fb56:	e00a      	b.n	800fb6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	0f1b      	lsrs	r3, r3, #28
 800fb5c:	b2da      	uxtb	r2, r3
 800fb5e:	7dfb      	ldrb	r3, [r7, #23]
 800fb60:	005b      	lsls	r3, r3, #1
 800fb62:	4619      	mov	r1, r3
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	440b      	add	r3, r1
 800fb68:	3237      	adds	r2, #55	; 0x37
 800fb6a:	b2d2      	uxtb	r2, r2
 800fb6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	011b      	lsls	r3, r3, #4
 800fb72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fb74:	7dfb      	ldrb	r3, [r7, #23]
 800fb76:	005b      	lsls	r3, r3, #1
 800fb78:	3301      	adds	r3, #1
 800fb7a:	68ba      	ldr	r2, [r7, #8]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	2200      	movs	r2, #0
 800fb80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fb82:	7dfb      	ldrb	r3, [r7, #23]
 800fb84:	3301      	adds	r3, #1
 800fb86:	75fb      	strb	r3, [r7, #23]
 800fb88:	7dfa      	ldrb	r2, [r7, #23]
 800fb8a:	79fb      	ldrb	r3, [r7, #7]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d3d3      	bcc.n	800fb38 <IntToUnicode+0x18>
  }
}
 800fb90:	bf00      	nop
 800fb92:	bf00      	nop
 800fb94:	371c      	adds	r7, #28
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr
	...

0800fba0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b0ae      	sub	sp, #184	; 0xb8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fba8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fbac:	2200      	movs	r2, #0
 800fbae:	601a      	str	r2, [r3, #0]
 800fbb0:	605a      	str	r2, [r3, #4]
 800fbb2:	609a      	str	r2, [r3, #8]
 800fbb4:	60da      	str	r2, [r3, #12]
 800fbb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fbb8:	f107 0314 	add.w	r3, r7, #20
 800fbbc:	2290      	movs	r2, #144	; 0x90
 800fbbe:	2100      	movs	r1, #0
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f000 fee5 	bl	8010990 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fbce:	d161      	bne.n	800fc94 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800fbd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fbd4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fbdc:	f107 0314 	add.w	r3, r7, #20
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7f7 fb17 	bl	8007214 <HAL_RCCEx_PeriphCLKConfig>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d001      	beq.n	800fbf0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800fbec:	f7f2 ff08 	bl	8002a00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fbf0:	4b2a      	ldr	r3, [pc, #168]	; (800fc9c <HAL_PCD_MspInit+0xfc>)
 800fbf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbf4:	4a29      	ldr	r2, [pc, #164]	; (800fc9c <HAL_PCD_MspInit+0xfc>)
 800fbf6:	f043 0301 	orr.w	r3, r3, #1
 800fbfa:	6313      	str	r3, [r2, #48]	; 0x30
 800fbfc:	4b27      	ldr	r3, [pc, #156]	; (800fc9c <HAL_PCD_MspInit+0xfc>)
 800fbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc00:	f003 0301 	and.w	r3, r3, #1
 800fc04:	613b      	str	r3, [r7, #16]
 800fc06:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800fc08:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800fc0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc10:	2302      	movs	r3, #2
 800fc12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc16:	2300      	movs	r3, #0
 800fc18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fc1c:	2303      	movs	r3, #3
 800fc1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fc22:	230a      	movs	r3, #10
 800fc24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	481c      	ldr	r0, [pc, #112]	; (800fca0 <HAL_PCD_MspInit+0x100>)
 800fc30:	f7f5 f8f2 	bl	8004e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800fc34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc42:	2300      	movs	r3, #0
 800fc44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800fc48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	4814      	ldr	r0, [pc, #80]	; (800fca0 <HAL_PCD_MspInit+0x100>)
 800fc50:	f7f5 f8e2 	bl	8004e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fc54:	4b11      	ldr	r3, [pc, #68]	; (800fc9c <HAL_PCD_MspInit+0xfc>)
 800fc56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc58:	4a10      	ldr	r2, [pc, #64]	; (800fc9c <HAL_PCD_MspInit+0xfc>)
 800fc5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc5e:	6353      	str	r3, [r2, #52]	; 0x34
 800fc60:	4b0e      	ldr	r3, [pc, #56]	; (800fc9c <HAL_PCD_MspInit+0xfc>)
 800fc62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc68:	60fb      	str	r3, [r7, #12]
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	4b0b      	ldr	r3, [pc, #44]	; (800fc9c <HAL_PCD_MspInit+0xfc>)
 800fc6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc70:	4a0a      	ldr	r2, [pc, #40]	; (800fc9c <HAL_PCD_MspInit+0xfc>)
 800fc72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fc76:	6453      	str	r3, [r2, #68]	; 0x44
 800fc78:	4b08      	ldr	r3, [pc, #32]	; (800fc9c <HAL_PCD_MspInit+0xfc>)
 800fc7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc80:	60bb      	str	r3, [r7, #8]
 800fc82:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fc84:	2200      	movs	r2, #0
 800fc86:	2105      	movs	r1, #5
 800fc88:	2043      	movs	r0, #67	; 0x43
 800fc8a:	f7f4 f9f9 	bl	8004080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fc8e:	2043      	movs	r0, #67	; 0x43
 800fc90:	f7f4 fa12 	bl	80040b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fc94:	bf00      	nop
 800fc96:	37b8      	adds	r7, #184	; 0xb8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	40023800 	.word	0x40023800
 800fca0:	40020000 	.word	0x40020000

0800fca4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fcb8:	4619      	mov	r1, r3
 800fcba:	4610      	mov	r0, r2
 800fcbc:	f7fb fbe3 	bl	800b486 <USBD_LL_SetupStage>
}
 800fcc0:	bf00      	nop
 800fcc2:	3708      	adds	r7, #8
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	460b      	mov	r3, r1
 800fcd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fcda:	78fa      	ldrb	r2, [r7, #3]
 800fcdc:	6879      	ldr	r1, [r7, #4]
 800fcde:	4613      	mov	r3, r2
 800fce0:	00db      	lsls	r3, r3, #3
 800fce2:	4413      	add	r3, r2
 800fce4:	009b      	lsls	r3, r3, #2
 800fce6:	440b      	add	r3, r1
 800fce8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fcec:	681a      	ldr	r2, [r3, #0]
 800fcee:	78fb      	ldrb	r3, [r7, #3]
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	f7fb fc1d 	bl	800b530 <USBD_LL_DataOutStage>
}
 800fcf6:	bf00      	nop
 800fcf8:	3708      	adds	r7, #8
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}

0800fcfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcfe:	b580      	push	{r7, lr}
 800fd00:	b082      	sub	sp, #8
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	6078      	str	r0, [r7, #4]
 800fd06:	460b      	mov	r3, r1
 800fd08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fd10:	78fa      	ldrb	r2, [r7, #3]
 800fd12:	6879      	ldr	r1, [r7, #4]
 800fd14:	4613      	mov	r3, r2
 800fd16:	00db      	lsls	r3, r3, #3
 800fd18:	4413      	add	r3, r2
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	440b      	add	r3, r1
 800fd1e:	334c      	adds	r3, #76	; 0x4c
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	78fb      	ldrb	r3, [r7, #3]
 800fd24:	4619      	mov	r1, r3
 800fd26:	f7fb fcb6 	bl	800b696 <USBD_LL_DataInStage>
}
 800fd2a:	bf00      	nop
 800fd2c:	3708      	adds	r7, #8
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}

0800fd32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b082      	sub	sp, #8
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7fb fdea 	bl	800b91a <USBD_LL_SOF>
}
 800fd46:	bf00      	nop
 800fd48:	3708      	adds	r7, #8
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}

0800fd4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd4e:	b580      	push	{r7, lr}
 800fd50:	b084      	sub	sp, #16
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fd56:	2301      	movs	r3, #1
 800fd58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	68db      	ldr	r3, [r3, #12]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d102      	bne.n	800fd68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fd62:	2300      	movs	r3, #0
 800fd64:	73fb      	strb	r3, [r7, #15]
 800fd66:	e008      	b.n	800fd7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	2b02      	cmp	r3, #2
 800fd6e:	d102      	bne.n	800fd76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fd70:	2301      	movs	r3, #1
 800fd72:	73fb      	strb	r3, [r7, #15]
 800fd74:	e001      	b.n	800fd7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fd76:	f7f2 fe43 	bl	8002a00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fd80:	7bfa      	ldrb	r2, [r7, #15]
 800fd82:	4611      	mov	r1, r2
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7fb fd8a 	bl	800b89e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7fb fd32 	bl	800b7fa <USBD_LL_Reset>
}
 800fd96:	bf00      	nop
 800fd98:	3710      	adds	r7, #16
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
	...

0800fda0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fb fd85 	bl	800b8be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	6812      	ldr	r2, [r2, #0]
 800fdc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fdc6:	f043 0301 	orr.w	r3, r3, #1
 800fdca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6a1b      	ldr	r3, [r3, #32]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d005      	beq.n	800fde0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fdd4:	4b04      	ldr	r3, [pc, #16]	; (800fde8 <HAL_PCD_SuspendCallback+0x48>)
 800fdd6:	691b      	ldr	r3, [r3, #16]
 800fdd8:	4a03      	ldr	r2, [pc, #12]	; (800fde8 <HAL_PCD_SuspendCallback+0x48>)
 800fdda:	f043 0306 	orr.w	r3, r3, #6
 800fdde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fde0:	bf00      	nop
 800fde2:	3708      	adds	r7, #8
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	e000ed00 	.word	0xe000ed00

0800fdec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7fb fd75 	bl	800b8ea <USBD_LL_Resume>
}
 800fe00:	bf00      	nop
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	460b      	mov	r3, r1
 800fe12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe1a:	78fa      	ldrb	r2, [r7, #3]
 800fe1c:	4611      	mov	r1, r2
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fb fdcd 	bl	800b9be <USBD_LL_IsoOUTIncomplete>
}
 800fe24:	bf00      	nop
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	460b      	mov	r3, r1
 800fe36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe3e:	78fa      	ldrb	r2, [r7, #3]
 800fe40:	4611      	mov	r1, r2
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7fb fd89 	bl	800b95a <USBD_LL_IsoINIncomplete>
}
 800fe48:	bf00      	nop
 800fe4a:	3708      	adds	r7, #8
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b082      	sub	sp, #8
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7fb fddf 	bl	800ba22 <USBD_LL_DevConnected>
}
 800fe64:	bf00      	nop
 800fe66:	3708      	adds	r7, #8
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7fb fddc 	bl	800ba38 <USBD_LL_DevDisconnected>
}
 800fe80:	bf00      	nop
 800fe82:	3708      	adds	r7, #8
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d13c      	bne.n	800ff12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fe98:	4a20      	ldr	r2, [pc, #128]	; (800ff1c <USBD_LL_Init+0x94>)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	4a1e      	ldr	r2, [pc, #120]	; (800ff1c <USBD_LL_Init+0x94>)
 800fea4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fea8:	4b1c      	ldr	r3, [pc, #112]	; (800ff1c <USBD_LL_Init+0x94>)
 800feaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800feae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800feb0:	4b1a      	ldr	r3, [pc, #104]	; (800ff1c <USBD_LL_Init+0x94>)
 800feb2:	2206      	movs	r2, #6
 800feb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800feb6:	4b19      	ldr	r3, [pc, #100]	; (800ff1c <USBD_LL_Init+0x94>)
 800feb8:	2202      	movs	r2, #2
 800feba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800febc:	4b17      	ldr	r3, [pc, #92]	; (800ff1c <USBD_LL_Init+0x94>)
 800febe:	2200      	movs	r2, #0
 800fec0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fec2:	4b16      	ldr	r3, [pc, #88]	; (800ff1c <USBD_LL_Init+0x94>)
 800fec4:	2202      	movs	r2, #2
 800fec6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800fec8:	4b14      	ldr	r3, [pc, #80]	; (800ff1c <USBD_LL_Init+0x94>)
 800feca:	2201      	movs	r2, #1
 800fecc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fece:	4b13      	ldr	r3, [pc, #76]	; (800ff1c <USBD_LL_Init+0x94>)
 800fed0:	2200      	movs	r2, #0
 800fed2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fed4:	4b11      	ldr	r3, [pc, #68]	; (800ff1c <USBD_LL_Init+0x94>)
 800fed6:	2200      	movs	r2, #0
 800fed8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800feda:	4b10      	ldr	r3, [pc, #64]	; (800ff1c <USBD_LL_Init+0x94>)
 800fedc:	2201      	movs	r2, #1
 800fede:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fee0:	4b0e      	ldr	r3, [pc, #56]	; (800ff1c <USBD_LL_Init+0x94>)
 800fee2:	2200      	movs	r2, #0
 800fee4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fee6:	480d      	ldr	r0, [pc, #52]	; (800ff1c <USBD_LL_Init+0x94>)
 800fee8:	f7f5 f975 	bl	80051d6 <HAL_PCD_Init>
 800feec:	4603      	mov	r3, r0
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d001      	beq.n	800fef6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fef2:	f7f2 fd85 	bl	8002a00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fef6:	2180      	movs	r1, #128	; 0x80
 800fef8:	4808      	ldr	r0, [pc, #32]	; (800ff1c <USBD_LL_Init+0x94>)
 800fefa:	f7f6 fbf0 	bl	80066de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fefe:	2240      	movs	r2, #64	; 0x40
 800ff00:	2100      	movs	r1, #0
 800ff02:	4806      	ldr	r0, [pc, #24]	; (800ff1c <USBD_LL_Init+0x94>)
 800ff04:	f7f6 fba4 	bl	8006650 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ff08:	2280      	movs	r2, #128	; 0x80
 800ff0a:	2101      	movs	r1, #1
 800ff0c:	4803      	ldr	r0, [pc, #12]	; (800ff1c <USBD_LL_Init+0x94>)
 800ff0e:	f7f6 fb9f 	bl	8006650 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ff12:	2300      	movs	r3, #0
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	2000dd0c 	.word	0x2000dd0c

0800ff20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7f5 fa71 	bl	800541e <HAL_PCD_Start>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff40:	7bfb      	ldrb	r3, [r7, #15]
 800ff42:	4618      	mov	r0, r3
 800ff44:	f000 f97e 	bl	8010244 <USBD_Get_USB_Status>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3710      	adds	r7, #16
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}

0800ff56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ff56:	b580      	push	{r7, lr}
 800ff58:	b084      	sub	sp, #16
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
 800ff5e:	4608      	mov	r0, r1
 800ff60:	4611      	mov	r1, r2
 800ff62:	461a      	mov	r2, r3
 800ff64:	4603      	mov	r3, r0
 800ff66:	70fb      	strb	r3, [r7, #3]
 800ff68:	460b      	mov	r3, r1
 800ff6a:	70bb      	strb	r3, [r7, #2]
 800ff6c:	4613      	mov	r3, r2
 800ff6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff70:	2300      	movs	r3, #0
 800ff72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff74:	2300      	movs	r3, #0
 800ff76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ff7e:	78bb      	ldrb	r3, [r7, #2]
 800ff80:	883a      	ldrh	r2, [r7, #0]
 800ff82:	78f9      	ldrb	r1, [r7, #3]
 800ff84:	f7f5 ff5e 	bl	8005e44 <HAL_PCD_EP_Open>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff8c:	7bfb      	ldrb	r3, [r7, #15]
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f000 f958 	bl	8010244 <USBD_Get_USB_Status>
 800ff94:	4603      	mov	r3, r0
 800ff96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff98:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3710      	adds	r7, #16
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}

0800ffa2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffa2:	b580      	push	{r7, lr}
 800ffa4:	b084      	sub	sp, #16
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	6078      	str	r0, [r7, #4]
 800ffaa:	460b      	mov	r3, r1
 800ffac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ffbc:	78fa      	ldrb	r2, [r7, #3]
 800ffbe:	4611      	mov	r1, r2
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7f5 ffa7 	bl	8005f14 <HAL_PCD_EP_Close>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffca:	7bfb      	ldrb	r3, [r7, #15]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f000 f939 	bl	8010244 <USBD_Get_USB_Status>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3710      	adds	r7, #16
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b084      	sub	sp, #16
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffec:	2300      	movs	r3, #0
 800ffee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fff0:	2300      	movs	r3, #0
 800fff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fffa:	78fa      	ldrb	r2, [r7, #3]
 800fffc:	4611      	mov	r1, r2
 800fffe:	4618      	mov	r0, r3
 8010000:	f7f6 f87f 	bl	8006102 <HAL_PCD_EP_SetStall>
 8010004:	4603      	mov	r3, r0
 8010006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010008:	7bfb      	ldrb	r3, [r7, #15]
 801000a:	4618      	mov	r0, r3
 801000c:	f000 f91a 	bl	8010244 <USBD_Get_USB_Status>
 8010010:	4603      	mov	r3, r0
 8010012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010014:	7bbb      	ldrb	r3, [r7, #14]
}
 8010016:	4618      	mov	r0, r3
 8010018:	3710      	adds	r7, #16
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}

0801001e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801001e:	b580      	push	{r7, lr}
 8010020:	b084      	sub	sp, #16
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
 8010026:	460b      	mov	r3, r1
 8010028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801002a:	2300      	movs	r3, #0
 801002c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801002e:	2300      	movs	r3, #0
 8010030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010038:	78fa      	ldrb	r2, [r7, #3]
 801003a:	4611      	mov	r1, r2
 801003c:	4618      	mov	r0, r3
 801003e:	f7f6 f8c4 	bl	80061ca <HAL_PCD_EP_ClrStall>
 8010042:	4603      	mov	r3, r0
 8010044:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010046:	7bfb      	ldrb	r3, [r7, #15]
 8010048:	4618      	mov	r0, r3
 801004a:	f000 f8fb 	bl	8010244 <USBD_Get_USB_Status>
 801004e:	4603      	mov	r3, r0
 8010050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010052:	7bbb      	ldrb	r3, [r7, #14]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3710      	adds	r7, #16
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801005c:	b480      	push	{r7}
 801005e:	b085      	sub	sp, #20
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	460b      	mov	r3, r1
 8010066:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801006e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010074:	2b00      	cmp	r3, #0
 8010076:	da0b      	bge.n	8010090 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010078:	78fb      	ldrb	r3, [r7, #3]
 801007a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801007e:	68f9      	ldr	r1, [r7, #12]
 8010080:	4613      	mov	r3, r2
 8010082:	00db      	lsls	r3, r3, #3
 8010084:	4413      	add	r3, r2
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	440b      	add	r3, r1
 801008a:	333e      	adds	r3, #62	; 0x3e
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	e00b      	b.n	80100a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010090:	78fb      	ldrb	r3, [r7, #3]
 8010092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010096:	68f9      	ldr	r1, [r7, #12]
 8010098:	4613      	mov	r3, r2
 801009a:	00db      	lsls	r3, r3, #3
 801009c:	4413      	add	r3, r2
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	440b      	add	r3, r1
 80100a2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80100a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3714      	adds	r7, #20
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr

080100b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	460b      	mov	r3, r1
 80100be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100c0:	2300      	movs	r3, #0
 80100c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100c4:	2300      	movs	r3, #0
 80100c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80100ce:	78fa      	ldrb	r2, [r7, #3]
 80100d0:	4611      	mov	r1, r2
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7f5 fe91 	bl	8005dfa <HAL_PCD_SetAddress>
 80100d8:	4603      	mov	r3, r0
 80100da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100dc:	7bfb      	ldrb	r3, [r7, #15]
 80100de:	4618      	mov	r0, r3
 80100e0:	f000 f8b0 	bl	8010244 <USBD_Get_USB_Status>
 80100e4:	4603      	mov	r3, r0
 80100e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3710      	adds	r7, #16
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}

080100f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80100f2:	b580      	push	{r7, lr}
 80100f4:	b086      	sub	sp, #24
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	60f8      	str	r0, [r7, #12]
 80100fa:	607a      	str	r2, [r7, #4]
 80100fc:	603b      	str	r3, [r7, #0]
 80100fe:	460b      	mov	r3, r1
 8010100:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010102:	2300      	movs	r3, #0
 8010104:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010106:	2300      	movs	r3, #0
 8010108:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010110:	7af9      	ldrb	r1, [r7, #11]
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	f7f5 ffaa 	bl	800606e <HAL_PCD_EP_Transmit>
 801011a:	4603      	mov	r3, r0
 801011c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801011e:	7dfb      	ldrb	r3, [r7, #23]
 8010120:	4618      	mov	r0, r3
 8010122:	f000 f88f 	bl	8010244 <USBD_Get_USB_Status>
 8010126:	4603      	mov	r3, r0
 8010128:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801012a:	7dbb      	ldrb	r3, [r7, #22]
}
 801012c:	4618      	mov	r0, r3
 801012e:	3718      	adds	r7, #24
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b086      	sub	sp, #24
 8010138:	af00      	add	r7, sp, #0
 801013a:	60f8      	str	r0, [r7, #12]
 801013c:	607a      	str	r2, [r7, #4]
 801013e:	603b      	str	r3, [r7, #0]
 8010140:	460b      	mov	r3, r1
 8010142:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010144:	2300      	movs	r3, #0
 8010146:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010148:	2300      	movs	r3, #0
 801014a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010152:	7af9      	ldrb	r1, [r7, #11]
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	f7f5 ff26 	bl	8005fa8 <HAL_PCD_EP_Receive>
 801015c:	4603      	mov	r3, r0
 801015e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010160:	7dfb      	ldrb	r3, [r7, #23]
 8010162:	4618      	mov	r0, r3
 8010164:	f000 f86e 	bl	8010244 <USBD_Get_USB_Status>
 8010168:	4603      	mov	r3, r0
 801016a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801016c:	7dbb      	ldrb	r3, [r7, #22]
}
 801016e:	4618      	mov	r0, r3
 8010170:	3718      	adds	r7, #24
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010176:	b580      	push	{r7, lr}
 8010178:	b082      	sub	sp, #8
 801017a:	af00      	add	r7, sp, #0
 801017c:	6078      	str	r0, [r7, #4]
 801017e:	460b      	mov	r3, r1
 8010180:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010188:	78fa      	ldrb	r2, [r7, #3]
 801018a:	4611      	mov	r1, r2
 801018c:	4618      	mov	r0, r3
 801018e:	f7f5 ff56 	bl	800603e <HAL_PCD_EP_GetRxCount>
 8010192:	4603      	mov	r3, r0
}
 8010194:	4618      	mov	r0, r3
 8010196:	3708      	adds	r7, #8
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	460b      	mov	r3, r1
 80101a6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80101a8:	78fb      	ldrb	r3, [r7, #3]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d002      	beq.n	80101b4 <HAL_PCDEx_LPM_Callback+0x18>
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	d01f      	beq.n	80101f2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80101b2:	e03b      	b.n	801022c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6a1b      	ldr	r3, [r3, #32]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d007      	beq.n	80101cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80101bc:	f000 f83c 	bl	8010238 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80101c0:	4b1c      	ldr	r3, [pc, #112]	; (8010234 <HAL_PCDEx_LPM_Callback+0x98>)
 80101c2:	691b      	ldr	r3, [r3, #16]
 80101c4:	4a1b      	ldr	r2, [pc, #108]	; (8010234 <HAL_PCDEx_LPM_Callback+0x98>)
 80101c6:	f023 0306 	bic.w	r3, r3, #6
 80101ca:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	6812      	ldr	r2, [r2, #0]
 80101da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80101de:	f023 0301 	bic.w	r3, r3, #1
 80101e2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fb fb7d 	bl	800b8ea <USBD_LL_Resume>
    break;
 80101f0:	e01c      	b.n	801022c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	6812      	ldr	r2, [r2, #0]
 8010200:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010204:	f043 0301 	orr.w	r3, r3, #1
 8010208:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010210:	4618      	mov	r0, r3
 8010212:	f7fb fb54 	bl	800b8be <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6a1b      	ldr	r3, [r3, #32]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d005      	beq.n	801022a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801021e:	4b05      	ldr	r3, [pc, #20]	; (8010234 <HAL_PCDEx_LPM_Callback+0x98>)
 8010220:	691b      	ldr	r3, [r3, #16]
 8010222:	4a04      	ldr	r2, [pc, #16]	; (8010234 <HAL_PCDEx_LPM_Callback+0x98>)
 8010224:	f043 0306 	orr.w	r3, r3, #6
 8010228:	6113      	str	r3, [r2, #16]
    break;
 801022a:	bf00      	nop
}
 801022c:	bf00      	nop
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}
 8010234:	e000ed00 	.word	0xe000ed00

08010238 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801023c:	f7f2 fb5c 	bl	80028f8 <SystemClock_Config>
}
 8010240:	bf00      	nop
 8010242:	bd80      	pop	{r7, pc}

08010244 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010244:	b480      	push	{r7}
 8010246:	b085      	sub	sp, #20
 8010248:	af00      	add	r7, sp, #0
 801024a:	4603      	mov	r3, r0
 801024c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801024e:	2300      	movs	r3, #0
 8010250:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010252:	79fb      	ldrb	r3, [r7, #7]
 8010254:	2b03      	cmp	r3, #3
 8010256:	d817      	bhi.n	8010288 <USBD_Get_USB_Status+0x44>
 8010258:	a201      	add	r2, pc, #4	; (adr r2, 8010260 <USBD_Get_USB_Status+0x1c>)
 801025a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801025e:	bf00      	nop
 8010260:	08010271 	.word	0x08010271
 8010264:	08010277 	.word	0x08010277
 8010268:	0801027d 	.word	0x0801027d
 801026c:	08010283 	.word	0x08010283
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010270:	2300      	movs	r3, #0
 8010272:	73fb      	strb	r3, [r7, #15]
    break;
 8010274:	e00b      	b.n	801028e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010276:	2303      	movs	r3, #3
 8010278:	73fb      	strb	r3, [r7, #15]
    break;
 801027a:	e008      	b.n	801028e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801027c:	2301      	movs	r3, #1
 801027e:	73fb      	strb	r3, [r7, #15]
    break;
 8010280:	e005      	b.n	801028e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010282:	2303      	movs	r3, #3
 8010284:	73fb      	strb	r3, [r7, #15]
    break;
 8010286:	e002      	b.n	801028e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010288:	2303      	movs	r3, #3
 801028a:	73fb      	strb	r3, [r7, #15]
    break;
 801028c:	bf00      	nop
  }
  return usb_status;
 801028e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010290:	4618      	mov	r0, r3
 8010292:	3714      	adds	r7, #20
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr

0801029c <malloc>:
 801029c:	4b02      	ldr	r3, [pc, #8]	; (80102a8 <malloc+0xc>)
 801029e:	4601      	mov	r1, r0
 80102a0:	6818      	ldr	r0, [r3, #0]
 80102a2:	f000 b82b 	b.w	80102fc <_malloc_r>
 80102a6:	bf00      	nop
 80102a8:	20000168 	.word	0x20000168

080102ac <free>:
 80102ac:	4b02      	ldr	r3, [pc, #8]	; (80102b8 <free+0xc>)
 80102ae:	4601      	mov	r1, r0
 80102b0:	6818      	ldr	r0, [r3, #0]
 80102b2:	f000 bc07 	b.w	8010ac4 <_free_r>
 80102b6:	bf00      	nop
 80102b8:	20000168 	.word	0x20000168

080102bc <sbrk_aligned>:
 80102bc:	b570      	push	{r4, r5, r6, lr}
 80102be:	4e0e      	ldr	r6, [pc, #56]	; (80102f8 <sbrk_aligned+0x3c>)
 80102c0:	460c      	mov	r4, r1
 80102c2:	6831      	ldr	r1, [r6, #0]
 80102c4:	4605      	mov	r5, r0
 80102c6:	b911      	cbnz	r1, 80102ce <sbrk_aligned+0x12>
 80102c8:	f000 fb9e 	bl	8010a08 <_sbrk_r>
 80102cc:	6030      	str	r0, [r6, #0]
 80102ce:	4621      	mov	r1, r4
 80102d0:	4628      	mov	r0, r5
 80102d2:	f000 fb99 	bl	8010a08 <_sbrk_r>
 80102d6:	1c43      	adds	r3, r0, #1
 80102d8:	d00a      	beq.n	80102f0 <sbrk_aligned+0x34>
 80102da:	1cc4      	adds	r4, r0, #3
 80102dc:	f024 0403 	bic.w	r4, r4, #3
 80102e0:	42a0      	cmp	r0, r4
 80102e2:	d007      	beq.n	80102f4 <sbrk_aligned+0x38>
 80102e4:	1a21      	subs	r1, r4, r0
 80102e6:	4628      	mov	r0, r5
 80102e8:	f000 fb8e 	bl	8010a08 <_sbrk_r>
 80102ec:	3001      	adds	r0, #1
 80102ee:	d101      	bne.n	80102f4 <sbrk_aligned+0x38>
 80102f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80102f4:	4620      	mov	r0, r4
 80102f6:	bd70      	pop	{r4, r5, r6, pc}
 80102f8:	2000e218 	.word	0x2000e218

080102fc <_malloc_r>:
 80102fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010300:	1ccd      	adds	r5, r1, #3
 8010302:	f025 0503 	bic.w	r5, r5, #3
 8010306:	3508      	adds	r5, #8
 8010308:	2d0c      	cmp	r5, #12
 801030a:	bf38      	it	cc
 801030c:	250c      	movcc	r5, #12
 801030e:	2d00      	cmp	r5, #0
 8010310:	4607      	mov	r7, r0
 8010312:	db01      	blt.n	8010318 <_malloc_r+0x1c>
 8010314:	42a9      	cmp	r1, r5
 8010316:	d905      	bls.n	8010324 <_malloc_r+0x28>
 8010318:	230c      	movs	r3, #12
 801031a:	603b      	str	r3, [r7, #0]
 801031c:	2600      	movs	r6, #0
 801031e:	4630      	mov	r0, r6
 8010320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010324:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80103f8 <_malloc_r+0xfc>
 8010328:	f000 f868 	bl	80103fc <__malloc_lock>
 801032c:	f8d8 3000 	ldr.w	r3, [r8]
 8010330:	461c      	mov	r4, r3
 8010332:	bb5c      	cbnz	r4, 801038c <_malloc_r+0x90>
 8010334:	4629      	mov	r1, r5
 8010336:	4638      	mov	r0, r7
 8010338:	f7ff ffc0 	bl	80102bc <sbrk_aligned>
 801033c:	1c43      	adds	r3, r0, #1
 801033e:	4604      	mov	r4, r0
 8010340:	d155      	bne.n	80103ee <_malloc_r+0xf2>
 8010342:	f8d8 4000 	ldr.w	r4, [r8]
 8010346:	4626      	mov	r6, r4
 8010348:	2e00      	cmp	r6, #0
 801034a:	d145      	bne.n	80103d8 <_malloc_r+0xdc>
 801034c:	2c00      	cmp	r4, #0
 801034e:	d048      	beq.n	80103e2 <_malloc_r+0xe6>
 8010350:	6823      	ldr	r3, [r4, #0]
 8010352:	4631      	mov	r1, r6
 8010354:	4638      	mov	r0, r7
 8010356:	eb04 0903 	add.w	r9, r4, r3
 801035a:	f000 fb55 	bl	8010a08 <_sbrk_r>
 801035e:	4581      	cmp	r9, r0
 8010360:	d13f      	bne.n	80103e2 <_malloc_r+0xe6>
 8010362:	6821      	ldr	r1, [r4, #0]
 8010364:	1a6d      	subs	r5, r5, r1
 8010366:	4629      	mov	r1, r5
 8010368:	4638      	mov	r0, r7
 801036a:	f7ff ffa7 	bl	80102bc <sbrk_aligned>
 801036e:	3001      	adds	r0, #1
 8010370:	d037      	beq.n	80103e2 <_malloc_r+0xe6>
 8010372:	6823      	ldr	r3, [r4, #0]
 8010374:	442b      	add	r3, r5
 8010376:	6023      	str	r3, [r4, #0]
 8010378:	f8d8 3000 	ldr.w	r3, [r8]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d038      	beq.n	80103f2 <_malloc_r+0xf6>
 8010380:	685a      	ldr	r2, [r3, #4]
 8010382:	42a2      	cmp	r2, r4
 8010384:	d12b      	bne.n	80103de <_malloc_r+0xe2>
 8010386:	2200      	movs	r2, #0
 8010388:	605a      	str	r2, [r3, #4]
 801038a:	e00f      	b.n	80103ac <_malloc_r+0xb0>
 801038c:	6822      	ldr	r2, [r4, #0]
 801038e:	1b52      	subs	r2, r2, r5
 8010390:	d41f      	bmi.n	80103d2 <_malloc_r+0xd6>
 8010392:	2a0b      	cmp	r2, #11
 8010394:	d917      	bls.n	80103c6 <_malloc_r+0xca>
 8010396:	1961      	adds	r1, r4, r5
 8010398:	42a3      	cmp	r3, r4
 801039a:	6025      	str	r5, [r4, #0]
 801039c:	bf18      	it	ne
 801039e:	6059      	strne	r1, [r3, #4]
 80103a0:	6863      	ldr	r3, [r4, #4]
 80103a2:	bf08      	it	eq
 80103a4:	f8c8 1000 	streq.w	r1, [r8]
 80103a8:	5162      	str	r2, [r4, r5]
 80103aa:	604b      	str	r3, [r1, #4]
 80103ac:	4638      	mov	r0, r7
 80103ae:	f104 060b 	add.w	r6, r4, #11
 80103b2:	f000 f829 	bl	8010408 <__malloc_unlock>
 80103b6:	f026 0607 	bic.w	r6, r6, #7
 80103ba:	1d23      	adds	r3, r4, #4
 80103bc:	1af2      	subs	r2, r6, r3
 80103be:	d0ae      	beq.n	801031e <_malloc_r+0x22>
 80103c0:	1b9b      	subs	r3, r3, r6
 80103c2:	50a3      	str	r3, [r4, r2]
 80103c4:	e7ab      	b.n	801031e <_malloc_r+0x22>
 80103c6:	42a3      	cmp	r3, r4
 80103c8:	6862      	ldr	r2, [r4, #4]
 80103ca:	d1dd      	bne.n	8010388 <_malloc_r+0x8c>
 80103cc:	f8c8 2000 	str.w	r2, [r8]
 80103d0:	e7ec      	b.n	80103ac <_malloc_r+0xb0>
 80103d2:	4623      	mov	r3, r4
 80103d4:	6864      	ldr	r4, [r4, #4]
 80103d6:	e7ac      	b.n	8010332 <_malloc_r+0x36>
 80103d8:	4634      	mov	r4, r6
 80103da:	6876      	ldr	r6, [r6, #4]
 80103dc:	e7b4      	b.n	8010348 <_malloc_r+0x4c>
 80103de:	4613      	mov	r3, r2
 80103e0:	e7cc      	b.n	801037c <_malloc_r+0x80>
 80103e2:	230c      	movs	r3, #12
 80103e4:	603b      	str	r3, [r7, #0]
 80103e6:	4638      	mov	r0, r7
 80103e8:	f000 f80e 	bl	8010408 <__malloc_unlock>
 80103ec:	e797      	b.n	801031e <_malloc_r+0x22>
 80103ee:	6025      	str	r5, [r4, #0]
 80103f0:	e7dc      	b.n	80103ac <_malloc_r+0xb0>
 80103f2:	605b      	str	r3, [r3, #4]
 80103f4:	deff      	udf	#255	; 0xff
 80103f6:	bf00      	nop
 80103f8:	2000e214 	.word	0x2000e214

080103fc <__malloc_lock>:
 80103fc:	4801      	ldr	r0, [pc, #4]	; (8010404 <__malloc_lock+0x8>)
 80103fe:	f000 bb50 	b.w	8010aa2 <__retarget_lock_acquire_recursive>
 8010402:	bf00      	nop
 8010404:	2000e35c 	.word	0x2000e35c

08010408 <__malloc_unlock>:
 8010408:	4801      	ldr	r0, [pc, #4]	; (8010410 <__malloc_unlock+0x8>)
 801040a:	f000 bb4b 	b.w	8010aa4 <__retarget_lock_release_recursive>
 801040e:	bf00      	nop
 8010410:	2000e35c 	.word	0x2000e35c

08010414 <std>:
 8010414:	2300      	movs	r3, #0
 8010416:	b510      	push	{r4, lr}
 8010418:	4604      	mov	r4, r0
 801041a:	e9c0 3300 	strd	r3, r3, [r0]
 801041e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010422:	6083      	str	r3, [r0, #8]
 8010424:	8181      	strh	r1, [r0, #12]
 8010426:	6643      	str	r3, [r0, #100]	; 0x64
 8010428:	81c2      	strh	r2, [r0, #14]
 801042a:	6183      	str	r3, [r0, #24]
 801042c:	4619      	mov	r1, r3
 801042e:	2208      	movs	r2, #8
 8010430:	305c      	adds	r0, #92	; 0x5c
 8010432:	f000 faad 	bl	8010990 <memset>
 8010436:	4b0d      	ldr	r3, [pc, #52]	; (801046c <std+0x58>)
 8010438:	6263      	str	r3, [r4, #36]	; 0x24
 801043a:	4b0d      	ldr	r3, [pc, #52]	; (8010470 <std+0x5c>)
 801043c:	62a3      	str	r3, [r4, #40]	; 0x28
 801043e:	4b0d      	ldr	r3, [pc, #52]	; (8010474 <std+0x60>)
 8010440:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010442:	4b0d      	ldr	r3, [pc, #52]	; (8010478 <std+0x64>)
 8010444:	6323      	str	r3, [r4, #48]	; 0x30
 8010446:	4b0d      	ldr	r3, [pc, #52]	; (801047c <std+0x68>)
 8010448:	6224      	str	r4, [r4, #32]
 801044a:	429c      	cmp	r4, r3
 801044c:	d006      	beq.n	801045c <std+0x48>
 801044e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010452:	4294      	cmp	r4, r2
 8010454:	d002      	beq.n	801045c <std+0x48>
 8010456:	33d0      	adds	r3, #208	; 0xd0
 8010458:	429c      	cmp	r4, r3
 801045a:	d105      	bne.n	8010468 <std+0x54>
 801045c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010464:	f000 bb1c 	b.w	8010aa0 <__retarget_lock_init_recursive>
 8010468:	bd10      	pop	{r4, pc}
 801046a:	bf00      	nop
 801046c:	080107e1 	.word	0x080107e1
 8010470:	08010803 	.word	0x08010803
 8010474:	0801083b 	.word	0x0801083b
 8010478:	0801085f 	.word	0x0801085f
 801047c:	2000e21c 	.word	0x2000e21c

08010480 <stdio_exit_handler>:
 8010480:	4a02      	ldr	r2, [pc, #8]	; (801048c <stdio_exit_handler+0xc>)
 8010482:	4903      	ldr	r1, [pc, #12]	; (8010490 <stdio_exit_handler+0x10>)
 8010484:	4803      	ldr	r0, [pc, #12]	; (8010494 <stdio_exit_handler+0x14>)
 8010486:	f000 b869 	b.w	801055c <_fwalk_sglue>
 801048a:	bf00      	nop
 801048c:	20000110 	.word	0x20000110
 8010490:	08011211 	.word	0x08011211
 8010494:	2000011c 	.word	0x2000011c

08010498 <cleanup_stdio>:
 8010498:	6841      	ldr	r1, [r0, #4]
 801049a:	4b0c      	ldr	r3, [pc, #48]	; (80104cc <cleanup_stdio+0x34>)
 801049c:	4299      	cmp	r1, r3
 801049e:	b510      	push	{r4, lr}
 80104a0:	4604      	mov	r4, r0
 80104a2:	d001      	beq.n	80104a8 <cleanup_stdio+0x10>
 80104a4:	f000 feb4 	bl	8011210 <_fflush_r>
 80104a8:	68a1      	ldr	r1, [r4, #8]
 80104aa:	4b09      	ldr	r3, [pc, #36]	; (80104d0 <cleanup_stdio+0x38>)
 80104ac:	4299      	cmp	r1, r3
 80104ae:	d002      	beq.n	80104b6 <cleanup_stdio+0x1e>
 80104b0:	4620      	mov	r0, r4
 80104b2:	f000 fead 	bl	8011210 <_fflush_r>
 80104b6:	68e1      	ldr	r1, [r4, #12]
 80104b8:	4b06      	ldr	r3, [pc, #24]	; (80104d4 <cleanup_stdio+0x3c>)
 80104ba:	4299      	cmp	r1, r3
 80104bc:	d004      	beq.n	80104c8 <cleanup_stdio+0x30>
 80104be:	4620      	mov	r0, r4
 80104c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104c4:	f000 bea4 	b.w	8011210 <_fflush_r>
 80104c8:	bd10      	pop	{r4, pc}
 80104ca:	bf00      	nop
 80104cc:	2000e21c 	.word	0x2000e21c
 80104d0:	2000e284 	.word	0x2000e284
 80104d4:	2000e2ec 	.word	0x2000e2ec

080104d8 <global_stdio_init.part.0>:
 80104d8:	b510      	push	{r4, lr}
 80104da:	4b0b      	ldr	r3, [pc, #44]	; (8010508 <global_stdio_init.part.0+0x30>)
 80104dc:	4c0b      	ldr	r4, [pc, #44]	; (801050c <global_stdio_init.part.0+0x34>)
 80104de:	4a0c      	ldr	r2, [pc, #48]	; (8010510 <global_stdio_init.part.0+0x38>)
 80104e0:	601a      	str	r2, [r3, #0]
 80104e2:	4620      	mov	r0, r4
 80104e4:	2200      	movs	r2, #0
 80104e6:	2104      	movs	r1, #4
 80104e8:	f7ff ff94 	bl	8010414 <std>
 80104ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80104f0:	2201      	movs	r2, #1
 80104f2:	2109      	movs	r1, #9
 80104f4:	f7ff ff8e 	bl	8010414 <std>
 80104f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80104fc:	2202      	movs	r2, #2
 80104fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010502:	2112      	movs	r1, #18
 8010504:	f7ff bf86 	b.w	8010414 <std>
 8010508:	2000e354 	.word	0x2000e354
 801050c:	2000e21c 	.word	0x2000e21c
 8010510:	08010481 	.word	0x08010481

08010514 <__sfp_lock_acquire>:
 8010514:	4801      	ldr	r0, [pc, #4]	; (801051c <__sfp_lock_acquire+0x8>)
 8010516:	f000 bac4 	b.w	8010aa2 <__retarget_lock_acquire_recursive>
 801051a:	bf00      	nop
 801051c:	2000e35d 	.word	0x2000e35d

08010520 <__sfp_lock_release>:
 8010520:	4801      	ldr	r0, [pc, #4]	; (8010528 <__sfp_lock_release+0x8>)
 8010522:	f000 babf 	b.w	8010aa4 <__retarget_lock_release_recursive>
 8010526:	bf00      	nop
 8010528:	2000e35d 	.word	0x2000e35d

0801052c <__sinit>:
 801052c:	b510      	push	{r4, lr}
 801052e:	4604      	mov	r4, r0
 8010530:	f7ff fff0 	bl	8010514 <__sfp_lock_acquire>
 8010534:	6a23      	ldr	r3, [r4, #32]
 8010536:	b11b      	cbz	r3, 8010540 <__sinit+0x14>
 8010538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801053c:	f7ff bff0 	b.w	8010520 <__sfp_lock_release>
 8010540:	4b04      	ldr	r3, [pc, #16]	; (8010554 <__sinit+0x28>)
 8010542:	6223      	str	r3, [r4, #32]
 8010544:	4b04      	ldr	r3, [pc, #16]	; (8010558 <__sinit+0x2c>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d1f5      	bne.n	8010538 <__sinit+0xc>
 801054c:	f7ff ffc4 	bl	80104d8 <global_stdio_init.part.0>
 8010550:	e7f2      	b.n	8010538 <__sinit+0xc>
 8010552:	bf00      	nop
 8010554:	08010499 	.word	0x08010499
 8010558:	2000e354 	.word	0x2000e354

0801055c <_fwalk_sglue>:
 801055c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010560:	4607      	mov	r7, r0
 8010562:	4688      	mov	r8, r1
 8010564:	4614      	mov	r4, r2
 8010566:	2600      	movs	r6, #0
 8010568:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801056c:	f1b9 0901 	subs.w	r9, r9, #1
 8010570:	d505      	bpl.n	801057e <_fwalk_sglue+0x22>
 8010572:	6824      	ldr	r4, [r4, #0]
 8010574:	2c00      	cmp	r4, #0
 8010576:	d1f7      	bne.n	8010568 <_fwalk_sglue+0xc>
 8010578:	4630      	mov	r0, r6
 801057a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801057e:	89ab      	ldrh	r3, [r5, #12]
 8010580:	2b01      	cmp	r3, #1
 8010582:	d907      	bls.n	8010594 <_fwalk_sglue+0x38>
 8010584:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010588:	3301      	adds	r3, #1
 801058a:	d003      	beq.n	8010594 <_fwalk_sglue+0x38>
 801058c:	4629      	mov	r1, r5
 801058e:	4638      	mov	r0, r7
 8010590:	47c0      	blx	r8
 8010592:	4306      	orrs	r6, r0
 8010594:	3568      	adds	r5, #104	; 0x68
 8010596:	e7e9      	b.n	801056c <_fwalk_sglue+0x10>

08010598 <iprintf>:
 8010598:	b40f      	push	{r0, r1, r2, r3}
 801059a:	b507      	push	{r0, r1, r2, lr}
 801059c:	4906      	ldr	r1, [pc, #24]	; (80105b8 <iprintf+0x20>)
 801059e:	ab04      	add	r3, sp, #16
 80105a0:	6808      	ldr	r0, [r1, #0]
 80105a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80105a6:	6881      	ldr	r1, [r0, #8]
 80105a8:	9301      	str	r3, [sp, #4]
 80105aa:	f000 fb01 	bl	8010bb0 <_vfiprintf_r>
 80105ae:	b003      	add	sp, #12
 80105b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80105b4:	b004      	add	sp, #16
 80105b6:	4770      	bx	lr
 80105b8:	20000168 	.word	0x20000168

080105bc <_puts_r>:
 80105bc:	6a03      	ldr	r3, [r0, #32]
 80105be:	b570      	push	{r4, r5, r6, lr}
 80105c0:	6884      	ldr	r4, [r0, #8]
 80105c2:	4605      	mov	r5, r0
 80105c4:	460e      	mov	r6, r1
 80105c6:	b90b      	cbnz	r3, 80105cc <_puts_r+0x10>
 80105c8:	f7ff ffb0 	bl	801052c <__sinit>
 80105cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105ce:	07db      	lsls	r3, r3, #31
 80105d0:	d405      	bmi.n	80105de <_puts_r+0x22>
 80105d2:	89a3      	ldrh	r3, [r4, #12]
 80105d4:	0598      	lsls	r0, r3, #22
 80105d6:	d402      	bmi.n	80105de <_puts_r+0x22>
 80105d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105da:	f000 fa62 	bl	8010aa2 <__retarget_lock_acquire_recursive>
 80105de:	89a3      	ldrh	r3, [r4, #12]
 80105e0:	0719      	lsls	r1, r3, #28
 80105e2:	d513      	bpl.n	801060c <_puts_r+0x50>
 80105e4:	6923      	ldr	r3, [r4, #16]
 80105e6:	b18b      	cbz	r3, 801060c <_puts_r+0x50>
 80105e8:	3e01      	subs	r6, #1
 80105ea:	68a3      	ldr	r3, [r4, #8]
 80105ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80105f0:	3b01      	subs	r3, #1
 80105f2:	60a3      	str	r3, [r4, #8]
 80105f4:	b9e9      	cbnz	r1, 8010632 <_puts_r+0x76>
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	da2e      	bge.n	8010658 <_puts_r+0x9c>
 80105fa:	4622      	mov	r2, r4
 80105fc:	210a      	movs	r1, #10
 80105fe:	4628      	mov	r0, r5
 8010600:	f000 f931 	bl	8010866 <__swbuf_r>
 8010604:	3001      	adds	r0, #1
 8010606:	d007      	beq.n	8010618 <_puts_r+0x5c>
 8010608:	250a      	movs	r5, #10
 801060a:	e007      	b.n	801061c <_puts_r+0x60>
 801060c:	4621      	mov	r1, r4
 801060e:	4628      	mov	r0, r5
 8010610:	f000 f966 	bl	80108e0 <__swsetup_r>
 8010614:	2800      	cmp	r0, #0
 8010616:	d0e7      	beq.n	80105e8 <_puts_r+0x2c>
 8010618:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801061c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801061e:	07da      	lsls	r2, r3, #31
 8010620:	d405      	bmi.n	801062e <_puts_r+0x72>
 8010622:	89a3      	ldrh	r3, [r4, #12]
 8010624:	059b      	lsls	r3, r3, #22
 8010626:	d402      	bmi.n	801062e <_puts_r+0x72>
 8010628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801062a:	f000 fa3b 	bl	8010aa4 <__retarget_lock_release_recursive>
 801062e:	4628      	mov	r0, r5
 8010630:	bd70      	pop	{r4, r5, r6, pc}
 8010632:	2b00      	cmp	r3, #0
 8010634:	da04      	bge.n	8010640 <_puts_r+0x84>
 8010636:	69a2      	ldr	r2, [r4, #24]
 8010638:	429a      	cmp	r2, r3
 801063a:	dc06      	bgt.n	801064a <_puts_r+0x8e>
 801063c:	290a      	cmp	r1, #10
 801063e:	d004      	beq.n	801064a <_puts_r+0x8e>
 8010640:	6823      	ldr	r3, [r4, #0]
 8010642:	1c5a      	adds	r2, r3, #1
 8010644:	6022      	str	r2, [r4, #0]
 8010646:	7019      	strb	r1, [r3, #0]
 8010648:	e7cf      	b.n	80105ea <_puts_r+0x2e>
 801064a:	4622      	mov	r2, r4
 801064c:	4628      	mov	r0, r5
 801064e:	f000 f90a 	bl	8010866 <__swbuf_r>
 8010652:	3001      	adds	r0, #1
 8010654:	d1c9      	bne.n	80105ea <_puts_r+0x2e>
 8010656:	e7df      	b.n	8010618 <_puts_r+0x5c>
 8010658:	6823      	ldr	r3, [r4, #0]
 801065a:	250a      	movs	r5, #10
 801065c:	1c5a      	adds	r2, r3, #1
 801065e:	6022      	str	r2, [r4, #0]
 8010660:	701d      	strb	r5, [r3, #0]
 8010662:	e7db      	b.n	801061c <_puts_r+0x60>

08010664 <puts>:
 8010664:	4b02      	ldr	r3, [pc, #8]	; (8010670 <puts+0xc>)
 8010666:	4601      	mov	r1, r0
 8010668:	6818      	ldr	r0, [r3, #0]
 801066a:	f7ff bfa7 	b.w	80105bc <_puts_r>
 801066e:	bf00      	nop
 8010670:	20000168 	.word	0x20000168

08010674 <setbuf>:
 8010674:	fab1 f281 	clz	r2, r1
 8010678:	0952      	lsrs	r2, r2, #5
 801067a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801067e:	0052      	lsls	r2, r2, #1
 8010680:	f000 b800 	b.w	8010684 <setvbuf>

08010684 <setvbuf>:
 8010684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010688:	461d      	mov	r5, r3
 801068a:	4b54      	ldr	r3, [pc, #336]	; (80107dc <setvbuf+0x158>)
 801068c:	681f      	ldr	r7, [r3, #0]
 801068e:	4604      	mov	r4, r0
 8010690:	460e      	mov	r6, r1
 8010692:	4690      	mov	r8, r2
 8010694:	b127      	cbz	r7, 80106a0 <setvbuf+0x1c>
 8010696:	6a3b      	ldr	r3, [r7, #32]
 8010698:	b913      	cbnz	r3, 80106a0 <setvbuf+0x1c>
 801069a:	4638      	mov	r0, r7
 801069c:	f7ff ff46 	bl	801052c <__sinit>
 80106a0:	f1b8 0f02 	cmp.w	r8, #2
 80106a4:	d006      	beq.n	80106b4 <setvbuf+0x30>
 80106a6:	f1b8 0f01 	cmp.w	r8, #1
 80106aa:	f200 8094 	bhi.w	80107d6 <setvbuf+0x152>
 80106ae:	2d00      	cmp	r5, #0
 80106b0:	f2c0 8091 	blt.w	80107d6 <setvbuf+0x152>
 80106b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106b6:	07da      	lsls	r2, r3, #31
 80106b8:	d405      	bmi.n	80106c6 <setvbuf+0x42>
 80106ba:	89a3      	ldrh	r3, [r4, #12]
 80106bc:	059b      	lsls	r3, r3, #22
 80106be:	d402      	bmi.n	80106c6 <setvbuf+0x42>
 80106c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106c2:	f000 f9ee 	bl	8010aa2 <__retarget_lock_acquire_recursive>
 80106c6:	4621      	mov	r1, r4
 80106c8:	4638      	mov	r0, r7
 80106ca:	f000 fda1 	bl	8011210 <_fflush_r>
 80106ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106d0:	b141      	cbz	r1, 80106e4 <setvbuf+0x60>
 80106d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106d6:	4299      	cmp	r1, r3
 80106d8:	d002      	beq.n	80106e0 <setvbuf+0x5c>
 80106da:	4638      	mov	r0, r7
 80106dc:	f000 f9f2 	bl	8010ac4 <_free_r>
 80106e0:	2300      	movs	r3, #0
 80106e2:	6363      	str	r3, [r4, #52]	; 0x34
 80106e4:	2300      	movs	r3, #0
 80106e6:	61a3      	str	r3, [r4, #24]
 80106e8:	6063      	str	r3, [r4, #4]
 80106ea:	89a3      	ldrh	r3, [r4, #12]
 80106ec:	0618      	lsls	r0, r3, #24
 80106ee:	d503      	bpl.n	80106f8 <setvbuf+0x74>
 80106f0:	6921      	ldr	r1, [r4, #16]
 80106f2:	4638      	mov	r0, r7
 80106f4:	f000 f9e6 	bl	8010ac4 <_free_r>
 80106f8:	89a3      	ldrh	r3, [r4, #12]
 80106fa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80106fe:	f023 0303 	bic.w	r3, r3, #3
 8010702:	f1b8 0f02 	cmp.w	r8, #2
 8010706:	81a3      	strh	r3, [r4, #12]
 8010708:	d05f      	beq.n	80107ca <setvbuf+0x146>
 801070a:	ab01      	add	r3, sp, #4
 801070c:	466a      	mov	r2, sp
 801070e:	4621      	mov	r1, r4
 8010710:	4638      	mov	r0, r7
 8010712:	f000 fda5 	bl	8011260 <__swhatbuf_r>
 8010716:	89a3      	ldrh	r3, [r4, #12]
 8010718:	4318      	orrs	r0, r3
 801071a:	81a0      	strh	r0, [r4, #12]
 801071c:	bb2d      	cbnz	r5, 801076a <setvbuf+0xe6>
 801071e:	9d00      	ldr	r5, [sp, #0]
 8010720:	4628      	mov	r0, r5
 8010722:	f7ff fdbb 	bl	801029c <malloc>
 8010726:	4606      	mov	r6, r0
 8010728:	2800      	cmp	r0, #0
 801072a:	d150      	bne.n	80107ce <setvbuf+0x14a>
 801072c:	f8dd 9000 	ldr.w	r9, [sp]
 8010730:	45a9      	cmp	r9, r5
 8010732:	d13e      	bne.n	80107b2 <setvbuf+0x12e>
 8010734:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010738:	2200      	movs	r2, #0
 801073a:	60a2      	str	r2, [r4, #8]
 801073c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8010740:	6022      	str	r2, [r4, #0]
 8010742:	6122      	str	r2, [r4, #16]
 8010744:	2201      	movs	r2, #1
 8010746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801074a:	6162      	str	r2, [r4, #20]
 801074c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801074e:	f043 0302 	orr.w	r3, r3, #2
 8010752:	07d1      	lsls	r1, r2, #31
 8010754:	81a3      	strh	r3, [r4, #12]
 8010756:	d404      	bmi.n	8010762 <setvbuf+0xde>
 8010758:	059b      	lsls	r3, r3, #22
 801075a:	d402      	bmi.n	8010762 <setvbuf+0xde>
 801075c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801075e:	f000 f9a1 	bl	8010aa4 <__retarget_lock_release_recursive>
 8010762:	4628      	mov	r0, r5
 8010764:	b003      	add	sp, #12
 8010766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801076a:	2e00      	cmp	r6, #0
 801076c:	d0d8      	beq.n	8010720 <setvbuf+0x9c>
 801076e:	6a3b      	ldr	r3, [r7, #32]
 8010770:	b913      	cbnz	r3, 8010778 <setvbuf+0xf4>
 8010772:	4638      	mov	r0, r7
 8010774:	f7ff feda 	bl	801052c <__sinit>
 8010778:	f1b8 0f01 	cmp.w	r8, #1
 801077c:	bf08      	it	eq
 801077e:	89a3      	ldrheq	r3, [r4, #12]
 8010780:	6026      	str	r6, [r4, #0]
 8010782:	bf04      	itt	eq
 8010784:	f043 0301 	orreq.w	r3, r3, #1
 8010788:	81a3      	strheq	r3, [r4, #12]
 801078a:	89a3      	ldrh	r3, [r4, #12]
 801078c:	f013 0208 	ands.w	r2, r3, #8
 8010790:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8010794:	d01d      	beq.n	80107d2 <setvbuf+0x14e>
 8010796:	07da      	lsls	r2, r3, #31
 8010798:	bf41      	itttt	mi
 801079a:	2200      	movmi	r2, #0
 801079c:	426d      	negmi	r5, r5
 801079e:	60a2      	strmi	r2, [r4, #8]
 80107a0:	61a5      	strmi	r5, [r4, #24]
 80107a2:	bf58      	it	pl
 80107a4:	60a5      	strpl	r5, [r4, #8]
 80107a6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80107a8:	f015 0501 	ands.w	r5, r5, #1
 80107ac:	d0d4      	beq.n	8010758 <setvbuf+0xd4>
 80107ae:	2500      	movs	r5, #0
 80107b0:	e7d7      	b.n	8010762 <setvbuf+0xde>
 80107b2:	4648      	mov	r0, r9
 80107b4:	f7ff fd72 	bl	801029c <malloc>
 80107b8:	4606      	mov	r6, r0
 80107ba:	2800      	cmp	r0, #0
 80107bc:	d0ba      	beq.n	8010734 <setvbuf+0xb0>
 80107be:	89a3      	ldrh	r3, [r4, #12]
 80107c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107c4:	81a3      	strh	r3, [r4, #12]
 80107c6:	464d      	mov	r5, r9
 80107c8:	e7d1      	b.n	801076e <setvbuf+0xea>
 80107ca:	2500      	movs	r5, #0
 80107cc:	e7b4      	b.n	8010738 <setvbuf+0xb4>
 80107ce:	46a9      	mov	r9, r5
 80107d0:	e7f5      	b.n	80107be <setvbuf+0x13a>
 80107d2:	60a2      	str	r2, [r4, #8]
 80107d4:	e7e7      	b.n	80107a6 <setvbuf+0x122>
 80107d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80107da:	e7c2      	b.n	8010762 <setvbuf+0xde>
 80107dc:	20000168 	.word	0x20000168

080107e0 <__sread>:
 80107e0:	b510      	push	{r4, lr}
 80107e2:	460c      	mov	r4, r1
 80107e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107e8:	f000 f8fc 	bl	80109e4 <_read_r>
 80107ec:	2800      	cmp	r0, #0
 80107ee:	bfab      	itete	ge
 80107f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80107f2:	89a3      	ldrhlt	r3, [r4, #12]
 80107f4:	181b      	addge	r3, r3, r0
 80107f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80107fa:	bfac      	ite	ge
 80107fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80107fe:	81a3      	strhlt	r3, [r4, #12]
 8010800:	bd10      	pop	{r4, pc}

08010802 <__swrite>:
 8010802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010806:	461f      	mov	r7, r3
 8010808:	898b      	ldrh	r3, [r1, #12]
 801080a:	05db      	lsls	r3, r3, #23
 801080c:	4605      	mov	r5, r0
 801080e:	460c      	mov	r4, r1
 8010810:	4616      	mov	r6, r2
 8010812:	d505      	bpl.n	8010820 <__swrite+0x1e>
 8010814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010818:	2302      	movs	r3, #2
 801081a:	2200      	movs	r2, #0
 801081c:	f000 f8d0 	bl	80109c0 <_lseek_r>
 8010820:	89a3      	ldrh	r3, [r4, #12]
 8010822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801082a:	81a3      	strh	r3, [r4, #12]
 801082c:	4632      	mov	r2, r6
 801082e:	463b      	mov	r3, r7
 8010830:	4628      	mov	r0, r5
 8010832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010836:	f000 b8f7 	b.w	8010a28 <_write_r>

0801083a <__sseek>:
 801083a:	b510      	push	{r4, lr}
 801083c:	460c      	mov	r4, r1
 801083e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010842:	f000 f8bd 	bl	80109c0 <_lseek_r>
 8010846:	1c43      	adds	r3, r0, #1
 8010848:	89a3      	ldrh	r3, [r4, #12]
 801084a:	bf15      	itete	ne
 801084c:	6560      	strne	r0, [r4, #84]	; 0x54
 801084e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010856:	81a3      	strheq	r3, [r4, #12]
 8010858:	bf18      	it	ne
 801085a:	81a3      	strhne	r3, [r4, #12]
 801085c:	bd10      	pop	{r4, pc}

0801085e <__sclose>:
 801085e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010862:	f000 b89d 	b.w	80109a0 <_close_r>

08010866 <__swbuf_r>:
 8010866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010868:	460e      	mov	r6, r1
 801086a:	4614      	mov	r4, r2
 801086c:	4605      	mov	r5, r0
 801086e:	b118      	cbz	r0, 8010878 <__swbuf_r+0x12>
 8010870:	6a03      	ldr	r3, [r0, #32]
 8010872:	b90b      	cbnz	r3, 8010878 <__swbuf_r+0x12>
 8010874:	f7ff fe5a 	bl	801052c <__sinit>
 8010878:	69a3      	ldr	r3, [r4, #24]
 801087a:	60a3      	str	r3, [r4, #8]
 801087c:	89a3      	ldrh	r3, [r4, #12]
 801087e:	071a      	lsls	r2, r3, #28
 8010880:	d525      	bpl.n	80108ce <__swbuf_r+0x68>
 8010882:	6923      	ldr	r3, [r4, #16]
 8010884:	b31b      	cbz	r3, 80108ce <__swbuf_r+0x68>
 8010886:	6823      	ldr	r3, [r4, #0]
 8010888:	6922      	ldr	r2, [r4, #16]
 801088a:	1a98      	subs	r0, r3, r2
 801088c:	6963      	ldr	r3, [r4, #20]
 801088e:	b2f6      	uxtb	r6, r6
 8010890:	4283      	cmp	r3, r0
 8010892:	4637      	mov	r7, r6
 8010894:	dc04      	bgt.n	80108a0 <__swbuf_r+0x3a>
 8010896:	4621      	mov	r1, r4
 8010898:	4628      	mov	r0, r5
 801089a:	f000 fcb9 	bl	8011210 <_fflush_r>
 801089e:	b9e0      	cbnz	r0, 80108da <__swbuf_r+0x74>
 80108a0:	68a3      	ldr	r3, [r4, #8]
 80108a2:	3b01      	subs	r3, #1
 80108a4:	60a3      	str	r3, [r4, #8]
 80108a6:	6823      	ldr	r3, [r4, #0]
 80108a8:	1c5a      	adds	r2, r3, #1
 80108aa:	6022      	str	r2, [r4, #0]
 80108ac:	701e      	strb	r6, [r3, #0]
 80108ae:	6962      	ldr	r2, [r4, #20]
 80108b0:	1c43      	adds	r3, r0, #1
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d004      	beq.n	80108c0 <__swbuf_r+0x5a>
 80108b6:	89a3      	ldrh	r3, [r4, #12]
 80108b8:	07db      	lsls	r3, r3, #31
 80108ba:	d506      	bpl.n	80108ca <__swbuf_r+0x64>
 80108bc:	2e0a      	cmp	r6, #10
 80108be:	d104      	bne.n	80108ca <__swbuf_r+0x64>
 80108c0:	4621      	mov	r1, r4
 80108c2:	4628      	mov	r0, r5
 80108c4:	f000 fca4 	bl	8011210 <_fflush_r>
 80108c8:	b938      	cbnz	r0, 80108da <__swbuf_r+0x74>
 80108ca:	4638      	mov	r0, r7
 80108cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108ce:	4621      	mov	r1, r4
 80108d0:	4628      	mov	r0, r5
 80108d2:	f000 f805 	bl	80108e0 <__swsetup_r>
 80108d6:	2800      	cmp	r0, #0
 80108d8:	d0d5      	beq.n	8010886 <__swbuf_r+0x20>
 80108da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80108de:	e7f4      	b.n	80108ca <__swbuf_r+0x64>

080108e0 <__swsetup_r>:
 80108e0:	b538      	push	{r3, r4, r5, lr}
 80108e2:	4b2a      	ldr	r3, [pc, #168]	; (801098c <__swsetup_r+0xac>)
 80108e4:	4605      	mov	r5, r0
 80108e6:	6818      	ldr	r0, [r3, #0]
 80108e8:	460c      	mov	r4, r1
 80108ea:	b118      	cbz	r0, 80108f4 <__swsetup_r+0x14>
 80108ec:	6a03      	ldr	r3, [r0, #32]
 80108ee:	b90b      	cbnz	r3, 80108f4 <__swsetup_r+0x14>
 80108f0:	f7ff fe1c 	bl	801052c <__sinit>
 80108f4:	89a3      	ldrh	r3, [r4, #12]
 80108f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108fa:	0718      	lsls	r0, r3, #28
 80108fc:	d422      	bmi.n	8010944 <__swsetup_r+0x64>
 80108fe:	06d9      	lsls	r1, r3, #27
 8010900:	d407      	bmi.n	8010912 <__swsetup_r+0x32>
 8010902:	2309      	movs	r3, #9
 8010904:	602b      	str	r3, [r5, #0]
 8010906:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801090a:	81a3      	strh	r3, [r4, #12]
 801090c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010910:	e034      	b.n	801097c <__swsetup_r+0x9c>
 8010912:	0758      	lsls	r0, r3, #29
 8010914:	d512      	bpl.n	801093c <__swsetup_r+0x5c>
 8010916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010918:	b141      	cbz	r1, 801092c <__swsetup_r+0x4c>
 801091a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801091e:	4299      	cmp	r1, r3
 8010920:	d002      	beq.n	8010928 <__swsetup_r+0x48>
 8010922:	4628      	mov	r0, r5
 8010924:	f000 f8ce 	bl	8010ac4 <_free_r>
 8010928:	2300      	movs	r3, #0
 801092a:	6363      	str	r3, [r4, #52]	; 0x34
 801092c:	89a3      	ldrh	r3, [r4, #12]
 801092e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010932:	81a3      	strh	r3, [r4, #12]
 8010934:	2300      	movs	r3, #0
 8010936:	6063      	str	r3, [r4, #4]
 8010938:	6923      	ldr	r3, [r4, #16]
 801093a:	6023      	str	r3, [r4, #0]
 801093c:	89a3      	ldrh	r3, [r4, #12]
 801093e:	f043 0308 	orr.w	r3, r3, #8
 8010942:	81a3      	strh	r3, [r4, #12]
 8010944:	6923      	ldr	r3, [r4, #16]
 8010946:	b94b      	cbnz	r3, 801095c <__swsetup_r+0x7c>
 8010948:	89a3      	ldrh	r3, [r4, #12]
 801094a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801094e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010952:	d003      	beq.n	801095c <__swsetup_r+0x7c>
 8010954:	4621      	mov	r1, r4
 8010956:	4628      	mov	r0, r5
 8010958:	f000 fca8 	bl	80112ac <__smakebuf_r>
 801095c:	89a0      	ldrh	r0, [r4, #12]
 801095e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010962:	f010 0301 	ands.w	r3, r0, #1
 8010966:	d00a      	beq.n	801097e <__swsetup_r+0x9e>
 8010968:	2300      	movs	r3, #0
 801096a:	60a3      	str	r3, [r4, #8]
 801096c:	6963      	ldr	r3, [r4, #20]
 801096e:	425b      	negs	r3, r3
 8010970:	61a3      	str	r3, [r4, #24]
 8010972:	6923      	ldr	r3, [r4, #16]
 8010974:	b943      	cbnz	r3, 8010988 <__swsetup_r+0xa8>
 8010976:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801097a:	d1c4      	bne.n	8010906 <__swsetup_r+0x26>
 801097c:	bd38      	pop	{r3, r4, r5, pc}
 801097e:	0781      	lsls	r1, r0, #30
 8010980:	bf58      	it	pl
 8010982:	6963      	ldrpl	r3, [r4, #20]
 8010984:	60a3      	str	r3, [r4, #8]
 8010986:	e7f4      	b.n	8010972 <__swsetup_r+0x92>
 8010988:	2000      	movs	r0, #0
 801098a:	e7f7      	b.n	801097c <__swsetup_r+0x9c>
 801098c:	20000168 	.word	0x20000168

08010990 <memset>:
 8010990:	4402      	add	r2, r0
 8010992:	4603      	mov	r3, r0
 8010994:	4293      	cmp	r3, r2
 8010996:	d100      	bne.n	801099a <memset+0xa>
 8010998:	4770      	bx	lr
 801099a:	f803 1b01 	strb.w	r1, [r3], #1
 801099e:	e7f9      	b.n	8010994 <memset+0x4>

080109a0 <_close_r>:
 80109a0:	b538      	push	{r3, r4, r5, lr}
 80109a2:	4d06      	ldr	r5, [pc, #24]	; (80109bc <_close_r+0x1c>)
 80109a4:	2300      	movs	r3, #0
 80109a6:	4604      	mov	r4, r0
 80109a8:	4608      	mov	r0, r1
 80109aa:	602b      	str	r3, [r5, #0]
 80109ac:	f7f2 f997 	bl	8002cde <_close>
 80109b0:	1c43      	adds	r3, r0, #1
 80109b2:	d102      	bne.n	80109ba <_close_r+0x1a>
 80109b4:	682b      	ldr	r3, [r5, #0]
 80109b6:	b103      	cbz	r3, 80109ba <_close_r+0x1a>
 80109b8:	6023      	str	r3, [r4, #0]
 80109ba:	bd38      	pop	{r3, r4, r5, pc}
 80109bc:	2000e358 	.word	0x2000e358

080109c0 <_lseek_r>:
 80109c0:	b538      	push	{r3, r4, r5, lr}
 80109c2:	4d07      	ldr	r5, [pc, #28]	; (80109e0 <_lseek_r+0x20>)
 80109c4:	4604      	mov	r4, r0
 80109c6:	4608      	mov	r0, r1
 80109c8:	4611      	mov	r1, r2
 80109ca:	2200      	movs	r2, #0
 80109cc:	602a      	str	r2, [r5, #0]
 80109ce:	461a      	mov	r2, r3
 80109d0:	f7f2 f9ac 	bl	8002d2c <_lseek>
 80109d4:	1c43      	adds	r3, r0, #1
 80109d6:	d102      	bne.n	80109de <_lseek_r+0x1e>
 80109d8:	682b      	ldr	r3, [r5, #0]
 80109da:	b103      	cbz	r3, 80109de <_lseek_r+0x1e>
 80109dc:	6023      	str	r3, [r4, #0]
 80109de:	bd38      	pop	{r3, r4, r5, pc}
 80109e0:	2000e358 	.word	0x2000e358

080109e4 <_read_r>:
 80109e4:	b538      	push	{r3, r4, r5, lr}
 80109e6:	4d07      	ldr	r5, [pc, #28]	; (8010a04 <_read_r+0x20>)
 80109e8:	4604      	mov	r4, r0
 80109ea:	4608      	mov	r0, r1
 80109ec:	4611      	mov	r1, r2
 80109ee:	2200      	movs	r2, #0
 80109f0:	602a      	str	r2, [r5, #0]
 80109f2:	461a      	mov	r2, r3
 80109f4:	f7f2 f93a 	bl	8002c6c <_read>
 80109f8:	1c43      	adds	r3, r0, #1
 80109fa:	d102      	bne.n	8010a02 <_read_r+0x1e>
 80109fc:	682b      	ldr	r3, [r5, #0]
 80109fe:	b103      	cbz	r3, 8010a02 <_read_r+0x1e>
 8010a00:	6023      	str	r3, [r4, #0]
 8010a02:	bd38      	pop	{r3, r4, r5, pc}
 8010a04:	2000e358 	.word	0x2000e358

08010a08 <_sbrk_r>:
 8010a08:	b538      	push	{r3, r4, r5, lr}
 8010a0a:	4d06      	ldr	r5, [pc, #24]	; (8010a24 <_sbrk_r+0x1c>)
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	4604      	mov	r4, r0
 8010a10:	4608      	mov	r0, r1
 8010a12:	602b      	str	r3, [r5, #0]
 8010a14:	f7f2 f998 	bl	8002d48 <_sbrk>
 8010a18:	1c43      	adds	r3, r0, #1
 8010a1a:	d102      	bne.n	8010a22 <_sbrk_r+0x1a>
 8010a1c:	682b      	ldr	r3, [r5, #0]
 8010a1e:	b103      	cbz	r3, 8010a22 <_sbrk_r+0x1a>
 8010a20:	6023      	str	r3, [r4, #0]
 8010a22:	bd38      	pop	{r3, r4, r5, pc}
 8010a24:	2000e358 	.word	0x2000e358

08010a28 <_write_r>:
 8010a28:	b538      	push	{r3, r4, r5, lr}
 8010a2a:	4d07      	ldr	r5, [pc, #28]	; (8010a48 <_write_r+0x20>)
 8010a2c:	4604      	mov	r4, r0
 8010a2e:	4608      	mov	r0, r1
 8010a30:	4611      	mov	r1, r2
 8010a32:	2200      	movs	r2, #0
 8010a34:	602a      	str	r2, [r5, #0]
 8010a36:	461a      	mov	r2, r3
 8010a38:	f7f2 f935 	bl	8002ca6 <_write>
 8010a3c:	1c43      	adds	r3, r0, #1
 8010a3e:	d102      	bne.n	8010a46 <_write_r+0x1e>
 8010a40:	682b      	ldr	r3, [r5, #0]
 8010a42:	b103      	cbz	r3, 8010a46 <_write_r+0x1e>
 8010a44:	6023      	str	r3, [r4, #0]
 8010a46:	bd38      	pop	{r3, r4, r5, pc}
 8010a48:	2000e358 	.word	0x2000e358

08010a4c <__errno>:
 8010a4c:	4b01      	ldr	r3, [pc, #4]	; (8010a54 <__errno+0x8>)
 8010a4e:	6818      	ldr	r0, [r3, #0]
 8010a50:	4770      	bx	lr
 8010a52:	bf00      	nop
 8010a54:	20000168 	.word	0x20000168

08010a58 <__libc_init_array>:
 8010a58:	b570      	push	{r4, r5, r6, lr}
 8010a5a:	4d0d      	ldr	r5, [pc, #52]	; (8010a90 <__libc_init_array+0x38>)
 8010a5c:	4c0d      	ldr	r4, [pc, #52]	; (8010a94 <__libc_init_array+0x3c>)
 8010a5e:	1b64      	subs	r4, r4, r5
 8010a60:	10a4      	asrs	r4, r4, #2
 8010a62:	2600      	movs	r6, #0
 8010a64:	42a6      	cmp	r6, r4
 8010a66:	d109      	bne.n	8010a7c <__libc_init_array+0x24>
 8010a68:	4d0b      	ldr	r5, [pc, #44]	; (8010a98 <__libc_init_array+0x40>)
 8010a6a:	4c0c      	ldr	r4, [pc, #48]	; (8010a9c <__libc_init_array+0x44>)
 8010a6c:	f000 fc7c 	bl	8011368 <_init>
 8010a70:	1b64      	subs	r4, r4, r5
 8010a72:	10a4      	asrs	r4, r4, #2
 8010a74:	2600      	movs	r6, #0
 8010a76:	42a6      	cmp	r6, r4
 8010a78:	d105      	bne.n	8010a86 <__libc_init_array+0x2e>
 8010a7a:	bd70      	pop	{r4, r5, r6, pc}
 8010a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a80:	4798      	blx	r3
 8010a82:	3601      	adds	r6, #1
 8010a84:	e7ee      	b.n	8010a64 <__libc_init_array+0xc>
 8010a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a8a:	4798      	blx	r3
 8010a8c:	3601      	adds	r6, #1
 8010a8e:	e7f2      	b.n	8010a76 <__libc_init_array+0x1e>
 8010a90:	080116c4 	.word	0x080116c4
 8010a94:	080116c4 	.word	0x080116c4
 8010a98:	080116c4 	.word	0x080116c4
 8010a9c:	080116c8 	.word	0x080116c8

08010aa0 <__retarget_lock_init_recursive>:
 8010aa0:	4770      	bx	lr

08010aa2 <__retarget_lock_acquire_recursive>:
 8010aa2:	4770      	bx	lr

08010aa4 <__retarget_lock_release_recursive>:
 8010aa4:	4770      	bx	lr

08010aa6 <memcpy>:
 8010aa6:	440a      	add	r2, r1
 8010aa8:	4291      	cmp	r1, r2
 8010aaa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010aae:	d100      	bne.n	8010ab2 <memcpy+0xc>
 8010ab0:	4770      	bx	lr
 8010ab2:	b510      	push	{r4, lr}
 8010ab4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ab8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010abc:	4291      	cmp	r1, r2
 8010abe:	d1f9      	bne.n	8010ab4 <memcpy+0xe>
 8010ac0:	bd10      	pop	{r4, pc}
	...

08010ac4 <_free_r>:
 8010ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ac6:	2900      	cmp	r1, #0
 8010ac8:	d044      	beq.n	8010b54 <_free_r+0x90>
 8010aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ace:	9001      	str	r0, [sp, #4]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	f1a1 0404 	sub.w	r4, r1, #4
 8010ad6:	bfb8      	it	lt
 8010ad8:	18e4      	addlt	r4, r4, r3
 8010ada:	f7ff fc8f 	bl	80103fc <__malloc_lock>
 8010ade:	4a1e      	ldr	r2, [pc, #120]	; (8010b58 <_free_r+0x94>)
 8010ae0:	9801      	ldr	r0, [sp, #4]
 8010ae2:	6813      	ldr	r3, [r2, #0]
 8010ae4:	b933      	cbnz	r3, 8010af4 <_free_r+0x30>
 8010ae6:	6063      	str	r3, [r4, #4]
 8010ae8:	6014      	str	r4, [r2, #0]
 8010aea:	b003      	add	sp, #12
 8010aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010af0:	f7ff bc8a 	b.w	8010408 <__malloc_unlock>
 8010af4:	42a3      	cmp	r3, r4
 8010af6:	d908      	bls.n	8010b0a <_free_r+0x46>
 8010af8:	6825      	ldr	r5, [r4, #0]
 8010afa:	1961      	adds	r1, r4, r5
 8010afc:	428b      	cmp	r3, r1
 8010afe:	bf01      	itttt	eq
 8010b00:	6819      	ldreq	r1, [r3, #0]
 8010b02:	685b      	ldreq	r3, [r3, #4]
 8010b04:	1949      	addeq	r1, r1, r5
 8010b06:	6021      	streq	r1, [r4, #0]
 8010b08:	e7ed      	b.n	8010ae6 <_free_r+0x22>
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	b10b      	cbz	r3, 8010b14 <_free_r+0x50>
 8010b10:	42a3      	cmp	r3, r4
 8010b12:	d9fa      	bls.n	8010b0a <_free_r+0x46>
 8010b14:	6811      	ldr	r1, [r2, #0]
 8010b16:	1855      	adds	r5, r2, r1
 8010b18:	42a5      	cmp	r5, r4
 8010b1a:	d10b      	bne.n	8010b34 <_free_r+0x70>
 8010b1c:	6824      	ldr	r4, [r4, #0]
 8010b1e:	4421      	add	r1, r4
 8010b20:	1854      	adds	r4, r2, r1
 8010b22:	42a3      	cmp	r3, r4
 8010b24:	6011      	str	r1, [r2, #0]
 8010b26:	d1e0      	bne.n	8010aea <_free_r+0x26>
 8010b28:	681c      	ldr	r4, [r3, #0]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	6053      	str	r3, [r2, #4]
 8010b2e:	440c      	add	r4, r1
 8010b30:	6014      	str	r4, [r2, #0]
 8010b32:	e7da      	b.n	8010aea <_free_r+0x26>
 8010b34:	d902      	bls.n	8010b3c <_free_r+0x78>
 8010b36:	230c      	movs	r3, #12
 8010b38:	6003      	str	r3, [r0, #0]
 8010b3a:	e7d6      	b.n	8010aea <_free_r+0x26>
 8010b3c:	6825      	ldr	r5, [r4, #0]
 8010b3e:	1961      	adds	r1, r4, r5
 8010b40:	428b      	cmp	r3, r1
 8010b42:	bf04      	itt	eq
 8010b44:	6819      	ldreq	r1, [r3, #0]
 8010b46:	685b      	ldreq	r3, [r3, #4]
 8010b48:	6063      	str	r3, [r4, #4]
 8010b4a:	bf04      	itt	eq
 8010b4c:	1949      	addeq	r1, r1, r5
 8010b4e:	6021      	streq	r1, [r4, #0]
 8010b50:	6054      	str	r4, [r2, #4]
 8010b52:	e7ca      	b.n	8010aea <_free_r+0x26>
 8010b54:	b003      	add	sp, #12
 8010b56:	bd30      	pop	{r4, r5, pc}
 8010b58:	2000e214 	.word	0x2000e214

08010b5c <__sfputc_r>:
 8010b5c:	6893      	ldr	r3, [r2, #8]
 8010b5e:	3b01      	subs	r3, #1
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	b410      	push	{r4}
 8010b64:	6093      	str	r3, [r2, #8]
 8010b66:	da08      	bge.n	8010b7a <__sfputc_r+0x1e>
 8010b68:	6994      	ldr	r4, [r2, #24]
 8010b6a:	42a3      	cmp	r3, r4
 8010b6c:	db01      	blt.n	8010b72 <__sfputc_r+0x16>
 8010b6e:	290a      	cmp	r1, #10
 8010b70:	d103      	bne.n	8010b7a <__sfputc_r+0x1e>
 8010b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b76:	f7ff be76 	b.w	8010866 <__swbuf_r>
 8010b7a:	6813      	ldr	r3, [r2, #0]
 8010b7c:	1c58      	adds	r0, r3, #1
 8010b7e:	6010      	str	r0, [r2, #0]
 8010b80:	7019      	strb	r1, [r3, #0]
 8010b82:	4608      	mov	r0, r1
 8010b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b88:	4770      	bx	lr

08010b8a <__sfputs_r>:
 8010b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b8c:	4606      	mov	r6, r0
 8010b8e:	460f      	mov	r7, r1
 8010b90:	4614      	mov	r4, r2
 8010b92:	18d5      	adds	r5, r2, r3
 8010b94:	42ac      	cmp	r4, r5
 8010b96:	d101      	bne.n	8010b9c <__sfputs_r+0x12>
 8010b98:	2000      	movs	r0, #0
 8010b9a:	e007      	b.n	8010bac <__sfputs_r+0x22>
 8010b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ba0:	463a      	mov	r2, r7
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	f7ff ffda 	bl	8010b5c <__sfputc_r>
 8010ba8:	1c43      	adds	r3, r0, #1
 8010baa:	d1f3      	bne.n	8010b94 <__sfputs_r+0xa>
 8010bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010bb0 <_vfiprintf_r>:
 8010bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb4:	460d      	mov	r5, r1
 8010bb6:	b09d      	sub	sp, #116	; 0x74
 8010bb8:	4614      	mov	r4, r2
 8010bba:	4698      	mov	r8, r3
 8010bbc:	4606      	mov	r6, r0
 8010bbe:	b118      	cbz	r0, 8010bc8 <_vfiprintf_r+0x18>
 8010bc0:	6a03      	ldr	r3, [r0, #32]
 8010bc2:	b90b      	cbnz	r3, 8010bc8 <_vfiprintf_r+0x18>
 8010bc4:	f7ff fcb2 	bl	801052c <__sinit>
 8010bc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bca:	07d9      	lsls	r1, r3, #31
 8010bcc:	d405      	bmi.n	8010bda <_vfiprintf_r+0x2a>
 8010bce:	89ab      	ldrh	r3, [r5, #12]
 8010bd0:	059a      	lsls	r2, r3, #22
 8010bd2:	d402      	bmi.n	8010bda <_vfiprintf_r+0x2a>
 8010bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bd6:	f7ff ff64 	bl	8010aa2 <__retarget_lock_acquire_recursive>
 8010bda:	89ab      	ldrh	r3, [r5, #12]
 8010bdc:	071b      	lsls	r3, r3, #28
 8010bde:	d501      	bpl.n	8010be4 <_vfiprintf_r+0x34>
 8010be0:	692b      	ldr	r3, [r5, #16]
 8010be2:	b99b      	cbnz	r3, 8010c0c <_vfiprintf_r+0x5c>
 8010be4:	4629      	mov	r1, r5
 8010be6:	4630      	mov	r0, r6
 8010be8:	f7ff fe7a 	bl	80108e0 <__swsetup_r>
 8010bec:	b170      	cbz	r0, 8010c0c <_vfiprintf_r+0x5c>
 8010bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bf0:	07dc      	lsls	r4, r3, #31
 8010bf2:	d504      	bpl.n	8010bfe <_vfiprintf_r+0x4e>
 8010bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bf8:	b01d      	add	sp, #116	; 0x74
 8010bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bfe:	89ab      	ldrh	r3, [r5, #12]
 8010c00:	0598      	lsls	r0, r3, #22
 8010c02:	d4f7      	bmi.n	8010bf4 <_vfiprintf_r+0x44>
 8010c04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c06:	f7ff ff4d 	bl	8010aa4 <__retarget_lock_release_recursive>
 8010c0a:	e7f3      	b.n	8010bf4 <_vfiprintf_r+0x44>
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8010c10:	2320      	movs	r3, #32
 8010c12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c1a:	2330      	movs	r3, #48	; 0x30
 8010c1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010dd0 <_vfiprintf_r+0x220>
 8010c20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c24:	f04f 0901 	mov.w	r9, #1
 8010c28:	4623      	mov	r3, r4
 8010c2a:	469a      	mov	sl, r3
 8010c2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c30:	b10a      	cbz	r2, 8010c36 <_vfiprintf_r+0x86>
 8010c32:	2a25      	cmp	r2, #37	; 0x25
 8010c34:	d1f9      	bne.n	8010c2a <_vfiprintf_r+0x7a>
 8010c36:	ebba 0b04 	subs.w	fp, sl, r4
 8010c3a:	d00b      	beq.n	8010c54 <_vfiprintf_r+0xa4>
 8010c3c:	465b      	mov	r3, fp
 8010c3e:	4622      	mov	r2, r4
 8010c40:	4629      	mov	r1, r5
 8010c42:	4630      	mov	r0, r6
 8010c44:	f7ff ffa1 	bl	8010b8a <__sfputs_r>
 8010c48:	3001      	adds	r0, #1
 8010c4a:	f000 80a9 	beq.w	8010da0 <_vfiprintf_r+0x1f0>
 8010c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c50:	445a      	add	r2, fp
 8010c52:	9209      	str	r2, [sp, #36]	; 0x24
 8010c54:	f89a 3000 	ldrb.w	r3, [sl]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	f000 80a1 	beq.w	8010da0 <_vfiprintf_r+0x1f0>
 8010c5e:	2300      	movs	r3, #0
 8010c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c68:	f10a 0a01 	add.w	sl, sl, #1
 8010c6c:	9304      	str	r3, [sp, #16]
 8010c6e:	9307      	str	r3, [sp, #28]
 8010c70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c74:	931a      	str	r3, [sp, #104]	; 0x68
 8010c76:	4654      	mov	r4, sl
 8010c78:	2205      	movs	r2, #5
 8010c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c7e:	4854      	ldr	r0, [pc, #336]	; (8010dd0 <_vfiprintf_r+0x220>)
 8010c80:	f7ef fade 	bl	8000240 <memchr>
 8010c84:	9a04      	ldr	r2, [sp, #16]
 8010c86:	b9d8      	cbnz	r0, 8010cc0 <_vfiprintf_r+0x110>
 8010c88:	06d1      	lsls	r1, r2, #27
 8010c8a:	bf44      	itt	mi
 8010c8c:	2320      	movmi	r3, #32
 8010c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c92:	0713      	lsls	r3, r2, #28
 8010c94:	bf44      	itt	mi
 8010c96:	232b      	movmi	r3, #43	; 0x2b
 8010c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8010ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8010ca2:	d015      	beq.n	8010cd0 <_vfiprintf_r+0x120>
 8010ca4:	9a07      	ldr	r2, [sp, #28]
 8010ca6:	4654      	mov	r4, sl
 8010ca8:	2000      	movs	r0, #0
 8010caa:	f04f 0c0a 	mov.w	ip, #10
 8010cae:	4621      	mov	r1, r4
 8010cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cb4:	3b30      	subs	r3, #48	; 0x30
 8010cb6:	2b09      	cmp	r3, #9
 8010cb8:	d94d      	bls.n	8010d56 <_vfiprintf_r+0x1a6>
 8010cba:	b1b0      	cbz	r0, 8010cea <_vfiprintf_r+0x13a>
 8010cbc:	9207      	str	r2, [sp, #28]
 8010cbe:	e014      	b.n	8010cea <_vfiprintf_r+0x13a>
 8010cc0:	eba0 0308 	sub.w	r3, r0, r8
 8010cc4:	fa09 f303 	lsl.w	r3, r9, r3
 8010cc8:	4313      	orrs	r3, r2
 8010cca:	9304      	str	r3, [sp, #16]
 8010ccc:	46a2      	mov	sl, r4
 8010cce:	e7d2      	b.n	8010c76 <_vfiprintf_r+0xc6>
 8010cd0:	9b03      	ldr	r3, [sp, #12]
 8010cd2:	1d19      	adds	r1, r3, #4
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	9103      	str	r1, [sp, #12]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	bfbb      	ittet	lt
 8010cdc:	425b      	neglt	r3, r3
 8010cde:	f042 0202 	orrlt.w	r2, r2, #2
 8010ce2:	9307      	strge	r3, [sp, #28]
 8010ce4:	9307      	strlt	r3, [sp, #28]
 8010ce6:	bfb8      	it	lt
 8010ce8:	9204      	strlt	r2, [sp, #16]
 8010cea:	7823      	ldrb	r3, [r4, #0]
 8010cec:	2b2e      	cmp	r3, #46	; 0x2e
 8010cee:	d10c      	bne.n	8010d0a <_vfiprintf_r+0x15a>
 8010cf0:	7863      	ldrb	r3, [r4, #1]
 8010cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8010cf4:	d134      	bne.n	8010d60 <_vfiprintf_r+0x1b0>
 8010cf6:	9b03      	ldr	r3, [sp, #12]
 8010cf8:	1d1a      	adds	r2, r3, #4
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	9203      	str	r2, [sp, #12]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	bfb8      	it	lt
 8010d02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010d06:	3402      	adds	r4, #2
 8010d08:	9305      	str	r3, [sp, #20]
 8010d0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010de0 <_vfiprintf_r+0x230>
 8010d0e:	7821      	ldrb	r1, [r4, #0]
 8010d10:	2203      	movs	r2, #3
 8010d12:	4650      	mov	r0, sl
 8010d14:	f7ef fa94 	bl	8000240 <memchr>
 8010d18:	b138      	cbz	r0, 8010d2a <_vfiprintf_r+0x17a>
 8010d1a:	9b04      	ldr	r3, [sp, #16]
 8010d1c:	eba0 000a 	sub.w	r0, r0, sl
 8010d20:	2240      	movs	r2, #64	; 0x40
 8010d22:	4082      	lsls	r2, r0
 8010d24:	4313      	orrs	r3, r2
 8010d26:	3401      	adds	r4, #1
 8010d28:	9304      	str	r3, [sp, #16]
 8010d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d2e:	4829      	ldr	r0, [pc, #164]	; (8010dd4 <_vfiprintf_r+0x224>)
 8010d30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d34:	2206      	movs	r2, #6
 8010d36:	f7ef fa83 	bl	8000240 <memchr>
 8010d3a:	2800      	cmp	r0, #0
 8010d3c:	d03f      	beq.n	8010dbe <_vfiprintf_r+0x20e>
 8010d3e:	4b26      	ldr	r3, [pc, #152]	; (8010dd8 <_vfiprintf_r+0x228>)
 8010d40:	bb1b      	cbnz	r3, 8010d8a <_vfiprintf_r+0x1da>
 8010d42:	9b03      	ldr	r3, [sp, #12]
 8010d44:	3307      	adds	r3, #7
 8010d46:	f023 0307 	bic.w	r3, r3, #7
 8010d4a:	3308      	adds	r3, #8
 8010d4c:	9303      	str	r3, [sp, #12]
 8010d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d50:	443b      	add	r3, r7
 8010d52:	9309      	str	r3, [sp, #36]	; 0x24
 8010d54:	e768      	b.n	8010c28 <_vfiprintf_r+0x78>
 8010d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d5a:	460c      	mov	r4, r1
 8010d5c:	2001      	movs	r0, #1
 8010d5e:	e7a6      	b.n	8010cae <_vfiprintf_r+0xfe>
 8010d60:	2300      	movs	r3, #0
 8010d62:	3401      	adds	r4, #1
 8010d64:	9305      	str	r3, [sp, #20]
 8010d66:	4619      	mov	r1, r3
 8010d68:	f04f 0c0a 	mov.w	ip, #10
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d72:	3a30      	subs	r2, #48	; 0x30
 8010d74:	2a09      	cmp	r2, #9
 8010d76:	d903      	bls.n	8010d80 <_vfiprintf_r+0x1d0>
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d0c6      	beq.n	8010d0a <_vfiprintf_r+0x15a>
 8010d7c:	9105      	str	r1, [sp, #20]
 8010d7e:	e7c4      	b.n	8010d0a <_vfiprintf_r+0x15a>
 8010d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d84:	4604      	mov	r4, r0
 8010d86:	2301      	movs	r3, #1
 8010d88:	e7f0      	b.n	8010d6c <_vfiprintf_r+0x1bc>
 8010d8a:	ab03      	add	r3, sp, #12
 8010d8c:	9300      	str	r3, [sp, #0]
 8010d8e:	462a      	mov	r2, r5
 8010d90:	4b12      	ldr	r3, [pc, #72]	; (8010ddc <_vfiprintf_r+0x22c>)
 8010d92:	a904      	add	r1, sp, #16
 8010d94:	4630      	mov	r0, r6
 8010d96:	f3af 8000 	nop.w
 8010d9a:	4607      	mov	r7, r0
 8010d9c:	1c78      	adds	r0, r7, #1
 8010d9e:	d1d6      	bne.n	8010d4e <_vfiprintf_r+0x19e>
 8010da0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010da2:	07d9      	lsls	r1, r3, #31
 8010da4:	d405      	bmi.n	8010db2 <_vfiprintf_r+0x202>
 8010da6:	89ab      	ldrh	r3, [r5, #12]
 8010da8:	059a      	lsls	r2, r3, #22
 8010daa:	d402      	bmi.n	8010db2 <_vfiprintf_r+0x202>
 8010dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010dae:	f7ff fe79 	bl	8010aa4 <__retarget_lock_release_recursive>
 8010db2:	89ab      	ldrh	r3, [r5, #12]
 8010db4:	065b      	lsls	r3, r3, #25
 8010db6:	f53f af1d 	bmi.w	8010bf4 <_vfiprintf_r+0x44>
 8010dba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dbc:	e71c      	b.n	8010bf8 <_vfiprintf_r+0x48>
 8010dbe:	ab03      	add	r3, sp, #12
 8010dc0:	9300      	str	r3, [sp, #0]
 8010dc2:	462a      	mov	r2, r5
 8010dc4:	4b05      	ldr	r3, [pc, #20]	; (8010ddc <_vfiprintf_r+0x22c>)
 8010dc6:	a904      	add	r1, sp, #16
 8010dc8:	4630      	mov	r0, r6
 8010dca:	f000 f879 	bl	8010ec0 <_printf_i>
 8010dce:	e7e4      	b.n	8010d9a <_vfiprintf_r+0x1ea>
 8010dd0:	08011688 	.word	0x08011688
 8010dd4:	08011692 	.word	0x08011692
 8010dd8:	00000000 	.word	0x00000000
 8010ddc:	08010b8b 	.word	0x08010b8b
 8010de0:	0801168e 	.word	0x0801168e

08010de4 <_printf_common>:
 8010de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010de8:	4616      	mov	r6, r2
 8010dea:	4699      	mov	r9, r3
 8010dec:	688a      	ldr	r2, [r1, #8]
 8010dee:	690b      	ldr	r3, [r1, #16]
 8010df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010df4:	4293      	cmp	r3, r2
 8010df6:	bfb8      	it	lt
 8010df8:	4613      	movlt	r3, r2
 8010dfa:	6033      	str	r3, [r6, #0]
 8010dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e00:	4607      	mov	r7, r0
 8010e02:	460c      	mov	r4, r1
 8010e04:	b10a      	cbz	r2, 8010e0a <_printf_common+0x26>
 8010e06:	3301      	adds	r3, #1
 8010e08:	6033      	str	r3, [r6, #0]
 8010e0a:	6823      	ldr	r3, [r4, #0]
 8010e0c:	0699      	lsls	r1, r3, #26
 8010e0e:	bf42      	ittt	mi
 8010e10:	6833      	ldrmi	r3, [r6, #0]
 8010e12:	3302      	addmi	r3, #2
 8010e14:	6033      	strmi	r3, [r6, #0]
 8010e16:	6825      	ldr	r5, [r4, #0]
 8010e18:	f015 0506 	ands.w	r5, r5, #6
 8010e1c:	d106      	bne.n	8010e2c <_printf_common+0x48>
 8010e1e:	f104 0a19 	add.w	sl, r4, #25
 8010e22:	68e3      	ldr	r3, [r4, #12]
 8010e24:	6832      	ldr	r2, [r6, #0]
 8010e26:	1a9b      	subs	r3, r3, r2
 8010e28:	42ab      	cmp	r3, r5
 8010e2a:	dc26      	bgt.n	8010e7a <_printf_common+0x96>
 8010e2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e30:	1e13      	subs	r3, r2, #0
 8010e32:	6822      	ldr	r2, [r4, #0]
 8010e34:	bf18      	it	ne
 8010e36:	2301      	movne	r3, #1
 8010e38:	0692      	lsls	r2, r2, #26
 8010e3a:	d42b      	bmi.n	8010e94 <_printf_common+0xb0>
 8010e3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e40:	4649      	mov	r1, r9
 8010e42:	4638      	mov	r0, r7
 8010e44:	47c0      	blx	r8
 8010e46:	3001      	adds	r0, #1
 8010e48:	d01e      	beq.n	8010e88 <_printf_common+0xa4>
 8010e4a:	6823      	ldr	r3, [r4, #0]
 8010e4c:	6922      	ldr	r2, [r4, #16]
 8010e4e:	f003 0306 	and.w	r3, r3, #6
 8010e52:	2b04      	cmp	r3, #4
 8010e54:	bf02      	ittt	eq
 8010e56:	68e5      	ldreq	r5, [r4, #12]
 8010e58:	6833      	ldreq	r3, [r6, #0]
 8010e5a:	1aed      	subeq	r5, r5, r3
 8010e5c:	68a3      	ldr	r3, [r4, #8]
 8010e5e:	bf0c      	ite	eq
 8010e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e64:	2500      	movne	r5, #0
 8010e66:	4293      	cmp	r3, r2
 8010e68:	bfc4      	itt	gt
 8010e6a:	1a9b      	subgt	r3, r3, r2
 8010e6c:	18ed      	addgt	r5, r5, r3
 8010e6e:	2600      	movs	r6, #0
 8010e70:	341a      	adds	r4, #26
 8010e72:	42b5      	cmp	r5, r6
 8010e74:	d11a      	bne.n	8010eac <_printf_common+0xc8>
 8010e76:	2000      	movs	r0, #0
 8010e78:	e008      	b.n	8010e8c <_printf_common+0xa8>
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	4652      	mov	r2, sl
 8010e7e:	4649      	mov	r1, r9
 8010e80:	4638      	mov	r0, r7
 8010e82:	47c0      	blx	r8
 8010e84:	3001      	adds	r0, #1
 8010e86:	d103      	bne.n	8010e90 <_printf_common+0xac>
 8010e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e90:	3501      	adds	r5, #1
 8010e92:	e7c6      	b.n	8010e22 <_printf_common+0x3e>
 8010e94:	18e1      	adds	r1, r4, r3
 8010e96:	1c5a      	adds	r2, r3, #1
 8010e98:	2030      	movs	r0, #48	; 0x30
 8010e9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010e9e:	4422      	add	r2, r4
 8010ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ea8:	3302      	adds	r3, #2
 8010eaa:	e7c7      	b.n	8010e3c <_printf_common+0x58>
 8010eac:	2301      	movs	r3, #1
 8010eae:	4622      	mov	r2, r4
 8010eb0:	4649      	mov	r1, r9
 8010eb2:	4638      	mov	r0, r7
 8010eb4:	47c0      	blx	r8
 8010eb6:	3001      	adds	r0, #1
 8010eb8:	d0e6      	beq.n	8010e88 <_printf_common+0xa4>
 8010eba:	3601      	adds	r6, #1
 8010ebc:	e7d9      	b.n	8010e72 <_printf_common+0x8e>
	...

08010ec0 <_printf_i>:
 8010ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ec4:	7e0f      	ldrb	r7, [r1, #24]
 8010ec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010ec8:	2f78      	cmp	r7, #120	; 0x78
 8010eca:	4691      	mov	r9, r2
 8010ecc:	4680      	mov	r8, r0
 8010ece:	460c      	mov	r4, r1
 8010ed0:	469a      	mov	sl, r3
 8010ed2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010ed6:	d807      	bhi.n	8010ee8 <_printf_i+0x28>
 8010ed8:	2f62      	cmp	r7, #98	; 0x62
 8010eda:	d80a      	bhi.n	8010ef2 <_printf_i+0x32>
 8010edc:	2f00      	cmp	r7, #0
 8010ede:	f000 80d4 	beq.w	801108a <_printf_i+0x1ca>
 8010ee2:	2f58      	cmp	r7, #88	; 0x58
 8010ee4:	f000 80c0 	beq.w	8011068 <_printf_i+0x1a8>
 8010ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010eec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010ef0:	e03a      	b.n	8010f68 <_printf_i+0xa8>
 8010ef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010ef6:	2b15      	cmp	r3, #21
 8010ef8:	d8f6      	bhi.n	8010ee8 <_printf_i+0x28>
 8010efa:	a101      	add	r1, pc, #4	; (adr r1, 8010f00 <_printf_i+0x40>)
 8010efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f00:	08010f59 	.word	0x08010f59
 8010f04:	08010f6d 	.word	0x08010f6d
 8010f08:	08010ee9 	.word	0x08010ee9
 8010f0c:	08010ee9 	.word	0x08010ee9
 8010f10:	08010ee9 	.word	0x08010ee9
 8010f14:	08010ee9 	.word	0x08010ee9
 8010f18:	08010f6d 	.word	0x08010f6d
 8010f1c:	08010ee9 	.word	0x08010ee9
 8010f20:	08010ee9 	.word	0x08010ee9
 8010f24:	08010ee9 	.word	0x08010ee9
 8010f28:	08010ee9 	.word	0x08010ee9
 8010f2c:	08011071 	.word	0x08011071
 8010f30:	08010f99 	.word	0x08010f99
 8010f34:	0801102b 	.word	0x0801102b
 8010f38:	08010ee9 	.word	0x08010ee9
 8010f3c:	08010ee9 	.word	0x08010ee9
 8010f40:	08011093 	.word	0x08011093
 8010f44:	08010ee9 	.word	0x08010ee9
 8010f48:	08010f99 	.word	0x08010f99
 8010f4c:	08010ee9 	.word	0x08010ee9
 8010f50:	08010ee9 	.word	0x08010ee9
 8010f54:	08011033 	.word	0x08011033
 8010f58:	682b      	ldr	r3, [r5, #0]
 8010f5a:	1d1a      	adds	r2, r3, #4
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	602a      	str	r2, [r5, #0]
 8010f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f68:	2301      	movs	r3, #1
 8010f6a:	e09f      	b.n	80110ac <_printf_i+0x1ec>
 8010f6c:	6820      	ldr	r0, [r4, #0]
 8010f6e:	682b      	ldr	r3, [r5, #0]
 8010f70:	0607      	lsls	r7, r0, #24
 8010f72:	f103 0104 	add.w	r1, r3, #4
 8010f76:	6029      	str	r1, [r5, #0]
 8010f78:	d501      	bpl.n	8010f7e <_printf_i+0xbe>
 8010f7a:	681e      	ldr	r6, [r3, #0]
 8010f7c:	e003      	b.n	8010f86 <_printf_i+0xc6>
 8010f7e:	0646      	lsls	r6, r0, #25
 8010f80:	d5fb      	bpl.n	8010f7a <_printf_i+0xba>
 8010f82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010f86:	2e00      	cmp	r6, #0
 8010f88:	da03      	bge.n	8010f92 <_printf_i+0xd2>
 8010f8a:	232d      	movs	r3, #45	; 0x2d
 8010f8c:	4276      	negs	r6, r6
 8010f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f92:	485a      	ldr	r0, [pc, #360]	; (80110fc <_printf_i+0x23c>)
 8010f94:	230a      	movs	r3, #10
 8010f96:	e012      	b.n	8010fbe <_printf_i+0xfe>
 8010f98:	682b      	ldr	r3, [r5, #0]
 8010f9a:	6820      	ldr	r0, [r4, #0]
 8010f9c:	1d19      	adds	r1, r3, #4
 8010f9e:	6029      	str	r1, [r5, #0]
 8010fa0:	0605      	lsls	r5, r0, #24
 8010fa2:	d501      	bpl.n	8010fa8 <_printf_i+0xe8>
 8010fa4:	681e      	ldr	r6, [r3, #0]
 8010fa6:	e002      	b.n	8010fae <_printf_i+0xee>
 8010fa8:	0641      	lsls	r1, r0, #25
 8010faa:	d5fb      	bpl.n	8010fa4 <_printf_i+0xe4>
 8010fac:	881e      	ldrh	r6, [r3, #0]
 8010fae:	4853      	ldr	r0, [pc, #332]	; (80110fc <_printf_i+0x23c>)
 8010fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8010fb2:	bf0c      	ite	eq
 8010fb4:	2308      	moveq	r3, #8
 8010fb6:	230a      	movne	r3, #10
 8010fb8:	2100      	movs	r1, #0
 8010fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010fbe:	6865      	ldr	r5, [r4, #4]
 8010fc0:	60a5      	str	r5, [r4, #8]
 8010fc2:	2d00      	cmp	r5, #0
 8010fc4:	bfa2      	ittt	ge
 8010fc6:	6821      	ldrge	r1, [r4, #0]
 8010fc8:	f021 0104 	bicge.w	r1, r1, #4
 8010fcc:	6021      	strge	r1, [r4, #0]
 8010fce:	b90e      	cbnz	r6, 8010fd4 <_printf_i+0x114>
 8010fd0:	2d00      	cmp	r5, #0
 8010fd2:	d04b      	beq.n	801106c <_printf_i+0x1ac>
 8010fd4:	4615      	mov	r5, r2
 8010fd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8010fda:	fb03 6711 	mls	r7, r3, r1, r6
 8010fde:	5dc7      	ldrb	r7, [r0, r7]
 8010fe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010fe4:	4637      	mov	r7, r6
 8010fe6:	42bb      	cmp	r3, r7
 8010fe8:	460e      	mov	r6, r1
 8010fea:	d9f4      	bls.n	8010fd6 <_printf_i+0x116>
 8010fec:	2b08      	cmp	r3, #8
 8010fee:	d10b      	bne.n	8011008 <_printf_i+0x148>
 8010ff0:	6823      	ldr	r3, [r4, #0]
 8010ff2:	07de      	lsls	r6, r3, #31
 8010ff4:	d508      	bpl.n	8011008 <_printf_i+0x148>
 8010ff6:	6923      	ldr	r3, [r4, #16]
 8010ff8:	6861      	ldr	r1, [r4, #4]
 8010ffa:	4299      	cmp	r1, r3
 8010ffc:	bfde      	ittt	le
 8010ffe:	2330      	movle	r3, #48	; 0x30
 8011000:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011004:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011008:	1b52      	subs	r2, r2, r5
 801100a:	6122      	str	r2, [r4, #16]
 801100c:	f8cd a000 	str.w	sl, [sp]
 8011010:	464b      	mov	r3, r9
 8011012:	aa03      	add	r2, sp, #12
 8011014:	4621      	mov	r1, r4
 8011016:	4640      	mov	r0, r8
 8011018:	f7ff fee4 	bl	8010de4 <_printf_common>
 801101c:	3001      	adds	r0, #1
 801101e:	d14a      	bne.n	80110b6 <_printf_i+0x1f6>
 8011020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011024:	b004      	add	sp, #16
 8011026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801102a:	6823      	ldr	r3, [r4, #0]
 801102c:	f043 0320 	orr.w	r3, r3, #32
 8011030:	6023      	str	r3, [r4, #0]
 8011032:	4833      	ldr	r0, [pc, #204]	; (8011100 <_printf_i+0x240>)
 8011034:	2778      	movs	r7, #120	; 0x78
 8011036:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801103a:	6823      	ldr	r3, [r4, #0]
 801103c:	6829      	ldr	r1, [r5, #0]
 801103e:	061f      	lsls	r7, r3, #24
 8011040:	f851 6b04 	ldr.w	r6, [r1], #4
 8011044:	d402      	bmi.n	801104c <_printf_i+0x18c>
 8011046:	065f      	lsls	r7, r3, #25
 8011048:	bf48      	it	mi
 801104a:	b2b6      	uxthmi	r6, r6
 801104c:	07df      	lsls	r7, r3, #31
 801104e:	bf48      	it	mi
 8011050:	f043 0320 	orrmi.w	r3, r3, #32
 8011054:	6029      	str	r1, [r5, #0]
 8011056:	bf48      	it	mi
 8011058:	6023      	strmi	r3, [r4, #0]
 801105a:	b91e      	cbnz	r6, 8011064 <_printf_i+0x1a4>
 801105c:	6823      	ldr	r3, [r4, #0]
 801105e:	f023 0320 	bic.w	r3, r3, #32
 8011062:	6023      	str	r3, [r4, #0]
 8011064:	2310      	movs	r3, #16
 8011066:	e7a7      	b.n	8010fb8 <_printf_i+0xf8>
 8011068:	4824      	ldr	r0, [pc, #144]	; (80110fc <_printf_i+0x23c>)
 801106a:	e7e4      	b.n	8011036 <_printf_i+0x176>
 801106c:	4615      	mov	r5, r2
 801106e:	e7bd      	b.n	8010fec <_printf_i+0x12c>
 8011070:	682b      	ldr	r3, [r5, #0]
 8011072:	6826      	ldr	r6, [r4, #0]
 8011074:	6961      	ldr	r1, [r4, #20]
 8011076:	1d18      	adds	r0, r3, #4
 8011078:	6028      	str	r0, [r5, #0]
 801107a:	0635      	lsls	r5, r6, #24
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	d501      	bpl.n	8011084 <_printf_i+0x1c4>
 8011080:	6019      	str	r1, [r3, #0]
 8011082:	e002      	b.n	801108a <_printf_i+0x1ca>
 8011084:	0670      	lsls	r0, r6, #25
 8011086:	d5fb      	bpl.n	8011080 <_printf_i+0x1c0>
 8011088:	8019      	strh	r1, [r3, #0]
 801108a:	2300      	movs	r3, #0
 801108c:	6123      	str	r3, [r4, #16]
 801108e:	4615      	mov	r5, r2
 8011090:	e7bc      	b.n	801100c <_printf_i+0x14c>
 8011092:	682b      	ldr	r3, [r5, #0]
 8011094:	1d1a      	adds	r2, r3, #4
 8011096:	602a      	str	r2, [r5, #0]
 8011098:	681d      	ldr	r5, [r3, #0]
 801109a:	6862      	ldr	r2, [r4, #4]
 801109c:	2100      	movs	r1, #0
 801109e:	4628      	mov	r0, r5
 80110a0:	f7ef f8ce 	bl	8000240 <memchr>
 80110a4:	b108      	cbz	r0, 80110aa <_printf_i+0x1ea>
 80110a6:	1b40      	subs	r0, r0, r5
 80110a8:	6060      	str	r0, [r4, #4]
 80110aa:	6863      	ldr	r3, [r4, #4]
 80110ac:	6123      	str	r3, [r4, #16]
 80110ae:	2300      	movs	r3, #0
 80110b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110b4:	e7aa      	b.n	801100c <_printf_i+0x14c>
 80110b6:	6923      	ldr	r3, [r4, #16]
 80110b8:	462a      	mov	r2, r5
 80110ba:	4649      	mov	r1, r9
 80110bc:	4640      	mov	r0, r8
 80110be:	47d0      	blx	sl
 80110c0:	3001      	adds	r0, #1
 80110c2:	d0ad      	beq.n	8011020 <_printf_i+0x160>
 80110c4:	6823      	ldr	r3, [r4, #0]
 80110c6:	079b      	lsls	r3, r3, #30
 80110c8:	d413      	bmi.n	80110f2 <_printf_i+0x232>
 80110ca:	68e0      	ldr	r0, [r4, #12]
 80110cc:	9b03      	ldr	r3, [sp, #12]
 80110ce:	4298      	cmp	r0, r3
 80110d0:	bfb8      	it	lt
 80110d2:	4618      	movlt	r0, r3
 80110d4:	e7a6      	b.n	8011024 <_printf_i+0x164>
 80110d6:	2301      	movs	r3, #1
 80110d8:	4632      	mov	r2, r6
 80110da:	4649      	mov	r1, r9
 80110dc:	4640      	mov	r0, r8
 80110de:	47d0      	blx	sl
 80110e0:	3001      	adds	r0, #1
 80110e2:	d09d      	beq.n	8011020 <_printf_i+0x160>
 80110e4:	3501      	adds	r5, #1
 80110e6:	68e3      	ldr	r3, [r4, #12]
 80110e8:	9903      	ldr	r1, [sp, #12]
 80110ea:	1a5b      	subs	r3, r3, r1
 80110ec:	42ab      	cmp	r3, r5
 80110ee:	dcf2      	bgt.n	80110d6 <_printf_i+0x216>
 80110f0:	e7eb      	b.n	80110ca <_printf_i+0x20a>
 80110f2:	2500      	movs	r5, #0
 80110f4:	f104 0619 	add.w	r6, r4, #25
 80110f8:	e7f5      	b.n	80110e6 <_printf_i+0x226>
 80110fa:	bf00      	nop
 80110fc:	08011699 	.word	0x08011699
 8011100:	080116aa 	.word	0x080116aa

08011104 <__sflush_r>:
 8011104:	898a      	ldrh	r2, [r1, #12]
 8011106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801110a:	4605      	mov	r5, r0
 801110c:	0710      	lsls	r0, r2, #28
 801110e:	460c      	mov	r4, r1
 8011110:	d458      	bmi.n	80111c4 <__sflush_r+0xc0>
 8011112:	684b      	ldr	r3, [r1, #4]
 8011114:	2b00      	cmp	r3, #0
 8011116:	dc05      	bgt.n	8011124 <__sflush_r+0x20>
 8011118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801111a:	2b00      	cmp	r3, #0
 801111c:	dc02      	bgt.n	8011124 <__sflush_r+0x20>
 801111e:	2000      	movs	r0, #0
 8011120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011126:	2e00      	cmp	r6, #0
 8011128:	d0f9      	beq.n	801111e <__sflush_r+0x1a>
 801112a:	2300      	movs	r3, #0
 801112c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011130:	682f      	ldr	r7, [r5, #0]
 8011132:	6a21      	ldr	r1, [r4, #32]
 8011134:	602b      	str	r3, [r5, #0]
 8011136:	d032      	beq.n	801119e <__sflush_r+0x9a>
 8011138:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801113a:	89a3      	ldrh	r3, [r4, #12]
 801113c:	075a      	lsls	r2, r3, #29
 801113e:	d505      	bpl.n	801114c <__sflush_r+0x48>
 8011140:	6863      	ldr	r3, [r4, #4]
 8011142:	1ac0      	subs	r0, r0, r3
 8011144:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011146:	b10b      	cbz	r3, 801114c <__sflush_r+0x48>
 8011148:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801114a:	1ac0      	subs	r0, r0, r3
 801114c:	2300      	movs	r3, #0
 801114e:	4602      	mov	r2, r0
 8011150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011152:	6a21      	ldr	r1, [r4, #32]
 8011154:	4628      	mov	r0, r5
 8011156:	47b0      	blx	r6
 8011158:	1c43      	adds	r3, r0, #1
 801115a:	89a3      	ldrh	r3, [r4, #12]
 801115c:	d106      	bne.n	801116c <__sflush_r+0x68>
 801115e:	6829      	ldr	r1, [r5, #0]
 8011160:	291d      	cmp	r1, #29
 8011162:	d82b      	bhi.n	80111bc <__sflush_r+0xb8>
 8011164:	4a29      	ldr	r2, [pc, #164]	; (801120c <__sflush_r+0x108>)
 8011166:	410a      	asrs	r2, r1
 8011168:	07d6      	lsls	r6, r2, #31
 801116a:	d427      	bmi.n	80111bc <__sflush_r+0xb8>
 801116c:	2200      	movs	r2, #0
 801116e:	6062      	str	r2, [r4, #4]
 8011170:	04d9      	lsls	r1, r3, #19
 8011172:	6922      	ldr	r2, [r4, #16]
 8011174:	6022      	str	r2, [r4, #0]
 8011176:	d504      	bpl.n	8011182 <__sflush_r+0x7e>
 8011178:	1c42      	adds	r2, r0, #1
 801117a:	d101      	bne.n	8011180 <__sflush_r+0x7c>
 801117c:	682b      	ldr	r3, [r5, #0]
 801117e:	b903      	cbnz	r3, 8011182 <__sflush_r+0x7e>
 8011180:	6560      	str	r0, [r4, #84]	; 0x54
 8011182:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011184:	602f      	str	r7, [r5, #0]
 8011186:	2900      	cmp	r1, #0
 8011188:	d0c9      	beq.n	801111e <__sflush_r+0x1a>
 801118a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801118e:	4299      	cmp	r1, r3
 8011190:	d002      	beq.n	8011198 <__sflush_r+0x94>
 8011192:	4628      	mov	r0, r5
 8011194:	f7ff fc96 	bl	8010ac4 <_free_r>
 8011198:	2000      	movs	r0, #0
 801119a:	6360      	str	r0, [r4, #52]	; 0x34
 801119c:	e7c0      	b.n	8011120 <__sflush_r+0x1c>
 801119e:	2301      	movs	r3, #1
 80111a0:	4628      	mov	r0, r5
 80111a2:	47b0      	blx	r6
 80111a4:	1c41      	adds	r1, r0, #1
 80111a6:	d1c8      	bne.n	801113a <__sflush_r+0x36>
 80111a8:	682b      	ldr	r3, [r5, #0]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d0c5      	beq.n	801113a <__sflush_r+0x36>
 80111ae:	2b1d      	cmp	r3, #29
 80111b0:	d001      	beq.n	80111b6 <__sflush_r+0xb2>
 80111b2:	2b16      	cmp	r3, #22
 80111b4:	d101      	bne.n	80111ba <__sflush_r+0xb6>
 80111b6:	602f      	str	r7, [r5, #0]
 80111b8:	e7b1      	b.n	801111e <__sflush_r+0x1a>
 80111ba:	89a3      	ldrh	r3, [r4, #12]
 80111bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111c0:	81a3      	strh	r3, [r4, #12]
 80111c2:	e7ad      	b.n	8011120 <__sflush_r+0x1c>
 80111c4:	690f      	ldr	r7, [r1, #16]
 80111c6:	2f00      	cmp	r7, #0
 80111c8:	d0a9      	beq.n	801111e <__sflush_r+0x1a>
 80111ca:	0793      	lsls	r3, r2, #30
 80111cc:	680e      	ldr	r6, [r1, #0]
 80111ce:	bf08      	it	eq
 80111d0:	694b      	ldreq	r3, [r1, #20]
 80111d2:	600f      	str	r7, [r1, #0]
 80111d4:	bf18      	it	ne
 80111d6:	2300      	movne	r3, #0
 80111d8:	eba6 0807 	sub.w	r8, r6, r7
 80111dc:	608b      	str	r3, [r1, #8]
 80111de:	f1b8 0f00 	cmp.w	r8, #0
 80111e2:	dd9c      	ble.n	801111e <__sflush_r+0x1a>
 80111e4:	6a21      	ldr	r1, [r4, #32]
 80111e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80111e8:	4643      	mov	r3, r8
 80111ea:	463a      	mov	r2, r7
 80111ec:	4628      	mov	r0, r5
 80111ee:	47b0      	blx	r6
 80111f0:	2800      	cmp	r0, #0
 80111f2:	dc06      	bgt.n	8011202 <__sflush_r+0xfe>
 80111f4:	89a3      	ldrh	r3, [r4, #12]
 80111f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111fa:	81a3      	strh	r3, [r4, #12]
 80111fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011200:	e78e      	b.n	8011120 <__sflush_r+0x1c>
 8011202:	4407      	add	r7, r0
 8011204:	eba8 0800 	sub.w	r8, r8, r0
 8011208:	e7e9      	b.n	80111de <__sflush_r+0xda>
 801120a:	bf00      	nop
 801120c:	dfbffffe 	.word	0xdfbffffe

08011210 <_fflush_r>:
 8011210:	b538      	push	{r3, r4, r5, lr}
 8011212:	690b      	ldr	r3, [r1, #16]
 8011214:	4605      	mov	r5, r0
 8011216:	460c      	mov	r4, r1
 8011218:	b913      	cbnz	r3, 8011220 <_fflush_r+0x10>
 801121a:	2500      	movs	r5, #0
 801121c:	4628      	mov	r0, r5
 801121e:	bd38      	pop	{r3, r4, r5, pc}
 8011220:	b118      	cbz	r0, 801122a <_fflush_r+0x1a>
 8011222:	6a03      	ldr	r3, [r0, #32]
 8011224:	b90b      	cbnz	r3, 801122a <_fflush_r+0x1a>
 8011226:	f7ff f981 	bl	801052c <__sinit>
 801122a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d0f3      	beq.n	801121a <_fflush_r+0xa>
 8011232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011234:	07d0      	lsls	r0, r2, #31
 8011236:	d404      	bmi.n	8011242 <_fflush_r+0x32>
 8011238:	0599      	lsls	r1, r3, #22
 801123a:	d402      	bmi.n	8011242 <_fflush_r+0x32>
 801123c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801123e:	f7ff fc30 	bl	8010aa2 <__retarget_lock_acquire_recursive>
 8011242:	4628      	mov	r0, r5
 8011244:	4621      	mov	r1, r4
 8011246:	f7ff ff5d 	bl	8011104 <__sflush_r>
 801124a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801124c:	07da      	lsls	r2, r3, #31
 801124e:	4605      	mov	r5, r0
 8011250:	d4e4      	bmi.n	801121c <_fflush_r+0xc>
 8011252:	89a3      	ldrh	r3, [r4, #12]
 8011254:	059b      	lsls	r3, r3, #22
 8011256:	d4e1      	bmi.n	801121c <_fflush_r+0xc>
 8011258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801125a:	f7ff fc23 	bl	8010aa4 <__retarget_lock_release_recursive>
 801125e:	e7dd      	b.n	801121c <_fflush_r+0xc>

08011260 <__swhatbuf_r>:
 8011260:	b570      	push	{r4, r5, r6, lr}
 8011262:	460c      	mov	r4, r1
 8011264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011268:	2900      	cmp	r1, #0
 801126a:	b096      	sub	sp, #88	; 0x58
 801126c:	4615      	mov	r5, r2
 801126e:	461e      	mov	r6, r3
 8011270:	da0d      	bge.n	801128e <__swhatbuf_r+0x2e>
 8011272:	89a3      	ldrh	r3, [r4, #12]
 8011274:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011278:	f04f 0100 	mov.w	r1, #0
 801127c:	bf0c      	ite	eq
 801127e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011282:	2340      	movne	r3, #64	; 0x40
 8011284:	2000      	movs	r0, #0
 8011286:	6031      	str	r1, [r6, #0]
 8011288:	602b      	str	r3, [r5, #0]
 801128a:	b016      	add	sp, #88	; 0x58
 801128c:	bd70      	pop	{r4, r5, r6, pc}
 801128e:	466a      	mov	r2, sp
 8011290:	f000 f848 	bl	8011324 <_fstat_r>
 8011294:	2800      	cmp	r0, #0
 8011296:	dbec      	blt.n	8011272 <__swhatbuf_r+0x12>
 8011298:	9901      	ldr	r1, [sp, #4]
 801129a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801129e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80112a2:	4259      	negs	r1, r3
 80112a4:	4159      	adcs	r1, r3
 80112a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112aa:	e7eb      	b.n	8011284 <__swhatbuf_r+0x24>

080112ac <__smakebuf_r>:
 80112ac:	898b      	ldrh	r3, [r1, #12]
 80112ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80112b0:	079d      	lsls	r5, r3, #30
 80112b2:	4606      	mov	r6, r0
 80112b4:	460c      	mov	r4, r1
 80112b6:	d507      	bpl.n	80112c8 <__smakebuf_r+0x1c>
 80112b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80112bc:	6023      	str	r3, [r4, #0]
 80112be:	6123      	str	r3, [r4, #16]
 80112c0:	2301      	movs	r3, #1
 80112c2:	6163      	str	r3, [r4, #20]
 80112c4:	b002      	add	sp, #8
 80112c6:	bd70      	pop	{r4, r5, r6, pc}
 80112c8:	ab01      	add	r3, sp, #4
 80112ca:	466a      	mov	r2, sp
 80112cc:	f7ff ffc8 	bl	8011260 <__swhatbuf_r>
 80112d0:	9900      	ldr	r1, [sp, #0]
 80112d2:	4605      	mov	r5, r0
 80112d4:	4630      	mov	r0, r6
 80112d6:	f7ff f811 	bl	80102fc <_malloc_r>
 80112da:	b948      	cbnz	r0, 80112f0 <__smakebuf_r+0x44>
 80112dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112e0:	059a      	lsls	r2, r3, #22
 80112e2:	d4ef      	bmi.n	80112c4 <__smakebuf_r+0x18>
 80112e4:	f023 0303 	bic.w	r3, r3, #3
 80112e8:	f043 0302 	orr.w	r3, r3, #2
 80112ec:	81a3      	strh	r3, [r4, #12]
 80112ee:	e7e3      	b.n	80112b8 <__smakebuf_r+0xc>
 80112f0:	89a3      	ldrh	r3, [r4, #12]
 80112f2:	6020      	str	r0, [r4, #0]
 80112f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112f8:	81a3      	strh	r3, [r4, #12]
 80112fa:	9b00      	ldr	r3, [sp, #0]
 80112fc:	6163      	str	r3, [r4, #20]
 80112fe:	9b01      	ldr	r3, [sp, #4]
 8011300:	6120      	str	r0, [r4, #16]
 8011302:	b15b      	cbz	r3, 801131c <__smakebuf_r+0x70>
 8011304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011308:	4630      	mov	r0, r6
 801130a:	f000 f81d 	bl	8011348 <_isatty_r>
 801130e:	b128      	cbz	r0, 801131c <__smakebuf_r+0x70>
 8011310:	89a3      	ldrh	r3, [r4, #12]
 8011312:	f023 0303 	bic.w	r3, r3, #3
 8011316:	f043 0301 	orr.w	r3, r3, #1
 801131a:	81a3      	strh	r3, [r4, #12]
 801131c:	89a3      	ldrh	r3, [r4, #12]
 801131e:	431d      	orrs	r5, r3
 8011320:	81a5      	strh	r5, [r4, #12]
 8011322:	e7cf      	b.n	80112c4 <__smakebuf_r+0x18>

08011324 <_fstat_r>:
 8011324:	b538      	push	{r3, r4, r5, lr}
 8011326:	4d07      	ldr	r5, [pc, #28]	; (8011344 <_fstat_r+0x20>)
 8011328:	2300      	movs	r3, #0
 801132a:	4604      	mov	r4, r0
 801132c:	4608      	mov	r0, r1
 801132e:	4611      	mov	r1, r2
 8011330:	602b      	str	r3, [r5, #0]
 8011332:	f7f1 fce0 	bl	8002cf6 <_fstat>
 8011336:	1c43      	adds	r3, r0, #1
 8011338:	d102      	bne.n	8011340 <_fstat_r+0x1c>
 801133a:	682b      	ldr	r3, [r5, #0]
 801133c:	b103      	cbz	r3, 8011340 <_fstat_r+0x1c>
 801133e:	6023      	str	r3, [r4, #0]
 8011340:	bd38      	pop	{r3, r4, r5, pc}
 8011342:	bf00      	nop
 8011344:	2000e358 	.word	0x2000e358

08011348 <_isatty_r>:
 8011348:	b538      	push	{r3, r4, r5, lr}
 801134a:	4d06      	ldr	r5, [pc, #24]	; (8011364 <_isatty_r+0x1c>)
 801134c:	2300      	movs	r3, #0
 801134e:	4604      	mov	r4, r0
 8011350:	4608      	mov	r0, r1
 8011352:	602b      	str	r3, [r5, #0]
 8011354:	f7f1 fcdf 	bl	8002d16 <_isatty>
 8011358:	1c43      	adds	r3, r0, #1
 801135a:	d102      	bne.n	8011362 <_isatty_r+0x1a>
 801135c:	682b      	ldr	r3, [r5, #0]
 801135e:	b103      	cbz	r3, 8011362 <_isatty_r+0x1a>
 8011360:	6023      	str	r3, [r4, #0]
 8011362:	bd38      	pop	{r3, r4, r5, pc}
 8011364:	2000e358 	.word	0x2000e358

08011368 <_init>:
 8011368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801136a:	bf00      	nop
 801136c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801136e:	bc08      	pop	{r3}
 8011370:	469e      	mov	lr, r3
 8011372:	4770      	bx	lr

08011374 <_fini>:
 8011374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011376:	bf00      	nop
 8011378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801137a:	bc08      	pop	{r3}
 801137c:	469e      	mov	lr, r3
 801137e:	4770      	bx	lr
